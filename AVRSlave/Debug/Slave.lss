
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000021ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000108  00800060  000021ee  00002282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800168  00800168  0000238a  2**0
                  ALLOC
  3 .stab         000025e0  00000000  00000000  0000238c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001a8d  00000000  00000000  0000496c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000063f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006599  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000678b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008b96  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00009f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b0f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b2b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b5aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b1 e0       	ldi	r27, 0x01	; 1
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	ab 36       	cpi	r26, 0x6B	; 107
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee ee       	ldi	r30, 0xEE	; 238
      78:	f1 e2       	ldi	r31, 0x21	; 33
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <main>
      8a:	0c 94 f5 10 	jmp	0x21ea	; 0x21ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 be 10 	jmp	0x217c	; 0x217c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 da 10 	jmp	0x21b4	; 0x21b4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ca 10 	jmp	0x2194	; 0x2194 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 e6 10 	jmp	0x21cc	; 0x21cc <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ce 10 	jmp	0x219c	; 0x219c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ea 10 	jmp	0x21d4	; 0x21d4 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 c6 10 	jmp	0x218c	; 0x218c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e2 10 	jmp	0x21c4	; 0x21c4 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Timer1_enuInit>:
#include  "Timer1_Config.h"
#include  "Timer1_int.h"


ES_t Timer1_enuInit()
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
#elif TIMER1_MODE == TIMER1_PWM_FAST_9
	CLR_BIT(TCCR1A, WGM10);
	SET_BIT(TCCR1A, WGM11);
	SET_BIT(TCCR1A, WGM12);
#elif TIMER1_MODE == TIMER1_PWM_FAST_10
	SET_BIT(TCCR1A, WGM10);
     e36:	af e4       	ldi	r26, 0x4F	; 79
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ef e4       	ldi	r30, 0x4F	; 79
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	81 60       	ori	r24, 0x01	; 1
     e42:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
     e44:	af e4       	ldi	r26, 0x4F	; 79
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	ef e4       	ldi	r30, 0x4F	; 79
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	82 60       	ori	r24, 0x02	; 2
     e50:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
     e52:	ae e4       	ldi	r26, 0x4E	; 78
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	ee e4       	ldi	r30, 0x4E	; 78
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	88 60       	ori	r24, 0x08	; 8
     e5e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
     e60:	ae e4       	ldi	r26, 0x4E	; 78
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	ee e4       	ldi	r30, 0x4E	; 78
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	80 61       	ori	r24, 0x10	; 16
     e6c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A, COM1A1);
#elif TIMER1_COMPARE_OUTPUT == COM_OUT_TOG
	SET_BIT(TCCR1A,COM1A0);
	CLR_BIT(TCCR1A,COM1A1);
#elif TIMER1_COMPARE_OUTPUT == COM_OUT_CLR
	CLR_BIT(TCCR1A,COM1B0);
     e6e:	af e4       	ldi	r26, 0x4F	; 79
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	ef e4       	ldi	r30, 0x4F	; 79
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	8f 7e       	andi	r24, 0xEF	; 239
     e7a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,COM1B1);
     e7c:	af e4       	ldi	r26, 0x4F	; 79
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	ef e4       	ldi	r30, 0x4F	; 79
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	80 62       	ori	r24, 0x20	; 32
     e88:	8c 93       	st	X, r24
#elif TIMO_PRES == TIMO_256_PRES
	CLR_BIT(TCCR1B, 0);
	CLR_BIT(TCCR1B, 1);
	SET_BIT(TCCR1B, 2);
#elif TIMO_PRES == TIMO_1024_PRES
	SET_BIT(TCCR1B, 0);
     e8a:	ae e4       	ldi	r26, 0x4E	; 78
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	ee e4       	ldi	r30, 0x4E	; 78
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	81 60       	ori	r24, 0x01	; 1
     e96:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B, 1);
     e98:	ae e4       	ldi	r26, 0x4E	; 78
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	ee e4       	ldi	r30, 0x4E	; 78
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8d 7f       	andi	r24, 0xFD	; 253
     ea4:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, 2);
     ea6:	ae e4       	ldi	r26, 0x4E	; 78
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ee e4       	ldi	r30, 0x4E	; 78
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	84 60       	ori	r24, 0x04	; 4
     eb2:	8c 93       	st	X, r24
#endif
	/*TIMSK |=(1<<2);
	TIMSK |=(1<<3);
	TIMSK |=(1<<4);*/
	return ES_OK ;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
	}
     eb6:	cf 91       	pop	r28
     eb8:	df 91       	pop	r29
     eba:	08 95       	ret

00000ebc <Timer1_enuPWM>:
ES_t Timer1_enuPWM(float Copy_u16Freq ,float Copy_u8DutyCycle ){
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	69 97       	sbiw	r28, 0x19	; 25
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	6a 87       	std	Y+10, r22	; 0x0a
     ed6:	7b 87       	std	Y+11, r23	; 0x0b
     ed8:	8c 87       	std	Y+12, r24	; 0x0c
     eda:	9d 87       	std	Y+13, r25	; 0x0d
     edc:	2e 87       	std	Y+14, r18	; 0x0e
     ede:	3f 87       	std	Y+15, r19	; 0x0f
     ee0:	48 8b       	std	Y+16, r20	; 0x10
     ee2:	59 8b       	std	Y+17, r21	; 0x11
	ES_t Local_enuErrorState =ES_NOK;
     ee4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8DutyCycle < 100 && Copy_u8DutyCycle > 0){
     ee6:	6e 85       	ldd	r22, Y+14	; 0x0e
     ee8:	7f 85       	ldd	r23, Y+15	; 0x0f
     eea:	88 89       	ldd	r24, Y+16	; 0x10
     eec:	99 89       	ldd	r25, Y+17	; 0x11
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	48 ec       	ldi	r20, 0xC8	; 200
     ef4:	52 e4       	ldi	r21, 0x42	; 66
     ef6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     efa:	88 23       	and	r24, r24
     efc:	0c f0       	brlt	.+2      	; 0xf00 <Timer1_enuPWM+0x44>
     efe:	88 c0       	rjmp	.+272    	; 0x1010 <Timer1_enuPWM+0x154>
     f00:	6e 85       	ldd	r22, Y+14	; 0x0e
     f02:	7f 85       	ldd	r23, Y+15	; 0x0f
     f04:	88 89       	ldd	r24, Y+16	; 0x10
     f06:	99 89       	ldd	r25, Y+17	; 0x11
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	40 e0       	ldi	r20, 0x00	; 0
     f0e:	50 e0       	ldi	r21, 0x00	; 0
     f10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f14:	18 16       	cp	r1, r24
     f16:	0c f0       	brlt	.+2      	; 0xf1a <Timer1_enuPWM+0x5e>
     f18:	7b c0       	rjmp	.+246    	; 0x1010 <Timer1_enuPWM+0x154>
		float volatile Local_u8Itrator ;
		float volatile Local_u8Itrator2 ;
		Local_u8Itrator = (8000000.0/(Copy_u16Freq * 1024.0))-1 ;
     f1a:	6a 85       	ldd	r22, Y+10	; 0x0a
     f1c:	7b 85       	ldd	r23, Y+11	; 0x0b
     f1e:	8c 85       	ldd	r24, Y+12	; 0x0c
     f20:	9d 85       	ldd	r25, Y+13	; 0x0d
     f22:	20 e0       	ldi	r18, 0x00	; 0
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	40 e8       	ldi	r20, 0x80	; 128
     f28:	54 e4       	ldi	r21, 0x44	; 68
     f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f2e:	dc 01       	movw	r26, r24
     f30:	cb 01       	movw	r24, r22
     f32:	9c 01       	movw	r18, r24
     f34:	ad 01       	movw	r20, r26
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	74 e2       	ldi	r23, 0x24	; 36
     f3a:	84 ef       	ldi	r24, 0xF4	; 244
     f3c:	9a e4       	ldi	r25, 0x4A	; 74
     f3e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	bc 01       	movw	r22, r24
     f48:	cd 01       	movw	r24, r26
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e8       	ldi	r20, 0x80	; 128
     f50:	5f e3       	ldi	r21, 0x3F	; 63
     f52:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f56:	dc 01       	movw	r26, r24
     f58:	cb 01       	movw	r24, r22
     f5a:	8a 83       	std	Y+2, r24	; 0x02
     f5c:	9b 83       	std	Y+3, r25	; 0x03
     f5e:	ac 83       	std	Y+4, r26	; 0x04
     f60:	bd 83       	std	Y+5, r27	; 0x05
		Local_u8Itrator2 = (u16)((Copy_u8DutyCycle * Local_u8Itrator)/100.0);
     f62:	8a 81       	ldd	r24, Y+2	; 0x02
     f64:	9b 81       	ldd	r25, Y+3	; 0x03
     f66:	ac 81       	ldd	r26, Y+4	; 0x04
     f68:	bd 81       	ldd	r27, Y+5	; 0x05
     f6a:	bc 01       	movw	r22, r24
     f6c:	cd 01       	movw	r24, r26
     f6e:	2e 85       	ldd	r18, Y+14	; 0x0e
     f70:	3f 85       	ldd	r19, Y+15	; 0x0f
     f72:	48 89       	ldd	r20, Y+16	; 0x10
     f74:	59 89       	ldd	r21, Y+17	; 0x11
     f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f7a:	dc 01       	movw	r26, r24
     f7c:	cb 01       	movw	r24, r22
     f7e:	bc 01       	movw	r22, r24
     f80:	cd 01       	movw	r24, r26
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	48 ec       	ldi	r20, 0xC8	; 200
     f88:	52 e4       	ldi	r21, 0x42	; 66
     f8a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	bc 01       	movw	r22, r24
     f94:	cd 01       	movw	r24, r26
     f96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	cc 01       	movw	r24, r24
     fa0:	a0 e0       	ldi	r26, 0x00	; 0
     fa2:	b0 e0       	ldi	r27, 0x00	; 0
     fa4:	bc 01       	movw	r22, r24
     fa6:	cd 01       	movw	r24, r26
     fa8:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
     fac:	dc 01       	movw	r26, r24
     fae:	cb 01       	movw	r24, r22
     fb0:	8e 83       	std	Y+6, r24	; 0x06
     fb2:	9f 83       	std	Y+7, r25	; 0x07
     fb4:	a8 87       	std	Y+8, r26	; 0x08
     fb6:	b9 87       	std	Y+9, r27	; 0x09

		OCR1AH =((u16)Local_u8Itrator & 0xff00);
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	9b 81       	ldd	r25, Y+3	; 0x03
     fbc:	ac 81       	ldd	r26, Y+4	; 0x04
     fbe:	bd 81       	ldd	r27, Y+5	; 0x05
     fc0:	eb e4       	ldi	r30, 0x4B	; 75
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	10 82       	st	Z, r1
		OCR1AL =((u16)Local_u8Itrator & 0x00ff);
     fc6:	0a e4       	ldi	r16, 0x4A	; 74
     fc8:	10 e0       	ldi	r17, 0x00	; 0
     fca:	8a 81       	ldd	r24, Y+2	; 0x02
     fcc:	9b 81       	ldd	r25, Y+3	; 0x03
     fce:	ac 81       	ldd	r26, Y+4	; 0x04
     fd0:	bd 81       	ldd	r27, Y+5	; 0x05
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	d8 01       	movw	r26, r16
     fe0:	8c 93       	st	X, r24
		OCR1BH =((u16)Local_u8Itrator2 & 0xff00);
     fe2:	8e 81       	ldd	r24, Y+6	; 0x06
     fe4:	9f 81       	ldd	r25, Y+7	; 0x07
     fe6:	a8 85       	ldd	r26, Y+8	; 0x08
     fe8:	b9 85       	ldd	r27, Y+9	; 0x09
     fea:	e9 e4       	ldi	r30, 0x49	; 73
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	10 82       	st	Z, r1
		OCR1BL =((u16)Local_u8Itrator2 & 0x00ff);
     ff0:	08 e4       	ldi	r16, 0x48	; 72
     ff2:	10 e0       	ldi	r17, 0x00	; 0
     ff4:	8e 81       	ldd	r24, Y+6	; 0x06
     ff6:	9f 81       	ldd	r25, Y+7	; 0x07
     ff8:	a8 85       	ldd	r26, Y+8	; 0x08
     ffa:	b9 85       	ldd	r27, Y+9	; 0x09
     ffc:	bc 01       	movw	r22, r24
     ffe:	cd 01       	movw	r24, r26
    1000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	d8 01       	movw	r26, r16
    100a:	8c 93       	st	X, r24
		//OCR1A =Local_u8Itrator;
		//OCR1B = Local_u8Itrator2;

        Local_enuErrorState =ES_OK;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorState ;
    1010:	89 81       	ldd	r24, Y+1	; 0x01
}
    1012:	69 96       	adiw	r28, 0x19	; 25
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	1f 91       	pop	r17
    1024:	0f 91       	pop	r16
    1026:	08 95       	ret

00001028 <SPI_vInitMaster>:
#include <avr/io.h>
#include "SPI.h"
#include "../../LIBRARIES/stdTypes.h"

void SPI_vInitMaster (void)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
	DDRB |=(1<<SPI_MOSI) |(1<<SPI_SS)|(1<<SPI_SCK);//Set the port B mosi(master out slave in ) ,port B ss(slave select),sck(spi clock)  pins as output
    1030:	a7 e3       	ldi	r26, 0x37	; 55
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e7 e3       	ldi	r30, 0x37	; 55
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	80 6b       	ori	r24, 0xB0	; 176
    103c:	8c 93       	st	X, r24
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);//Enable the SPI,master mode ,Set the clock speed to F/16
    103e:	ad e2       	ldi	r26, 0x2D	; 45
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	ed e2       	ldi	r30, 0x2D	; 45
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	81 65       	ori	r24, 0x51	; 81
    104a:	8c 93       	st	X, r24
}
    104c:	cf 91       	pop	r28
    104e:	df 91       	pop	r29
    1050:	08 95       	ret

00001052 <SPI_vInitSlave>:

void SPI_vInitSlave (void)
{
    1052:	df 93       	push	r29
    1054:	cf 93       	push	r28
    1056:	cd b7       	in	r28, 0x3d	; 61
    1058:	de b7       	in	r29, 0x3e	; 62
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
    105a:	a7 e3       	ldi	r26, 0x37	; 55
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e7 e3       	ldi	r30, 0x37	; 55
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	80 64       	ori	r24, 0x40	; 64
    1066:	8c 93       	st	X, r24
	SPCR |= (1<<SPE);//Enable the SPI
    1068:	ad e2       	ldi	r26, 0x2D	; 45
    106a:	b0 e0       	ldi	r27, 0x00	; 0
    106c:	ed e2       	ldi	r30, 0x2D	; 45
    106e:	f0 e0       	ldi	r31, 0x00	; 0
    1070:	80 81       	ld	r24, Z
    1072:	80 64       	ori	r24, 0x40	; 64
    1074:	8c 93       	st	X, r24
}
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <SPI_ui8TransmitRecive>:

u8 SPI_ui8TransmitRecive (u8 data)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	0f 92       	push	r0
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	89 83       	std	Y+1, r24	; 0x01
	SPDR = data;//move the given data to SPI Data register
    1088:	ef e2       	ldi	r30, 0x2F	; 47
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	89 81       	ldd	r24, Y+1	; 0x01
    108e:	80 83       	st	Z, r24
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    1090:	ee e2       	ldi	r30, 0x2E	; 46
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	88 1f       	adc	r24, r24
    1098:	88 27       	eor	r24, r24
    109a:	88 1f       	adc	r24, r24
    109c:	88 2f       	mov	r24, r24
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	90 70       	andi	r25, 0x00	; 0
    10a2:	00 97       	sbiw	r24, 0x00	; 0
    10a4:	a9 f3       	breq	.-22     	; 0x1090 <SPI_ui8TransmitRecive+0x14>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    10a6:	ef e2       	ldi	r30, 0x2F	; 47
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
}
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <DIO_enuInit>:

#include "DIO_priv.h"
#include "DIO_config.h"

ES_t DIO_enuInit(void)
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	0f 92       	push	r0
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
    10be:	19 82       	std	Y+1, r1	; 0x01

	DDRA=CONC(DIO_u8PA7_DIR,DIO_u8PA6_DIR,DIO_u8PA5_DIR,DIO_u8PA4_DIR,DIO_u8PA3_DIR,DIO_u8PA2_DIR,DIO_u8PA1_DIR,DIO_u8PA0_DIR);
    10c0:	ea e3       	ldi	r30, 0x3A	; 58
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	81 eb       	ldi	r24, 0xB1	; 177
    10c6:	80 83       	st	Z, r24

	PORTA=CONC(DIO_u8PA7_VALUE,DIO_u8PA6_VALUE,DIO_u8PA5_VALUE,DIO_u8PA4_VALUE,DIO_u8PA3_VALUE,DIO_u8PA2_VALUE,DIO_u8PA1_VALUE,DIO_u8PA0_VALUE);
    10c8:	eb e3       	ldi	r30, 0x3B	; 59
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	86 e1       	ldi	r24, 0x16	; 22
    10ce:	80 83       	st	Z, r24

	return Local_enuErrorState;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d2:	0f 90       	pop	r0
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <DIO_enuSetPinDirection+0x6>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <DIO_enuSetPinDirection+0x8>
    10e2:	00 d0       	rcall	.+0      	; 0x10e4 <DIO_enuSetPinDirection+0xa>
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	8a 83       	std	Y+2, r24	; 0x02
    10ea:	6b 83       	std	Y+3, r22	; 0x03
    10ec:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    10ee:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
    10f0:	8a 81       	ldd	r24, Y+2	; 0x02
    10f2:	84 30       	cpi	r24, 0x04	; 4
    10f4:	08 f0       	brcs	.+2      	; 0x10f8 <DIO_enuSetPinDirection+0x1e>
    10f6:	d1 c0       	rjmp	.+418    	; 0x129a <DIO_enuSetPinDirection+0x1c0>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	88 30       	cpi	r24, 0x08	; 8
    10fc:	08 f0       	brcs	.+2      	; 0x1100 <DIO_enuSetPinDirection+0x26>
    10fe:	cd c0       	rjmp	.+410    	; 0x129a <DIO_enuSetPinDirection+0x1c0>
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	82 30       	cpi	r24, 0x02	; 2
    1104:	08 f0       	brcs	.+2      	; 0x1108 <DIO_enuSetPinDirection+0x2e>
    1106:	c9 c0       	rjmp	.+402    	; 0x129a <DIO_enuSetPinDirection+0x1c0>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& Copy_u8Direction <= DIO_u8OUTPUT)
	{
		switch (Copy_u8PortID)
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3e 83       	std	Y+6, r19	; 0x06
    1110:	2d 83       	std	Y+5, r18	; 0x05
    1112:	6d 81       	ldd	r22, Y+5	; 0x05
    1114:	7e 81       	ldd	r23, Y+6	; 0x06
    1116:	61 30       	cpi	r22, 0x01	; 1
    1118:	71 05       	cpc	r23, r1
    111a:	09 f4       	brne	.+2      	; 0x111e <DIO_enuSetPinDirection+0x44>
    111c:	41 c0       	rjmp	.+130    	; 0x11a0 <DIO_enuSetPinDirection+0xc6>
    111e:	8d 81       	ldd	r24, Y+5	; 0x05
    1120:	9e 81       	ldd	r25, Y+6	; 0x06
    1122:	82 30       	cpi	r24, 0x02	; 2
    1124:	91 05       	cpc	r25, r1
    1126:	34 f4       	brge	.+12     	; 0x1134 <DIO_enuSetPinDirection+0x5a>
    1128:	2d 81       	ldd	r18, Y+5	; 0x05
    112a:	3e 81       	ldd	r19, Y+6	; 0x06
    112c:	21 15       	cp	r18, r1
    112e:	31 05       	cpc	r19, r1
    1130:	71 f0       	breq	.+28     	; 0x114e <DIO_enuSetPinDirection+0x74>
    1132:	b0 c0       	rjmp	.+352    	; 0x1294 <DIO_enuSetPinDirection+0x1ba>
    1134:	6d 81       	ldd	r22, Y+5	; 0x05
    1136:	7e 81       	ldd	r23, Y+6	; 0x06
    1138:	62 30       	cpi	r22, 0x02	; 2
    113a:	71 05       	cpc	r23, r1
    113c:	09 f4       	brne	.+2      	; 0x1140 <DIO_enuSetPinDirection+0x66>
    113e:	59 c0       	rjmp	.+178    	; 0x11f2 <DIO_enuSetPinDirection+0x118>
    1140:	8d 81       	ldd	r24, Y+5	; 0x05
    1142:	9e 81       	ldd	r25, Y+6	; 0x06
    1144:	83 30       	cpi	r24, 0x03	; 3
    1146:	91 05       	cpc	r25, r1
    1148:	09 f4       	brne	.+2      	; 0x114c <DIO_enuSetPinDirection+0x72>
    114a:	7c c0       	rjmp	.+248    	; 0x1244 <DIO_enuSetPinDirection+0x16a>
    114c:	a3 c0       	rjmp	.+326    	; 0x1294 <DIO_enuSetPinDirection+0x1ba>
		{
		case DIO_u8GROUP_A:

			DDRA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    114e:	aa e3       	ldi	r26, 0x3A	; 58
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ea e3       	ldi	r30, 0x3A	; 58
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	48 2f       	mov	r20, r24
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_enuSetPinDirection+0x90>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	2a 95       	dec	r18
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_enuSetPinDirection+0x8c>
    116e:	80 95       	com	r24
    1170:	84 23       	and	r24, r20
    1172:	8c 93       	st	X, r24
			DDRA |= (Copy_u8Direction<<Copy_u8PinID);
    1174:	aa e3       	ldi	r26, 0x3A	; 58
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	ea e3       	ldi	r30, 0x3A	; 58
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	48 2f       	mov	r20, r24
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	28 2f       	mov	r18, r24
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	b9 01       	movw	r22, r18
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <DIO_enuSetPinDirection+0xba>
    1190:	66 0f       	add	r22, r22
    1192:	77 1f       	adc	r23, r23
    1194:	8a 95       	dec	r24
    1196:	e2 f7       	brpl	.-8      	; 0x1190 <DIO_enuSetPinDirection+0xb6>
    1198:	cb 01       	movw	r24, r22
    119a:	84 2b       	or	r24, r20
    119c:	8c 93       	st	X, r24
    119e:	7a c0       	rjmp	.+244    	; 0x1294 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_B:

			DDRB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    11a0:	a7 e3       	ldi	r26, 0x37	; 55
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e7 e3       	ldi	r30, 0x37	; 55
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 c0       	rjmp	.+4      	; 0x11bc <DIO_enuSetPinDirection+0xe2>
    11b8:	88 0f       	add	r24, r24
    11ba:	99 1f       	adc	r25, r25
    11bc:	2a 95       	dec	r18
    11be:	e2 f7       	brpl	.-8      	; 0x11b8 <DIO_enuSetPinDirection+0xde>
    11c0:	80 95       	com	r24
    11c2:	84 23       	and	r24, r20
    11c4:	8c 93       	st	X, r24
			DDRB |= (Copy_u8Direction<<Copy_u8PinID);
    11c6:	a7 e3       	ldi	r26, 0x37	; 55
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e7 e3       	ldi	r30, 0x37	; 55
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	48 2f       	mov	r20, r24
    11d2:	8c 81       	ldd	r24, Y+4	; 0x04
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	88 2f       	mov	r24, r24
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	b9 01       	movw	r22, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <DIO_enuSetPinDirection+0x10c>
    11e2:	66 0f       	add	r22, r22
    11e4:	77 1f       	adc	r23, r23
    11e6:	8a 95       	dec	r24
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <DIO_enuSetPinDirection+0x108>
    11ea:	cb 01       	movw	r24, r22
    11ec:	84 2b       	or	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	51 c0       	rjmp	.+162    	; 0x1294 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_C:

			DDRC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    11f2:	a4 e3       	ldi	r26, 0x34	; 52
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	e4 e3       	ldi	r30, 0x34	; 52
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	48 2f       	mov	r20, r24
    11fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	02 c0       	rjmp	.+4      	; 0x120e <DIO_enuSetPinDirection+0x134>
    120a:	88 0f       	add	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	2a 95       	dec	r18
    1210:	e2 f7       	brpl	.-8      	; 0x120a <DIO_enuSetPinDirection+0x130>
    1212:	80 95       	com	r24
    1214:	84 23       	and	r24, r20
    1216:	8c 93       	st	X, r24
			DDRC |= (Copy_u8Direction<<Copy_u8PinID);
    1218:	a4 e3       	ldi	r26, 0x34	; 52
    121a:	b0 e0       	ldi	r27, 0x00	; 0
    121c:	e4 e3       	ldi	r30, 0x34	; 52
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	48 2f       	mov	r20, r24
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	28 2f       	mov	r18, r24
    1228:	30 e0       	ldi	r19, 0x00	; 0
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	88 2f       	mov	r24, r24
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	b9 01       	movw	r22, r18
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <DIO_enuSetPinDirection+0x15e>
    1234:	66 0f       	add	r22, r22
    1236:	77 1f       	adc	r23, r23
    1238:	8a 95       	dec	r24
    123a:	e2 f7       	brpl	.-8      	; 0x1234 <DIO_enuSetPinDirection+0x15a>
    123c:	cb 01       	movw	r24, r22
    123e:	84 2b       	or	r24, r20
    1240:	8c 93       	st	X, r24
    1242:	28 c0       	rjmp	.+80     	; 0x1294 <DIO_enuSetPinDirection+0x1ba>

			break;
		case DIO_u8GROUP_D:

			DDRD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1244:	a1 e3       	ldi	r26, 0x31	; 49
    1246:	b0 e0       	ldi	r27, 0x00	; 0
    1248:	e1 e3       	ldi	r30, 0x31	; 49
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	48 2f       	mov	r20, r24
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	28 2f       	mov	r18, r24
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_enuSetPinDirection+0x186>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	2a 95       	dec	r18
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_enuSetPinDirection+0x182>
    1264:	80 95       	com	r24
    1266:	84 23       	and	r24, r20
    1268:	8c 93       	st	X, r24
			DDRD |= (Copy_u8Direction<<Copy_u8PinID);
    126a:	a1 e3       	ldi	r26, 0x31	; 49
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	e1 e3       	ldi	r30, 0x31	; 49
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	8c 81       	ldd	r24, Y+4	; 0x04
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	b9 01       	movw	r22, r18
    1284:	02 c0       	rjmp	.+4      	; 0x128a <DIO_enuSetPinDirection+0x1b0>
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	8a 95       	dec	r24
    128c:	e2 f7       	brpl	.-8      	; 0x1286 <DIO_enuSetPinDirection+0x1ac>
    128e:	cb 01       	movw	r24, r22
    1290:	84 2b       	or	r24, r20
    1292:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    1294:	81 e0       	ldi	r24, 0x01	; 1
    1296:	89 83       	std	Y+1, r24	; 0x01
    1298:	02 c0       	rjmp	.+4      	; 0x129e <DIO_enuSetPinDirection+0x1c4>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    129e:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a0:	26 96       	adiw	r28, 0x06	; 6
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
    12b2:	df 93       	push	r29
    12b4:	cf 93       	push	r28
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <DIO_enuSetPinValue+0x6>
    12b8:	00 d0       	rcall	.+0      	; 0x12ba <DIO_enuSetPinValue+0x8>
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <DIO_enuSetPinValue+0xa>
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	8a 83       	std	Y+2, r24	; 0x02
    12c2:	6b 83       	std	Y+3, r22	; 0x03
    12c4:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    12c6:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
    12c8:	8a 81       	ldd	r24, Y+2	; 0x02
    12ca:	84 30       	cpi	r24, 0x04	; 4
    12cc:	08 f0       	brcs	.+2      	; 0x12d0 <DIO_enuSetPinValue+0x1e>
    12ce:	d4 c0       	rjmp	.+424    	; 0x1478 <DIO_enuSetPinValue+0x1c6>
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	88 30       	cpi	r24, 0x08	; 8
    12d4:	08 f0       	brcs	.+2      	; 0x12d8 <DIO_enuSetPinValue+0x26>
    12d6:	d0 c0       	rjmp	.+416    	; 0x1478 <DIO_enuSetPinValue+0x1c6>
    12d8:	8c 81       	ldd	r24, Y+4	; 0x04
    12da:	82 30       	cpi	r24, 0x02	; 2
    12dc:	20 f0       	brcs	.+8      	; 0x12e6 <DIO_enuSetPinValue+0x34>
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	82 30       	cpi	r24, 0x02	; 2
    12e2:	08 f0       	brcs	.+2      	; 0x12e6 <DIO_enuSetPinValue+0x34>
    12e4:	c9 c0       	rjmp	.+402    	; 0x1478 <DIO_enuSetPinValue+0x1c6>
			&& Copy_u8PinID <= DIO_u8PIN7
			&& (Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ))
	{
		switch (Copy_u8PortID)
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	3e 83       	std	Y+6, r19	; 0x06
    12ee:	2d 83       	std	Y+5, r18	; 0x05
    12f0:	6d 81       	ldd	r22, Y+5	; 0x05
    12f2:	7e 81       	ldd	r23, Y+6	; 0x06
    12f4:	61 30       	cpi	r22, 0x01	; 1
    12f6:	71 05       	cpc	r23, r1
    12f8:	09 f4       	brne	.+2      	; 0x12fc <DIO_enuSetPinValue+0x4a>
    12fa:	41 c0       	rjmp	.+130    	; 0x137e <DIO_enuSetPinValue+0xcc>
    12fc:	8d 81       	ldd	r24, Y+5	; 0x05
    12fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	91 05       	cpc	r25, r1
    1304:	34 f4       	brge	.+12     	; 0x1312 <DIO_enuSetPinValue+0x60>
    1306:	2d 81       	ldd	r18, Y+5	; 0x05
    1308:	3e 81       	ldd	r19, Y+6	; 0x06
    130a:	21 15       	cp	r18, r1
    130c:	31 05       	cpc	r19, r1
    130e:	71 f0       	breq	.+28     	; 0x132c <DIO_enuSetPinValue+0x7a>
    1310:	b0 c0       	rjmp	.+352    	; 0x1472 <DIO_enuSetPinValue+0x1c0>
    1312:	6d 81       	ldd	r22, Y+5	; 0x05
    1314:	7e 81       	ldd	r23, Y+6	; 0x06
    1316:	62 30       	cpi	r22, 0x02	; 2
    1318:	71 05       	cpc	r23, r1
    131a:	09 f4       	brne	.+2      	; 0x131e <DIO_enuSetPinValue+0x6c>
    131c:	59 c0       	rjmp	.+178    	; 0x13d0 <DIO_enuSetPinValue+0x11e>
    131e:	8d 81       	ldd	r24, Y+5	; 0x05
    1320:	9e 81       	ldd	r25, Y+6	; 0x06
    1322:	83 30       	cpi	r24, 0x03	; 3
    1324:	91 05       	cpc	r25, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <DIO_enuSetPinValue+0x78>
    1328:	7c c0       	rjmp	.+248    	; 0x1422 <DIO_enuSetPinValue+0x170>
    132a:	a3 c0       	rjmp	.+326    	; 0x1472 <DIO_enuSetPinValue+0x1c0>
		{
		case DIO_u8GROUP_A:

			PORTA &=~(DIO_MASK_BIT<<Copy_u8PinID);
    132c:	ab e3       	ldi	r26, 0x3B	; 59
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	eb e3       	ldi	r30, 0x3B	; 59
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	48 2f       	mov	r20, r24
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	02 c0       	rjmp	.+4      	; 0x1348 <DIO_enuSetPinValue+0x96>
    1344:	88 0f       	add	r24, r24
    1346:	99 1f       	adc	r25, r25
    1348:	2a 95       	dec	r18
    134a:	e2 f7       	brpl	.-8      	; 0x1344 <DIO_enuSetPinValue+0x92>
    134c:	80 95       	com	r24
    134e:	84 23       	and	r24, r20
    1350:	8c 93       	st	X, r24
			PORTA |= (Copy_u8Value<<Copy_u8PinID);
    1352:	ab e3       	ldi	r26, 0x3B	; 59
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	eb e3       	ldi	r30, 0x3B	; 59
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	48 2f       	mov	r20, r24
    135e:	8c 81       	ldd	r24, Y+4	; 0x04
    1360:	28 2f       	mov	r18, r24
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	b9 01       	movw	r22, r18
    136c:	02 c0       	rjmp	.+4      	; 0x1372 <DIO_enuSetPinValue+0xc0>
    136e:	66 0f       	add	r22, r22
    1370:	77 1f       	adc	r23, r23
    1372:	8a 95       	dec	r24
    1374:	e2 f7       	brpl	.-8      	; 0x136e <DIO_enuSetPinValue+0xbc>
    1376:	cb 01       	movw	r24, r22
    1378:	84 2b       	or	r24, r20
    137a:	8c 93       	st	X, r24
    137c:	7a c0       	rjmp	.+244    	; 0x1472 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_B:

			PORTB &=~(DIO_MASK_BIT<<Copy_u8PinID);
    137e:	a8 e3       	ldi	r26, 0x38	; 56
    1380:	b0 e0       	ldi	r27, 0x00	; 0
    1382:	e8 e3       	ldi	r30, 0x38	; 56
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	48 2f       	mov	r20, r24
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	28 2f       	mov	r18, r24
    138e:	30 e0       	ldi	r19, 0x00	; 0
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_enuSetPinValue+0xe8>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	2a 95       	dec	r18
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_enuSetPinValue+0xe4>
    139e:	80 95       	com	r24
    13a0:	84 23       	and	r24, r20
    13a2:	8c 93       	st	X, r24
			PORTB |= (Copy_u8Value<<Copy_u8PinID);
    13a4:	a8 e3       	ldi	r26, 0x38	; 56
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e8 e3       	ldi	r30, 0x38	; 56
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	b9 01       	movw	r22, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_enuSetPinValue+0x112>
    13c0:	66 0f       	add	r22, r22
    13c2:	77 1f       	adc	r23, r23
    13c4:	8a 95       	dec	r24
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <DIO_enuSetPinValue+0x10e>
    13c8:	cb 01       	movw	r24, r22
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	51 c0       	rjmp	.+162    	; 0x1472 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_C:

			PORTC &=~(DIO_MASK_BIT<<Copy_u8PinID);
    13d0:	a5 e3       	ldi	r26, 0x35	; 53
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	e5 e3       	ldi	r30, 0x35	; 53
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	48 2f       	mov	r20, r24
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <DIO_enuSetPinValue+0x13a>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	2a 95       	dec	r18
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <DIO_enuSetPinValue+0x136>
    13f0:	80 95       	com	r24
    13f2:	84 23       	and	r24, r20
    13f4:	8c 93       	st	X, r24
			PORTC |= (Copy_u8Value<<Copy_u8PinID);
    13f6:	a5 e3       	ldi	r26, 0x35	; 53
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e5 e3       	ldi	r30, 0x35	; 53
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8c 81       	ldd	r24, Y+4	; 0x04
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	88 2f       	mov	r24, r24
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	b9 01       	movw	r22, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_enuSetPinValue+0x164>
    1412:	66 0f       	add	r22, r22
    1414:	77 1f       	adc	r23, r23
    1416:	8a 95       	dec	r24
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_enuSetPinValue+0x160>
    141a:	cb 01       	movw	r24, r22
    141c:	84 2b       	or	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	28 c0       	rjmp	.+80     	; 0x1472 <DIO_enuSetPinValue+0x1c0>

			break;
		case DIO_u8GROUP_D:

			PORTD &=~(DIO_MASK_BIT<<Copy_u8PinID);
    1422:	a2 e3       	ldi	r26, 0x32	; 50
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e2 e3       	ldi	r30, 0x32	; 50
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_enuSetPinValue+0x18c>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	2a 95       	dec	r18
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_enuSetPinValue+0x188>
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	8c 93       	st	X, r24
			PORTD |= (Copy_u8Value<<Copy_u8PinID);
    1448:	a2 e3       	ldi	r26, 0x32	; 50
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	88 2f       	mov	r24, r24
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	b9 01       	movw	r22, r18
    1462:	02 c0       	rjmp	.+4      	; 0x1468 <DIO_enuSetPinValue+0x1b6>
    1464:	66 0f       	add	r22, r22
    1466:	77 1f       	adc	r23, r23
    1468:	8a 95       	dec	r24
    146a:	e2 f7       	brpl	.-8      	; 0x1464 <DIO_enuSetPinValue+0x1b2>
    146c:	cb 01       	movw	r24, r22
    146e:	84 2b       	or	r24, r20
    1470:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	89 83       	std	Y+1, r24	; 0x01
    1476:	02 c0       	rjmp	.+4      	; 0x147c <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1478:	83 e0       	ldi	r24, 0x03	; 3
    147a:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    147c:	89 81       	ldd	r24, Y+1	; 0x01
}
    147e:	26 96       	adiw	r28, 0x06	; 6
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <DIO_enuTogPinValue>:

ES_t DIO_enuTogPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <DIO_enuTogPinValue+0x6>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <DIO_enuTogPinValue+0x8>
    1498:	0f 92       	push	r0
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	8a 83       	std	Y+2, r24	; 0x02
    14a0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
    14a2:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8PortID <= DIO_u8GROUP_D
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	84 30       	cpi	r24, 0x04	; 4
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <DIO_enuTogPinValue+0x1c>
    14aa:	75 c0       	rjmp	.+234    	; 0x1596 <DIO_enuTogPinValue+0x106>
    14ac:	8b 81       	ldd	r24, Y+3	; 0x03
    14ae:	88 30       	cpi	r24, 0x08	; 8
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <DIO_enuTogPinValue+0x24>
    14b2:	71 c0       	rjmp	.+226    	; 0x1596 <DIO_enuTogPinValue+0x106>
			&& Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8PortID)
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3d 83       	std	Y+5, r19	; 0x05
    14bc:	2c 83       	std	Y+4, r18	; 0x04
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	49 f1       	breq	.+82     	; 0x151a <DIO_enuTogPinValue+0x8a>
    14c8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ca:	3d 81       	ldd	r19, Y+5	; 0x05
    14cc:	22 30       	cpi	r18, 0x02	; 2
    14ce:	31 05       	cpc	r19, r1
    14d0:	2c f4       	brge	.+10     	; 0x14dc <DIO_enuTogPinValue+0x4c>
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	9d 81       	ldd	r25, Y+5	; 0x05
    14d6:	00 97       	sbiw	r24, 0x00	; 0
    14d8:	61 f0       	breq	.+24     	; 0x14f2 <DIO_enuTogPinValue+0x62>
    14da:	5a c0       	rjmp	.+180    	; 0x1590 <DIO_enuTogPinValue+0x100>
    14dc:	2c 81       	ldd	r18, Y+4	; 0x04
    14de:	3d 81       	ldd	r19, Y+5	; 0x05
    14e0:	22 30       	cpi	r18, 0x02	; 2
    14e2:	31 05       	cpc	r19, r1
    14e4:	71 f1       	breq	.+92     	; 0x1542 <DIO_enuTogPinValue+0xb2>
    14e6:	8c 81       	ldd	r24, Y+4	; 0x04
    14e8:	9d 81       	ldd	r25, Y+5	; 0x05
    14ea:	83 30       	cpi	r24, 0x03	; 3
    14ec:	91 05       	cpc	r25, r1
    14ee:	e9 f1       	breq	.+122    	; 0x156a <DIO_enuTogPinValue+0xda>
    14f0:	4f c0       	rjmp	.+158    	; 0x1590 <DIO_enuTogPinValue+0x100>
		{
		case DIO_u8GROUP_A:

			PORTA ^= (DIO_MASK_BIT<<Copy_u8PinID);
    14f2:	ab e3       	ldi	r26, 0x3B	; 59
    14f4:	b0 e0       	ldi	r27, 0x00	; 0
    14f6:	eb e3       	ldi	r30, 0x3B	; 59
    14f8:	f0 e0       	ldi	r31, 0x00	; 0
    14fa:	80 81       	ld	r24, Z
    14fc:	48 2f       	mov	r20, r24
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	02 2e       	mov	r0, r18
    150a:	02 c0       	rjmp	.+4      	; 0x1510 <DIO_enuTogPinValue+0x80>
    150c:	88 0f       	add	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	0a 94       	dec	r0
    1512:	e2 f7       	brpl	.-8      	; 0x150c <DIO_enuTogPinValue+0x7c>
    1514:	84 27       	eor	r24, r20
    1516:	8c 93       	st	X, r24
    1518:	3b c0       	rjmp	.+118    	; 0x1590 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_B:

			PORTB ^= (DIO_MASK_BIT<<Copy_u8PinID);
    151a:	a8 e3       	ldi	r26, 0x38	; 56
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	e8 e3       	ldi	r30, 0x38	; 56
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_enuTogPinValue+0xa8>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_enuTogPinValue+0xa4>
    153c:	84 27       	eor	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	27 c0       	rjmp	.+78     	; 0x1590 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_C:

			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);
    1542:	a5 e3       	ldi	r26, 0x35	; 53
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e5 e3       	ldi	r30, 0x35	; 53
    1548:	f0 e0       	ldi	r31, 0x00	; 0
    154a:	80 81       	ld	r24, Z
    154c:	48 2f       	mov	r20, r24
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	28 2f       	mov	r18, r24
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	90 e0       	ldi	r25, 0x00	; 0
    1558:	02 2e       	mov	r0, r18
    155a:	02 c0       	rjmp	.+4      	; 0x1560 <DIO_enuTogPinValue+0xd0>
    155c:	88 0f       	add	r24, r24
    155e:	99 1f       	adc	r25, r25
    1560:	0a 94       	dec	r0
    1562:	e2 f7       	brpl	.-8      	; 0x155c <DIO_enuTogPinValue+0xcc>
    1564:	84 27       	eor	r24, r20
    1566:	8c 93       	st	X, r24
    1568:	13 c0       	rjmp	.+38     	; 0x1590 <DIO_enuTogPinValue+0x100>

			break;
		case DIO_u8GROUP_D:

			PORTD ^= (DIO_MASK_BIT<<Copy_u8PinID);
    156a:	a2 e3       	ldi	r26, 0x32	; 50
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e2 e3       	ldi	r30, 0x32	; 50
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	48 2f       	mov	r20, r24
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	02 2e       	mov	r0, r18
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_enuTogPinValue+0xf8>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_enuTogPinValue+0xf4>
    158c:	84 27       	eor	r24, r20
    158e:	8c 93       	st	X, r24

			break;
		}
		Local_enuErrorState = ES_OK;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	02 c0       	rjmp	.+4      	; 0x159a <DIO_enuTogPinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
    1596:	83 e0       	ldi	r24, 0x03	; 3
    1598:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    159a:	89 81       	ldd	r24, Y+1	; 0x01
}
    159c:	0f 90       	pop	r0
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	cd b7       	in	r28, 0x3d	; 61
    15b2:	de b7       	in	r29, 0x3e	; 62
    15b4:	27 97       	sbiw	r28, 0x07	; 7
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	8a 83       	std	Y+2, r24	; 0x02
    15c2:	6b 83       	std	Y+3, r22	; 0x03
    15c4:	5d 83       	std	Y+5, r21	; 0x05
    15c6:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
    15c8:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu8Value != NULL)
    15ca:	8c 81       	ldd	r24, Y+4	; 0x04
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	09 f4       	brne	.+2      	; 0x15d4 <DIO_enuGetPinValue+0x28>
    15d2:	7e c0       	rjmp	.+252    	; 0x16d0 <DIO_enuGetPinValue+0x124>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	84 30       	cpi	r24, 0x04	; 4
    15d8:	08 f0       	brcs	.+2      	; 0x15dc <DIO_enuGetPinValue+0x30>
    15da:	77 c0       	rjmp	.+238    	; 0x16ca <DIO_enuGetPinValue+0x11e>
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	88 30       	cpi	r24, 0x08	; 8
    15e0:	08 f0       	brcs	.+2      	; 0x15e4 <DIO_enuGetPinValue+0x38>
    15e2:	73 c0       	rjmp	.+230    	; 0x16ca <DIO_enuGetPinValue+0x11e>
				&& Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8PortID)
    15e4:	8a 81       	ldd	r24, Y+2	; 0x02
    15e6:	28 2f       	mov	r18, r24
    15e8:	30 e0       	ldi	r19, 0x00	; 0
    15ea:	3f 83       	std	Y+7, r19	; 0x07
    15ec:	2e 83       	std	Y+6, r18	; 0x06
    15ee:	4e 81       	ldd	r20, Y+6	; 0x06
    15f0:	5f 81       	ldd	r21, Y+7	; 0x07
    15f2:	41 30       	cpi	r20, 0x01	; 1
    15f4:	51 05       	cpc	r21, r1
    15f6:	59 f1       	breq	.+86     	; 0x164e <DIO_enuGetPinValue+0xa2>
    15f8:	8e 81       	ldd	r24, Y+6	; 0x06
    15fa:	9f 81       	ldd	r25, Y+7	; 0x07
    15fc:	82 30       	cpi	r24, 0x02	; 2
    15fe:	91 05       	cpc	r25, r1
    1600:	34 f4       	brge	.+12     	; 0x160e <DIO_enuGetPinValue+0x62>
    1602:	2e 81       	ldd	r18, Y+6	; 0x06
    1604:	3f 81       	ldd	r19, Y+7	; 0x07
    1606:	21 15       	cp	r18, r1
    1608:	31 05       	cpc	r19, r1
    160a:	69 f0       	breq	.+26     	; 0x1626 <DIO_enuGetPinValue+0x7a>
    160c:	5b c0       	rjmp	.+182    	; 0x16c4 <DIO_enuGetPinValue+0x118>
    160e:	4e 81       	ldd	r20, Y+6	; 0x06
    1610:	5f 81       	ldd	r21, Y+7	; 0x07
    1612:	42 30       	cpi	r20, 0x02	; 2
    1614:	51 05       	cpc	r21, r1
    1616:	79 f1       	breq	.+94     	; 0x1676 <DIO_enuGetPinValue+0xca>
    1618:	8e 81       	ldd	r24, Y+6	; 0x06
    161a:	9f 81       	ldd	r25, Y+7	; 0x07
    161c:	83 30       	cpi	r24, 0x03	; 3
    161e:	91 05       	cpc	r25, r1
    1620:	09 f4       	brne	.+2      	; 0x1624 <DIO_enuGetPinValue+0x78>
    1622:	3d c0       	rjmp	.+122    	; 0x169e <DIO_enuGetPinValue+0xf2>
    1624:	4f c0       	rjmp	.+158    	; 0x16c4 <DIO_enuGetPinValue+0x118>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    1626:	e9 e3       	ldi	r30, 0x39	; 57
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	8b 81       	ldd	r24, Y+3	; 0x03
    1632:	88 2f       	mov	r24, r24
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	a9 01       	movw	r20, r18
    1638:	02 c0       	rjmp	.+4      	; 0x163e <DIO_enuGetPinValue+0x92>
    163a:	55 95       	asr	r21
    163c:	47 95       	ror	r20
    163e:	8a 95       	dec	r24
    1640:	e2 f7       	brpl	.-8      	; 0x163a <DIO_enuGetPinValue+0x8e>
    1642:	ca 01       	movw	r24, r20
    1644:	81 70       	andi	r24, 0x01	; 1
    1646:	ec 81       	ldd	r30, Y+4	; 0x04
    1648:	fd 81       	ldd	r31, Y+5	; 0x05
    164a:	80 83       	st	Z, r24
    164c:	3b c0       	rjmp	.+118    	; 0x16c4 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    164e:	e6 e3       	ldi	r30, 0x36	; 54
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	28 2f       	mov	r18, r24
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	8b 81       	ldd	r24, Y+3	; 0x03
    165a:	88 2f       	mov	r24, r24
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a9 01       	movw	r20, r18
    1660:	02 c0       	rjmp	.+4      	; 0x1666 <DIO_enuGetPinValue+0xba>
    1662:	55 95       	asr	r21
    1664:	47 95       	ror	r20
    1666:	8a 95       	dec	r24
    1668:	e2 f7       	brpl	.-8      	; 0x1662 <DIO_enuGetPinValue+0xb6>
    166a:	ca 01       	movw	r24, r20
    166c:	81 70       	andi	r24, 0x01	; 1
    166e:	ec 81       	ldd	r30, Y+4	; 0x04
    1670:	fd 81       	ldd	r31, Y+5	; 0x05
    1672:	80 83       	st	Z, r24
    1674:	27 c0       	rjmp	.+78     	; 0x16c4 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    1676:	e3 e3       	ldi	r30, 0x33	; 51
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	28 2f       	mov	r18, r24
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	88 2f       	mov	r24, r24
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	a9 01       	movw	r20, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <DIO_enuGetPinValue+0xe2>
    168a:	55 95       	asr	r21
    168c:	47 95       	ror	r20
    168e:	8a 95       	dec	r24
    1690:	e2 f7       	brpl	.-8      	; 0x168a <DIO_enuGetPinValue+0xde>
    1692:	ca 01       	movw	r24, r20
    1694:	81 70       	andi	r24, 0x01	; 1
    1696:	ec 81       	ldd	r30, Y+4	; 0x04
    1698:	fd 81       	ldd	r31, Y+5	; 0x05
    169a:	80 83       	st	Z, r24
    169c:	13 c0       	rjmp	.+38     	; 0x16c4 <DIO_enuGetPinValue+0x118>

				break;
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    169e:	e0 e3       	ldi	r30, 0x30	; 48
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	a9 01       	movw	r20, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_enuGetPinValue+0x10a>
    16b2:	55 95       	asr	r21
    16b4:	47 95       	ror	r20
    16b6:	8a 95       	dec	r24
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_enuGetPinValue+0x106>
    16ba:	ca 01       	movw	r24, r20
    16bc:	81 70       	andi	r24, 0x01	; 1
    16be:	ec 81       	ldd	r30, Y+4	; 0x04
    16c0:	fd 81       	ldd	r31, Y+5	; 0x05
    16c2:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	89 83       	std	Y+1, r24	; 0x01
    16c8:	05 c0       	rjmp	.+10     	; 0x16d4 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    16ca:	83 e0       	ldi	r24, 0x03	; 3
    16cc:	89 83       	std	Y+1, r24	; 0x01
    16ce:	02 c0       	rjmp	.+4      	; 0x16d4 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    16d0:	82 e0       	ldi	r24, 0x02	; 2
    16d2:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState;
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16d6:	27 96       	adiw	r28, 0x07	; 7
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	de bf       	out	0x3e, r29	; 62
    16de:	0f be       	out	0x3f, r0	; 63
    16e0:	cd bf       	out	0x3d, r28	; 61
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <ADC_enuInit>:
#include "../../LIBRARIES/interrupt.h"

void (* ADC_pfunGlobalPtr)(void) = NULL;

ES_t ADC_enuInit (void)
{
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	0f 92       	push	r0
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK;
    16f2:	19 82       	std	Y+1, r1	; 0x01
	if ((ADC_u8REFERENCE_VOLTAGE <= ADC_u8INTERNAL_REF) && (ADC_u8DATA_REG_ADJUSTMENT <= ADC_u8LEFT_ADJUSMENT) &&
			(ADC_u8CHANNEL <= ADC_u8DIFF_CH_ADC4_ADC2_1x) && (ADC_u8PRESCALAR <= ADC_u8PRESC128) &&
			(ADC_u8TRIGGERING_MODE <= ADC_u8Timer1_Capture_Event) && (ADC_u8INTERRUPT_STATE <= ADC_u8INTERRUPT_ON) &&
			(ADC_u8STATE <= ADC_u8ENABLED))
	{
			ADMUX |= (ADC_u8REFERENCE_VOLTAGE<<REF_S0);
    16f4:	a7 e2       	ldi	r26, 0x27	; 39
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e7 e2       	ldi	r30, 0x27	; 39
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	80 64       	ori	r24, 0x40	; 64
    1700:	8c 93       	st	X, r24

			ADMUX |= (ADC_u8DATA_REG_ADJUSTMENT<<ADLAR);
    1702:	a7 e2       	ldi	r26, 0x27	; 39
    1704:	b0 e0       	ldi	r27, 0x00	; 0
    1706:	e7 e2       	ldi	r30, 0x27	; 39
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	80 81       	ld	r24, Z
    170c:	80 62       	ori	r24, 0x20	; 32
    170e:	8c 93       	st	X, r24

			ADMUX |= (ADC_u8CHANNEL<<MUX0);
    1710:	a7 e2       	ldi	r26, 0x27	; 39
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e7 e2       	ldi	r30, 0x27	; 39
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	81 60       	ori	r24, 0x01	; 1
    171c:	8c 93       	st	X, r24

			ADCSRA |= (ADC_u8PRESCALAR<<ADPS0);
    171e:	a6 e2       	ldi	r26, 0x26	; 38
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e6 e2       	ldi	r30, 0x26	; 38
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	86 60       	ori	r24, 0x06	; 6
    172a:	8c 93       	st	X, r24

		#if ADC_u8TRIGGERING_MODE == ADC_s8SINGLE_CONVERSION
			ADCSRA &=~	(1<<ADATE);		//line maloosh lazma
    172c:	a6 e2       	ldi	r26, 0x26	; 38
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e6 e2       	ldi	r30, 0x26	; 38
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	8f 7d       	andi	r24, 0xDF	; 223
    1738:	8c 93       	st	X, r24
		#else
			SFIOR |= (ADC_u8TRIGGERING_MODE << ADTS0);
			ADCSRA |= (1<<ADATE);
		#endif

			ADCSRA |=	(ADC_u8INTERRUPT_STATE<<ADIE);
    173a:	a6 e2       	ldi	r26, 0x26	; 38
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e6 e2       	ldi	r30, 0x26	; 38
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8c 93       	st	X, r24

			ADCSRA |=	(ADC_u8STATE<<ADEN);
    1746:	a6 e2       	ldi	r26, 0x26	; 38
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	e6 e2       	ldi	r30, 0x26	; 38
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	8c 93       	st	X, r24

			Local_enuErrorStatus = ES_OK;
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	89 83       	std	Y+1, r24	; 0x01
	else
	{
		Local_enuErrorStatus = ES_OUT_OF_RANGE;
	}

	return Local_enuErrorStatus;
    1756:	89 81       	ldd	r24, Y+1	; 0x01
}
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <ADC_enuStartConversion>:

ES_t ADC_enuStartConversion (void)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK;
    176a:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |= (1<<ADSC);
    176c:	a6 e2       	ldi	r26, 0x26	; 38
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e6 e2       	ldi	r30, 0x26	; 38
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	80 64       	ori	r24, 0x40	; 64
    1778:	8c 93       	st	X, r24

	Local_enuErrorStatus = ES_OK;
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    177e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1780:	0f 90       	pop	r0
    1782:	cf 91       	pop	r28
    1784:	df 91       	pop	r29
    1786:	08 95       	ret

00001788 <ADC_enuChooseChannel>:

ES_t ADC_enuChooseChannel(u8 Copy_u8ChannelID)
{
    1788:	df 93       	push	r29
    178a:	cf 93       	push	r28
    178c:	00 d0       	rcall	.+0      	; 0x178e <ADC_enuChooseChannel+0x6>
    178e:	cd b7       	in	r28, 0x3d	; 61
    1790:	de b7       	in	r29, 0x3e	; 62
    1792:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStatus = ES_NOK;
    1794:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8ChannelID <= ADC_u8DIFF_CH_ADC4_ADC2_1x)
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	8d 31       	cpi	r24, 0x1D	; 29
    179a:	90 f4       	brcc	.+36     	; 0x17c0 <ADC_enuChooseChannel+0x38>
	{
		ADMUX &=~ (0b11111<<MUX0);
    179c:	a7 e2       	ldi	r26, 0x27	; 39
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e7 e2       	ldi	r30, 0x27	; 39
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	80 7e       	andi	r24, 0xE0	; 224
    17a8:	8c 93       	st	X, r24
		ADMUX |= (Copy_u8ChannelID<<MUX0);
    17aa:	a7 e2       	ldi	r26, 0x27	; 39
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e7 e2       	ldi	r30, 0x27	; 39
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	90 81       	ld	r25, Z
    17b4:	8a 81       	ldd	r24, Y+2	; 0x02
    17b6:	89 2b       	or	r24, r25
    17b8:	8c 93       	st	X, r24

		Local_enuErrorStatus = ES_OK;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <ADC_enuChooseChannel+0x3c>

	}
	else
	{
		Local_enuErrorStatus = ES_OUT_OF_RANGE;
    17c0:	83 e0       	ldi	r24, 0x03	; 3
    17c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_enuErrorStatus;
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    17c6:	0f 90       	pop	r0
    17c8:	0f 90       	pop	r0
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	08 95       	ret

000017d0 <ADC_enuEnableAutoTriggering>:

ES_t ADC_enuEnableAutoTriggering (u8 Copy_u8TriggeringMode)
{
    17d0:	df 93       	push	r29
    17d2:	cf 93       	push	r28
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <ADC_enuEnableAutoTriggering+0x6>
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
    17da:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStatus = ES_NOK;
    17dc:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8TriggeringMode <= ADC_u8Timer1_Capture_Event)
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	88 30       	cpi	r24, 0x08	; 8
    17e2:	58 f5       	brcc	.+86     	; 0x183a <ADC_enuEnableAutoTriggering+0x6a>
	{
		ADCSRA &=~ (1<<ADATE);
    17e4:	a6 e2       	ldi	r26, 0x26	; 38
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e6 e2       	ldi	r30, 0x26	; 38
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	8f 7d       	andi	r24, 0xDF	; 223
    17f0:	8c 93       	st	X, r24
		SFIOR &=~ (0b111 << ADTS0);
    17f2:	a0 e5       	ldi	r26, 0x50	; 80
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	e0 e5       	ldi	r30, 0x50	; 80
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8f 71       	andi	r24, 0x1F	; 31
    17fe:	8c 93       	st	X, r24

		SFIOR |= (Copy_u8TriggeringMode << ADTS0);
    1800:	a0 e5       	ldi	r26, 0x50	; 80
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	e0 e5       	ldi	r30, 0x50	; 80
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	28 2f       	mov	r18, r24
    180c:	8a 81       	ldd	r24, Y+2	; 0x02
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	82 95       	swap	r24
    1818:	92 95       	swap	r25
    181a:	90 7f       	andi	r25, 0xF0	; 240
    181c:	98 27       	eor	r25, r24
    181e:	80 7f       	andi	r24, 0xF0	; 240
    1820:	98 27       	eor	r25, r24
    1822:	82 2b       	or	r24, r18
    1824:	8c 93       	st	X, r24
		ADCSRA |= (1<<ADATE);
    1826:	a6 e2       	ldi	r26, 0x26	; 38
    1828:	b0 e0       	ldi	r27, 0x00	; 0
    182a:	e6 e2       	ldi	r30, 0x26	; 38
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	80 62       	ori	r24, 0x20	; 32
    1832:	8c 93       	st	X, r24

		Local_enuErrorStatus = ES_OK;
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	02 c0       	rjmp	.+4      	; 0x183e <ADC_enuEnableAutoTriggering+0x6e>
	}
	else
	{
		Local_enuErrorStatus = ES_OUT_OF_RANGE;
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorStatus;
    183e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1840:	0f 90       	pop	r0
    1842:	0f 90       	pop	r0
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	08 95       	ret

0000184a <ADC_enuDisableAutoTriggering>:

ES_t ADC_enuDisableAutoTriggering (void)
{
    184a:	df 93       	push	r29
    184c:	cf 93       	push	r28
    184e:	0f 92       	push	r0
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK;
    1854:	19 82       	std	Y+1, r1	; 0x01
	ADCSRA &=~ (1<<ADATE);
    1856:	a6 e2       	ldi	r26, 0x26	; 38
    1858:	b0 e0       	ldi	r27, 0x00	; 0
    185a:	e6 e2       	ldi	r30, 0x26	; 38
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	8f 7d       	andi	r24, 0xDF	; 223
    1862:	8c 93       	st	X, r24

	Local_enuErrorStatus = ES_OK;
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    1868:	89 81       	ldd	r24, Y+1	; 0x01
}
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <ADC_enuPollying>:

ES_t ADC_enuPollying(void)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	0f 92       	push	r0
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK;
    187c:	19 82       	std	Y+1, r1	; 0x01

	if ( ((ADCSRA>>ADEN) & 1) == ADC_u8ENABLED)
    187e:	e6 e2       	ldi	r30, 0x26	; 38
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	88 1f       	adc	r24, r24
    1886:	88 27       	eor	r24, r24
    1888:	88 1f       	adc	r24, r24
    188a:	81 30       	cpi	r24, 0x01	; 1
    188c:	a1 f4       	brne	.+40     	; 0x18b6 <ADC_enuPollying+0x44>
	{
		while ( ((ADCSRA>>ADIF) & 1) == ADC_u8Flag_Not_Raised);
    188e:	e6 e2       	ldi	r30, 0x26	; 38
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	82 95       	swap	r24
    1896:	8f 70       	andi	r24, 0x0F	; 15
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	81 70       	andi	r24, 0x01	; 1
    189e:	90 70       	andi	r25, 0x00	; 0
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	a9 f3       	breq	.-22     	; 0x188e <ADC_enuPollying+0x1c>

		ADCSRA |= (1<<ADIF);
    18a4:	a6 e2       	ldi	r26, 0x26	; 38
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e6 e2       	ldi	r30, 0x26	; 38
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	80 61       	ori	r24, 0x10	; 16
    18b0:	8c 93       	st	X, r24

		Local_enuErrorStatus = ES_OK;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    18b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <ADC_enuEnableADC_Inturrupt>:

ES_t ADC_enuEnableADC_Inturrupt(void)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK;
    18ca:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |=	(1<<ADIE);
    18cc:	a6 e2       	ldi	r26, 0x26	; 38
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e6 e2       	ldi	r30, 0x26	; 38
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	88 60       	ori	r24, 0x08	; 8
    18d8:	8c 93       	st	X, r24


	Local_enuErrorStatus = ES_OK;
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    18de:	89 81       	ldd	r24, Y+1	; 0x01
}
    18e0:	0f 90       	pop	r0
    18e2:	cf 91       	pop	r28
    18e4:	df 91       	pop	r29
    18e6:	08 95       	ret

000018e8 <ADC_enuDisableADC_Inturrupt>:

ES_t ADC_enuDisableADC_Inturrupt(void)
{
    18e8:	df 93       	push	r29
    18ea:	cf 93       	push	r28
    18ec:	0f 92       	push	r0
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK;
    18f2:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &=~	(1<<ADIE);
    18f4:	a6 e2       	ldi	r26, 0x26	; 38
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e6 e2       	ldi	r30, 0x26	; 38
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	87 7f       	andi	r24, 0xF7	; 247
    1900:	8c 93       	st	X, r24


	Local_enuErrorStatus = ES_OK;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorStatus;
    1906:	89 81       	ldd	r24, Y+1	; 0x01
}
    1908:	0f 90       	pop	r0
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <ADC_enuEnableADC>:

ES_t ADC_enuEnableADC(void)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	0f 92       	push	r0
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK;
    191a:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA |=	(1<<ADEN);
    191c:	a6 e2       	ldi	r26, 0x26	; 38
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e6 e2       	ldi	r30, 0x26	; 38
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	80 68       	ori	r24, 0x80	; 128
    1928:	8c 93       	st	X, r24

	Local_enuErrorStatus = ES_OK;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
	return Local_enuErrorStatus;
    192e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1930:	0f 90       	pop	r0
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <ADC_eniDisableADC>:

ES_t ADC_eniDisableADC(void)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	0f 92       	push	r0
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK;
    1942:	19 82       	std	Y+1, r1	; 0x01

	ADCSRA &=~	(1<<ADEN);
    1944:	a6 e2       	ldi	r26, 0x26	; 38
    1946:	b0 e0       	ldi	r27, 0x00	; 0
    1948:	e6 e2       	ldi	r30, 0x26	; 38
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	80 81       	ld	r24, Z
    194e:	8f 77       	andi	r24, 0x7F	; 127
    1950:	8c 93       	st	X, r24

	Local_enuErrorStatus = ES_OK;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorStatus;
    1956:	89 81       	ldd	r24, Y+1	; 0x01
}
    1958:	0f 90       	pop	r0
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <ADC_enuReadDataReg>:

ES_t ADC_enuReadDataReg (u16 * Copy_pu16ReadValue)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	00 d0       	rcall	.+0      	; 0x1966 <ADC_enuReadDataReg+0x6>
    1966:	0f 92       	push	r0
    1968:	cd b7       	in	r28, 0x3d	; 61
    196a:	de b7       	in	r29, 0x3e	; 62
    196c:	9b 83       	std	Y+3, r25	; 0x03
    196e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStatus = ES_NOK;
    1970:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_pu16ReadValue != NULL)
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	9b 81       	ldd	r25, Y+3	; 0x03
    1976:	00 97       	sbiw	r24, 0x00	; 0
    1978:	19 f1       	breq	.+70     	; 0x19c0 <ADC_enuReadDataReg+0x60>
	{
#if ADC_u8DATA_REG_ADJUSTMENT == ADC_u8RIGHT_ADJUSMENT
	*Copy_pu16ReadValue = ADCL;
	*Copy_pu16ReadValue |= (u16)(ADCH<<8);
#elif ADC_u8DATA_REG_ADJUSTMENT == ADC_u8LEFT_ADJUSMENT
	*Copy_pu16ReadValue = (ADCL>>6);
    197a:	e4 e2       	ldi	r30, 0x24	; 36
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	82 95       	swap	r24
    1982:	86 95       	lsr	r24
    1984:	86 95       	lsr	r24
    1986:	83 70       	andi	r24, 0x03	; 3
    1988:	88 2f       	mov	r24, r24
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	ea 81       	ldd	r30, Y+2	; 0x02
    198e:	fb 81       	ldd	r31, Y+3	; 0x03
    1990:	91 83       	std	Z+1, r25	; 0x01
    1992:	80 83       	st	Z, r24
	*Copy_pu16ReadValue |= (u16)(ADCH<<2);
    1994:	ea 81       	ldd	r30, Y+2	; 0x02
    1996:	fb 81       	ldd	r31, Y+3	; 0x03
    1998:	20 81       	ld	r18, Z
    199a:	31 81       	ldd	r19, Z+1	; 0x01
    199c:	e5 e2       	ldi	r30, 0x25	; 37
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	88 2f       	mov	r24, r24
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	88 0f       	add	r24, r24
    19a8:	99 1f       	adc	r25, r25
    19aa:	88 0f       	add	r24, r24
    19ac:	99 1f       	adc	r25, r25
    19ae:	82 2b       	or	r24, r18
    19b0:	93 2b       	or	r25, r19
    19b2:	ea 81       	ldd	r30, Y+2	; 0x02
    19b4:	fb 81       	ldd	r31, Y+3	; 0x03
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	80 83       	st	Z, r24
#endif

	Local_enuErrorStatus = ES_OK;
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	89 83       	std	Y+1, r24	; 0x01
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <ADC_enuReadDataReg+0x64>
	}
	else
	{
		Local_enuErrorStatus = 	ES_NULL_POINTER;
    19c0:	82 e0       	ldi	r24, 0x02	; 2
    19c2:	89 83       	std	Y+1, r24	; 0x01
	}



	return Local_enuErrorStatus;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <ADC_enuReadHigherDataReg>:

ES_t ADC_enuReadHigherDataReg (u8 * Copy_pu8HigherReg)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <ADC_enuReadHigherDataReg+0x6>
    19d8:	0f 92       	push	r0
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	9b 83       	std	Y+3, r25	; 0x03
    19e0:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStatus = ES_NOK;
    19e2:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pu8HigherReg != NULL)
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	9b 81       	ldd	r25, Y+3	; 0x03
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	49 f0       	breq	.+18     	; 0x19fe <ADC_enuReadHigherDataReg+0x2c>
	{
#if ADC_u8DATA_REG_ADJUSTMENT == ADC_u8RIGHT_ADJUSMENT
	*Copy_pu8HigherReg = (ADCL>>2);
	*Copy_pu8HigherReg |= (ADCH<<6);
#elif ADC_u8DATA_REG_ADJUSTMENT == ADC_u8LEFT_ADJUSMENT
	*Copy_pu8HigherReg = ADCH;
    19ec:	e5 e2       	ldi	r30, 0x25	; 37
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	ea 81       	ldd	r30, Y+2	; 0x02
    19f4:	fb 81       	ldd	r31, Y+3	; 0x03
    19f6:	80 83       	st	Z, r24

#endif

	Local_enuErrorStatus = ES_OK;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	02 c0       	rjmp	.+4      	; 0x1a02 <ADC_enuReadHigherDataReg+0x30>

	}
	else
	{
		Local_enuErrorStatus = 	ES_NULL_POINTER;
    19fe:	82 e0       	ldi	r24, 0x02	; 2
    1a00:	89 83       	std	Y+1, r24	; 0x01
	}




	return Local_enuErrorStatus;
    1a02:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	0f 90       	pop	r0
    1a0a:	cf 91       	pop	r28
    1a0c:	df 91       	pop	r29
    1a0e:	08 95       	ret

00001a10 <ADC_enuCallBack>:

ES_t ADC_enuCallBack (volatile void (* Copy_pfun)(void))
{
    1a10:	df 93       	push	r29
    1a12:	cf 93       	push	r28
    1a14:	00 d0       	rcall	.+0      	; 0x1a16 <ADC_enuCallBack+0x6>
    1a16:	0f 92       	push	r0
    1a18:	cd b7       	in	r28, 0x3d	; 61
    1a1a:	de b7       	in	r29, 0x3e	; 62
    1a1c:	9b 83       	std	Y+3, r25	; 0x03
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStatus = ES_NOK;
    1a20:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_pfun != NULL)
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	9b 81       	ldd	r25, Y+3	; 0x03
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	49 f0       	breq	.+18     	; 0x1a3c <ADC_enuCallBack+0x2c>
	{
		ADC_pfunGlobalPtr = Copy_pfun;
    1a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2e:	90 93 69 01 	sts	0x0169, r25
    1a32:	80 93 68 01 	sts	0x0168, r24
		Local_enuErrorStatus = 	ES_OK;
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <ADC_enuCallBack+0x30>
	}
	else
	{
		Local_enuErrorStatus = 	ES_NULL_POINTER;
    1a3c:	82 e0       	ldi	r24, 0x02	; 2
    1a3e:	89 83       	std	Y+1, r24	; 0x01
	}


	return Local_enuErrorStatus;
    1a40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	0f 90       	pop	r0
    1a48:	cf 91       	pop	r28
    1a4a:	df 91       	pop	r29
    1a4c:	08 95       	ret

00001a4e <__vector_16>:


ISR (VECT_ADC)
{
    1a4e:	1f 92       	push	r1
    1a50:	0f 92       	push	r0
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	0f 92       	push	r0
    1a56:	11 24       	eor	r1, r1
    1a58:	2f 93       	push	r18
    1a5a:	3f 93       	push	r19
    1a5c:	4f 93       	push	r20
    1a5e:	5f 93       	push	r21
    1a60:	6f 93       	push	r22
    1a62:	7f 93       	push	r23
    1a64:	8f 93       	push	r24
    1a66:	9f 93       	push	r25
    1a68:	af 93       	push	r26
    1a6a:	bf 93       	push	r27
    1a6c:	ef 93       	push	r30
    1a6e:	ff 93       	push	r31
    1a70:	df 93       	push	r29
    1a72:	cf 93       	push	r28
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
	if (ADC_pfunGlobalPtr != NULL)
    1a78:	80 91 68 01 	lds	r24, 0x0168
    1a7c:	90 91 69 01 	lds	r25, 0x0169
    1a80:	00 97       	sbiw	r24, 0x00	; 0
    1a82:	29 f0       	breq	.+10     	; 0x1a8e <__vector_16+0x40>
	{
		ADC_pfunGlobalPtr();
    1a84:	e0 91 68 01 	lds	r30, 0x0168
    1a88:	f0 91 69 01 	lds	r31, 0x0169
    1a8c:	09 95       	icall
	}
}
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	ff 91       	pop	r31
    1a94:	ef 91       	pop	r30
    1a96:	bf 91       	pop	r27
    1a98:	af 91       	pop	r26
    1a9a:	9f 91       	pop	r25
    1a9c:	8f 91       	pop	r24
    1a9e:	7f 91       	pop	r23
    1aa0:	6f 91       	pop	r22
    1aa2:	5f 91       	pop	r21
    1aa4:	4f 91       	pop	r20
    1aa6:	3f 91       	pop	r19
    1aa8:	2f 91       	pop	r18
    1aaa:	0f 90       	pop	r0
    1aac:	0f be       	out	0x3f, r0	; 63
    1aae:	0f 90       	pop	r0
    1ab0:	1f 90       	pop	r1
    1ab2:	18 95       	reti

00001ab4 <LM35_RaiseFlag>:
#include "LM35_config.h"

static u8 LM35_u8Flag = 0;

void LM35_RaiseFlag (void)
{
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
	LM35_u8Flag = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	80 93 6a 01 	sts	0x016A, r24
}
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <LM35_enuInit>:

ES_t LM35_enuInit (void)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <LM35_enuInit+0x6>
    1ace:	0f 92       	push	r0
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK;
    1ad4:	1b 82       	std	Y+3, r1	; 0x03

	u16 Local_u16ErrorStatus;
	if (LM35_u8PIN <= DIO_u8PIN7)
	{
		Local_u16ErrorStatus = DIO_enuSetPinDirection(DIO_u8GROUP_A ,LM35_u8PIN, DIO_u8INPUT);
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	61 e0       	ldi	r22, 0x01	; 1
    1ada:	40 e0       	ldi	r20, 0x00	; 0
    1adc:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
    1ae0:	88 2f       	mov	r24, r24
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
		DIO_enuSetPinValue(DIO_u8GROUP_A, DIO_u8PIN1, DIO_u8FLOAT);
    1ae8:	80 e0       	ldi	r24, 0x00	; 0
    1aea:	61 e0       	ldi	r22, 0x01	; 1
    1aec:	40 e0       	ldi	r20, 0x00	; 0
    1aee:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
		Local_u16ErrorStatus |= (ADC_enuInit()<<2);
    1af2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <ADC_enuInit>
    1af6:	88 2f       	mov	r24, r24
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	88 0f       	add	r24, r24
    1afc:	99 1f       	adc	r25, r25
    1afe:	88 0f       	add	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	9c 01       	movw	r18, r24
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	82 2b       	or	r24, r18
    1b0a:	93 2b       	or	r25, r19
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01
#endif

*/


		Local_u16ErrorStatus |= (ADC_enuCallBack((volatile void (*))LM35_RaiseFlag)<<6);
    1b10:	8a e5       	ldi	r24, 0x5A	; 90
    1b12:	9d e0       	ldi	r25, 0x0D	; 13
    1b14:	0e 94 08 0d 	call	0x1a10	; 0x1a10 <ADC_enuCallBack>
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	00 24       	eor	r0, r0
    1b1e:	96 95       	lsr	r25
    1b20:	87 95       	ror	r24
    1b22:	07 94       	ror	r0
    1b24:	96 95       	lsr	r25
    1b26:	87 95       	ror	r24
    1b28:	07 94       	ror	r0
    1b2a:	98 2f       	mov	r25, r24
    1b2c:	80 2d       	mov	r24, r0
    1b2e:	9c 01       	movw	r18, r24
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	82 2b       	or	r24, r18
    1b36:	93 2b       	or	r25, r19
    1b38:	9a 83       	std	Y+2, r25	; 0x02
    1b3a:	89 83       	std	Y+1, r24	; 0x01
		Local_u16ErrorStatus |= (ADC_enuEnableADC_Inturrupt()<<8);
    1b3c:	0e 94 60 0c 	call	0x18c0	; 0x18c0 <ADC_enuEnableADC_Inturrupt>
    1b40:	88 2f       	mov	r24, r24
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	98 2f       	mov	r25, r24
    1b46:	88 27       	eor	r24, r24
    1b48:	9c 01       	movw	r18, r24
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	82 2b       	or	r24, r18
    1b50:	93 2b       	or	r25, r19
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
		DIO_enuSetPinValue(DIO_u8GROUP_D, DIO_u8PIN2, DIO_u8FLOAT);
		Local_u16ErrorStatus |= (ADC_enuEnableAutoTriggering(LM35_PRESET_FOR_ADC_TRIGGERING)<<14);
#elif (LM35_PRESET_FOR_ADC_TRIGGERING == ADC_s8SINGLE_CONVERSION)
		Local_u16ErrorStatus |= (ADC_enuDisableAutoTriggering()<<12);
#elif LM35_PRESET_FOR_ADC_TRIGGERING == ADC_u8Free_Running_Mode
		Local_u16ErrorStatus |= (ADC_enuEnableAutoTriggering(LM35_PRESET_FOR_ADC_TRIGGERING)<<12);
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <ADC_enuEnableAutoTriggering>
    1b5c:	88 2f       	mov	r24, r24
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	98 2f       	mov	r25, r24
    1b62:	88 27       	eor	r24, r24
    1b64:	92 95       	swap	r25
    1b66:	90 7f       	andi	r25, 0xF0	; 240
    1b68:	9c 01       	movw	r18, r24
    1b6a:	89 81       	ldd	r24, Y+1	; 0x01
    1b6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6e:	82 2b       	or	r24, r18
    1b70:	93 2b       	or	r25, r19
    1b72:	9a 83       	std	Y+2, r25	; 0x02
    1b74:	89 83       	std	Y+1, r24	; 0x01
		Local_u16ErrorStatus |= (ADC_enuStartConversion()<<14);
    1b76:	0e 94 b0 0b 	call	0x1760	; 0x1760 <ADC_enuStartConversion>
    1b7a:	88 2f       	mov	r24, r24
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	90 e4       	ldi	r25, 0x40	; 64
    1b80:	89 9f       	mul	r24, r25
    1b82:	90 2d       	mov	r25, r0
    1b84:	88 27       	eor	r24, r24
    1b86:	11 24       	eor	r1, r1
    1b88:	9c 01       	movw	r18, r24
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8e:	82 2b       	or	r24, r18
    1b90:	93 2b       	or	r25, r19
    1b92:	9a 83       	std	Y+2, r25	; 0x02
    1b94:	89 83       	std	Y+1, r24	; 0x01
#else
		Local_u16ErrorStatus |= (ADC_enuEnableAutoTriggering(LM35_PRESET_FOR_ADC_TRIGGERING)<<12);
#endif
		Local_u16ErrorStatus |= (ADC_enuEnableADC()<<10);
    1b96:	0e 94 88 0c 	call	0x1910	; 0x1910 <ADC_enuEnableADC>
    1b9a:	88 2f       	mov	r24, r24
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	98 2f       	mov	r25, r24
    1ba0:	88 27       	eor	r24, r24
    1ba2:	99 0f       	add	r25, r25
    1ba4:	99 0f       	add	r25, r25
    1ba6:	9c 01       	movw	r18, r24
    1ba8:	89 81       	ldd	r24, Y+1	; 0x01
    1baa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bac:	82 2b       	or	r24, r18
    1bae:	93 2b       	or	r25, r19
    1bb0:	9a 83       	std	Y+2, r25	; 0x02
    1bb2:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		Local_enuErrorStatus = ES_OUT_OF_RANGE;
	}
	return Local_enuErrorStatus;
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <LM35_enuGetTemp>:


ES_t LM35_enuGetTemp(u16 * Copy_u16TempVal)
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	2e 97       	sbiw	r28, 0x0e	; 14
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	de bf       	out	0x3e, r29	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	cd bf       	out	0x3d, r28	; 61
    1bd6:	9e 87       	std	Y+14, r25	; 0x0e
    1bd8:	8d 87       	std	Y+13, r24	; 0x0d
	ES_t Local_enuErrorStatus = ES_NOK;
    1bda:	1a 86       	std	Y+10, r1	; 0x0a
#if LM35_PRESET_FOR_ADC_TRIGGERING == ADC_s8SINGLE_CONVERSION
		Local_u8ErrorStatus = ADC_enuStartConversion();
#endif


	if (LM35_u8Flag == 0)
    1bdc:	80 91 6a 01 	lds	r24, 0x016A
    1be0:	88 23       	and	r24, r24
    1be2:	29 f4       	brne	.+10     	; 0x1bee <LM35_enuGetTemp+0x2c>
	{
		*Copy_u16TempVal = ADC_u8Flag_Not_Raised;
    1be4:	ed 85       	ldd	r30, Y+13	; 0x0d
    1be6:	fe 85       	ldd	r31, Y+14	; 0x0e
    1be8:	11 82       	std	Z+1, r1	; 0x01
    1bea:	10 82       	st	Z, r1
    1bec:	3d c0       	rjmp	.+122    	; 0x1c68 <LM35_enuGetTemp+0xa6>
	}
	else
	{
		/***************/
		u32 Local_u32ADC_step = ((u32)5000000 / 1024ul);
    1bee:	82 e1       	ldi	r24, 0x12	; 18
    1bf0:	93 e1       	ldi	r25, 0x13	; 19
    1bf2:	a0 e0       	ldi	r26, 0x00	; 0
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	8d 83       	std	Y+5, r24	; 0x05
    1bf8:	9e 83       	std	Y+6, r25	; 0x06
    1bfa:	af 83       	std	Y+7, r26	; 0x07
    1bfc:	b8 87       	std	Y+8, r27	; 0x08
		u32 Local_u32ADC_Voltage;
		u16 Local_u16ADC_Reading;

		Local_u8ErrorStatus |=  (ADC_enuReadDataReg(&Local_u16ADC_Reading)<<2);
    1bfe:	ce 01       	movw	r24, r28
    1c00:	0b 96       	adiw	r24, 0x0b	; 11
    1c02:	0e 94 b0 0c 	call	0x1960	; 0x1960 <ADC_enuReadDataReg>
    1c06:	88 2f       	mov	r24, r24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	98 2f       	mov	r25, r24
    1c14:	89 85       	ldd	r24, Y+9	; 0x09
    1c16:	89 2b       	or	r24, r25
    1c18:	89 87       	std	Y+9, r24	; 0x09

		Local_u32ADC_Voltage = Local_u16ADC_Reading * Local_u32ADC_step;
    1c1a:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c1c:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c1e:	cc 01       	movw	r24, r24
    1c20:	a0 e0       	ldi	r26, 0x00	; 0
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	2d 81       	ldd	r18, Y+5	; 0x05
    1c26:	3e 81       	ldd	r19, Y+6	; 0x06
    1c28:	4f 81       	ldd	r20, Y+7	; 0x07
    1c2a:	58 85       	ldd	r21, Y+8	; 0x08
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__mulsi3>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	89 83       	std	Y+1, r24	; 0x01
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	ab 83       	std	Y+3, r26	; 0x03
    1c3e:	bc 83       	std	Y+4, r27	; 0x04
		*Copy_u16TempVal = Local_u32ADC_Voltage/ 10000ul;
    1c40:	89 81       	ldd	r24, Y+1	; 0x01
    1c42:	9a 81       	ldd	r25, Y+2	; 0x02
    1c44:	ab 81       	ldd	r26, Y+3	; 0x03
    1c46:	bc 81       	ldd	r27, Y+4	; 0x04
    1c48:	20 e1       	ldi	r18, 0x10	; 16
    1c4a:	37 e2       	ldi	r19, 0x27	; 39
    1c4c:	40 e0       	ldi	r20, 0x00	; 0
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	0e 94 9c 10 	call	0x2138	; 0x2138 <__udivmodsi4>
    1c58:	da 01       	movw	r26, r20
    1c5a:	c9 01       	movw	r24, r18
    1c5c:	ed 85       	ldd	r30, Y+13	; 0x0d
    1c5e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1c60:	91 83       	std	Z+1, r25	; 0x01
    1c62:	80 83       	st	Z, r24

		LM35_u8Flag = 0;
    1c64:	10 92 6a 01 	sts	0x016A, r1
	}



	return Local_enuErrorStatus;
    1c68:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    1c6a:	2e 96       	adiw	r28, 0x0e	; 14
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <LM35_enuGetTempByPollying>:

ES_t LM35_enuGetTempByPollying(u16 * Copy_u16TempVal)
{
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <LM35_enuGetTempByPollying+0x6>
    1c82:	0f 92       	push	r0
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	9b 83       	std	Y+3, r25	; 0x03
    1c8a:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErrorStatus = ES_NOK;
    1c8c:	19 82       	std	Y+1, r1	; 0x01

	ADC_enuPollying ();
    1c8e:	0e 94 39 0c 	call	0x1872	; 0x1872 <ADC_enuPollying>
	Local_enuErrorStatus = ADC_enuReadDataReg(Copy_u16TempVal);
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	9b 81       	ldd	r25, Y+3	; 0x03
    1c96:	0e 94 b0 0c 	call	0x1960	; 0x1960 <ADC_enuReadDataReg>
    1c9a:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	cf 91       	pop	r28
    1ca6:	df 91       	pop	r29
    1ca8:	08 95       	ret

00001caa <DC_Motor_enuInit>:
#include "../../MCAL/DIO/DIO_int.h"

#include "DC_Motor_private.h"
#include "DC_Motor_config.h"
ES_t DC_Motor_enuInit(u8 Copy_u8Motor1_State , u8 Copy_u8Motor2_State)
{
    1caa:	df 93       	push	r29
    1cac:	cf 93       	push	r28
    1cae:	00 d0       	rcall	.+0      	; 0x1cb0 <DC_Motor_enuInit+0x6>
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <DC_Motor_enuInit+0x8>
    1cb2:	0f 92       	push	r0
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	8c 83       	std	Y+4, r24	; 0x04
    1cba:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErorrState = ES_NOK;
    1cbc:	1b 82       	std	Y+3, r1	; 0x03
	ES_t Local_enuErorrState_1 = ES_NOK;
    1cbe:	1a 82       	std	Y+2, r1	; 0x02
	ES_t Local_enuErorrState_2 = ES_NOK;
    1cc0:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8Motor1_State == CONNECTED)
    1cc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	89 f4       	brne	.+34     	; 0x1cea <DC_Motor_enuInit+0x40>
	{
		DIO_enuSetPinDirection(MOTOR1_EN_PORT       , MOTOR1_EN_PIN       , DIO_u8OUTPUT);
    1cc8:	83 e0       	ldi	r24, 0x03	; 3
    1cca:	64 e0       	ldi	r22, 0x04	; 4
    1ccc:	41 e0       	ldi	r20, 0x01	; 1
    1cce:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(MOTOR1_INPUT_1_PORT  , MOTOR1_INPUT_1_PIN  , DIO_u8OUTPUT);
    1cd2:	83 e0       	ldi	r24, 0x03	; 3
    1cd4:	65 e0       	ldi	r22, 0x05	; 5
    1cd6:	41 e0       	ldi	r20, 0x01	; 1
    1cd8:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(MOTOR1_INPUT_2_PORT  , MOTOR1_INPUT_2_PIN  , DIO_u8OUTPUT);
    1cdc:	83 e0       	ldi	r24, 0x03	; 3
    1cde:	66 e0       	ldi	r22, 0x06	; 6
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
		Local_enuErorrState_1 = ES_OK;
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	8a 83       	std	Y+2, r24	; 0x02
	}

	if(Copy_u8Motor2_State == CONNECTED)
    1cea:	8d 81       	ldd	r24, Y+5	; 0x05
    1cec:	81 30       	cpi	r24, 0x01	; 1
    1cee:	89 f4       	brne	.+34     	; 0x1d12 <DC_Motor_enuInit+0x68>
	{
		DIO_enuSetPinDirection(MOTOR2_EN_PORT		, MOTOR2_EN_PIN		  , DIO_u8OUTPUT);
    1cf0:	83 e0       	ldi	r24, 0x03	; 3
    1cf2:	65 e0       	ldi	r22, 0x05	; 5
    1cf4:	41 e0       	ldi	r20, 0x01	; 1
    1cf6:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(MOTOR2_INPUT_3_PORT 	, MOTOR2_INPUT_3_PIN  , DIO_u8OUTPUT);
    1cfa:	82 e0       	ldi	r24, 0x02	; 2
    1cfc:	65 e0       	ldi	r22, 0x05	; 5
    1cfe:	41 e0       	ldi	r20, 0x01	; 1
    1d00:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
		DIO_enuSetPinDirection(MOTOR2_INPUT_4_PORT 	, MOTOR2_INPUT_4_PIN  , DIO_u8OUTPUT);
    1d04:	82 e0       	ldi	r24, 0x02	; 2
    1d06:	66 e0       	ldi	r22, 0x06	; 6
    1d08:	41 e0       	ldi	r20, 0x01	; 1
    1d0a:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
		Local_enuErorrState_2 = ES_OK;
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	89 83       	std	Y+1, r24	; 0x01

	}

	Local_enuErorrState = Local_enuErorrState_1 & Local_enuErorrState_2;
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	89 23       	and	r24, r25
    1d18:	8b 83       	std	Y+3, r24	; 0x03
	return Local_enuErorrState;
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    1d1c:	0f 90       	pop	r0
    1d1e:	0f 90       	pop	r0
    1d20:	0f 90       	pop	r0
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	cf 91       	pop	r28
    1d28:	df 91       	pop	r29
    1d2a:	08 95       	ret

00001d2c <DC_Motor_enuStart>:

ES_t DC_Motor_enuStart(u8 Copy_u8MotorNum , u8 Copy_u8Motor_Direction)
{
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	00 d0       	rcall	.+0      	; 0x1d32 <DC_Motor_enuStart+0x6>
    1d32:	0f 92       	push	r0
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	8a 83       	std	Y+2, r24	; 0x02
    1d3a:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErorrState = ES_NOK;
    1d3c:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8MotorNum == 1)
    1d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d40:	81 30       	cpi	r24, 0x01	; 1
    1d42:	29 f5       	brne	.+74     	; 0x1d8e <DC_Motor_enuStart+0x62>
	{
		DIO_enuSetPinValue(MOTOR1_EN_PORT,MOTOR1_EN_PIN,DIO_u8HIGH);
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	64 e0       	ldi	r22, 0x04	; 4
    1d48:	41 e0       	ldi	r20, 0x01	; 1
    1d4a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>

		if(Copy_u8Motor_Direction == CW)
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	81 30       	cpi	r24, 0x01	; 1
    1d52:	69 f4       	brne	.+26     	; 0x1d6e <DC_Motor_enuStart+0x42>
		{
			DIO_enuSetPinValue(MOTOR1_INPUT_1_PORT  , MOTOR1_INPUT_1_PIN  , DIO_u8HIGH);
    1d54:	83 e0       	ldi	r24, 0x03	; 3
    1d56:	65 e0       	ldi	r22, 0x05	; 5
    1d58:	41 e0       	ldi	r20, 0x01	; 1
    1d5a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(MOTOR1_INPUT_2_PORT  , MOTOR1_INPUT_2_PIN  , DIO_u8LOW);
    1d5e:	83 e0       	ldi	r24, 0x03	; 3
    1d60:	66 e0       	ldi	r22, 0x06	; 6
    1d62:	40 e0       	ldi	r20, 0x00	; 0
    1d64:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
			Local_enuErorrState =ES_OK;
    1d68:	81 e0       	ldi	r24, 0x01	; 1
    1d6a:	89 83       	std	Y+1, r24	; 0x01
    1d6c:	37 c0       	rjmp	.+110    	; 0x1ddc <DC_Motor_enuStart+0xb0>
		}

		else if(Copy_u8Motor_Direction == CCW)
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	82 30       	cpi	r24, 0x02	; 2
    1d72:	a1 f5       	brne	.+104    	; 0x1ddc <DC_Motor_enuStart+0xb0>
		{
			DIO_enuSetPinValue(MOTOR1_INPUT_1_PORT  , MOTOR1_INPUT_1_PIN  , DIO_u8LOW);
    1d74:	83 e0       	ldi	r24, 0x03	; 3
    1d76:	65 e0       	ldi	r22, 0x05	; 5
    1d78:	40 e0       	ldi	r20, 0x00	; 0
    1d7a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(MOTOR1_INPUT_2_PORT  , MOTOR1_INPUT_2_PIN  , DIO_u8HIGH);
    1d7e:	83 e0       	ldi	r24, 0x03	; 3
    1d80:	66 e0       	ldi	r22, 0x06	; 6
    1d82:	41 e0       	ldi	r20, 0x01	; 1
    1d84:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
			Local_enuErorrState =ES_OK;
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	89 83       	std	Y+1, r24	; 0x01
    1d8c:	27 c0       	rjmp	.+78     	; 0x1ddc <DC_Motor_enuStart+0xb0>

		}
	}

	else if(Copy_u8MotorNum == 2)
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	82 30       	cpi	r24, 0x02	; 2
    1d92:	21 f5       	brne	.+72     	; 0x1ddc <DC_Motor_enuStart+0xb0>
	{
		DIO_enuSetPinValue(MOTOR2_EN_PORT,MOTOR2_EN_PIN,DIO_u8HIGH);
    1d94:	83 e0       	ldi	r24, 0x03	; 3
    1d96:	65 e0       	ldi	r22, 0x05	; 5
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
		if(Copy_u8Motor_Direction == CW)
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	81 30       	cpi	r24, 0x01	; 1
    1da2:	69 f4       	brne	.+26     	; 0x1dbe <DC_Motor_enuStart+0x92>
		{
			DIO_enuSetPinValue(MOTOR2_INPUT_3_PORT 	, MOTOR2_INPUT_3_PIN  ,DIO_u8HIGH);
    1da4:	82 e0       	ldi	r24, 0x02	; 2
    1da6:	65 e0       	ldi	r22, 0x05	; 5
    1da8:	41 e0       	ldi	r20, 0x01	; 1
    1daa:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(MOTOR2_INPUT_4_PORT 	, MOTOR2_INPUT_4_PIN  ,DIO_u8LOW);
    1dae:	82 e0       	ldi	r24, 0x02	; 2
    1db0:	66 e0       	ldi	r22, 0x06	; 6
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
			Local_enuErorrState =ES_OK;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	89 83       	std	Y+1, r24	; 0x01
    1dbc:	0f c0       	rjmp	.+30     	; 0x1ddc <DC_Motor_enuStart+0xb0>

		}

		else if(Copy_u8Motor_Direction == CCW)
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	82 30       	cpi	r24, 0x02	; 2
    1dc2:	61 f4       	brne	.+24     	; 0x1ddc <DC_Motor_enuStart+0xb0>
		{
			DIO_enuSetPinValue(MOTOR2_INPUT_3_PORT 	, MOTOR2_INPUT_3_PIN  ,DIO_u8LOW);
    1dc4:	82 e0       	ldi	r24, 0x02	; 2
    1dc6:	65 e0       	ldi	r22, 0x05	; 5
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
			DIO_enuSetPinValue(MOTOR2_INPUT_4_PORT 	, MOTOR2_INPUT_4_PIN  ,DIO_u8HIGH);
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	66 e0       	ldi	r22, 0x06	; 6
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
			Local_enuErorrState =ES_OK;
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	89 83       	std	Y+1, r24	; 0x01

		}
	}
	return Local_enuErorrState;
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <DC_Motor_enuStop>:

ES_t DC_Motor_enuStop(u8 Copy_u8MotorNum)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <DC_Motor_enuStop+0x6>
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	8a 83       	std	Y+2, r24	; 0x02
	ES_t Local_enuErorrState = ES_NOK;
    1df6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_u8MotorNum == 1)
    1df8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfa:	81 30       	cpi	r24, 0x01	; 1
    1dfc:	41 f4       	brne	.+16     	; 0x1e0e <DC_Motor_enuStop+0x24>
	{
		DIO_enuSetPinValue(MOTOR1_EN_PORT,MOTOR1_EN_PIN,DIO_u8LOW);
    1dfe:	83 e0       	ldi	r24, 0x03	; 3
    1e00:	64 e0       	ldi	r22, 0x04	; 4
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
		Local_enuErorrState =ES_OK;
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	89 83       	std	Y+1, r24	; 0x01
    1e0c:	0a c0       	rjmp	.+20     	; 0x1e22 <DC_Motor_enuStop+0x38>

	}

	else if(Copy_u8MotorNum == 2)
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	82 30       	cpi	r24, 0x02	; 2
    1e12:	39 f4       	brne	.+14     	; 0x1e22 <DC_Motor_enuStop+0x38>
	{
		DIO_enuSetPinValue(MOTOR2_EN_PORT,MOTOR2_EN_PIN,DIO_u8LOW);
    1e14:	83 e0       	ldi	r24, 0x03	; 3
    1e16:	65 e0       	ldi	r22, 0x05	; 5
    1e18:	40 e0       	ldi	r20, 0x00	; 0
    1e1a:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
		Local_enuErorrState =ES_OK;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	89 83       	std	Y+1, r24	; 0x01
}
	return Local_enuErorrState;
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <ServoMotor_Door>:
#include "main_config.h"

#include <util/delay.h>

	void ServoMotor_Door(u8 Copy_u8Angle)
	{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <ServoMotor_Door+0x6>
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <ServoMotor_Door+0x8>
    1e36:	0f 92       	push	r0
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	8d 83       	std	Y+5, r24	; 0x05
		float Local_floatDuty=0;
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	a0 e0       	ldi	r26, 0x00	; 0
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	89 83       	std	Y+1, r24	; 0x01
    1e48:	9a 83       	std	Y+2, r25	; 0x02
    1e4a:	ab 83       	std	Y+3, r26	; 0x03
    1e4c:	bc 83       	std	Y+4, r27	; 0x04
		Local_floatDuty = (((float)Copy_u8Angle/180.0)*6)+5;
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e0       	ldi	r26, 0x00	; 0
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	bc 01       	movw	r22, r24
    1e66:	cd 01       	movw	r24, r26
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	44 e3       	ldi	r20, 0x34	; 52
    1e6e:	53 e4       	ldi	r21, 0x43	; 67
    1e70:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	bc 01       	movw	r22, r24
    1e7a:	cd 01       	movw	r24, r26
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	40 ec       	ldi	r20, 0xC0	; 192
    1e82:	50 e4       	ldi	r21, 0x40	; 64
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	bc 01       	movw	r22, r24
    1e8e:	cd 01       	movw	r24, r26
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 ea       	ldi	r20, 0xA0	; 160
    1e96:	50 e4       	ldi	r21, 0x40	; 64
    1e98:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    1ea2:	9a 83       	std	Y+2, r25	; 0x02
    1ea4:	ab 83       	std	Y+3, r26	; 0x03
    1ea6:	bc 83       	std	Y+4, r27	; 0x04
		Timer1_enuPWM(50,Local_floatDuty);
    1ea8:	29 81       	ldd	r18, Y+1	; 0x01
    1eaa:	3a 81       	ldd	r19, Y+2	; 0x02
    1eac:	4b 81       	ldd	r20, Y+3	; 0x03
    1eae:	5c 81       	ldd	r21, Y+4	; 0x04
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	88 e4       	ldi	r24, 0x48	; 72
    1eb6:	92 e4       	ldi	r25, 0x42	; 66
    1eb8:	0e 94 5e 07 	call	0xebc	; 0xebc <Timer1_enuPWM>
	}
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <OPEN_LEDS>:

	void OPEN_LEDS(u8 freq,u8 light)
	{
    1ecc:	ef 92       	push	r14
    1ece:	ff 92       	push	r15
    1ed0:	0f 93       	push	r16
    1ed2:	1f 93       	push	r17
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	00 d0       	rcall	.+0      	; 0x1eda <OPEN_LEDS+0xe>
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	89 83       	std	Y+1, r24	; 0x01
    1ee0:	6a 83       	std	Y+2, r22	; 0x02
		DIO_enuSetPinValue(DIO_u8GROUP_B,DIO_u8PIN6,DIO_u8HIGH);
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	66 e0       	ldi	r22, 0x06	; 6
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
		Timer1_enuPWM(freq,light);
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a0 e0       	ldi	r26, 0x00	; 0
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1efe:	7b 01       	movw	r14, r22
    1f00:	8c 01       	movw	r16, r24
    1f02:	8a 81       	ldd	r24, Y+2	; 0x02
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	a0 e0       	ldi	r26, 0x00	; 0
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	bc 01       	movw	r22, r24
    1f0e:	cd 01       	movw	r24, r26
    1f10:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1f14:	9b 01       	movw	r18, r22
    1f16:	ac 01       	movw	r20, r24
    1f18:	c8 01       	movw	r24, r16
    1f1a:	b7 01       	movw	r22, r14
    1f1c:	0e 94 5e 07 	call	0xebc	; 0xebc <Timer1_enuPWM>
	}
    1f20:	0f 90       	pop	r0
    1f22:	0f 90       	pop	r0
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	1f 91       	pop	r17
    1f2a:	0f 91       	pop	r16
    1f2c:	ff 90       	pop	r15
    1f2e:	ef 90       	pop	r14
    1f30:	08 95       	ret

00001f32 <CLOSE_LEDS>:

	void CLOSE_LEDS()
	{
    1f32:	df 93       	push	r29
    1f34:	cf 93       	push	r28
    1f36:	cd b7       	in	r28, 0x3d	; 61
    1f38:	de b7       	in	r29, 0x3e	; 62
		DIO_enuSetPinValue(DIO_u8GROUP_B,DIO_u8PIN6,DIO_u8LOW);
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	66 e0       	ldi	r22, 0x06	; 6
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 59 09 	call	0x12b2	; 0x12b2 <DIO_enuSetPinValue>
	}
    1f44:	cf 91       	pop	r28
    1f46:	df 91       	pop	r29
    1f48:	08 95       	ret

00001f4a <main>:
#include "LoginSystem.h"
#include <util/delay.h>


int main()
{
    1f4a:	df 93       	push	r29
    1f4c:	cf 93       	push	r28
    1f4e:	cd b7       	in	r28, 0x3d	; 61
    1f50:	de b7       	in	r29, 0x3e	; 62
    1f52:	27 97       	sbiw	r28, 0x07	; 7
    1f54:	0f b6       	in	r0, 0x3f	; 63
    1f56:	f8 94       	cli
    1f58:	de bf       	out	0x3e, r29	; 62
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	cd bf       	out	0x3d, r28	; 61
/*****************************************************************************************************/
/*********************************************INITIALIZATION******************************************/
/*****************************************************************************************************/
 	    SPI_vInitSlave ();
    1f5e:	0e 94 29 08 	call	0x1052	; 0x1052 <SPI_vInitSlave>
		Timer1_enuInit();
    1f62:	0e 94 17 07 	call	0xe2e	; 0xe2e <Timer1_enuInit>
		LM35_enuInit();
    1f66:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <LM35_enuInit>
		DC_Motor_enuInit(1,0);
    1f6a:	81 e0       	ldi	r24, 0x01	; 1
    1f6c:	60 e0       	ldi	r22, 0x00	; 0
    1f6e:	0e 94 55 0e 	call	0x1caa	; 0x1caa <DC_Motor_enuInit>


/*****************************************************************************************************/
/*****************************************DEVICES OUTPUT CONFIGURATION*********************************************************/
/*****************************************************************************************************/
		DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN7,DIO_u8OUTPUT);/// output servo
    1f72:	83 e0       	ldi	r24, 0x03	; 3
    1f74:	67 e0       	ldi	r22, 0x07	; 7
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
			__asm("sei");// GIE
    1f7c:	78 94       	sei
/************************************************************************************************************/
/******************************AIR CONDITIONER AUTOMATIC CONTROL*********************************************/
/************************************************************************************************************/

				u16 Local_u16TempVal;
				LM35_enuGetTemp(&Local_u16TempVal);
    1f7e:	ce 01       	movw	r24, r28
    1f80:	04 96       	adiw	r24, 0x04	; 4
    1f82:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <LM35_enuGetTemp>


				u8 Local_High_temp_limit = 28 ;
    1f86:	8c e1       	ldi	r24, 0x1C	; 28
    1f88:	8a 83       	std	Y+2, r24	; 0x02
				u8 Local_Low_temp_limit = 21 ;
    1f8a:	85 e1       	ldi	r24, 0x15	; 21
    1f8c:	89 83       	std	Y+1, r24	; 0x01

					if (Local_u16TempVal != ADC_u8Flag_Not_Raised)
    1f8e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f90:	9d 81       	ldd	r25, Y+5	; 0x05
    1f92:	00 97       	sbiw	r24, 0x00	; 0
    1f94:	c1 f0       	breq	.+48     	; 0x1fc6 <main+0x7c>
					{
						if(Local_u16TempVal > Local_High_temp_limit)
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	28 2f       	mov	r18, r24
    1f9a:	30 e0       	ldi	r19, 0x00	; 0
    1f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa0:	28 17       	cp	r18, r24
    1fa2:	39 07       	cpc	r19, r25
    1fa4:	28 f4       	brcc	.+10     	; 0x1fb0 <main+0x66>
						{
						DC_Motor_enuStart(1,1);
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	61 e0       	ldi	r22, 0x01	; 1
    1faa:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DC_Motor_enuStart>
    1fae:	0b c0       	rjmp	.+22     	; 0x1fc6 <main+0x7c>
						}
						else if(Local_u16TempVal < Local_Low_temp_limit)
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fba:	82 17       	cp	r24, r18
    1fbc:	93 07       	cpc	r25, r19
    1fbe:	18 f4       	brcc	.+6      	; 0x1fc6 <main+0x7c>
						{
						DC_Motor_enuStop(1);
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <DC_Motor_enuStop>


/***************************************************************************************************************/
/***************************************************************************************************************/

		Master_Command = SPI_ui8TransmitRecive(255);///// ack argument misssed
    1fc6:	8f ef       	ldi	r24, 0xFF	; 255
    1fc8:	0e 94 3e 08 	call	0x107c	; 0x107c <SPI_ui8TransmitRecive>
    1fcc:	8b 83       	std	Y+3, r24	; 0x03
		switch(Master_Command)
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	28 2f       	mov	r18, r24
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	3f 83       	std	Y+7, r19	; 0x07
    1fd6:	2e 83       	std	Y+6, r18	; 0x06
    1fd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1fda:	9f 81       	ldd	r25, Y+7	; 0x07
    1fdc:	85 30       	cpi	r24, 0x05	; 5
    1fde:	91 05       	cpc	r25, r1
    1fe0:	09 f4       	brne	.+2      	; 0x1fe4 <main+0x9a>
    1fe2:	70 c0       	rjmp	.+224    	; 0x20c4 <main+0x17a>
    1fe4:	2e 81       	ldd	r18, Y+6	; 0x06
    1fe6:	3f 81       	ldd	r19, Y+7	; 0x07
    1fe8:	26 30       	cpi	r18, 0x06	; 6
    1fea:	31 05       	cpc	r19, r1
    1fec:	f4 f4       	brge	.+60     	; 0x202a <main+0xe0>
    1fee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ff0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ff2:	82 30       	cpi	r24, 0x02	; 2
    1ff4:	91 05       	cpc	r25, r1
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <main+0xb0>
    1ff8:	47 c0       	rjmp	.+142    	; 0x2088 <main+0x13e>
    1ffa:	2e 81       	ldd	r18, Y+6	; 0x06
    1ffc:	3f 81       	ldd	r19, Y+7	; 0x07
    1ffe:	23 30       	cpi	r18, 0x03	; 3
    2000:	31 05       	cpc	r19, r1
    2002:	34 f4       	brge	.+12     	; 0x2010 <main+0xc6>
    2004:	8e 81       	ldd	r24, Y+6	; 0x06
    2006:	9f 81       	ldd	r25, Y+7	; 0x07
    2008:	81 30       	cpi	r24, 0x01	; 1
    200a:	91 05       	cpc	r25, r1
    200c:	99 f1       	breq	.+102    	; 0x2074 <main+0x12a>
    200e:	b7 cf       	rjmp	.-146    	; 0x1f7e <main+0x34>
    2010:	2e 81       	ldd	r18, Y+6	; 0x06
    2012:	3f 81       	ldd	r19, Y+7	; 0x07
    2014:	23 30       	cpi	r18, 0x03	; 3
    2016:	31 05       	cpc	r19, r1
    2018:	09 f4       	brne	.+2      	; 0x201c <main+0xd2>
    201a:	40 c0       	rjmp	.+128    	; 0x209c <main+0x152>
    201c:	8e 81       	ldd	r24, Y+6	; 0x06
    201e:	9f 81       	ldd	r25, Y+7	; 0x07
    2020:	84 30       	cpi	r24, 0x04	; 4
    2022:	91 05       	cpc	r25, r1
    2024:	09 f4       	brne	.+2      	; 0x2028 <main+0xde>
    2026:	44 c0       	rjmp	.+136    	; 0x20b0 <main+0x166>
    2028:	aa cf       	rjmp	.-172    	; 0x1f7e <main+0x34>
    202a:	2e 81       	ldd	r18, Y+6	; 0x06
    202c:	3f 81       	ldd	r19, Y+7	; 0x07
    202e:	2e 30       	cpi	r18, 0x0E	; 14
    2030:	31 05       	cpc	r19, r1
    2032:	09 f4       	brne	.+2      	; 0x2036 <main+0xec>
    2034:	55 c0       	rjmp	.+170    	; 0x20e0 <main+0x196>
    2036:	8e 81       	ldd	r24, Y+6	; 0x06
    2038:	9f 81       	ldd	r25, Y+7	; 0x07
    203a:	8f 30       	cpi	r24, 0x0F	; 15
    203c:	91 05       	cpc	r25, r1
    203e:	6c f4       	brge	.+26     	; 0x205a <main+0x110>
    2040:	2e 81       	ldd	r18, Y+6	; 0x06
    2042:	3f 81       	ldd	r19, Y+7	; 0x07
    2044:	2c 30       	cpi	r18, 0x0C	; 12
    2046:	31 05       	cpc	r19, r1
    2048:	09 f4       	brne	.+2      	; 0x204c <main+0x102>
    204a:	99 cf       	rjmp	.-206    	; 0x1f7e <main+0x34>
    204c:	8e 81       	ldd	r24, Y+6	; 0x06
    204e:	9f 81       	ldd	r25, Y+7	; 0x07
    2050:	8d 30       	cpi	r24, 0x0D	; 13
    2052:	91 05       	cpc	r25, r1
    2054:	09 f4       	brne	.+2      	; 0x2058 <main+0x10e>
    2056:	40 c0       	rjmp	.+128    	; 0x20d8 <main+0x18e>
    2058:	92 cf       	rjmp	.-220    	; 0x1f7e <main+0x34>
    205a:	2e 81       	ldd	r18, Y+6	; 0x06
    205c:	3f 81       	ldd	r19, Y+7	; 0x07
    205e:	20 31       	cpi	r18, 0x10	; 16
    2060:	31 05       	cpc	r19, r1
    2062:	09 f4       	brne	.+2      	; 0x2066 <main+0x11c>
    2064:	41 c0       	rjmp	.+130    	; 0x20e8 <main+0x19e>
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	9f 81       	ldd	r25, Y+7	; 0x07
    206a:	81 31       	cpi	r24, 0x11	; 17
    206c:	91 05       	cpc	r25, r1
    206e:	09 f4       	brne	.+2      	; 0x2072 <main+0x128>
    2070:	40 c0       	rjmp	.+128    	; 0x20f2 <main+0x1a8>
    2072:	85 cf       	rjmp	.-246    	; 0x1f7e <main+0x34>
		{
		case ROOM1_LED_TOGGLE:
			DIO_enuSetPinDirection(DIO_u8GROUP_A,DIO_u8PIN0,DIO_u8OUTPUT);
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	60 e0       	ldi	r22, 0x00	; 0
    2078:	41 e0       	ldi	r20, 0x01	; 1
    207a:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
			DIO_enuTogPinValue(DIO_u8GROUP_A,DIO_u8PIN0);
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	0e 94 48 0a 	call	0x1490	; 0x1490 <DIO_enuTogPinValue>
    2086:	7b cf       	rjmp	.-266    	; 0x1f7e <main+0x34>
			break;
		case ROOM2_LED_TOGGLE:
			DIO_enuSetPinDirection(DIO_u8GROUP_A,DIO_u8PIN2,DIO_u8OUTPUT);
    2088:	80 e0       	ldi	r24, 0x00	; 0
    208a:	62 e0       	ldi	r22, 0x02	; 2
    208c:	41 e0       	ldi	r20, 0x01	; 1
    208e:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
			DIO_enuTogPinValue(DIO_u8GROUP_A,DIO_u8PIN2);
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	62 e0       	ldi	r22, 0x02	; 2
    2096:	0e 94 48 0a 	call	0x1490	; 0x1490 <DIO_enuTogPinValue>
    209a:	71 cf       	rjmp	.-286    	; 0x1f7e <main+0x34>
			break;
		case ROOM3_LED_TOGGLE:
			DIO_enuSetPinDirection(DIO_u8GROUP_A,DIO_u8PIN3,DIO_u8OUTPUT);
    209c:	80 e0       	ldi	r24, 0x00	; 0
    209e:	63 e0       	ldi	r22, 0x03	; 3
    20a0:	41 e0       	ldi	r20, 0x01	; 1
    20a2:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
			DIO_enuTogPinValue(DIO_u8GROUP_A,DIO_u8PIN3);
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	63 e0       	ldi	r22, 0x03	; 3
    20aa:	0e 94 48 0a 	call	0x1490	; 0x1490 <DIO_enuTogPinValue>
    20ae:	67 cf       	rjmp	.-306    	; 0x1f7e <main+0x34>
			break;
		case ROOM4_LED_TOGGLE:
		 	DIO_enuSetPinDirection(DIO_u8GROUP_B,DIO_u8PIN0,DIO_u8OUTPUT);
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	60 e0       	ldi	r22, 0x00	; 0
    20b4:	41 e0       	ldi	r20, 0x01	; 1
    20b6:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
			DIO_enuTogPinValue(DIO_u8GROUP_B,DIO_u8PIN0);
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	0e 94 48 0a 	call	0x1490	; 0x1490 <DIO_enuTogPinValue>
    20c2:	5d cf       	rjmp	.-326    	; 0x1f7e <main+0x34>
			break;
		case ROOM5_LED_TOGGLE:
			DIO_enuSetPinDirection(DIO_u8GROUP_C,DIO_u8PIN6,DIO_u8OUTPUT);
    20c4:	82 e0       	ldi	r24, 0x02	; 2
    20c6:	66 e0       	ldi	r22, 0x06	; 6
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	0e 94 6d 08 	call	0x10da	; 0x10da <DIO_enuSetPinDirection>
			DIO_enuTogPinValue(DIO_u8GROUP_C,DIO_u8PIN6);
    20ce:	82 e0       	ldi	r24, 0x02	; 2
    20d0:	66 e0       	ldi	r22, 0x06	; 6
    20d2:	0e 94 48 0a 	call	0x1490	; 0x1490 <DIO_enuTogPinValue>
    20d6:	53 cf       	rjmp	.-346    	; 0x1f7e <main+0x34>
			break;
		case DIMMER://there is onther dimmmer spi opt >> percentage

			break;
		case OPEN_DOOR_COMMAND:
			ServoMotor_Door(90);
    20d8:	8a e5       	ldi	r24, 0x5A	; 90
    20da:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <ServoMotor_Door>
    20de:	4f cf       	rjmp	.-354    	; 0x1f7e <main+0x34>
			break;
		case CLOSE_DOOR_COMMAND:
			ServoMotor_Door(0);
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <ServoMotor_Door>
    20e6:	4b cf       	rjmp	.-362    	; 0x1f7e <main+0x34>
			break;
		case OPEN_AirCond_COMMAND:
			DC_Motor_enuStart(1,1);
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	61 e0       	ldi	r22, 0x01	; 1
    20ec:	0e 94 96 0e 	call	0x1d2c	; 0x1d2c <DC_Motor_enuStart>
    20f0:	46 cf       	rjmp	.-372    	; 0x1f7e <main+0x34>
			break;
		case CLOSE_AirCond_COMMAND:
			DC_Motor_enuStop(1);
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <DC_Motor_enuStop>
    20f8:	42 cf       	rjmp	.-380    	; 0x1f7e <main+0x34>

000020fa <__mulsi3>:
    20fa:	62 9f       	mul	r22, r18
    20fc:	d0 01       	movw	r26, r0
    20fe:	73 9f       	mul	r23, r19
    2100:	f0 01       	movw	r30, r0
    2102:	82 9f       	mul	r24, r18
    2104:	e0 0d       	add	r30, r0
    2106:	f1 1d       	adc	r31, r1
    2108:	64 9f       	mul	r22, r20
    210a:	e0 0d       	add	r30, r0
    210c:	f1 1d       	adc	r31, r1
    210e:	92 9f       	mul	r25, r18
    2110:	f0 0d       	add	r31, r0
    2112:	83 9f       	mul	r24, r19
    2114:	f0 0d       	add	r31, r0
    2116:	74 9f       	mul	r23, r20
    2118:	f0 0d       	add	r31, r0
    211a:	65 9f       	mul	r22, r21
    211c:	f0 0d       	add	r31, r0
    211e:	99 27       	eor	r25, r25
    2120:	72 9f       	mul	r23, r18
    2122:	b0 0d       	add	r27, r0
    2124:	e1 1d       	adc	r30, r1
    2126:	f9 1f       	adc	r31, r25
    2128:	63 9f       	mul	r22, r19
    212a:	b0 0d       	add	r27, r0
    212c:	e1 1d       	adc	r30, r1
    212e:	f9 1f       	adc	r31, r25
    2130:	bd 01       	movw	r22, r26
    2132:	cf 01       	movw	r24, r30
    2134:	11 24       	eor	r1, r1
    2136:	08 95       	ret

00002138 <__udivmodsi4>:
    2138:	a1 e2       	ldi	r26, 0x21	; 33
    213a:	1a 2e       	mov	r1, r26
    213c:	aa 1b       	sub	r26, r26
    213e:	bb 1b       	sub	r27, r27
    2140:	fd 01       	movw	r30, r26
    2142:	0d c0       	rjmp	.+26     	; 0x215e <__udivmodsi4_ep>

00002144 <__udivmodsi4_loop>:
    2144:	aa 1f       	adc	r26, r26
    2146:	bb 1f       	adc	r27, r27
    2148:	ee 1f       	adc	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	a2 17       	cp	r26, r18
    214e:	b3 07       	cpc	r27, r19
    2150:	e4 07       	cpc	r30, r20
    2152:	f5 07       	cpc	r31, r21
    2154:	20 f0       	brcs	.+8      	; 0x215e <__udivmodsi4_ep>
    2156:	a2 1b       	sub	r26, r18
    2158:	b3 0b       	sbc	r27, r19
    215a:	e4 0b       	sbc	r30, r20
    215c:	f5 0b       	sbc	r31, r21

0000215e <__udivmodsi4_ep>:
    215e:	66 1f       	adc	r22, r22
    2160:	77 1f       	adc	r23, r23
    2162:	88 1f       	adc	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	1a 94       	dec	r1
    2168:	69 f7       	brne	.-38     	; 0x2144 <__udivmodsi4_loop>
    216a:	60 95       	com	r22
    216c:	70 95       	com	r23
    216e:	80 95       	com	r24
    2170:	90 95       	com	r25
    2172:	9b 01       	movw	r18, r22
    2174:	ac 01       	movw	r20, r24
    2176:	bd 01       	movw	r22, r26
    2178:	cf 01       	movw	r24, r30
    217a:	08 95       	ret

0000217c <__prologue_saves__>:
    217c:	2f 92       	push	r2
    217e:	3f 92       	push	r3
    2180:	4f 92       	push	r4
    2182:	5f 92       	push	r5
    2184:	6f 92       	push	r6
    2186:	7f 92       	push	r7
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	cd b7       	in	r28, 0x3d	; 61
    21a2:	de b7       	in	r29, 0x3e	; 62
    21a4:	ca 1b       	sub	r28, r26
    21a6:	db 0b       	sbc	r29, r27
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	09 94       	ijmp

000021b4 <__epilogue_restores__>:
    21b4:	2a 88       	ldd	r2, Y+18	; 0x12
    21b6:	39 88       	ldd	r3, Y+17	; 0x11
    21b8:	48 88       	ldd	r4, Y+16	; 0x10
    21ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    21bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    21be:	7d 84       	ldd	r7, Y+13	; 0x0d
    21c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    21c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    21c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    21c6:	b9 84       	ldd	r11, Y+9	; 0x09
    21c8:	c8 84       	ldd	r12, Y+8	; 0x08
    21ca:	df 80       	ldd	r13, Y+7	; 0x07
    21cc:	ee 80       	ldd	r14, Y+6	; 0x06
    21ce:	fd 80       	ldd	r15, Y+5	; 0x05
    21d0:	0c 81       	ldd	r16, Y+4	; 0x04
    21d2:	1b 81       	ldd	r17, Y+3	; 0x03
    21d4:	aa 81       	ldd	r26, Y+2	; 0x02
    21d6:	b9 81       	ldd	r27, Y+1	; 0x01
    21d8:	ce 0f       	add	r28, r30
    21da:	d1 1d       	adc	r29, r1
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	ed 01       	movw	r28, r26
    21e8:	08 95       	ret

000021ea <_exit>:
    21ea:	f8 94       	cli

000021ec <__stop_program>:
    21ec:	ff cf       	rjmp	.-2      	; 0x21ec <__stop_program>
