
AVRMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003f8  00800060  000018a4  00001938  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800458  00800458  00001d30  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000400d  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eac  00000000  00000000  00005f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e32  00000000  00000000  00006e35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004fc  00000000  00000000  00008c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e31  00000000  00000000  00009164  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002679  00000000  00000000  00009f95  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  0000c60e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	dc 04       	cpc	r13, r12
      56:	0c 05       	cpc	r16, r12
      58:	de 04       	cpc	r13, r14
      5a:	e3 04       	cpc	r14, r3
      5c:	e8 04       	cpc	r14, r8
      5e:	ed 04       	cpc	r14, r13
      60:	f2 04       	cpc	r15, r2
      62:	f7 04       	cpc	r15, r7
      64:	fc 04       	cpc	r15, r12

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	14 e0       	ldi	r17, 0x04	; 4
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e4 ea       	ldi	r30, 0xA4	; 164
      7a:	f8 e1       	ldi	r31, 0x18	; 24
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a8 35       	cpi	r26, 0x58	; 88
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	24 e0       	ldi	r18, 0x04	; 4
      8a:	a8 e5       	ldi	r26, 0x58	; 88
      8c:	b4 e0       	ldi	r27, 0x04	; 4
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	a9 35       	cpi	r26, 0x59	; 89
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 2f 02 	call	0x45e	; 0x45e <main>
      9c:	0c 94 50 0c 	jmp	0x18a0	; 0x18a0 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <LoginSystem_SaveNewUser>:

#include <util/delay.h>


	ES_t LoginSystem_SaveNewUser(User_t Copy_strNewUser,u8 *Copy_u8NumofRegisteredUsers)
	{
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
      b8:	2b 97       	sbiw	r28, 0x0b	; 11
      ba:	0f b6       	in	r0, 0x3f	; 63
      bc:	f8 94       	cli
      be:	de bf       	out	0x3e, r29	; 62
      c0:	0f be       	out	0x3f, r0	; 63
      c2:	cd bf       	out	0x3d, r28	; 61
      c4:	e9 82       	std	Y+1, r14	; 0x01
      c6:	fa 82       	std	Y+2, r15	; 0x02
      c8:	0b 83       	std	Y+3, r16	; 0x03
      ca:	1c 83       	std	Y+4, r17	; 0x04
      cc:	2d 83       	std	Y+5, r18	; 0x05
      ce:	3e 83       	std	Y+6, r19	; 0x06
      d0:	4f 83       	std	Y+7, r20	; 0x07
      d2:	58 87       	std	Y+8, r21	; 0x08
      d4:	69 87       	std	Y+9, r22	; 0x09
      d6:	7a 87       	std	Y+10, r23	; 0x0a
      d8:	8b 87       	std	Y+11, r24	; 0x0b
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1), Copy_strNewUser.UserName,MAX_NO_OF_LETTERS);
      da:	f6 01       	movw	r30, r12
      dc:	80 81       	ld	r24, Z
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	9c 01       	movw	r18, r24
      e2:	22 0f       	add	r18, r18
      e4:	33 1f       	adc	r19, r19
      e6:	22 0f       	add	r18, r18
      e8:	33 1f       	adc	r19, r19
      ea:	22 0f       	add	r18, r18
      ec:	33 1f       	adc	r19, r19
      ee:	82 0f       	add	r24, r18
      f0:	93 1f       	adc	r25, r19
      f2:	44 e0       	ldi	r20, 0x04	; 4
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	be 01       	movw	r22, r28
      f8:	6f 5f       	subi	r22, 0xFF	; 255
      fa:	7f 4f       	sbci	r23, 0xFF	; 255
      fc:	42 96       	adiw	r24, 0x12	; 18
      fe:	0e 94 82 07 	call	0xf04	; 0xf04 <EEPROM_vWriteBlockToAddress>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     102:	ff ef       	ldi	r31, 0xFF	; 255
     104:	20 e7       	ldi	r18, 0x70	; 112
     106:	82 e0       	ldi	r24, 0x02	; 2
     108:	f1 50       	subi	r31, 0x01	; 1
     10a:	20 40       	sbci	r18, 0x00	; 0
     10c:	80 40       	sbci	r24, 0x00	; 0
     10e:	e1 f7       	brne	.-8      	; 0x108 <LoginSystem_SaveNewUser+0x64>
     110:	00 c0       	rjmp	.+0      	; 0x112 <LoginSystem_SaveNewUser+0x6e>
     112:	00 00       	nop
		_delay_ms(50);
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_strNewUser.Password,MAX_NO_OF_LETTERS);
     114:	f6 01       	movw	r30, r12
     116:	80 81       	ld	r24, Z
     118:	90 e0       	ldi	r25, 0x00	; 0
     11a:	9c 01       	movw	r18, r24
     11c:	22 0f       	add	r18, r18
     11e:	33 1f       	adc	r19, r19
     120:	22 0f       	add	r18, r18
     122:	33 1f       	adc	r19, r19
     124:	22 0f       	add	r18, r18
     126:	33 1f       	adc	r19, r19
     128:	82 0f       	add	r24, r18
     12a:	93 1f       	adc	r25, r19
     12c:	44 e0       	ldi	r20, 0x04	; 4
     12e:	50 e0       	ldi	r21, 0x00	; 0
     130:	be 01       	movw	r22, r28
     132:	6a 5f       	subi	r22, 0xFA	; 250
     134:	7f 4f       	sbci	r23, 0xFF	; 255
     136:	46 96       	adiw	r24, 0x16	; 22
     138:	0e 94 82 07 	call	0xf04	; 0xf04 <EEPROM_vWriteBlockToAddress>
     13c:	ff ef       	ldi	r31, 0xFF	; 255
     13e:	20 e7       	ldi	r18, 0x70	; 112
     140:	82 e0       	ldi	r24, 0x02	; 2
     142:	f1 50       	subi	r31, 0x01	; 1
     144:	20 40       	sbci	r18, 0x00	; 0
     146:	80 40       	sbci	r24, 0x00	; 0
     148:	e1 f7       	brne	.-8      	; 0x142 <LoginSystem_SaveNewUser+0x9e>
     14a:	00 c0       	rjmp	.+0      	; 0x14c <LoginSystem_SaveNewUser+0xa8>
     14c:	00 00       	nop
		_delay_ms(50);
		

		EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_strNewUser.User_Priority);
     14e:	f6 01       	movw	r30, r12
     150:	80 81       	ld	r24, Z
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	9c 01       	movw	r18, r24
     156:	22 0f       	add	r18, r18
     158:	33 1f       	adc	r19, r19
     15a:	22 0f       	add	r18, r18
     15c:	33 1f       	adc	r19, r19
     15e:	22 0f       	add	r18, r18
     160:	33 1f       	adc	r19, r19
     162:	82 0f       	add	r24, r18
     164:	93 1f       	adc	r25, r19
     166:	6b 85       	ldd	r22, Y+11	; 0x0b
     168:	4a 96       	adiw	r24, 0x1a	; 26
     16a:	0e 94 70 07 	call	0xee0	; 0xee0 <EEPROM_vWriteByteToAddress>
     16e:	ff ef       	ldi	r31, 0xFF	; 255
     170:	20 e7       	ldi	r18, 0x70	; 112
     172:	82 e0       	ldi	r24, 0x02	; 2
     174:	f1 50       	subi	r31, 0x01	; 1
     176:	20 40       	sbci	r18, 0x00	; 0
     178:	80 40       	sbci	r24, 0x00	; 0
     17a:	e1 f7       	brne	.-8      	; 0x174 <LoginSystem_SaveNewUser+0xd0>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <LoginSystem_SaveNewUser+0xda>
     17e:	00 00       	nop
		_delay_ms(50);
		(*Copy_u8NumofRegisteredUsers)++;
     180:	f6 01       	movw	r30, r12
     182:	60 81       	ld	r22, Z
     184:	6f 5f       	subi	r22, 0xFF	; 255
     186:	60 83       	st	Z, r22

		EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     188:	81 e1       	ldi	r24, 0x11	; 17
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	0e 94 70 07 	call	0xee0	; 0xee0 <EEPROM_vWriteByteToAddress>
	}
     190:	2b 96       	adiw	r28, 0x0b	; 11
     192:	0f b6       	in	r0, 0x3f	; 63
     194:	f8 94       	cli
     196:	de bf       	out	0x3e, r29	; 62
     198:	0f be       	out	0x3f, r0	; 63
     19a:	cd bf       	out	0x3d, r28	; 61
     19c:	df 91       	pop	r29
     19e:	cf 91       	pop	r28
     1a0:	1f 91       	pop	r17
     1a2:	0f 91       	pop	r16
     1a4:	ff 90       	pop	r15
     1a6:	ef 90       	pop	r14
     1a8:	df 90       	pop	r13
     1aa:	cf 90       	pop	r12
     1ac:	08 95       	ret

000001ae <LoginSystem_enuGetDataFromUserByKeypad>:
	ES_t LoginSystem_enuGetDataFromUserByKeypad(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
	{
     1ae:	cf 92       	push	r12
     1b0:	df 92       	push	r13
     1b2:	ef 92       	push	r14
     1b4:	ff 92       	push	r15
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
     1bc:	1f 92       	push	r1
     1be:	cd b7       	in	r28, 0x3d	; 61
     1c0:	de b7       	in	r29, 0x3e	; 62
     1c2:	6c 01       	movw	r12, r24
     1c4:	7b 01       	movw	r14, r22
		ES_t Local_enuErrorState = ES_NOK;
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
     1c6:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Username:");
     1ca:	80 e7       	ldi	r24, 0x70	; 112
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1d2:	60 e0       	ldi	r22, 0x00	; 0
     1d4:	81 e0       	ldi	r24, 0x01	; 1
     1d6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1da:	10 e0       	ldi	r17, 0x00	; 0
     1dc:	0d c0       	rjmp	.+26     	; 0x1f8 <LoginSystem_enuGetDataFromUserByKeypad+0x4a>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     1de:	ce 01       	movw	r24, r28
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	0e 94 fb 07 	call	0xff6	; 0xff6 <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     1e6:	89 81       	ldd	r24, Y+1	; 0x01
     1e8:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_enuSendData>
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
     1ec:	f6 01       	movw	r30, r12
     1ee:	e1 0f       	add	r30, r17
     1f0:	f1 1d       	adc	r31, r1
     1f2:	89 81       	ldd	r24, Y+1	; 0x01
     1f4:	80 83       	st	Z, r24
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
		LCD_enuDisplayString("Username:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1f6:	1f 5f       	subi	r17, 0xFF	; 255
     1f8:	14 30       	cpi	r17, 0x04	; 4
     1fa:	88 f3       	brcs	.-30     	; 0x1de <LoginSystem_enuGetDataFromUserByKeypad+0x30>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
			LCD_enuSendData(Local_u8PressedKey);
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
		}
		Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     1fc:	f6 01       	movw	r30, r12
     1fe:	14 82       	std	Z+4, r1	; 0x04

		LCD_enuClearDisplay();
     200:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Password:");
     204:	8a e7       	ldi	r24, 0x7A	; 122
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     20c:	60 e0       	ldi	r22, 0x00	; 0
     20e:	81 e0       	ldi	r24, 0x01	; 1
     210:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     214:	10 e0       	ldi	r17, 0x00	; 0
     216:	1d c0       	rjmp	.+58     	; 0x252 <LoginSystem_enuGetDataFromUserByKeypad+0xa4>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     218:	ce 01       	movw	r24, r28
     21a:	01 96       	adiw	r24, 0x01	; 1
     21c:	0e 94 fb 07 	call	0xff6	; 0xff6 <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_enuSendData>
     226:	ff ef       	ldi	r31, 0xFF	; 255
     228:	29 e6       	ldi	r18, 0x69	; 105
     22a:	88 e1       	ldi	r24, 0x18	; 24
     22c:	f1 50       	subi	r31, 0x01	; 1
     22e:	20 40       	sbci	r18, 0x00	; 0
     230:	80 40       	sbci	r24, 0x00	; 0
     232:	e1 f7       	brne	.-8      	; 0x22c <LoginSystem_enuGetDataFromUserByKeypad+0x7e>
     234:	00 c0       	rjmp	.+0      	; 0x236 <LoginSystem_enuGetDataFromUserByKeypad+0x88>
     236:	00 00       	nop
			_delay_ms(500);
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
     238:	61 2f       	mov	r22, r17
     23a:	81 e0       	ldi	r24, 0x01	; 1
     23c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
			LCD_enuSendData('*');
     240:	8a e2       	ldi	r24, 0x2A	; 42
     242:	0e 94 d2 09 	call	0x13a4	; 0x13a4 <LCD_enuSendData>
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;
     246:	f7 01       	movw	r30, r14
     248:	e1 0f       	add	r30, r17
     24a:	f1 1d       	adc	r31, r1
     24c:	89 81       	ldd	r24, Y+1	; 0x01
     24e:	80 83       	st	Z, r24

		LCD_enuClearDisplay();
		LCD_enuDisplayString("Password:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     250:	1f 5f       	subi	r17, 0xFF	; 255
     252:	14 30       	cpi	r17, 0x04	; 4
     254:	08 f3       	brcs	.-62     	; 0x218 <LoginSystem_enuGetDataFromUserByKeypad+0x6a>
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
			LCD_enuSendData('*');
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;

		}
		Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     256:	f7 01       	movw	r30, r14
     258:	14 82       	std	Z+4, r1	; 0x04
		Local_enuErrorState = ES_OK;
		return Local_enuErrorState;
	}
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	0f 90       	pop	r0
     25e:	df 91       	pop	r29
     260:	cf 91       	pop	r28
     262:	1f 91       	pop	r17
     264:	ff 90       	pop	r15
     266:	ef 90       	pop	r14
     268:	df 90       	pop	r13
     26a:	cf 90       	pop	r12
     26c:	08 95       	ret

0000026e <LoginSystem_enuGetDataFromUserBY_UART>:
	
		ES_t LoginSystem_enuGetDataFromUserBY_UART(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
		{
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	8c 01       	movw	r16, r24
     278:	eb 01       	movw	r28, r22
			ES_t Local_enuErrorState = ES_NOK;
			UART_enuSendString("\r\n\r\nUsername: ");
     27a:	84 e8       	ldi	r24, 0x84	; 132
     27c:	90 e0       	ldi	r25, 0x00	; 0
     27e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Username);
     282:	c8 01       	movw	r24, r16
     284:	0e 94 0d 0c 	call	0x181a	; 0x181a <UART_enuRecieveString>
			Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     288:	f8 01       	movw	r30, r16
     28a:	14 82       	std	Z+4, r1	; 0x04
			UART_enuSendString("Password: ");
     28c:	83 e9       	ldi	r24, 0x93	; 147
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Password);
     294:	ce 01       	movw	r24, r28
     296:	0e 94 0d 0c 	call	0x181a	; 0x181a <UART_enuRecieveString>
			Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     29a:	1c 82       	std	Y+4, r1	; 0x04

			Local_enuErrorState = ES_OK;
			return Local_enuErrorState;
		}
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	df 91       	pop	r29
     2a0:	cf 91       	pop	r28
     2a2:	1f 91       	pop	r17
     2a4:	0f 91       	pop	r16
     2a6:	08 95       	ret

000002a8 <LoginSystem_u8Strcmp>:



	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
     2a8:	dc 01       	movw	r26, r24
		u8 Local_u8Iterator=0;
     2aa:	40 e0       	ldi	r20, 0x00	; 0
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <LoginSystem_u8Strcmp+0x10>
		{
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     2ae:	99 23       	and	r25, r25
     2b0:	79 f0       	breq	.+30     	; 0x2d0 <LoginSystem_u8Strcmp+0x28>
     2b2:	22 23       	and	r18, r18
     2b4:	69 f0       	breq	.+26     	; 0x2d0 <LoginSystem_u8Strcmp+0x28>
				break;
			Local_u8Iterator++;
     2b6:	4f 5f       	subi	r20, 0xFF	; 255


	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
		u8 Local_u8Iterator=0;
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     2b8:	24 2f       	mov	r18, r20
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	fd 01       	movw	r30, r26
     2be:	e2 0f       	add	r30, r18
     2c0:	f3 1f       	adc	r31, r19
     2c2:	90 81       	ld	r25, Z
     2c4:	fb 01       	movw	r30, r22
     2c6:	e2 0f       	add	r30, r18
     2c8:	f3 1f       	adc	r31, r19
     2ca:	20 81       	ld	r18, Z
     2cc:	92 17       	cp	r25, r18
     2ce:	79 f3       	breq	.-34     	; 0x2ae <LoginSystem_u8Strcmp+0x6>
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
				break;
			Local_u8Iterator++;
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     2d0:	91 11       	cpse	r25, r1
     2d2:	04 c0       	rjmp	.+8      	; 0x2dc <LoginSystem_u8Strcmp+0x34>
     2d4:	22 23       	and	r18, r18
     2d6:	21 f0       	breq	.+8      	; 0x2e0 <LoginSystem_u8Strcmp+0x38>
			return TRUE;
		else
			return FALSE;
     2d8:	80 e0       	ldi	r24, 0x00	; 0
     2da:	08 95       	ret
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	08 95       	ret
				break;
			Local_u8Iterator++;
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
			return TRUE;
     2e0:	81 e0       	ldi	r24, 0x01	; 1
		else
			return FALSE;
	}
     2e2:	08 95       	ret

000002e4 <LoginSystem_RemoveUser>:
	
	u8 LoginSystem_RemoveUser(User_t *Copy_AstrUsers,u8 *Copy_u8NumofRegisteredUsers)
		{
     2e4:	8f 92       	push	r8
     2e6:	9f 92       	push	r9
     2e8:	af 92       	push	r10
     2ea:	bf 92       	push	r11
     2ec:	cf 92       	push	r12
     2ee:	df 92       	push	r13
     2f0:	ef 92       	push	r14
     2f2:	ff 92       	push	r15
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	00 d0       	rcall	.+0      	; 0x2fe <LoginSystem_RemoveUser+0x1a>
     2fe:	00 d0       	rcall	.+0      	; 0x300 <LoginSystem_RemoveUser+0x1c>
     300:	1f 92       	push	r1
     302:	cd b7       	in	r28, 0x3d	; 61
     304:	de b7       	in	r29, 0x3e	; 62
     306:	6c 01       	movw	r12, r24
     308:	7b 01       	movw	r14, r22
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
     30a:	8e e9       	ldi	r24, 0x9E	; 158
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
			UART_enuRecieveString(Local_Au8Username);
     312:	ce 01       	movw	r24, r28
     314:	01 96       	adiw	r24, 0x01	; 1
     316:	0e 94 0d 0c 	call	0x181a	; 0x181a <UART_enuRecieveString>
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     31a:	1d 82       	std	Y+5, r1	; 0x05
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     31c:	00 e0       	ldi	r16, 0x00	; 0
     31e:	87 c0       	rjmp	.+270    	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			{
				Copy_u8Flag = LoginSystem_u8Strcmp (Copy_AstrUsers[Local_u8Iterator].UserName,Local_Au8Username);
     320:	46 01       	movw	r8, r12
     322:	2b e0       	ldi	r18, 0x0B	; 11
     324:	02 9f       	mul	r16, r18
     326:	80 0c       	add	r8, r0
     328:	91 1c       	adc	r9, r1
     32a:	11 24       	eor	r1, r1
     32c:	be 01       	movw	r22, r28
     32e:	6f 5f       	subi	r22, 0xFF	; 255
     330:	7f 4f       	sbci	r23, 0xFF	; 255
     332:	c4 01       	movw	r24, r8
     334:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LoginSystem_u8Strcmp>
     338:	b8 2e       	mov	r11, r24
				if (Copy_u8Flag )
     33a:	88 23       	and	r24, r24
     33c:	09 f4       	brne	.+2      	; 0x340 <LoginSystem_RemoveUser+0x5c>
     33e:	76 c0       	rjmp	.+236    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				{
					Copy_AstrUsers[Local_u8Iterator]=Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1];
     340:	0f 2e       	mov	r0, r31
     342:	fb e0       	ldi	r31, 0x0B	; 11
     344:	af 2e       	mov	r10, r31
     346:	f0 2d       	mov	r31, r0
     348:	a1 9e       	mul	r10, r17
     34a:	f0 01       	movw	r30, r0
     34c:	11 24       	eor	r1, r1
     34e:	3b 97       	sbiw	r30, 0x0b	; 11
     350:	ec 0d       	add	r30, r12
     352:	fd 1d       	adc	r31, r13
     354:	8b e0       	ldi	r24, 0x0B	; 11
     356:	d4 01       	movw	r26, r8
     358:	01 90       	ld	r0, Z+
     35a:	0d 92       	st	X+, r0
     35c:	8a 95       	dec	r24
     35e:	e1 f7       	brne	.-8      	; 0x358 <LoginSystem_RemoveUser+0x74>
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1), Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].UserName,MAX_NO_OF_LETTERS);
     360:	f7 01       	movw	r30, r14
     362:	60 81       	ld	r22, Z
     364:	a6 9e       	mul	r10, r22
     366:	b0 01       	movw	r22, r0
     368:	11 24       	eor	r1, r1
     36a:	6b 50       	subi	r22, 0x0B	; 11
     36c:	71 09       	sbc	r23, r1
     36e:	6c 0d       	add	r22, r12
     370:	7d 1d       	adc	r23, r13
     372:	80 2f       	mov	r24, r16
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	8c 01       	movw	r16, r24
     378:	00 0f       	add	r16, r16
     37a:	11 1f       	adc	r17, r17
     37c:	00 0f       	add	r16, r16
     37e:	11 1f       	adc	r17, r17
     380:	00 0f       	add	r16, r16
     382:	11 1f       	adc	r17, r17
     384:	08 0f       	add	r16, r24
     386:	19 1f       	adc	r17, r25
     388:	44 e0       	ldi	r20, 0x04	; 4
     38a:	50 e0       	ldi	r21, 0x00	; 0
     38c:	c8 01       	movw	r24, r16
     38e:	42 96       	adiw	r24, 0x12	; 18
     390:	0e 94 82 07 	call	0xf04	; 0xf04 <EEPROM_vWriteBlockToAddress>
     394:	ff ef       	ldi	r31, 0xFF	; 255
     396:	20 e7       	ldi	r18, 0x70	; 112
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	f1 50       	subi	r31, 0x01	; 1
     39c:	20 40       	sbci	r18, 0x00	; 0
     39e:	80 40       	sbci	r24, 0x00	; 0
     3a0:	e1 f7       	brne	.-8      	; 0x39a <LoginSystem_RemoveUser+0xb6>
     3a2:	00 c0       	rjmp	.+0      	; 0x3a4 <LoginSystem_RemoveUser+0xc0>
     3a4:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].Password,MAX_NO_OF_LETTERS);
     3a6:	f7 01       	movw	r30, r14
     3a8:	60 81       	ld	r22, Z
     3aa:	a6 9e       	mul	r10, r22
     3ac:	b0 01       	movw	r22, r0
     3ae:	11 24       	eor	r1, r1
     3b0:	6b 50       	subi	r22, 0x0B	; 11
     3b2:	71 09       	sbc	r23, r1
     3b4:	6c 0d       	add	r22, r12
     3b6:	7d 1d       	adc	r23, r13
     3b8:	6b 5f       	subi	r22, 0xFB	; 251
     3ba:	7f 4f       	sbci	r23, 0xFF	; 255
     3bc:	44 e0       	ldi	r20, 0x04	; 4
     3be:	50 e0       	ldi	r21, 0x00	; 0
     3c0:	c8 01       	movw	r24, r16
     3c2:	46 96       	adiw	r24, 0x16	; 22
     3c4:	0e 94 82 07 	call	0xf04	; 0xf04 <EEPROM_vWriteBlockToAddress>
     3c8:	ff ef       	ldi	r31, 0xFF	; 255
     3ca:	20 e7       	ldi	r18, 0x70	; 112
     3cc:	82 e0       	ldi	r24, 0x02	; 2
     3ce:	f1 50       	subi	r31, 0x01	; 1
     3d0:	20 40       	sbci	r18, 0x00	; 0
     3d2:	80 40       	sbci	r24, 0x00	; 0
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <LoginSystem_RemoveUser+0xea>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LoginSystem_RemoveUser+0xf4>
     3d8:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].User_Priority);
     3da:	f7 01       	movw	r30, r14
     3dc:	80 81       	ld	r24, Z
     3de:	a8 9e       	mul	r10, r24
     3e0:	c0 01       	movw	r24, r0
     3e2:	11 24       	eor	r1, r1
     3e4:	0b 97       	sbiw	r24, 0x0b	; 11
     3e6:	f6 01       	movw	r30, r12
     3e8:	e8 0f       	add	r30, r24
     3ea:	f9 1f       	adc	r31, r25
     3ec:	62 85       	ldd	r22, Z+10	; 0x0a
     3ee:	c8 01       	movw	r24, r16
     3f0:	4a 96       	adiw	r24, 0x1a	; 26
     3f2:	0e 94 70 07 	call	0xee0	; 0xee0 <EEPROM_vWriteByteToAddress>
     3f6:	ff ef       	ldi	r31, 0xFF	; 255
     3f8:	20 e7       	ldi	r18, 0x70	; 112
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	f1 50       	subi	r31, 0x01	; 1
     3fe:	20 40       	sbci	r18, 0x00	; 0
     400:	80 40       	sbci	r24, 0x00	; 0
     402:	e1 f7       	brne	.-8      	; 0x3fc <LoginSystem_RemoveUser+0x118>
     404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
     406:	00 00       	nop
					_delay_ms(50);
					(*Copy_u8NumofRegisteredUsers)--;
     408:	f7 01       	movw	r30, r14
     40a:	60 81       	ld	r22, Z
     40c:	61 50       	subi	r22, 0x01	; 1
     40e:	60 83       	st	Z, r22
					EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     410:	81 e1       	ldi	r24, 0x11	; 17
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 70 07 	call	0xee0	; 0xee0 <EEPROM_vWriteByteToAddress>
     418:	ff ef       	ldi	r31, 0xFF	; 255
     41a:	20 e7       	ldi	r18, 0x70	; 112
     41c:	82 e0       	ldi	r24, 0x02	; 2
     41e:	f1 50       	subi	r31, 0x01	; 1
     420:	20 40       	sbci	r18, 0x00	; 0
     422:	80 40       	sbci	r24, 0x00	; 0
     424:	e1 f7       	brne	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     428:	00 00       	nop
     42a:	06 c0       	rjmp	.+12     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
			UART_enuRecieveString(Local_Au8Username);
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     42c:	0f 5f       	subi	r16, 0xFF	; 255
     42e:	f7 01       	movw	r30, r14
     430:	10 81       	ld	r17, Z
     432:	01 17       	cp	r16, r17
     434:	08 f4       	brcc	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
     436:	74 cf       	rjmp	.-280    	; 0x320 <LoginSystem_RemoveUser+0x3c>
					_delay_ms(50);
					break;
				}
			}
			return Copy_u8Flag;
		}
     438:	8b 2d       	mov	r24, r11
     43a:	0f 90       	pop	r0
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	df 90       	pop	r13
     452:	cf 90       	pop	r12
     454:	bf 90       	pop	r11
     456:	af 90       	pop	r10
     458:	9f 90       	pop	r9
     45a:	8f 90       	pop	r8
     45c:	08 95       	ret

0000045e <main>:
#include "LoginSystem.h"

#include <util/delay.h>

int main (void)
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
     462:	cd b7       	in	r28, 0x3d	; 61
     464:	de b7       	in	r29, 0x3e	; 62
     466:	c7 54       	subi	r28, 0x47	; 71
     468:	d1 09       	sbc	r29, r1
     46a:	0f b6       	in	r0, 0x3f	; 63
     46c:	f8 94       	cli
     46e:	de bf       	out	0x3e, r29	; 62
     470:	0f be       	out	0x3f, r0	; 63
     472:	cd bf       	out	0x3d, r28	; 61
/************************************************************************************************************/
/*******************************************INITIALIZATION***************************************************/
	//TWI_Init();
	//EEPROM_enuInit();
	DIO_enuInit();
     474:	0e 94 a6 0a 	call	0x154c	; 0x154c <DIO_enuInit>
//	Timer1_enuInit();
	SPI_vInitMaster();
     478:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <SPI_vInitMaster>
	UART_enuUART_Init();
     47c:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <UART_enuUART_Init>
	
	
	LCD_enuInit();
     480:	0e 94 75 09 	call	0x12ea	; 0x12ea <LCD_enuInit>
	Keypad_enuInit();
     484:	0e 94 a9 07 	call	0xf52	; 0xf52 <Keypad_enuInit>
	DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN1,DIO_u8OUTPUT);
     488:	41 e0       	ldi	r20, 0x01	; 1
     48a:	61 e0       	ldi	r22, 0x01	; 1
     48c:	83 e0       	ldi	r24, 0x03	; 3
     48e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
	
/***************************************************************************************************/
/* ***********************************************************************************************************/
/************************************************************************************************************/

	__asm("sei");// GIE
     492:	78 94       	sei

	u8 Program_Status_Flag;
	User_t LoginSystem_strAdmin;
	User_t LoginSystem_AstrUsers[MAX_NO_OF_USERS];
	u8 LoginSystem_NumOfRegisteredUsers=0;
     494:	19 ae       	std	Y+57, r1	; 0x39
	u8 Dimmer_Percentage;
	u8 Dimmer_Percentage_Tens;
	u8 Dimmer_Percentage_Ones;
	u8 ShowToUser = MAIN_MENU;
	u8 LoginSystem_u8TrialsLeft =3;
	EEPROM_ui8ReadByteFromAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,&Program_Status_Flag);
     496:	be 01       	movw	r22, r28
     498:	6f 5f       	subi	r22, 0xFF	; 255
     49a:	7f 4f       	sbci	r23, 0xFF	; 255
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 4c 07 	call	0xe98	; 0xe98 <EEPROM_ui8ReadByteFromAddress>
     4a2:	2f ef       	ldi	r18, 0xFF	; 255
     4a4:	32 e5       	ldi	r19, 0x52	; 82
     4a6:	87 e0       	ldi	r24, 0x07	; 7
     4a8:	21 50       	subi	r18, 0x01	; 1
     4aa:	30 40       	sbci	r19, 0x00	; 0
     4ac:	80 40       	sbci	r24, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <main+0x4a>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <main+0x54>
     4b2:	00 00       	nop
	_delay_ms(150);

	LCD_enuDisplayString("Welcome To Smart");
     4b4:	88 ec       	ldi	r24, 0xC8	; 200
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
	LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     4bc:	60 e0       	ldi	r22, 0x00	; 0
     4be:	81 e0       	ldi	r24, 0x01	; 1
     4c0:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
	LCD_enuDisplayString("Home !");
     4c4:	89 ed       	ldi	r24, 0xD9	; 217
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
     4cc:	9f ef       	ldi	r25, 0xFF	; 255
     4ce:	27 ea       	ldi	r18, 0xA7	; 167
     4d0:	31 e6       	ldi	r19, 0x61	; 97
     4d2:	91 50       	subi	r25, 0x01	; 1
     4d4:	20 40       	sbci	r18, 0x00	; 0
     4d6:	30 40       	sbci	r19, 0x00	; 0
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <main+0x74>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <main+0x7e>
     4dc:	00 00       	nop
	_delay_ms (2000);
	LCD_enuClearDisplay();
     4de:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>

	
	
			if (Program_Status_Flag == FIRST_TIME_USE_STATUS)
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	8f 3f       	cpi	r24, 0xFF	; 255
     4e6:	09 f0       	breq	.+2      	; 0x4ea <main+0x8c>
     4e8:	91 c0       	rjmp	.+290    	; 0x60c <main+0x1ae>
			{

				EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,LoginSystem_NumOfRegisteredUsers);
     4ea:	69 ad       	ldd	r22, Y+57	; 0x39
     4ec:	81 e1       	ldi	r24, 0x11	; 17
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 70 07 	call	0xee0	; 0xee0 <EEPROM_vWriteByteToAddress>
     4f4:	8f ef       	ldi	r24, 0xFF	; 255
     4f6:	92 e5       	ldi	r25, 0x52	; 82
     4f8:	27 e0       	ldi	r18, 0x07	; 7
     4fa:	81 50       	subi	r24, 0x01	; 1
     4fc:	90 40       	sbci	r25, 0x00	; 0
     4fe:	20 40       	sbci	r18, 0x00	; 0
     500:	e1 f7       	brne	.-8      	; 0x4fa <main+0x9c>
     502:	00 c0       	rjmp	.+0      	; 0x504 <main+0xa6>
     504:	00 00       	nop
				_delay_ms(150);
				LCD_enuDisplayString("For First Time");
     506:	80 ee       	ldi	r24, 0xE0	; 224
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     50e:	60 e0       	ldi	r22, 0x00	; 0
     510:	81 e0       	ldi	r24, 0x01	; 1
     512:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Use");
     516:	8f ee       	ldi	r24, 0xEF	; 239
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
     51e:	3f ef       	ldi	r19, 0xFF	; 255
     520:	87 ea       	ldi	r24, 0xA7	; 167
     522:	91 e6       	ldi	r25, 0x61	; 97
     524:	31 50       	subi	r19, 0x01	; 1
     526:	80 40       	sbci	r24, 0x00	; 0
     528:	90 40       	sbci	r25, 0x00	; 0
     52a:	e1 f7       	brne	.-8      	; 0x524 <main+0xc6>
     52c:	00 c0       	rjmp	.+0      	; 0x52e <main+0xd0>
     52e:	00 00       	nop
				_delay_ms(2000);
				LCD_enuClearDisplay();
     530:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Register Admin");
     534:	83 ef       	ldi	r24, 0xF3	; 243
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     53c:	60 e0       	ldi	r22, 0x00	; 0
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("on Keypad");
     544:	82 e0       	ldi	r24, 0x02	; 2
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
     54c:	2f ef       	ldi	r18, 0xFF	; 255
     54e:	37 ea       	ldi	r19, 0xA7	; 167
     550:	81 e6       	ldi	r24, 0x61	; 97
     552:	21 50       	subi	r18, 0x01	; 1
     554:	30 40       	sbci	r19, 0x00	; 0
     556:	80 40       	sbci	r24, 0x00	; 0
     558:	e1 f7       	brne	.-8      	; 0x552 <main+0xf4>
     55a:	00 c0       	rjmp	.+0      	; 0x55c <main+0xfe>
     55c:	00 00       	nop
				_delay_ms(2000);
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_strAdmin.UserName, LoginSystem_strAdmin.Password);
     55e:	be 01       	movw	r22, r28
     560:	69 5f       	subi	r22, 0xF9	; 249
     562:	7f 4f       	sbci	r23, 0xFF	; 255
     564:	ce 01       	movw	r24, r28
     566:	02 96       	adiw	r24, 0x02	; 2
     568:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LoginSystem_enuGetDataFromUserByKeypad>
				LoginSystem_strAdmin.User_Priority = ADMIN_PRIORITY;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	8c 87       	std	Y+12, r24	; 0x0c
				
				
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS ,LoginSystem_strAdmin.UserName , MAX_NO_OF_LETTERS);
     570:	44 e0       	ldi	r20, 0x04	; 4
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	be 01       	movw	r22, r28
     576:	6e 5f       	subi	r22, 0xFE	; 254
     578:	7f 4f       	sbci	r23, 0xFF	; 255
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	0e 94 82 07 	call	0xf04	; 0xf04 <EEPROM_vWriteBlockToAddress>
     582:	9f ef       	ldi	r25, 0xFF	; 255
     584:	23 ec       	ldi	r18, 0xC3	; 195
     586:	39 e0       	ldi	r19, 0x09	; 9
     588:	91 50       	subi	r25, 0x01	; 1
     58a:	20 40       	sbci	r18, 0x00	; 0
     58c:	30 40       	sbci	r19, 0x00	; 0
     58e:	e1 f7       	brne	.-8      	; 0x588 <main+0x12a>
     590:	00 c0       	rjmp	.+0      	; 0x592 <main+0x134>
     592:	00 00       	nop
				_delay_ms(200);
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS ,LoginSystem_strAdmin.Password , MAX_NO_OF_LETTERS);
     594:	44 e0       	ldi	r20, 0x04	; 4
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	be 01       	movw	r22, r28
     59a:	69 5f       	subi	r22, 0xF9	; 249
     59c:	7f 4f       	sbci	r23, 0xFF	; 255
     59e:	85 e0       	ldi	r24, 0x05	; 5
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 82 07 	call	0xf04	; 0xf04 <EEPROM_vWriteBlockToAddress>
     5a6:	8f ef       	ldi	r24, 0xFF	; 255
     5a8:	93 ec       	ldi	r25, 0xC3	; 195
     5aa:	29 e0       	ldi	r18, 0x09	; 9
     5ac:	81 50       	subi	r24, 0x01	; 1
     5ae:	90 40       	sbci	r25, 0x00	; 0
     5b0:	20 40       	sbci	r18, 0x00	; 0
     5b2:	e1 f7       	brne	.-8      	; 0x5ac <main+0x14e>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <main+0x158>
     5b6:	00 00       	nop
				_delay_ms(200);

				EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,LOAD_LOGIN_SYSTEM_DATABASE);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	0e 94 70 07 	call	0xee0	; 0xee0 <EEPROM_vWriteByteToAddress>
     5c2:	3f ef       	ldi	r19, 0xFF	; 255
     5c4:	82 e5       	ldi	r24, 0x52	; 82
     5c6:	97 e0       	ldi	r25, 0x07	; 7
     5c8:	31 50       	subi	r19, 0x01	; 1
     5ca:	80 40       	sbci	r24, 0x00	; 0
     5cc:	90 40       	sbci	r25, 0x00	; 0
     5ce:	e1 f7       	brne	.-8      	; 0x5c8 <main+0x16a>
     5d0:	00 c0       	rjmp	.+0      	; 0x5d2 <main+0x174>
     5d2:	00 00       	nop
				_delay_ms(150);

				LCD_enuClearDisplay();
     5d4:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Saved");
     5d8:	8c e0       	ldi	r24, 0x0C	; 12
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Successfully");
     5e8:	89 e4       	ldi	r24, 0x49	; 73
     5ea:	91 e0       	ldi	r25, 0x01	; 1
     5ec:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
     5f0:	2f ef       	ldi	r18, 0xFF	; 255
     5f2:	33 ed       	ldi	r19, 0xD3	; 211
     5f4:	80 e3       	ldi	r24, 0x30	; 48
     5f6:	21 50       	subi	r18, 0x01	; 1
     5f8:	30 40       	sbci	r19, 0x00	; 0
     5fa:	80 40       	sbci	r24, 0x00	; 0
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <main+0x198>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <main+0x1a2>
     600:	00 00       	nop
				_delay_ms(1000);
				LCD_enuClearDisplay();
     602:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
				
				Program_Status_Flag = IDLE_STATUS;
     606:	87 e0       	ldi	r24, 0x07	; 7
     608:	89 83       	std	Y+1, r24	; 0x01
     60a:	aa c0       	rjmp	.+340    	; 0x760 <main+0x302>
			}

			/************************************************************************************************************/
			/************************************************************************************************************/

			else if (Program_Status_Flag == LOAD_LOGIN_SYSTEM_DATABASE)
     60c:	81 11       	cpse	r24, r1
     60e:	a8 c0       	rjmp	.+336    	; 0x760 <main+0x302>
			{
				/****************************************Load the Login System database from the EEPROM***************************************/
				EEPROM_ui8ReadByteFromAddress(NO_OF_REGISTERED_USERS_ADDRESS,&LoginSystem_NumOfRegisteredUsers);
     610:	be 01       	movw	r22, r28
     612:	67 5c       	subi	r22, 0xC7	; 199
     614:	7f 4f       	sbci	r23, 0xFF	; 255
     616:	81 e1       	ldi	r24, 0x11	; 17
     618:	0e 94 4c 07 	call	0xe98	; 0xe98 <EEPROM_ui8ReadByteFromAddress>
     61c:	9f ef       	ldi	r25, 0xFF	; 255
     61e:	23 ec       	ldi	r18, 0xC3	; 195
     620:	39 e0       	ldi	r19, 0x09	; 9
     622:	91 50       	subi	r25, 0x01	; 1
     624:	20 40       	sbci	r18, 0x00	; 0
     626:	30 40       	sbci	r19, 0x00	; 0
     628:	e1 f7       	brne	.-8      	; 0x622 <main+0x1c4>
     62a:	00 c0       	rjmp	.+0      	; 0x62c <main+0x1ce>
     62c:	00 00       	nop
				_delay_ms(200);
				

				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS,LoginSystem_strAdmin.UserName,MAX_NO_OF_LETTERS);
     62e:	44 e0       	ldi	r20, 0x04	; 4
     630:	50 e0       	ldi	r21, 0x00	; 0
     632:	be 01       	movw	r22, r28
     634:	6e 5f       	subi	r22, 0xFE	; 254
     636:	7f 4f       	sbci	r23, 0xFF	; 255
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 57 07 	call	0xeae	; 0xeae <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     640:	1e 82       	std	Y+6, r1	; 0x06
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	92 e5       	ldi	r25, 0x52	; 82
     646:	27 e0       	ldi	r18, 0x07	; 7
     648:	81 50       	subi	r24, 0x01	; 1
     64a:	90 40       	sbci	r25, 0x00	; 0
     64c:	20 40       	sbci	r18, 0x00	; 0
     64e:	e1 f7       	brne	.-8      	; 0x648 <main+0x1ea>
     650:	00 c0       	rjmp	.+0      	; 0x652 <main+0x1f4>
     652:	00 00       	nop
				_delay_ms(150);
				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS,LoginSystem_strAdmin.Password,MAX_NO_OF_LETTERS);
     654:	44 e0       	ldi	r20, 0x04	; 4
     656:	50 e0       	ldi	r21, 0x00	; 0
     658:	be 01       	movw	r22, r28
     65a:	69 5f       	subi	r22, 0xF9	; 249
     65c:	7f 4f       	sbci	r23, 0xFF	; 255
     65e:	85 e0       	ldi	r24, 0x05	; 5
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 57 07 	call	0xeae	; 0xeae <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     666:	1b 86       	std	Y+11, r1	; 0x0b
     668:	3f ef       	ldi	r19, 0xFF	; 255
     66a:	82 e5       	ldi	r24, 0x52	; 82
     66c:	97 e0       	ldi	r25, 0x07	; 7
     66e:	31 50       	subi	r19, 0x01	; 1
     670:	80 40       	sbci	r24, 0x00	; 0
     672:	90 40       	sbci	r25, 0x00	; 0
     674:	e1 f7       	brne	.-8      	; 0x66e <main+0x210>
     676:	00 c0       	rjmp	.+0      	; 0x678 <main+0x21a>
     678:	00 00       	nop
				_delay_ms(150);
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	8c 87       	std	Y+12, r24	; 0x0c
     67e:	2f ef       	ldi	r18, 0xFF	; 255
     680:	32 e5       	ldi	r19, 0x52	; 82
     682:	87 e0       	ldi	r24, 0x07	; 7
     684:	21 50       	subi	r18, 0x01	; 1
     686:	30 40       	sbci	r19, 0x00	; 0
     688:	80 40       	sbci	r24, 0x00	; 0
     68a:	e1 f7       	brne	.-8      	; 0x684 <main+0x226>
     68c:	00 c0       	rjmp	.+0      	; 0x68e <main+0x230>
     68e:	00 00       	nop
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     690:	f1 2c       	mov	r15, r1
     692:	60 c0       	rjmp	.+192    	; 0x754 <main+0x2f6>
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
     694:	8f 2d       	mov	r24, r15
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	6c 01       	movw	r12, r24
     69a:	cc 0c       	add	r12, r12
     69c:	dd 1c       	adc	r13, r13
     69e:	cc 0c       	add	r12, r12
     6a0:	dd 1c       	adc	r13, r13
     6a2:	cc 0c       	add	r12, r12
     6a4:	dd 1c       	adc	r13, r13
     6a6:	c8 0e       	add	r12, r24
     6a8:	d9 1e       	adc	r13, r25
     6aa:	46 01       	movw	r8, r12
     6ac:	22 e1       	ldi	r18, 0x12	; 18
     6ae:	82 0e       	add	r8, r18
     6b0:	91 1c       	adc	r9, r1
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     6b2:	2b e0       	ldi	r18, 0x0B	; 11
     6b4:	28 9f       	mul	r18, r24
     6b6:	80 01       	movw	r16, r0
     6b8:	29 9f       	mul	r18, r25
     6ba:	10 0d       	add	r17, r0
     6bc:	11 24       	eor	r1, r1
     6be:	6d e0       	ldi	r22, 0x0D	; 13
     6c0:	70 e0       	ldi	r23, 0x00	; 0
     6c2:	6c 0f       	add	r22, r28
     6c4:	7d 1f       	adc	r23, r29
     6c6:	60 0f       	add	r22, r16
     6c8:	71 1f       	adc	r23, r17
     6ca:	44 e0       	ldi	r20, 0x04	; 4
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	c4 01       	movw	r24, r8
     6d0:	0e 94 57 07 	call	0xeae	; 0xeae <EEPROM_vReadBlockFromAddress>
     6d4:	3f ef       	ldi	r19, 0xFF	; 255
     6d6:	82 e5       	ldi	r24, 0x52	; 82
     6d8:	97 e0       	ldi	r25, 0x07	; 7
     6da:	31 50       	subi	r19, 0x01	; 1
     6dc:	80 40       	sbci	r24, 0x00	; 0
     6de:	90 40       	sbci	r25, 0x00	; 0
     6e0:	e1 f7       	brne	.-8      	; 0x6da <main+0x27c>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <main+0x286>
     6e4:	00 00       	nop
					_delay_ms(150);

					EEPROM_vReadBlockFromAddress(Local_u16UserAddress + MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].Password,MAX_NO_OF_LETTERS);
     6e6:	b8 01       	movw	r22, r16
     6e8:	6b 5f       	subi	r22, 0xFB	; 251
     6ea:	7f 4f       	sbci	r23, 0xFF	; 255
     6ec:	2d e0       	ldi	r18, 0x0D	; 13
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	2c 0f       	add	r18, r28
     6f2:	3d 1f       	adc	r19, r29
     6f4:	62 0f       	add	r22, r18
     6f6:	73 1f       	adc	r23, r19
     6f8:	44 e0       	ldi	r20, 0x04	; 4
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	c6 01       	movw	r24, r12
     6fe:	46 96       	adiw	r24, 0x16	; 22
     700:	0e 94 57 07 	call	0xeae	; 0xeae <EEPROM_vReadBlockFromAddress>
     704:	3f ef       	ldi	r19, 0xFF	; 255
     706:	82 e5       	ldi	r24, 0x52	; 82
     708:	97 e0       	ldi	r25, 0x07	; 7
     70a:	31 50       	subi	r19, 0x01	; 1
     70c:	80 40       	sbci	r24, 0x00	; 0
     70e:	90 40       	sbci	r25, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <main+0x2ac>
     712:	00 c0       	rjmp	.+0      	; 0x714 <main+0x2b6>
     714:	00 00       	nop
					_delay_ms(150);
					EEPROM_ui8ReadByteFromAddress(Local_u16UserAddress + 2*MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].User_Priority);
     716:	b8 01       	movw	r22, r16
     718:	66 5f       	subi	r22, 0xF6	; 246
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	2d e0       	ldi	r18, 0x0D	; 13
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	2c 0f       	add	r18, r28
     722:	3d 1f       	adc	r19, r29
     724:	62 0f       	add	r22, r18
     726:	73 1f       	adc	r23, r19
     728:	88 e0       	ldi	r24, 0x08	; 8
     72a:	88 0d       	add	r24, r8
     72c:	0e 94 4c 07 	call	0xe98	; 0xe98 <EEPROM_ui8ReadByteFromAddress>
     730:	3f ef       	ldi	r19, 0xFF	; 255
     732:	82 e5       	ldi	r24, 0x52	; 82
     734:	97 e0       	ldi	r25, 0x07	; 7
     736:	31 50       	subi	r19, 0x01	; 1
     738:	80 40       	sbci	r24, 0x00	; 0
     73a:	90 40       	sbci	r25, 0x00	; 0
     73c:	e1 f7       	brne	.-8      	; 0x736 <main+0x2d8>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <main+0x2e2>
     740:	00 00       	nop
					_delay_ms(150);
					LoginSystem_AstrUsers[Local_u8Iterator].UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     742:	e1 e0       	ldi	r30, 0x01	; 1
     744:	f0 e0       	ldi	r31, 0x00	; 0
     746:	ec 0f       	add	r30, r28
     748:	fd 1f       	adc	r31, r29
     74a:	e0 0f       	add	r30, r16
     74c:	f1 1f       	adc	r31, r17
     74e:	10 8a       	std	Z+16, r1	; 0x10
					LoginSystem_AstrUsers[Local_u8Iterator].Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     750:	15 8a       	std	Z+21, r1	; 0x15
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     752:	f3 94       	inc	r15
     754:	89 ad       	ldd	r24, Y+57	; 0x39
     756:	f8 16       	cp	r15, r24
     758:	08 f4       	brcc	.+2      	; 0x75c <main+0x2fe>
     75a:	9c cf       	rjmp	.-200    	; 0x694 <main+0x236>
				}
				
				


				Program_Status_Flag = IDLE_STATUS;
     75c:	87 e0       	ldi	r24, 0x07	; 7
     75e:	89 83       	std	Y+1, r24	; 0x01
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     760:	0f 2e       	mov	r0, r31
     762:	f3 e0       	ldi	r31, 0x03	; 3
     764:	9f 2e       	mov	r9, r31
     766:	f0 2d       	mov	r31, r0
     768:	10 e0       	ldi	r17, 0x00	; 0
				Program_Status_Flag = IDLE_STATUS;
			}
		
	while (1)
	{
		UART_enuSendString("PRESS ENTER TO START\r\n");	
     76a:	82 e1       	ldi	r24, 0x12	; 18
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>

/************************************************************************************************************/
/************************************************************************************************************/


		while (Program_Status_Flag == IDLE_STATUS)
     772:	18 c0       	rjmp	.+48     	; 0x7a4 <main+0x346>
				break;
				case State_Dimmer:
				LCD_enuDisplayString("Dimmer controlled");
				break;
				default:
				LCD_enuClearDisplay();
     774:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
				LCD_enuDisplayString("All Devices");
     778:	89 e2       	ldi	r24, 0x29	; 41
     77a:	91 e0       	ldi	r25, 0x01	; 1
     77c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     780:	60 e0       	ldi	r22, 0x00	; 0
     782:	81 e0       	ldi	r24, 0x01	; 1
     784:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Are Off");
     788:	85 e3       	ldi	r24, 0x35	; 53
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
				
			}
			

			u8 Local_u8Data;
			UART_enuRecieveChar(Local_u8Data);
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <UART_enuRecieveChar>
			if(UART_enuCheck_Connection())
     798:	0e 94 23 0c 	call	0x1846	; 0x1846 <UART_enuCheck_Connection>
     79c:	88 23       	and	r24, r24
     79e:	11 f0       	breq	.+4      	; 0x7a4 <main+0x346>
			{
				Program_Status_Flag = ADMIN_LOGIN_PAGE_STATUS;
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	89 83       	std	Y+1, r24	; 0x01

/************************************************************************************************************/
/************************************************************************************************************/


		while (Program_Status_Flag == IDLE_STATUS)
     7a4:	89 81       	ldd	r24, Y+1	; 0x01
     7a6:	87 30       	cpi	r24, 0x07	; 7
     7a8:	29 f3       	breq	.-54     	; 0x774 <main+0x316>
     7aa:	ca c0       	rjmp	.+404    	; 0x940 <__stack+0xe1>

		while (Program_Status_Flag == ADMIN_LOGIN_PAGE_STATUS)
		{
						u8 LoginSystem_u8_AdminTrueFlag;
						u8 LoginSystem_u8_Remoted_USERTrueFlag;
						LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
     7ac:	be 01       	movw	r22, r28
     7ae:	61 5c       	subi	r22, 0xC1	; 193
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	ce 01       	movw	r24, r28
     7b4:	ca 96       	adiw	r24, 0x3a	; 58
     7b6:	0e 94 37 01 	call	0x26e	; 0x26e <LoginSystem_enuGetDataFromUserBY_UART>


						LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     7ba:	be 01       	movw	r22, r28
     7bc:	6e 5f       	subi	r22, 0xFE	; 254
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	ca 96       	adiw	r24, 0x3a	; 58
     7c4:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LoginSystem_u8Strcmp>
     7c8:	88 23       	and	r24, r24
     7ca:	59 f0       	breq	.+22     	; 0x7e2 <main+0x384>
     7cc:	be 01       	movw	r22, r28
     7ce:	69 5f       	subi	r22, 0xF9	; 249
     7d0:	7f 4f       	sbci	r23, 0xFF	; 255
     7d2:	ce 01       	movw	r24, r28
     7d4:	cf 96       	adiw	r24, 0x3f	; 63
     7d6:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LoginSystem_u8Strcmp>
     7da:	88 23       	and	r24, r24
     7dc:	21 f0       	breq	.+8      	; 0x7e6 <main+0x388>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	03 c0       	rjmp	.+6      	; 0x7e8 <main+0x38a>
     7e2:	80 e0       	ldi	r24, 0x00	; 0
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <main+0x38a>
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	d8 2e       	mov	r13, r24

						if(LoginSystem_u8_AdminTrueFlag == TRUE)
     7ea:	21 e0       	ldi	r18, 0x01	; 1
     7ec:	82 13       	cpse	r24, r18
     7ee:	78 c0       	rjmp	.+240    	; 0x8e0 <__stack+0x81>
						{
							UART_enuSendString("\r\nLogged in Successfully");
     7f0:	8d e3       	ldi	r24, 0x3D	; 61
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
     7f8:	3f ef       	ldi	r19, 0xFF	; 255
     7fa:	89 e6       	ldi	r24, 0x69	; 105
     7fc:	98 e1       	ldi	r25, 0x18	; 24
     7fe:	31 50       	subi	r19, 0x01	; 1
     800:	80 40       	sbci	r24, 0x00	; 0
     802:	90 40       	sbci	r25, 0x00	; 0
     804:	e1 f7       	brne	.-8      	; 0x7fe <main+0x3a0>
     806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     808:	00 00       	nop
							_delay_ms(500);
							UART_enuSendString("\r\nWelcome Admin\r\n");
     80a:	86 e5       	ldi	r24, 0x56	; 86
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
     812:	2f ef       	ldi	r18, 0xFF	; 255
     814:	39 e6       	ldi	r19, 0x69	; 105
     816:	88 e1       	ldi	r24, 0x18	; 24
     818:	21 50       	subi	r18, 0x01	; 1
     81a:	30 40       	sbci	r19, 0x00	; 0
     81c:	80 40       	sbci	r24, 0x00	; 0
     81e:	e1 f7       	brne	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     820:	00 c0       	rjmp	.+0      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     822:	00 00       	nop
							_delay_ms(500);
							LoginSystem_u8TrialsLeft =3;
							Program_Status_Flag = ADMIN_MENU_STATUS;
     824:	84 e0       	ldi	r24, 0x04	; 4
     826:	89 83       	std	Y+1, r24	; 0x01
						{
							UART_enuSendString("\r\nLogged in Successfully");
							_delay_ms(500);
							UART_enuSendString("\r\nWelcome Admin\r\n");
							_delay_ms(500);
							LoginSystem_u8TrialsLeft =3;
     828:	0f 2e       	mov	r0, r31
     82a:	f3 e0       	ldi	r31, 0x03	; 3
     82c:	9f 2e       	mov	r9, r31
     82e:	f0 2d       	mov	r31, r0
     830:	5c c0       	rjmp	.+184    	; 0x8ea <__stack+0x8b>
						}
						else
						{
							for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
							{
								LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     832:	e0 2e       	mov	r14, r16
     834:	f1 2c       	mov	r15, r1
     836:	2b e0       	ldi	r18, 0x0B	; 11
     838:	2e 9d       	mul	r18, r14
     83a:	c0 01       	movw	r24, r0
     83c:	2f 9d       	mul	r18, r15
     83e:	90 0d       	add	r25, r0
     840:	11 24       	eor	r1, r1
     842:	be 01       	movw	r22, r28
     844:	66 5c       	subi	r22, 0xC6	; 198
     846:	7f 4f       	sbci	r23, 0xFF	; 255
     848:	2d e0       	ldi	r18, 0x0D	; 13
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	2c 0f       	add	r18, r28
     84e:	3d 1f       	adc	r19, r29
     850:	82 0f       	add	r24, r18
     852:	93 1f       	adc	r25, r19
     854:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LoginSystem_u8Strcmp>
     858:	88 23       	and	r24, r24
     85a:	b1 f0       	breq	.+44     	; 0x888 <__stack+0x29>
     85c:	2b e0       	ldi	r18, 0x0B	; 11
     85e:	2e 9d       	mul	r18, r14
     860:	c0 01       	movw	r24, r0
     862:	2f 9d       	mul	r18, r15
     864:	90 0d       	add	r25, r0
     866:	11 24       	eor	r1, r1
     868:	05 96       	adiw	r24, 0x05	; 5
     86a:	be 01       	movw	r22, r28
     86c:	61 5c       	subi	r22, 0xC1	; 193
     86e:	7f 4f       	sbci	r23, 0xFF	; 255
     870:	2d e0       	ldi	r18, 0x0D	; 13
     872:	30 e0       	ldi	r19, 0x00	; 0
     874:	2c 0f       	add	r18, r28
     876:	3d 1f       	adc	r19, r29
     878:	82 0f       	add	r24, r18
     87a:	93 1f       	adc	r25, r19
     87c:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LoginSystem_u8Strcmp>
     880:	88 23       	and	r24, r24
     882:	21 f0       	breq	.+8      	; 0x88c <__stack+0x2d>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	03 c0       	rjmp	.+6      	; 0x88e <__stack+0x2f>
     888:	80 e0       	ldi	r24, 0x00	; 0
     88a:	01 c0       	rjmp	.+2      	; 0x88e <__stack+0x2f>
     88c:	80 e0       	ldi	r24, 0x00	; 0
     88e:	b8 2e       	mov	r11, r24
								if (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)
     890:	31 e0       	ldi	r19, 0x01	; 1
     892:	83 13       	cpse	r24, r19
     894:	23 c0       	rjmp	.+70     	; 0x8dc <__stack+0x7d>
								{
									if(LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER )// pro>>>>   // rem: key or not
     896:	8b e0       	ldi	r24, 0x0B	; 11
     898:	8e 9d       	mul	r24, r14
     89a:	f0 01       	movw	r30, r0
     89c:	8f 9d       	mul	r24, r15
     89e:	f0 0d       	add	r31, r0
     8a0:	11 24       	eor	r1, r1
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	8c 0f       	add	r24, r28
     8a8:	9d 1f       	adc	r25, r29
     8aa:	e8 0f       	add	r30, r24
     8ac:	f9 1f       	adc	r31, r25
     8ae:	86 89       	ldd	r24, Z+22	; 0x16
     8b0:	82 30       	cpi	r24, 0x02	; 2
     8b2:	a1 f4       	brne	.+40     	; 0x8dc <__stack+0x7d>
									{
									UART_enuSendString("\r\nLogged in Successfully\r\n");
     8b4:	88 e6       	ldi	r24, 0x68	; 104
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
     8bc:	9f ef       	ldi	r25, 0xFF	; 255
     8be:	29 e6       	ldi	r18, 0x69	; 105
     8c0:	38 e1       	ldi	r19, 0x18	; 24
     8c2:	91 50       	subi	r25, 0x01	; 1
     8c4:	20 40       	sbci	r18, 0x00	; 0
     8c6:	30 40       	sbci	r19, 0x00	; 0
     8c8:	e1 f7       	brne	.-8      	; 0x8c2 <__stack+0x63>
     8ca:	00 c0       	rjmp	.+0      	; 0x8cc <__stack+0x6d>
     8cc:	00 00       	nop
									_delay_ms(500);
									LoginSystem_u8TrialsLeft =3;
									Program_Status_Flag = REMOTED_USER_MENU_STATUS;
     8ce:	88 e0       	ldi	r24, 0x08	; 8
     8d0:	89 83       	std	Y+1, r24	; 0x01
								{
									if(LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER )// pro>>>>   // rem: key or not
									{
									UART_enuSendString("\r\nLogged in Successfully\r\n");
									_delay_ms(500);
									LoginSystem_u8TrialsLeft =3;
     8d2:	0f 2e       	mov	r0, r31
     8d4:	f3 e0       	ldi	r31, 0x03	; 3
     8d6:	9f 2e       	mov	r9, r31
     8d8:	f0 2d       	mov	r31, r0
									Program_Status_Flag = REMOTED_USER_MENU_STATUS;
									break;
     8da:	07 c0       	rjmp	.+14     	; 0x8ea <__stack+0x8b>
							Program_Status_Flag = ADMIN_MENU_STATUS;
							
						}
						else
						{
							for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     8dc:	0f 5f       	subi	r16, 0xFF	; 255
     8de:	01 c0       	rjmp	.+2      	; 0x8e2 <__stack+0x83>
     8e0:	00 e0       	ldi	r16, 0x00	; 0
     8e2:	89 ad       	ldd	r24, Y+57	; 0x39
     8e4:	08 17       	cp	r16, r24
     8e6:	08 f4       	brcc	.+2      	; 0x8ea <__stack+0x8b>
     8e8:	a4 cf       	rjmp	.-184    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
									}
								}
							}

						}
						if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
     8ea:	d1 10       	cpse	r13, r1
     8ec:	29 c0       	rjmp	.+82     	; 0x940 <__stack+0xe1>
     8ee:	b1 10       	cpse	r11, r1
     8f0:	27 c0       	rjmp	.+78     	; 0x940 <__stack+0xe1>
						{
							LoginSystem_u8TrialsLeft--;
     8f2:	0f ef       	ldi	r16, 0xFF	; 255
     8f4:	09 0d       	add	r16, r9
							UART_enuSendString("\r\nWrong Username or Password");
     8f6:	83 e8       	ldi	r24, 0x83	; 131
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
     8fe:	8f ef       	ldi	r24, 0xFF	; 255
     900:	95 ea       	ldi	r25, 0xA5	; 165
     902:	2e e0       	ldi	r18, 0x0E	; 14
     904:	81 50       	subi	r24, 0x01	; 1
     906:	90 40       	sbci	r25, 0x00	; 0
     908:	20 40       	sbci	r18, 0x00	; 0
     90a:	e1 f7       	brne	.-8      	; 0x904 <__stack+0xa5>
     90c:	00 c0       	rjmp	.+0      	; 0x90e <__stack+0xaf>
     90e:	00 00       	nop
							_delay_ms(300);
							UART_enuSendString("\r\nRemaining Trials: ");
     910:	80 ea       	ldi	r24, 0xA0	; 160
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
							UART_enuSendChar('0'+LoginSystem_u8TrialsLeft);
     918:	8f e2       	ldi	r24, 0x2F	; 47
     91a:	89 0d       	add	r24, r9
     91c:	0e 94 ed 0b 	call	0x17da	; 0x17da <UART_enuSendChar>
     920:	3f ef       	ldi	r19, 0xFF	; 255
     922:	83 ed       	ldi	r24, 0xD3	; 211
     924:	90 e3       	ldi	r25, 0x30	; 48
     926:	31 50       	subi	r19, 0x01	; 1
     928:	80 40       	sbci	r24, 0x00	; 0
     92a:	90 40       	sbci	r25, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <__stack+0xc7>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0xd1>
     930:	00 00       	nop
							_delay_ms(1000);
							if (LoginSystem_u8TrialsLeft == 0)
     932:	01 11       	cpse	r16, r1
     934:	04 c0       	rjmp	.+8      	; 0x93e <__stack+0xdf>
							{
								Program_Status_Flag = BLOCKING_STATUS;
     936:	86 e0       	ldi	r24, 0x06	; 6
     938:	89 83       	std	Y+1, r24	; 0x01
							}

						}
						if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
						{
							LoginSystem_u8TrialsLeft--;
     93a:	90 2e       	mov	r9, r16
     93c:	01 c0       	rjmp	.+2      	; 0x940 <__stack+0xe1>
     93e:	90 2e       	mov	r9, r16
				Program_Status_Flag = ADMIN_LOGIN_PAGE_STATUS;
			}

		}

		while (Program_Status_Flag == ADMIN_LOGIN_PAGE_STATUS)
     940:	89 81       	ldd	r24, Y+1	; 0x01
     942:	82 30       	cpi	r24, 0x02	; 2
     944:	09 f4       	brne	.+2      	; 0x948 <__stack+0xe9>
     946:	32 cf       	rjmp	.-412    	; 0x7ac <main+0x34e>
     948:	ad c1       	rjmp	.+858    	; 0xca4 <__stack+0x445>
		while (Program_Status_Flag == ADMIN_MENU_STATUS)
		{
			
			while(ShowToUser == MAIN_MENU)
			{
				UART_enuSendString("\r\n1-Add User");
     94a:	85 eb       	ldi	r24, 0xB5	; 181
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
				UART_enuSendString("\r\n2-Remove User");
     952:	82 ec       	ldi	r24, 0xC2	; 194
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
				UART_enuSendString("\r\n3-Room1");
     95a:	82 ed       	ldi	r24, 0xD2	; 210
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
				UART_enuSendString("\r\n4-Room2");
     962:	8c ed       	ldi	r24, 0xDC	; 220
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
				UART_enuSendString("\r\n5-Room3");
     96a:	86 ee       	ldi	r24, 0xE6	; 230
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
				UART_enuSendString("\r\n6-Room4");
     972:	80 ef       	ldi	r24, 0xF0	; 240
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
				UART_enuSendString("\r\n7-Room5");
     97a:	8a ef       	ldi	r24, 0xFA	; 250
     97c:	91 e0       	ldi	r25, 0x01	; 1
     97e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
				UART_enuSendString("\r\n8-Dimmer");
     982:	84 e0       	ldi	r24, 0x04	; 4
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
				UART_enuSendString("\r\n9-Door\r\n");
     98a:	8f e0       	ldi	r24, 0x0F	; 15
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
			//	UART_enuSendString("\r\n10-Air Conditioner\r\n");
				
				UART_enuRecieveChar(&UART_CHOICE);
     992:	ce 01       	movw	r24, r28
     994:	8b 5b       	subi	r24, 0xBB	; 187
     996:	9f 4f       	sbci	r25, 0xFF	; 255
     998:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <UART_enuRecieveChar>
				switch(UART_CHOICE)
     99c:	26 96       	adiw	r28, 0x06	; 6
     99e:	ef ad       	ldd	r30, Y+63	; 0x3f
     9a0:	26 97       	sbiw	r28, 0x06	; 6
     9a2:	8e 2f       	mov	r24, r30
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	fc 01       	movw	r30, r24
     9a8:	f1 97       	sbiw	r30, 0x31	; 49
     9aa:	e9 30       	cpi	r30, 0x09	; 9
     9ac:	f1 05       	cpc	r31, r1
     9ae:	30 f5       	brcc	.+76     	; 0x9fc <__stack+0x19d>
     9b0:	e6 5d       	subi	r30, 0xD6	; 214
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	0c 94 4a 0c 	jmp	0x1894	; 0x1894 <__tablejump2__>
				{
					case '1':
					ShowToUser = ADD_USER_COMMAND;
     9b8:	16 e0       	ldi	r17, 0x06	; 6
     9ba:	2f c0       	rjmp	.+94     	; 0xa1a <__stack+0x1bb>
					break;
					case '2':
					ShowToUser = REMOVE_USER_COMMAND;
					break;
					case '3':
					SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
     9c2:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     9c4:	2a c0       	rjmp	.+84     	; 0xa1a <__stack+0x1bb>
					case '4':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
     9c6:	82 e0       	ldi	r24, 0x02	; 2
     9c8:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
     9cc:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     9ce:	25 c0       	rjmp	.+74     	; 0xa1a <__stack+0x1bb>
					case '5':
					SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
     9d0:	83 e0       	ldi	r24, 0x03	; 3
     9d2:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     9d6:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     9d8:	20 c0       	rjmp	.+64     	; 0xa1a <__stack+0x1bb>
					case '6':
					SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
     9da:	84 e0       	ldi	r24, 0x04	; 4
     9dc:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     9e0:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     9e2:	1b c0       	rjmp	.+54     	; 0xa1a <__stack+0x1bb>
					case '7':
					SPI_ui8TransmitRecive(ROOM5_LED_TOGGLE);
     9e4:	85 e0       	ldi	r24, 0x05	; 5
     9e6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     9ea:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     9ec:	16 c0       	rjmp	.+44     	; 0xa1a <__stack+0x1bb>
					case '8':
					SPI_ui8TransmitRecive(DIMMER);
     9ee:	8c e0       	ldi	r24, 0x0C	; 12
     9f0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SPI_ui8TransmitRecive>
					ShowToUser = DIMMER_MENU;
     9f4:	18 e0       	ldi	r17, 0x08	; 8
					break;
     9f6:	11 c0       	rjmp	.+34     	; 0xa1a <__stack+0x1bb>
					case '9':
					ShowToUser = DOOR_MENU;  
     9f8:	1a e0       	ldi	r17, 0x0A	; 10
					break;
     9fa:	0f c0       	rjmp	.+30     	; 0xa1a <__stack+0x1bb>
					/*case '10':
					ShowToUser = AIR_COND_MENU;
					break;
					*/
					default:
					UART_enuSendString("\r\nInvalid Choice\r\n");
     9fc:	8a e1       	ldi	r24, 0x1A	; 26
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
     a04:	2f ef       	ldi	r18, 0xFF	; 255
     a06:	33 ed       	ldi	r19, 0xD3	; 211
     a08:	80 e3       	ldi	r24, 0x30	; 48
     a0a:	21 50       	subi	r18, 0x01	; 1
     a0c:	30 40       	sbci	r19, 0x00	; 0
     a0e:	80 40       	sbci	r24, 0x00	; 0
     a10:	e1 f7       	brne	.-8      	; 0xa0a <__stack+0x1ab>
     a12:	00 c0       	rjmp	.+0      	; 0xa14 <__stack+0x1b5>
     a14:	00 00       	nop
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
					break;
     a16:	01 c0       	rjmp	.+2      	; 0xa1a <__stack+0x1bb>
				{
					case '1':
					ShowToUser = ADD_USER_COMMAND;
					break;
					case '2':
					ShowToUser = REMOVE_USER_COMMAND;
     a18:	17 e0       	ldi	r17, 0x07	; 7
		}
		*/
		while (Program_Status_Flag == ADMIN_MENU_STATUS)
		{
			
			while(ShowToUser == MAIN_MENU)
     a1a:	11 23       	and	r17, r17
     a1c:	09 f4       	brne	.+2      	; 0xa20 <__stack+0x1c1>
     a1e:	95 cf       	rjmp	.-214    	; 0x94a <__stack+0xeb>
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
					break;
				}
			}
			switch (ShowToUser)
     a20:	18 30       	cpi	r17, 0x08	; 8
     a22:	09 f4       	brne	.+2      	; 0xa26 <__stack+0x1c7>
     a24:	cb c0       	rjmp	.+406    	; 0xbbc <__stack+0x35d>
     a26:	30 f4       	brcc	.+12     	; 0xa34 <__stack+0x1d5>
     a28:	16 30       	cpi	r17, 0x06	; 6
     a2a:	59 f0       	breq	.+22     	; 0xa42 <__stack+0x1e3>
     a2c:	17 30       	cpi	r17, 0x07	; 7
     a2e:	09 f4       	brne	.+2      	; 0xa32 <__stack+0x1d3>
     a30:	a8 c0       	rjmp	.+336    	; 0xb82 <__stack+0x323>
     a32:	38 c1       	rjmp	.+624    	; 0xca4 <__stack+0x445>
     a34:	1a 30       	cpi	r17, 0x0A	; 10
     a36:	09 f4       	brne	.+2      	; 0xa3a <__stack+0x1db>
     a38:	f4 c0       	rjmp	.+488    	; 0xc22 <__stack+0x3c3>
     a3a:	1b 30       	cpi	r17, 0x0B	; 11
     a3c:	09 f4       	brne	.+2      	; 0xa40 <__stack+0x1e1>
     a3e:	12 c1       	rjmp	.+548    	; 0xc64 <__stack+0x405>
     a40:	31 c1       	rjmp	.+610    	; 0xca4 <__stack+0x445>
			{
				case ADD_USER_COMMAND:
					if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
     a42:	89 ad       	ldd	r24, Y+57	; 0x39
     a44:	84 30       	cpi	r24, 0x04	; 4
     a46:	08 f0       	brcs	.+2      	; 0xa4a <__stack+0x1eb>
     a48:	85 c0       	rjmp	.+266    	; 0xb54 <__stack+0x2f5>
					{
						LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     a4a:	2b e0       	ldi	r18, 0x0B	; 11
     a4c:	82 9f       	mul	r24, r18
     a4e:	c0 01       	movw	r24, r0
     a50:	11 24       	eor	r1, r1
     a52:	bc 01       	movw	r22, r24
     a54:	6b 5f       	subi	r22, 0xFB	; 251
     a56:	7f 4f       	sbci	r23, 0xFF	; 255
     a58:	2d e0       	ldi	r18, 0x0D	; 13
     a5a:	30 e0       	ldi	r19, 0x00	; 0
     a5c:	2c 0f       	add	r18, r28
     a5e:	3d 1f       	adc	r19, r29
     a60:	62 0f       	add	r22, r18
     a62:	73 1f       	adc	r23, r19
     a64:	82 0f       	add	r24, r18
     a66:	93 1f       	adc	r25, r19
     a68:	0e 94 37 01 	call	0x26e	; 0x26e <LoginSystem_enuGetDataFromUserBY_UART>
						UART_enuSendString("\r\n1-Remoted");
     a6c:	8d e2       	ldi	r24, 0x2D	; 45
     a6e:	92 e0       	ldi	r25, 0x02	; 2
     a70:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
						UART_enuSendString("\r\n2-Promoted");
     a74:	89 e3       	ldi	r24, 0x39	; 57
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
						UART_enuSendString("\r\n3-Nonremoted");
     a7c:	86 e4       	ldi	r24, 0x46	; 70
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
						UART_enuSendString("\r\n\r\nPriority Arrangment: Promoted > Nonremoted (LCD+Keypad) > Remoted\r\n");
     a84:	85 e5       	ldi	r24, 0x55	; 85
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
						UART_enuRecieveChar(&UART_CHOICE);
     a8c:	ce 01       	movw	r24, r28
     a8e:	8b 5b       	subi	r24, 0xBB	; 187
     a90:	9f 4f       	sbci	r25, 0xFF	; 255
     a92:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <UART_enuRecieveChar>
						if (UART_CHOICE == '1')
     a96:	26 96       	adiw	r28, 0x06	; 6
     a98:	8f ad       	ldd	r24, Y+63	; 0x3f
     a9a:	26 97       	sbiw	r28, 0x06	; 6
     a9c:	81 33       	cpi	r24, 0x31	; 49
     a9e:	69 f4       	brne	.+26     	; 0xaba <__stack+0x25b>
						LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = REMOTED_USER;
     aa0:	89 ad       	ldd	r24, Y+57	; 0x39
     aa2:	e1 e0       	ldi	r30, 0x01	; 1
     aa4:	f0 e0       	ldi	r31, 0x00	; 0
     aa6:	ec 0f       	add	r30, r28
     aa8:	fd 1f       	adc	r31, r29
     aaa:	3b e0       	ldi	r19, 0x0B	; 11
     aac:	83 9f       	mul	r24, r19
     aae:	e0 0d       	add	r30, r0
     ab0:	f1 1d       	adc	r31, r1
     ab2:	11 24       	eor	r1, r1
     ab4:	82 e0       	ldi	r24, 0x02	; 2
     ab6:	86 8b       	std	Z+22, r24	; 0x16
     ab8:	2a c0       	rjmp	.+84     	; 0xb0e <__stack+0x2af>
						else if (UART_CHOICE == '2')
     aba:	82 33       	cpi	r24, 0x32	; 50
     abc:	69 f4       	brne	.+26     	; 0xad8 <__stack+0x279>
						LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = PROMOTED_USER;
     abe:	89 ad       	ldd	r24, Y+57	; 0x39
     ac0:	e1 e0       	ldi	r30, 0x01	; 1
     ac2:	f0 e0       	ldi	r31, 0x00	; 0
     ac4:	ec 0f       	add	r30, r28
     ac6:	fd 1f       	adc	r31, r29
     ac8:	9b e0       	ldi	r25, 0x0B	; 11
     aca:	89 9f       	mul	r24, r25
     acc:	e0 0d       	add	r30, r0
     ace:	f1 1d       	adc	r31, r1
     ad0:	11 24       	eor	r1, r1
     ad2:	83 e0       	ldi	r24, 0x03	; 3
     ad4:	86 8b       	std	Z+22, r24	; 0x16
     ad6:	1b c0       	rjmp	.+54     	; 0xb0e <__stack+0x2af>
						else if (UART_CHOICE == '3')
     ad8:	83 33       	cpi	r24, 0x33	; 51
     ada:	61 f4       	brne	.+24     	; 0xaf4 <__stack+0x295>
						LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = NORMAL_USER;
     adc:	89 ad       	ldd	r24, Y+57	; 0x39
     ade:	e1 e0       	ldi	r30, 0x01	; 1
     ae0:	f0 e0       	ldi	r31, 0x00	; 0
     ae2:	ec 0f       	add	r30, r28
     ae4:	fd 1f       	adc	r31, r29
     ae6:	2b e0       	ldi	r18, 0x0B	; 11
     ae8:	82 9f       	mul	r24, r18
     aea:	e0 0d       	add	r30, r0
     aec:	f1 1d       	adc	r31, r1
     aee:	11 24       	eor	r1, r1
     af0:	16 8a       	std	Z+22, r1	; 0x16
     af2:	0d c0       	rjmp	.+26     	; 0xb0e <__stack+0x2af>
						else{
							UART_enuSendString("\r\nInvalid Choice\r\n");/////////////////////////////////////////////////////////////fel a5er
     af4:	8a e1       	ldi	r24, 0x1A	; 26
     af6:	92 e0       	ldi	r25, 0x02	; 2
     af8:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
     afc:	3f ef       	ldi	r19, 0xFF	; 255
     afe:	83 ed       	ldi	r24, 0xD3	; 211
     b00:	90 e3       	ldi	r25, 0x30	; 48
     b02:	31 50       	subi	r19, 0x01	; 1
     b04:	80 40       	sbci	r24, 0x00	; 0
     b06:	90 40       	sbci	r25, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <__stack+0x2a3>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <__stack+0x2ad>
     b0c:	00 00       	nop
						_delay_ms(1000);}
						LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
     b0e:	89 ad       	ldd	r24, Y+57	; 0x39
     b10:	a1 e0       	ldi	r26, 0x01	; 1
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	ac 0f       	add	r26, r28
     b16:	bd 1f       	adc	r27, r29
     b18:	2b e0       	ldi	r18, 0x0B	; 11
     b1a:	82 9f       	mul	r24, r18
     b1c:	a0 0d       	add	r26, r0
     b1e:	b1 1d       	adc	r27, r1
     b20:	11 24       	eor	r1, r1
     b22:	fd 01       	movw	r30, r26
     b24:	3c 96       	adiw	r30, 0x0c	; 12
     b26:	ce 01       	movw	r24, r28
     b28:	c9 96       	adiw	r24, 0x39	; 57
     b2a:	6c 01       	movw	r12, r24
     b2c:	1c 96       	adiw	r26, 0x0c	; 12
     b2e:	ec 90       	ld	r14, X
     b30:	f1 80       	ldd	r15, Z+1	; 0x01
     b32:	02 81       	ldd	r16, Z+2	; 0x02
     b34:	13 81       	ldd	r17, Z+3	; 0x03
     b36:	24 81       	ldd	r18, Z+4	; 0x04
     b38:	35 81       	ldd	r19, Z+5	; 0x05
     b3a:	46 81       	ldd	r20, Z+6	; 0x06
     b3c:	57 81       	ldd	r21, Z+7	; 0x07
     b3e:	60 85       	ldd	r22, Z+8	; 0x08
     b40:	71 85       	ldd	r23, Z+9	; 0x09
     b42:	82 85       	ldd	r24, Z+10	; 0x0a
     b44:	0e 94 52 00 	call	0xa4	; 0xa4 <LoginSystem_SaveNewUser>
						UART_enuSendString("\r\nRegistered Successfully\r\n");
     b48:	8d e9       	ldi	r24, 0x9D	; 157
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
						UART_enuSendString("\r\nReached The Max Number of Stored Users");
						UART_enuSendString("\r\nCouldn't Store A New User");
						UART_enuSendString("\r\nReturning to Main Menu\r\n");
						_delay_ms(700);
					}
					ShowToUser=LOG_OUT_CHOICE;
     b50:	1b e0       	ldi	r17, 0x0B	; 11
     b52:	a8 c0       	rjmp	.+336    	; 0xca4 <__stack+0x445>
						LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
						UART_enuSendString("\r\nRegistered Successfully\r\n");
					}
					else
					{
						UART_enuSendString("\r\nReached The Max Number of Stored Users");
     b54:	89 eb       	ldi	r24, 0xB9	; 185
     b56:	92 e0       	ldi	r25, 0x02	; 2
     b58:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
						UART_enuSendString("\r\nCouldn't Store A New User");
     b5c:	82 ee       	ldi	r24, 0xE2	; 226
     b5e:	92 e0       	ldi	r25, 0x02	; 2
     b60:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
						UART_enuSendString("\r\nReturning to Main Menu\r\n");
     b64:	8c e2       	ldi	r24, 0x2C	; 44
     b66:	93 e0       	ldi	r25, 0x03	; 3
     b68:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
     b6c:	9f ef       	ldi	r25, 0xFF	; 255
     b6e:	2d e2       	ldi	r18, 0x2D	; 45
     b70:	32 e2       	ldi	r19, 0x22	; 34
     b72:	91 50       	subi	r25, 0x01	; 1
     b74:	20 40       	sbci	r18, 0x00	; 0
     b76:	30 40       	sbci	r19, 0x00	; 0
     b78:	e1 f7       	brne	.-8      	; 0xb72 <__stack+0x313>
     b7a:	00 c0       	rjmp	.+0      	; 0xb7c <__stack+0x31d>
     b7c:	00 00       	nop
						_delay_ms(700);
					}
					ShowToUser=LOG_OUT_CHOICE;
     b7e:	1b e0       	ldi	r17, 0x0B	; 11
     b80:	91 c0       	rjmp	.+290    	; 0xca4 <__stack+0x445>
				break;
				
				case REMOVE_USER_COMMAND:
					if (LoginSystem_RemoveUser(LoginSystem_AstrUsers,&LoginSystem_NumOfRegisteredUsers) == TRUE)
     b82:	be 01       	movw	r22, r28
     b84:	67 5c       	subi	r22, 0xC7	; 199
     b86:	7f 4f       	sbci	r23, 0xFF	; 255
     b88:	ce 01       	movw	r24, r28
     b8a:	0d 96       	adiw	r24, 0x0d	; 13
     b8c:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LoginSystem_RemoveUser>
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	29 f4       	brne	.+10     	; 0xb9e <__stack+0x33f>
						{UART_enuSendString("\r\nRemoved Successfully\r\n");	ShowToUser=LOG_OUT_CHOICE;}
     b94:	8e ef       	ldi	r24, 0xFE	; 254
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
     b9c:	04 c0       	rjmp	.+8      	; 0xba6 <__stack+0x347>
					else	{UART_enuSendString("\r\nUsername not Found \r\nReturning to Main Menu\r\n");}
     b9e:	87 e1       	ldi	r24, 0x17	; 23
     ba0:	93 e0       	ldi	r25, 0x03	; 3
     ba2:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
     ba6:	8f ef       	ldi	r24, 0xFF	; 255
     ba8:	9d e2       	ldi	r25, 0x2D	; 45
     baa:	22 e2       	ldi	r18, 0x22	; 34
     bac:	81 50       	subi	r24, 0x01	; 1
     bae:	90 40       	sbci	r25, 0x00	; 0
     bb0:	20 40       	sbci	r18, 0x00	; 0
     bb2:	e1 f7       	brne	.-8      	; 0xbac <__stack+0x34d>
     bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <__stack+0x357>
     bb6:	00 00       	nop
					ShowToUser=MAIN_MENU;
     bb8:	10 e0       	ldi	r17, 0x00	; 0
     bba:	74 c0       	rjmp	.+232    	; 0xca4 <__stack+0x445>
					_delay_ms(700);
				break;
				
				case DIMMER_MENU:
					UART_enuSendString("\r\nEnter The Percentage of Brightness: ");
     bbc:	87 e4       	ldi	r24, 0x47	; 71
     bbe:	93 e0       	ldi	r25, 0x03	; 3
     bc0:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
					UART_enuRecieveChar(&Dimmer_Percentage_Tens);
     bc4:	ce 01       	movw	r24, r28
     bc6:	8a 5b       	subi	r24, 0xBA	; 186
     bc8:	9f 4f       	sbci	r25, 0xFF	; 255
     bca:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Tens);
     bce:	27 96       	adiw	r28, 0x07	; 7
     bd0:	8f ad       	ldd	r24, Y+63	; 0x3f
     bd2:	27 97       	sbiw	r28, 0x07	; 7
     bd4:	0e 94 ed 0b 	call	0x17da	; 0x17da <UART_enuSendChar>
					Dimmer_Percentage_Tens = Dimmer_Percentage_Tens - '0';
     bd8:	27 96       	adiw	r28, 0x07	; 7
     bda:	8f ad       	ldd	r24, Y+63	; 0x3f
     bdc:	27 97       	sbiw	r28, 0x07	; 7
     bde:	80 53       	subi	r24, 0x30	; 48
     be0:	27 96       	adiw	r28, 0x07	; 7
     be2:	8f af       	std	Y+63, r24	; 0x3f
     be4:	27 97       	sbiw	r28, 0x07	; 7
					
					UART_enuRecieveChar(&Dimmer_Percentage_Ones);
     be6:	ce 01       	movw	r24, r28
     be8:	89 5b       	subi	r24, 0xB9	; 185
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Ones);
     bf0:	28 96       	adiw	r28, 0x08	; 8
     bf2:	8f ad       	ldd	r24, Y+63	; 0x3f
     bf4:	28 97       	sbiw	r28, 0x08	; 8
     bf6:	0e 94 ed 0b 	call	0x17da	; 0x17da <UART_enuSendChar>
					Dimmer_Percentage_Ones = Dimmer_Percentage_Ones -'0';
     bfa:	28 96       	adiw	r28, 0x08	; 8
     bfc:	9f ad       	ldd	r25, Y+63	; 0x3f
     bfe:	28 97       	sbiw	r28, 0x08	; 8
     c00:	90 53       	subi	r25, 0x30	; 48
     c02:	28 96       	adiw	r28, 0x08	; 8
     c04:	9f af       	std	Y+63, r25	; 0x3f
     c06:	28 97       	sbiw	r28, 0x08	; 8
					
					Dimmer_Percentage =10*Dimmer_Percentage_Tens + Dimmer_Percentage_Ones;
     c08:	27 96       	adiw	r28, 0x07	; 7
     c0a:	8f ad       	ldd	r24, Y+63	; 0x3f
     c0c:	27 97       	sbiw	r28, 0x07	; 7
     c0e:	88 0f       	add	r24, r24
     c10:	28 2f       	mov	r18, r24
     c12:	22 0f       	add	r18, r18
     c14:	22 0f       	add	r18, r18
     c16:	82 0f       	add	r24, r18
					
					SPI_ui8TransmitRecive(Dimmer_Percentage);
     c18:	89 0f       	add	r24, r25
     c1a:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SPI_ui8TransmitRecive>
					ShowToUser=LOG_OUT_CHOICE;
     c1e:	1b e0       	ldi	r17, 0x0B	; 11
				break;
     c20:	41 c0       	rjmp	.+130    	; 0xca4 <__stack+0x445>
				
				case DOOR_MENU:
					UART_enuSendString("\r\nDoor Options \r\n 1-Open Door\r\n 2-Close Door\r\n 0-Return to main menu\r\n ");
     c22:	8e e6       	ldi	r24, 0x6E	; 110
     c24:	93 e0       	ldi	r25, 0x03	; 3
     c26:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     c2a:	ce 01       	movw	r24, r28
     c2c:	8b 5b       	subi	r24, 0xBB	; 187
     c2e:	9f 4f       	sbci	r25, 0xFF	; 255
     c30:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     c34:	26 96       	adiw	r28, 0x06	; 6
     c36:	8f ad       	ldd	r24, Y+63	; 0x3f
     c38:	26 97       	sbiw	r28, 0x06	; 6
     c3a:	81 33       	cpi	r24, 0x31	; 49
     c3c:	29 f4       	brne	.+10     	; 0xc48 <__stack+0x3e9>
					{
						SPI_ui8TransmitRecive(OPEN_DOOR_COMMAND);	
     c3e:	8d e0       	ldi	r24, 0x0D	; 13
     c40:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SPI_ui8TransmitRecive>
						ShowToUser = LOG_OUT_CHOICE;
     c44:	1b e0       	ldi	r17, 0x0B	; 11
     c46:	2e c0       	rjmp	.+92     	; 0xca4 <__stack+0x445>
					}
					else if(UART_CHOICE == '2')
     c48:	82 33       	cpi	r24, 0x32	; 50
     c4a:	29 f4       	brne	.+10     	; 0xc56 <__stack+0x3f7>
					{
						SPI_ui8TransmitRecive(CLOSE_DOOR_COMMAND);
     c4c:	8e e0       	ldi	r24, 0x0E	; 14
     c4e:	0e 94 de 0b 	call	0x17bc	; 0x17bc <SPI_ui8TransmitRecive>
						ShowToUser = LOG_OUT_CHOICE;
     c52:	1b e0       	ldi	r17, 0x0B	; 11
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__stack+0x445>
					}
					else if (UART_CHOICE == '0') 
     c56:	80 33       	cpi	r24, 0x30	; 48
     c58:	11 f1       	breq	.+68     	; 0xc9e <__stack+0x43f>
						{ShowToUser = MAIN_MENU;} 
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = DOOR_MENU;}
     c5a:	86 eb       	ldi	r24, 0xB6	; 182
     c5c:	93 e0       	ldi	r25, 0x03	; 3
     c5e:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
     c62:	20 c0       	rjmp	.+64     	; 0xca4 <__stack+0x445>
				break;
				
				case LOG_OUT_CHOICE:
					UART_enuSendString("\r\n1-Log Out\r\n2-Return to main menu\r\n");
     c64:	8a ec       	ldi	r24, 0xCA	; 202
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     c6c:	ce 01       	movw	r24, r28
     c6e:	8b 5b       	subi	r24, 0xBB	; 187
     c70:	9f 4f       	sbci	r25, 0xFF	; 255
     c72:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     c76:	26 96       	adiw	r28, 0x06	; 6
     c78:	8f ad       	ldd	r24, Y+63	; 0x3f
     c7a:	26 97       	sbiw	r28, 0x06	; 6
     c7c:	81 33       	cpi	r24, 0x31	; 49
     c7e:	41 f4       	brne	.+16     	; 0xc90 <__stack+0x431>
						{
							Program_Status_Flag = IDLE_STATUS;	
     c80:	87 e0       	ldi	r24, 0x07	; 7
     c82:	89 83       	std	Y+1, r24	; 0x01
							ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu 
							UART_enuSendString("\r\nLogged Out\r\n");
     c84:	8f ee       	ldi	r24, 0xEF	; 239
     c86:	93 e0       	ldi	r25, 0x03	; 3
     c88:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
					UART_enuSendString("\r\n1-Log Out\r\n2-Return to main menu\r\n");
					UART_enuRecieveChar(&UART_CHOICE);
					if (UART_CHOICE == '1')
						{
							Program_Status_Flag = IDLE_STATUS;	
							ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu 
     c8c:	10 e0       	ldi	r17, 0x00	; 0
     c8e:	0a c0       	rjmp	.+20     	; 0xca4 <__stack+0x445>
							UART_enuSendString("\r\nLogged Out\r\n");
						}
				
					else if(UART_CHOICE == '2')
     c90:	82 33       	cpi	r24, 0x32	; 50
     c92:	39 f0       	breq	.+14     	; 0xca2 <__stack+0x443>
						{ShowToUser = MAIN_MENU;}
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = LOG_OUT_CHOICE;}
     c94:	86 eb       	ldi	r24, 0xB6	; 182
     c96:	93 e0       	ldi	r25, 0x03	; 3
     c98:	0e 94 f9 0b 	call	0x17f2	; 0x17f2 <UART_enuSendString>
     c9c:	03 c0       	rjmp	.+6      	; 0xca4 <__stack+0x445>
					{
						SPI_ui8TransmitRecive(CLOSE_DOOR_COMMAND);
						ShowToUser = LOG_OUT_CHOICE;
					}
					else if (UART_CHOICE == '0') 
						{ShowToUser = MAIN_MENU;} 
     c9e:	10 e0       	ldi	r17, 0x00	; 0
     ca0:	01 c0       	rjmp	.+2      	; 0xca4 <__stack+0x445>
							ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu 
							UART_enuSendString("\r\nLogged Out\r\n");
						}
				
					else if(UART_CHOICE == '2')
						{ShowToUser = MAIN_MENU;}
     ca2:	10 e0       	ldi	r17, 0x00	; 0
				_delay_ms(200);
			}

		}
		*/
		while (Program_Status_Flag == ADMIN_MENU_STATUS)
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	84 30       	cpi	r24, 0x04	; 4
     ca8:	09 f4       	brne	.+2      	; 0xcac <__stack+0x44d>
     caa:	b7 ce       	rjmp	.-658    	; 0xa1a <__stack+0x1bb>
     cac:	ac c0       	rjmp	.+344    	; 0xe06 <__stack+0x5a7>
			{

				u8 LoginSystem_u8TrueFlag;
			//	u8 LoginSystem_u8TrialsLeft =3;

				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
     cae:	be 01       	movw	r22, r28
     cb0:	61 5c       	subi	r22, 0xC1	; 193
     cb2:	7f 4f       	sbci	r23, 0xFF	; 255
     cb4:	ce 01       	movw	r24, r28
     cb6:	ca 96       	adiw	r24, 0x3a	; 58
     cb8:	0e 94 d7 00 	call	0x1ae	; 0x1ae <LoginSystem_enuGetDataFromUserByKeypad>
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     cbc:	00 e0       	ldi	r16, 0x00	; 0
     cbe:	33 c0       	rjmp	.+102    	; 0xd26 <__stack+0x4c7>
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     cc0:	e0 2e       	mov	r14, r16
     cc2:	f1 2c       	mov	r15, r1
     cc4:	2b e0       	ldi	r18, 0x0B	; 11
     cc6:	2e 9d       	mul	r18, r14
     cc8:	c0 01       	movw	r24, r0
     cca:	2f 9d       	mul	r18, r15
     ccc:	90 0d       	add	r25, r0
     cce:	11 24       	eor	r1, r1
     cd0:	be 01       	movw	r22, r28
     cd2:	66 5c       	subi	r22, 0xC6	; 198
     cd4:	7f 4f       	sbci	r23, 0xFF	; 255
     cd6:	2d e0       	ldi	r18, 0x0D	; 13
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	2c 0f       	add	r18, r28
     cdc:	3d 1f       	adc	r19, r29
     cde:	82 0f       	add	r24, r18
     ce0:	93 1f       	adc	r25, r19
     ce2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LoginSystem_u8Strcmp>
     ce6:	88 23       	and	r24, r24
     ce8:	b1 f0       	breq	.+44     	; 0xd16 <__stack+0x4b7>
     cea:	2b e0       	ldi	r18, 0x0B	; 11
     cec:	2e 9d       	mul	r18, r14
     cee:	c0 01       	movw	r24, r0
     cf0:	2f 9d       	mul	r18, r15
     cf2:	90 0d       	add	r25, r0
     cf4:	11 24       	eor	r1, r1
     cf6:	05 96       	adiw	r24, 0x05	; 5
     cf8:	be 01       	movw	r22, r28
     cfa:	61 5c       	subi	r22, 0xC1	; 193
     cfc:	7f 4f       	sbci	r23, 0xFF	; 255
     cfe:	2d e0       	ldi	r18, 0x0D	; 13
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	2c 0f       	add	r18, r28
     d04:	3d 1f       	adc	r19, r29
     d06:	82 0f       	add	r24, r18
     d08:	93 1f       	adc	r25, r19
     d0a:	0e 94 54 01 	call	0x2a8	; 0x2a8 <LoginSystem_u8Strcmp>
     d0e:	88 23       	and	r24, r24
     d10:	21 f0       	breq	.+8      	; 0xd1a <__stack+0x4bb>
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <__stack+0x4bd>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	01 c0       	rjmp	.+2      	; 0xd1c <__stack+0x4bd>
     d1a:	80 e0       	ldi	r24, 0x00	; 0
     d1c:	a8 2e       	mov	r10, r24
					if (LoginSystem_u8TrueFlag == TRUE)
     d1e:	31 e0       	ldi	r19, 0x01	; 1
     d20:	83 17       	cp	r24, r19
     d22:	29 f0       	breq	.+10     	; 0xd2e <__stack+0x4cf>
				u8 LoginSystem_u8TrueFlag;
			//	u8 LoginSystem_u8TrialsLeft =3;

				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     d24:	0f 5f       	subi	r16, 0xFF	; 255
     d26:	89 ad       	ldd	r24, Y+57	; 0x39
     d28:	08 17       	cp	r16, r24
     d2a:	50 f2       	brcs	.-108    	; 0xcc0 <__stack+0x461>
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <__stack+0x4d7>
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
					if (LoginSystem_u8TrueFlag == TRUE)
					{
						LoginSystem_u8TrialsLeft =3;
     d2e:	0f 2e       	mov	r0, r31
     d30:	f3 e0       	ldi	r31, 0x03	; 3
     d32:	9f 2e       	mov	r9, r31
     d34:	f0 2d       	mov	r31, r0
						break;
					}
				}

				if (LoginSystem_u8TrueFlag == FALSE)
     d36:	a1 10       	cpse	r10, r1
     d38:	36 c0       	rjmp	.+108    	; 0xda6 <__stack+0x547>
				{
					LoginSystem_u8TrialsLeft--;
     d3a:	9a 94       	dec	r9
					LCD_enuClearDisplay();
     d3c:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Wrong Username");
     d40:	8e ef       	ldi	r24, 0xFE	; 254
     d42:	93 e0       	ldi	r25, 0x03	; 3
     d44:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("or Password");
     d50:	84 e9       	ldi	r24, 0x94	; 148
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
     d58:	8f ef       	ldi	r24, 0xFF	; 255
     d5a:	92 e5       	ldi	r25, 0x52	; 82
     d5c:	27 e0       	ldi	r18, 0x07	; 7
     d5e:	81 50       	subi	r24, 0x01	; 1
     d60:	90 40       	sbci	r25, 0x00	; 0
     d62:	20 40       	sbci	r18, 0x00	; 0
     d64:	e1 f7       	brne	.-8      	; 0xd5e <__stack+0x4ff>
     d66:	00 c0       	rjmp	.+0      	; 0xd68 <__stack+0x509>
     d68:	00 00       	nop
					_delay_ms(150);
					LCD_enuClearDisplay();
     d6a:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Remaining Trials: ");
     d6e:	82 ea       	ldi	r24, 0xA2	; 162
     d70:	91 e0       	ldi	r25, 0x01	; 1
     d72:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
     d7e:	69 2d       	mov	r22, r9
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	0e 94 df 09 	call	0x13be	; 0x13be <LCD_enuDisplayUnsignedInteger>
     d8a:	3f ef       	ldi	r19, 0xFF	; 255
     d8c:	82 e5       	ldi	r24, 0x52	; 82
     d8e:	97 e0       	ldi	r25, 0x07	; 7
     d90:	31 50       	subi	r19, 0x01	; 1
     d92:	80 40       	sbci	r24, 0x00	; 0
     d94:	90 40       	sbci	r25, 0x00	; 0
     d96:	e1 f7       	brne	.-8      	; 0xd90 <__stack+0x531>
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <__stack+0x53b>
     d9a:	00 00       	nop
					_delay_ms(150);
					if (LoginSystem_u8TrialsLeft == 0)
     d9c:	91 10       	cpse	r9, r1
     d9e:	33 c0       	rjmp	.+102    	; 0xe06 <__stack+0x5a7>
					{
						Program_Status_Flag = BLOCKING_STATUS;
     da0:	86 e0       	ldi	r24, 0x06	; 6
     da2:	89 83       	std	Y+1, r24	; 0x01
     da4:	30 c0       	rjmp	.+96     	; 0xe06 <__stack+0x5a7>
					}
				}
				else
				{
					LCD_enuClearDisplay();
     da6:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Logged in");
     daa:	8d e0       	ldi	r24, 0x0D	; 13
     dac:	94 e0       	ldi	r25, 0x04	; 4
     dae:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	81 e0       	ldi	r24, 0x01	; 1
     db6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Successfully");
     dba:	89 e4       	ldi	r24, 0x49	; 73
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
     dc2:	2f ef       	ldi	r18, 0xFF	; 255
     dc4:	3d e2       	ldi	r19, 0x2D	; 45
     dc6:	82 e2       	ldi	r24, 0x22	; 34
     dc8:	21 50       	subi	r18, 0x01	; 1
     dca:	30 40       	sbci	r19, 0x00	; 0
     dcc:	80 40       	sbci	r24, 0x00	; 0
     dce:	e1 f7       	brne	.-8      	; 0xdc8 <__stack+0x569>
     dd0:	00 c0       	rjmp	.+0      	; 0xdd2 <__stack+0x573>
     dd2:	00 00       	nop
					_delay_ms(700);
					LCD_enuClearDisplay();
     dd4:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Welcome");
     dd8:	87 e1       	ldi	r24, 0x17	; 23
     dda:	94 e0       	ldi	r25, 0x04	; 4
     ddc:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("User");
     de8:	8d eb       	ldi	r24, 0xBD	; 189
     dea:	91 e0       	ldi	r25, 0x01	; 1
     dec:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
     df0:	9f ef       	ldi	r25, 0xFF	; 255
     df2:	2d e2       	ldi	r18, 0x2D	; 45
     df4:	32 e2       	ldi	r19, 0x22	; 34
     df6:	91 50       	subi	r25, 0x01	; 1
     df8:	20 40       	sbci	r18, 0x00	; 0
     dfa:	30 40       	sbci	r19, 0x00	; 0
     dfc:	e1 f7       	brne	.-8      	; 0xdf6 <__stack+0x597>
     dfe:	00 c0       	rjmp	.+0      	; 0xe00 <__stack+0x5a1>
     e00:	00 00       	nop
					_delay_ms(700);
					Program_Status_Flag = USER_MENU_STATUS;
     e02:	85 e0       	ldi	r24, 0x05	; 5
     e04:	89 83       	std	Y+1, r24	; 0x01
				
			}
		}
		
		//if (Program_Status_Flag == USER_LOGIN_PAGE_STATUS);
		while (Program_Status_Flag == USER_LOGIN_PAGE_STATUS)///off line user should have interrupt
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	83 30       	cpi	r24, 0x03	; 3
     e0a:	09 f4       	brne	.+2      	; 0xe0e <__stack+0x5af>
     e0c:	50 cf       	rjmp	.-352    	; 0xcae <__stack+0x44f>


/************************************************************************************************************/
/************************************************************************************************************/

		if (Program_Status_Flag == USER_MENU_STATUS)//off line user menu
     e0e:	85 30       	cpi	r24, 0x05	; 5
     e10:	09 f0       	breq	.+2      	; 0xe14 <__stack+0x5b5>
     e12:	ab cc       	rjmp	.-1706   	; 0x76a <main+0x30c>
		{
							LCD_enuClearDisplay();
     e14:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
							LCD_enuDisplayString("Welcome User");
     e18:	8f e1       	ldi	r24, 0x1F	; 31
     e1a:	94 e0       	ldi	r25, 0x04	; 4
     e1c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
							LCD_enuDisplayString(LoginSystem_strAdmin.UserName);
     e28:	ce 01       	movw	r24, r28
     e2a:	02 96       	adiw	r24, 0x02	; 2
     e2c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	99 e6       	ldi	r25, 0x69	; 105
     e34:	28 e1       	ldi	r18, 0x18	; 24
     e36:	81 50       	subi	r24, 0x01	; 1
     e38:	90 40       	sbci	r25, 0x00	; 0
     e3a:	20 40       	sbci	r18, 0x00	; 0
     e3c:	e1 f7       	brne	.-8      	; 0xe36 <__stack+0x5d7>
     e3e:	00 c0       	rjmp	.+0      	; 0xe40 <__stack+0x5e1>
     e40:	00 00       	nop
							_delay_ms(500);
							LCD_enuClearDisplay();
     e42:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
							LCD_enuDisplayString("1-Lights 2-Dimmer");
     e46:	8c e2       	ldi	r24, 0x2C	; 44
     e48:	94 e0       	ldi	r25, 0x04	; 4
     e4a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     e4e:	60 e0       	ldi	r22, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	0e 94 77 0a 	call	0x14ee	; 0x14ee <LCD_enuSetCursorPosition>
							LCD_enuDisplayString("3-Air Cond");
     e56:	8e e3       	ldi	r24, 0x3E	; 62
     e58:	94 e0       	ldi	r25, 0x04	; 4
     e5a:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
							Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
     e5e:	ce 01       	movw	r24, r28
     e60:	8c 5b       	subi	r24, 0xBC	; 188
     e62:	9f 4f       	sbci	r25, 0xFF	; 255
     e64:	0e 94 fb 07 	call	0xff6	; 0xff6 <Keypad_enuGetPressedKey>
							switch (Keypad_Pressed_Key)
     e68:	25 96       	adiw	r28, 0x05	; 5
     e6a:	8f ad       	ldd	r24, Y+63	; 0x3f
     e6c:	25 97       	sbiw	r28, 0x05	; 5
     e6e:	81 53       	subi	r24, 0x31	; 49
     e70:	83 30       	cpi	r24, 0x03	; 3
     e72:	78 f0       	brcs	.+30     	; 0xe92 <__stack+0x633>
								//////////////
								break;


								default:
								LCD_enuClearDisplay();
     e74:	0e 94 99 0a 	call	0x1532	; 0x1532 <LCD_enuClearDisplay>
								LCD_enuDisplayString("Invalid Choice");
     e78:	89 e4       	ldi	r24, 0x49	; 73
     e7a:	94 e0       	ldi	r25, 0x04	; 4
     e7c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <LCD_enuDisplayString>
     e80:	3f ef       	ldi	r19, 0xFF	; 255
     e82:	83 ec       	ldi	r24, 0xC3	; 195
     e84:	99 e0       	ldi	r25, 0x09	; 9
     e86:	31 50       	subi	r19, 0x01	; 1
     e88:	80 40       	sbci	r24, 0x00	; 0
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <__stack+0x627>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <__stack+0x631>
     e90:	00 00       	nop
								_delay_ms(200);
								break;
								}
							Program_Status_Flag = IDLE_STATUS;
     e92:	87 e0       	ldi	r24, 0x07	; 7
     e94:	89 83       	std	Y+1, r24	; 0x01
     e96:	69 cc       	rjmp	.-1838   	; 0x76a <main+0x30c>

00000e98 <EEPROM_ui8ReadByteFromAddress>:


void EEPROM_ui8ReadByteFromAddress( const u16 u16Address ,  u8 * data)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1);
     e98:	e1 99       	sbic	0x1c, 1	; 28
     e9a:	fe cf       	rjmp	.-4      	; 0xe98 <EEPROM_ui8ReadByteFromAddress>
	/* Set up address register */
	EEAR = u16Address;
     e9c:	9f bb       	out	0x1f, r25	; 31
     e9e:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
     ea0:	8c b3       	in	r24, 0x1c	; 28
     ea2:	81 60       	ori	r24, 0x01	; 1
     ea4:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	* data = EEDR;
     ea6:	8d b3       	in	r24, 0x1d	; 29
     ea8:	fb 01       	movw	r30, r22
     eaa:	80 83       	st	Z, r24
     eac:	08 95       	ret

00000eae <EEPROM_vReadBlockFromAddress>:
	//return 1;
}

void EEPROM_vReadBlockFromAddress(const u16 uAddress, u8* dist,const u16 size)
{
     eae:	dc 01       	movw	r26, r24
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     eb0:	e1 99       	sbic	0x1c, 1	; 28
     eb2:	fe cf       	rjmp	.-4      	; 0xeb0 <EEPROM_vReadBlockFromAddress+0x2>
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	0f c0       	rjmp	.+30     	; 0xed8 <EEPROM_vReadBlockFromAddress+0x2a>
	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uAddress + counter;
     eba:	f9 01       	movw	r30, r18
     ebc:	ea 0f       	add	r30, r26
     ebe:	fb 1f       	adc	r31, r27
     ec0:	ff bb       	out	0x1f, r31	; 31
     ec2:	ee bb       	out	0x1e, r30	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
     ec4:	9c b3       	in	r25, 0x1c	; 28
     ec6:	91 60       	ori	r25, 0x01	; 1
     ec8:	9c bb       	out	0x1c, r25	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
     eca:	fb 01       	movw	r30, r22
     ecc:	e2 0f       	add	r30, r18
     ece:	f3 1f       	adc	r31, r19
     ed0:	9d b3       	in	r25, 0x1d	; 29
     ed2:	90 83       	st	Z, r25

		counter++;//increase the bytes counter
     ed4:	2f 5f       	subi	r18, 0xFF	; 255
     ed6:	3f 4f       	sbci	r19, 0xFF	; 255
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     ed8:	24 17       	cp	r18, r20
     eda:	35 07       	cpc	r19, r21
     edc:	70 f3       	brcs	.-36     	; 0xeba <EEPROM_vReadBlockFromAddress+0xc>
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
     ede:	08 95       	ret

00000ee0 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16 uiAddress, const u8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     ee0:	e1 99       	sbic	0x1c, 1	; 28
     ee2:	fe cf       	rjmp	.-4      	; 0xee0 <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
     ee4:	9f bb       	out	0x1f, r25	; 31
     ee6:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
     ee8:	8c b3       	in	r24, 0x1c	; 28
     eea:	81 60       	ori	r24, 0x01	; 1
     eec:	8c bb       	out	0x1c, r24	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
     eee:	8d b3       	in	r24, 0x1d	; 29
     ef0:	86 17       	cp	r24, r22
     ef2:	39 f0       	breq	.+14     	; 0xf02 <EEPROM_vWriteByteToAddress+0x22>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
     ef4:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
     ef6:	8c b3       	in	r24, 0x1c	; 28
     ef8:	84 60       	ori	r24, 0x04	; 4
     efa:	8c bb       	out	0x1c, r24	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
     efc:	8c b3       	in	r24, 0x1c	; 28
     efe:	82 60       	ori	r24, 0x02	; 2
     f00:	8c bb       	out	0x1c, r24	; 28
     f02:	08 95       	ret

00000f04 <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	dc 01       	movw	r26, r24
     f0a:	ea 01       	movw	r28, r20
	u16 counter = 0;//Bytes write counter
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
	while (counter < size)
     f10:	1a c0       	rjmp	.+52     	; 0xf46 <EEPROM_vWriteBlockToAddress+0x42>
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     f12:	e1 99       	sbic	0x1c, 1	; 28
     f14:	fe cf       	rjmp	.-4      	; 0xf12 <EEPROM_vWriteBlockToAddress+0xe>
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
     f16:	c9 01       	movw	r24, r18
     f18:	8a 0f       	add	r24, r26
     f1a:	9b 1f       	adc	r25, r27
     f1c:	9f bb       	out	0x1f, r25	; 31
     f1e:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
     f20:	9c b3       	in	r25, 0x1c	; 28
     f22:	91 60       	ori	r25, 0x01	; 1
     f24:	9c bb       	out	0x1c, r25	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
     f26:	5d b3       	in	r21, 0x1d	; 29
     f28:	fb 01       	movw	r30, r22
     f2a:	e2 0f       	add	r30, r18
     f2c:	f3 1f       	adc	r31, r19
     f2e:	90 81       	ld	r25, Z
     f30:	59 17       	cp	r21, r25
     f32:	39 f0       	breq	.+14     	; 0xf42 <EEPROM_vWriteBlockToAddress+0x3e>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
     f34:	9d bb       	out	0x1d, r25	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
     f36:	9c b3       	in	r25, 0x1c	; 28
     f38:	94 60       	ori	r25, 0x04	; 4
     f3a:	9c bb       	out	0x1c, r25	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
     f3c:	9c b3       	in	r25, 0x1c	; 28
     f3e:	92 60       	ori	r25, 0x02	; 2
     f40:	9c bb       	out	0x1c, r25	; 28
		}
		else
		{

		}
		counter++;//increase bytes counter
     f42:	2f 5f       	subi	r18, 0xFF	; 255
     f44:	3f 4f       	sbci	r19, 0xFF	; 255
}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
	u16 counter = 0;//Bytes write counter
	while (counter < size)
     f46:	2c 17       	cp	r18, r28
     f48:	3d 07       	cpc	r19, r29
     f4a:	18 f3       	brcs	.-58     	; 0xf12 <EEPROM_vWriteBlockToAddress+0xe>
		{

		}
		counter++;//increase bytes counter
	}
}
     f4c:	df 91       	pop	r29
     f4e:	cf 91       	pop	r28
     f50:	08 95       	ret

00000f52 <Keypad_enuInit>:

ES_t Keypad_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	DIO_enuSetPinDirection(C1_PORT , C1_PIN , DIO_u8OUTPUT);
     f52:	41 e0       	ldi	r20, 0x01	; 1
     f54:	63 e0       	ldi	r22, 0x03	; 3
     f56:	83 e0       	ldi	r24, 0x03	; 3
     f58:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT , C2_PIN , DIO_u8OUTPUT);
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	64 e0       	ldi	r22, 0x04	; 4
     f60:	83 e0       	ldi	r24, 0x03	; 3
     f62:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT , C3_PIN , DIO_u8OUTPUT);
     f66:	41 e0       	ldi	r20, 0x01	; 1
     f68:	65 e0       	ldi	r22, 0x05	; 5
     f6a:	83 e0       	ldi	r24, 0x03	; 3
     f6c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT , C4_PIN , DIO_u8OUTPUT);
     f70:	41 e0       	ldi	r20, 0x01	; 1
     f72:	66 e0       	ldi	r22, 0x06	; 6
     f74:	83 e0       	ldi	r24, 0x03	; 3
     f76:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT , R1_PIN , DIO_u8INPUT);
     f7a:	40 e0       	ldi	r20, 0x00	; 0
     f7c:	62 e0       	ldi	r22, 0x02	; 2
     f7e:	82 e0       	ldi	r24, 0x02	; 2
     f80:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT , R2_PIN , DIO_u8INPUT);
     f84:	40 e0       	ldi	r20, 0x00	; 0
     f86:	63 e0       	ldi	r22, 0x03	; 3
     f88:	82 e0       	ldi	r24, 0x02	; 2
     f8a:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT , R3_PIN , DIO_u8INPUT);
     f8e:	40 e0       	ldi	r20, 0x00	; 0
     f90:	64 e0       	ldi	r22, 0x04	; 4
     f92:	82 e0       	ldi	r24, 0x02	; 2
     f94:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT , R4_PIN , DIO_u8INPUT);
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	65 e0       	ldi	r22, 0x05	; 5
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT , C1_PIN , DIO_u8HIGH);
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	63 e0       	ldi	r22, 0x03	; 3
     fa6:	83 e0       	ldi	r24, 0x03	; 3
     fa8:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT , C2_PIN , DIO_u8HIGH);
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	64 e0       	ldi	r22, 0x04	; 4
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT , C3_PIN , DIO_u8HIGH);
     fb6:	41 e0       	ldi	r20, 0x01	; 1
     fb8:	65 e0       	ldi	r22, 0x05	; 5
     fba:	83 e0       	ldi	r24, 0x03	; 3
     fbc:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT , C4_PIN , DIO_u8HIGH);
     fc0:	41 e0       	ldi	r20, 0x01	; 1
     fc2:	66 e0       	ldi	r22, 0x06	; 6
     fc4:	83 e0       	ldi	r24, 0x03	; 3
     fc6:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT , R1_PIN , DIO_u8PULL_UP);
     fca:	41 e0       	ldi	r20, 0x01	; 1
     fcc:	62 e0       	ldi	r22, 0x02	; 2
     fce:	82 e0       	ldi	r24, 0x02	; 2
     fd0:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT , R2_PIN , DIO_u8PULL_UP);
     fd4:	41 e0       	ldi	r20, 0x01	; 1
     fd6:	63 e0       	ldi	r22, 0x03	; 3
     fd8:	82 e0       	ldi	r24, 0x02	; 2
     fda:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT , R3_PIN , DIO_u8PULL_UP);
     fde:	41 e0       	ldi	r20, 0x01	; 1
     fe0:	64 e0       	ldi	r22, 0x04	; 4
     fe2:	82 e0       	ldi	r24, 0x02	; 2
     fe4:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT , R4_PIN , DIO_u8PULL_UP);
     fe8:	41 e0       	ldi	r20, 0x01	; 1
     fea:	65 e0       	ldi	r22, 0x05	; 5
     fec:	82 e0       	ldi	r24, 0x02	; 2
     fee:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>

	return Local_enuErrorState;
}
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	08 95       	ret

00000ff6 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
     ff6:	6f 92       	push	r6
     ff8:	7f 92       	push	r7
     ffa:	8f 92       	push	r8
     ffc:	9f 92       	push	r9
     ffe:	af 92       	push	r10
    1000:	bf 92       	push	r11
    1002:	cf 92       	push	r12
    1004:	df 92       	push	r13
    1006:	ef 92       	push	r14
    1008:	ff 92       	push	r15
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	a1 97       	sbiw	r28, 0x21	; 33
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	f8 94       	cli
    101c:	de bf       	out	0x3e, r29	; 62
    101e:	0f be       	out	0x3f, r0	; 63
    1020:	cd bf       	out	0x3d, r28	; 61
    1022:	5c 01       	movw	r10, r24
	ES_t Local_enuErrorState = ES_NOK;

	u8 Local_Au8ColPorts [COL_NUM] = {C1_PORT,C2_PORT,C3_PORT,C4_PORT};
    1024:	83 e0       	ldi	r24, 0x03	; 3
    1026:	89 83       	std	Y+1, r24	; 0x01
    1028:	8a 83       	std	Y+2, r24	; 0x02
    102a:	8b 83       	std	Y+3, r24	; 0x03
    102c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_Au8ColPins  [COL_NUM] = {C1_PIN, C2_PIN, C3_PIN, C4_PIN};
    102e:	8d 83       	std	Y+5, r24	; 0x05
    1030:	34 e0       	ldi	r19, 0x04	; 4
    1032:	3e 83       	std	Y+6, r19	; 0x06
    1034:	25 e0       	ldi	r18, 0x05	; 5
    1036:	2f 83       	std	Y+7, r18	; 0x07
    1038:	96 e0       	ldi	r25, 0x06	; 6
    103a:	98 87       	std	Y+8, r25	; 0x08

	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
    103c:	92 e0       	ldi	r25, 0x02	; 2
    103e:	99 87       	std	Y+9, r25	; 0x09
    1040:	9a 87       	std	Y+10, r25	; 0x0a
    1042:	9b 87       	std	Y+11, r25	; 0x0b
    1044:	9c 87       	std	Y+12, r25	; 0x0c
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};
    1046:	9d 87       	std	Y+13, r25	; 0x0d
    1048:	8e 87       	std	Y+14, r24	; 0x0e
    104a:	3f 87       	std	Y+15, r19	; 0x0f
    104c:	28 8b       	std	Y+16, r18	; 0x10

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
    104e:	8f ef       	ldi	r24, 0xFF	; 255
    1050:	f5 01       	movw	r30, r10
    1052:	80 83       	st	Z, r24
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
    1054:	77 c0       	rjmp	.+238    	; 0x1144 <Keypad_enuGetPressedKey+0x14e>
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
    1056:	c8 2c       	mov	r12, r8
    1058:	d1 2c       	mov	r13, r1
    105a:	e5 e0       	ldi	r30, 0x05	; 5
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	ec 0f       	add	r30, r28
    1060:	fd 1f       	adc	r31, r29
    1062:	ec 0d       	add	r30, r12
    1064:	fd 1d       	adc	r31, r13
    1066:	60 80       	ld	r6, Z
    1068:	e1 e0       	ldi	r30, 0x01	; 1
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	ec 0f       	add	r30, r28
    106e:	fd 1f       	adc	r31, r29
    1070:	ec 0d       	add	r30, r12
    1072:	fd 1d       	adc	r31, r13
    1074:	70 80       	ld	r7, Z
    1076:	40 e0       	ldi	r20, 0x00	; 0
    1078:	66 2d       	mov	r22, r6
    107a:	87 2d       	mov	r24, r7
    107c:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    1080:	10 e0       	ldi	r17, 0x00	; 0
    1082:	51 c0       	rjmp	.+162    	; 0x1126 <Keypad_enuGetPressedKey+0x130>
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    1084:	e1 2e       	mov	r14, r17
    1086:	f1 2c       	mov	r15, r1
    1088:	ed e0       	ldi	r30, 0x0D	; 13
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	ec 0f       	add	r30, r28
    108e:	fd 1f       	adc	r31, r29
    1090:	ee 0d       	add	r30, r14
    1092:	ff 1d       	adc	r31, r15
    1094:	00 81       	ld	r16, Z
    1096:	e9 e0       	ldi	r30, 0x09	; 9
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	ec 0f       	add	r30, r28
    109c:	fd 1f       	adc	r31, r29
    109e:	ee 0d       	add	r30, r14
    10a0:	ff 1d       	adc	r31, r15
    10a2:	90 80       	ld	r9, Z
    10a4:	ae 01       	movw	r20, r28
    10a6:	4f 5e       	subi	r20, 0xEF	; 239
    10a8:	5f 4f       	sbci	r21, 0xFF	; 255
    10aa:	60 2f       	mov	r22, r16
    10ac:	89 2d       	mov	r24, r9
    10ae:	0e 94 90 0b 	call	0x1720	; 0x1720 <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
    10b2:	89 89       	ldd	r24, Y+17	; 0x11
    10b4:	81 11       	cpse	r24, r1
    10b6:	36 c0       	rjmp	.+108    	; 0x1124 <Keypad_enuGetPressedKey+0x12e>
    10b8:	83 ec       	ldi	r24, 0xC3	; 195
    10ba:	99 e0       	ldi	r25, 0x09	; 9
    10bc:	01 97       	sbiw	r24, 0x01	; 1
    10be:	f1 f7       	brne	.-4      	; 0x10bc <Keypad_enuGetPressedKey+0xc6>
    10c0:	00 c0       	rjmp	.+0      	; 0x10c2 <Keypad_enuGetPressedKey+0xcc>
    10c2:	00 00       	nop
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    10c4:	ae 01       	movw	r20, r28
    10c6:	4f 5e       	subi	r20, 0xEF	; 239
    10c8:	5f 4f       	sbci	r21, 0xFF	; 255
    10ca:	60 2f       	mov	r22, r16
    10cc:	89 2d       	mov	r24, r9
    10ce:	0e 94 90 0b 	call	0x1720	; 0x1720 <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
    10d2:	89 89       	ldd	r24, Y+17	; 0x11
    10d4:	81 11       	cpse	r24, r1
    10d6:	26 c0       	rjmp	.+76     	; 0x1124 <Keypad_enuGetPressedKey+0x12e>
    10d8:	07 c0       	rjmp	.+14     	; 0x10e8 <Keypad_enuGetPressedKey+0xf2>
				{
					while (! Local_u8PinValue)
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    10da:	ae 01       	movw	r20, r28
    10dc:	4f 5e       	subi	r20, 0xEF	; 239
    10de:	5f 4f       	sbci	r21, 0xFF	; 255
    10e0:	60 2f       	mov	r22, r16
    10e2:	89 2d       	mov	r24, r9
    10e4:	0e 94 90 0b 	call	0x1720	; 0x1720 <DIO_enuGetPinValue>
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
				if (! Local_u8PinValue)
				{
					while (! Local_u8PinValue)
    10e8:	89 89       	ldd	r24, Y+17	; 0x11
    10ea:	88 23       	and	r24, r24
    10ec:	b1 f3       	breq	.-20     	; 0x10da <Keypad_enuGetPressedKey+0xe4>
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);

					u8 Local_Au8Values[ROW_NUM][COL_NUM] = KEYPAD_VALUES;
    10ee:	80 e1       	ldi	r24, 0x10	; 16
    10f0:	e0 e6       	ldi	r30, 0x60	; 96
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	de 01       	movw	r26, r28
    10f6:	52 96       	adiw	r26, 0x12	; 18
    10f8:	01 90       	ld	r0, Z+
    10fa:	0d 92       	st	X+, r0
    10fc:	8a 95       	dec	r24
    10fe:	e1 f7       	brne	.-8      	; 0x10f8 <Keypad_enuGetPressedKey+0x102>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
    1100:	ee 0c       	add	r14, r14
    1102:	ff 1c       	adc	r15, r15
    1104:	ee 0c       	add	r14, r14
    1106:	ff 1c       	adc	r15, r15
    1108:	e1 e0       	ldi	r30, 0x01	; 1
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	ec 0f       	add	r30, r28
    110e:	fd 1f       	adc	r31, r29
    1110:	ee 0e       	add	r14, r30
    1112:	ff 1e       	adc	r15, r31
    1114:	f7 01       	movw	r30, r14
    1116:	ec 0d       	add	r30, r12
    1118:	fd 1d       	adc	r31, r13
    111a:	81 89       	ldd	r24, Z+17	; 0x11
    111c:	f5 01       	movw	r30, r10
    111e:	80 83       	st	Z, r24
					return ES_OK;
    1120:	81 e0       	ldi	r24, 0x01	; 1
    1122:	15 c0       	rjmp	.+42     	; 0x114e <Keypad_enuGetPressedKey+0x158>
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    1124:	1f 5f       	subi	r17, 0xFF	; 255
    1126:	14 30       	cpi	r17, 0x04	; 4
    1128:	08 f4       	brcc	.+2      	; 0x112c <Keypad_enuGetPressedKey+0x136>
    112a:	ac cf       	rjmp	.-168    	; 0x1084 <Keypad_enuGetPressedKey+0x8e>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
					return ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
    112c:	41 e0       	ldi	r20, 0x01	; 1
    112e:	66 2d       	mov	r22, r6
    1130:	87 2d       	mov	r24, r7
    1132:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    1136:	83 94       	inc	r8
    1138:	01 c0       	rjmp	.+2      	; 0x113c <Keypad_enuGetPressedKey+0x146>
    113a:	81 2c       	mov	r8, r1
    113c:	f3 e0       	ldi	r31, 0x03	; 3
    113e:	f8 15       	cp	r31, r8
    1140:	08 f0       	brcs	.+2      	; 0x1144 <Keypad_enuGetPressedKey+0x14e>
    1142:	89 cf       	rjmp	.-238    	; 0x1056 <Keypad_enuGetPressedKey+0x60>
	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
    1144:	f5 01       	movw	r30, r10
    1146:	80 81       	ld	r24, Z
    1148:	8f 3f       	cpi	r24, 0xFF	; 255
    114a:	b9 f3       	breq	.-18     	; 0x113a <Keypad_enuGetPressedKey+0x144>
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	}
	return Local_enuErrorState;
    114c:	80 e0       	ldi	r24, 0x00	; 0
}
    114e:	a1 96       	adiw	r28, 0x21	; 33
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	df 90       	pop	r13
    1168:	cf 90       	pop	r12
    116a:	bf 90       	pop	r11
    116c:	af 90       	pop	r10
    116e:	9f 90       	pop	r9
    1170:	8f 90       	pop	r8
    1172:	7f 90       	pop	r7
    1174:	6f 90       	pop	r6
    1176:	08 95       	ret

00001178 <LCD_enuWriteNLatch>:
				/*********el mafrood a3mel error status check hna bs 3ashan write and latch me7taga te3mel return ES_OK fa me7taga ta3deel**********/
			}
	}

	return Local_enuErrorState;
}
    1178:	1f 93       	push	r17
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	1f 92       	push	r1
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	18 2f       	mov	r17, r24
    1186:	40 e0       	ldi	r20, 0x00	; 0
    1188:	63 e0       	ldi	r22, 0x03	; 3
    118a:	81 e0       	ldi	r24, 0x01	; 1
    118c:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	62 e0       	ldi	r22, 0x02	; 2
    1194:	81 e0       	ldi	r24, 0x01	; 1
    1196:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    119a:	18 32       	cpi	r17, 0x28	; 40
    119c:	e1 f5       	brne	.+120    	; 0x1216 <LCD_enuWriteNLatch+0x9e>
    119e:	ae 01       	movw	r20, r28
    11a0:	4f 5f       	subi	r20, 0xFF	; 255
    11a2:	5f 4f       	sbci	r21, 0xFF	; 255
    11a4:	61 e0       	ldi	r22, 0x01	; 1
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	0e 94 90 0b 	call	0x1720	; 0x1720 <DIO_enuGetPinValue>
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	81 11       	cpse	r24, r1
    11b0:	32 c0       	rjmp	.+100    	; 0x1216 <LCD_enuWriteNLatch+0x9e>
    11b2:	41 2f       	mov	r20, r17
    11b4:	44 1f       	adc	r20, r20
    11b6:	44 27       	eor	r20, r20
    11b8:	44 1f       	adc	r20, r20
    11ba:	67 e0       	ldi	r22, 0x07	; 7
    11bc:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    11c0:	16 fb       	bst	r17, 6
    11c2:	44 27       	eor	r20, r20
    11c4:	40 f9       	bld	r20, 0
    11c6:	66 e0       	ldi	r22, 0x06	; 6
    11c8:	80 e0       	ldi	r24, 0x00	; 0
    11ca:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    11ce:	15 fb       	bst	r17, 5
    11d0:	44 27       	eor	r20, r20
    11d2:	40 f9       	bld	r20, 0
    11d4:	65 e0       	ldi	r22, 0x05	; 5
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    11dc:	14 fb       	bst	r17, 4
    11de:	44 27       	eor	r20, r20
    11e0:	40 f9       	bld	r20, 0
    11e2:	64 e0       	ldi	r22, 0x04	; 4
    11e4:	80 e0       	ldi	r24, 0x00	; 0
    11e6:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	63 e0       	ldi	r22, 0x03	; 3
    11ee:	81 e0       	ldi	r24, 0x01	; 1
    11f0:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    11f4:	81 ee       	ldi	r24, 0xE1	; 225
    11f6:	94 e0       	ldi	r25, 0x04	; 4
    11f8:	01 97       	sbiw	r24, 0x01	; 1
    11fa:	f1 f7       	brne	.-4      	; 0x11f8 <LCD_enuWriteNLatch+0x80>
    11fc:	00 c0       	rjmp	.+0      	; 0x11fe <LCD_enuWriteNLatch+0x86>
    11fe:	00 00       	nop
    1200:	40 e0       	ldi	r20, 0x00	; 0
    1202:	63 e0       	ldi	r22, 0x03	; 3
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    120a:	83 ed       	ldi	r24, 0xD3	; 211
    120c:	90 e3       	ldi	r25, 0x30	; 48
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	f1 f7       	brne	.-4      	; 0x120e <LCD_enuWriteNLatch+0x96>
    1212:	00 c0       	rjmp	.+0      	; 0x1214 <LCD_enuWriteNLatch+0x9c>
    1214:	00 00       	nop
    1216:	41 2f       	mov	r20, r17
    1218:	44 1f       	adc	r20, r20
    121a:	44 27       	eor	r20, r20
    121c:	44 1f       	adc	r20, r20
    121e:	67 e0       	ldi	r22, 0x07	; 7
    1220:	80 e0       	ldi	r24, 0x00	; 0
    1222:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    1226:	16 fb       	bst	r17, 6
    1228:	44 27       	eor	r20, r20
    122a:	40 f9       	bld	r20, 0
    122c:	66 e0       	ldi	r22, 0x06	; 6
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    1234:	15 fb       	bst	r17, 5
    1236:	44 27       	eor	r20, r20
    1238:	40 f9       	bld	r20, 0
    123a:	65 e0       	ldi	r22, 0x05	; 5
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    1242:	14 fb       	bst	r17, 4
    1244:	44 27       	eor	r20, r20
    1246:	40 f9       	bld	r20, 0
    1248:	64 e0       	ldi	r22, 0x04	; 4
    124a:	80 e0       	ldi	r24, 0x00	; 0
    124c:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    1250:	41 e0       	ldi	r20, 0x01	; 1
    1252:	63 e0       	ldi	r22, 0x03	; 3
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    125a:	81 ee       	ldi	r24, 0xE1	; 225
    125c:	94 e0       	ldi	r25, 0x04	; 4
    125e:	01 97       	sbiw	r24, 0x01	; 1
    1260:	f1 f7       	brne	.-4      	; 0x125e <LCD_enuWriteNLatch+0xe6>
    1262:	00 c0       	rjmp	.+0      	; 0x1264 <LCD_enuWriteNLatch+0xec>
    1264:	00 00       	nop
    1266:	40 e0       	ldi	r20, 0x00	; 0
    1268:	63 e0       	ldi	r22, 0x03	; 3
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    1270:	83 ed       	ldi	r24, 0xD3	; 211
    1272:	90 e3       	ldi	r25, 0x30	; 48
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <LCD_enuWriteNLatch+0xfc>
    1278:	00 c0       	rjmp	.+0      	; 0x127a <LCD_enuWriteNLatch+0x102>
    127a:	00 00       	nop
    127c:	13 fb       	bst	r17, 3
    127e:	44 27       	eor	r20, r20
    1280:	40 f9       	bld	r20, 0
    1282:	67 e0       	ldi	r22, 0x07	; 7
    1284:	80 e0       	ldi	r24, 0x00	; 0
    1286:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    128a:	12 fb       	bst	r17, 2
    128c:	44 27       	eor	r20, r20
    128e:	40 f9       	bld	r20, 0
    1290:	66 e0       	ldi	r22, 0x06	; 6
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    1298:	11 fb       	bst	r17, 1
    129a:	44 27       	eor	r20, r20
    129c:	40 f9       	bld	r20, 0
    129e:	65 e0       	ldi	r22, 0x05	; 5
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    12a6:	41 2f       	mov	r20, r17
    12a8:	41 70       	andi	r20, 0x01	; 1
    12aa:	64 e0       	ldi	r22, 0x04	; 4
    12ac:	80 e0       	ldi	r24, 0x00	; 0
    12ae:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    12b2:	41 e0       	ldi	r20, 0x01	; 1
    12b4:	63 e0       	ldi	r22, 0x03	; 3
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    12bc:	81 ee       	ldi	r24, 0xE1	; 225
    12be:	94 e0       	ldi	r25, 0x04	; 4
    12c0:	01 97       	sbiw	r24, 0x01	; 1
    12c2:	f1 f7       	brne	.-4      	; 0x12c0 <LCD_enuWriteNLatch+0x148>
    12c4:	00 c0       	rjmp	.+0      	; 0x12c6 <LCD_enuWriteNLatch+0x14e>
    12c6:	00 00       	nop
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	63 e0       	ldi	r22, 0x03	; 3
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    12d2:	83 ed       	ldi	r24, 0xD3	; 211
    12d4:	90 e3       	ldi	r25, 0x30	; 48
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <LCD_enuWriteNLatch+0x15e>
    12da:	00 c0       	rjmp	.+0      	; 0x12dc <LCD_enuWriteNLatch+0x164>
    12dc:	00 00       	nop
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	0f 90       	pop	r0
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	08 95       	ret

000012ea <LCD_enuInit>:
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	61 e0       	ldi	r22, 0x01	; 1
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
    12f4:	41 e0       	ldi	r20, 0x01	; 1
    12f6:	62 e0       	ldi	r22, 0x02	; 2
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	63 e0       	ldi	r22, 0x03	; 3
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
    1308:	41 e0       	ldi	r20, 0x01	; 1
    130a:	67 e0       	ldi	r22, 0x07	; 7
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
    1312:	41 e0       	ldi	r20, 0x01	; 1
    1314:	66 e0       	ldi	r22, 0x06	; 6
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
    131c:	41 e0       	ldi	r20, 0x01	; 1
    131e:	65 e0       	ldi	r22, 0x05	; 5
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
    1326:	41 e0       	ldi	r20, 0x01	; 1
    1328:	64 e0       	ldi	r22, 0x04	; 4
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	0e 94 ac 0a 	call	0x1558	; 0x1558 <DIO_enuSetPinDirection>
    1330:	8d e2       	ldi	r24, 0x2D	; 45
    1332:	92 e2       	ldi	r25, 0x22	; 34
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	f1 f7       	brne	.-4      	; 0x1334 <LCD_enuInit+0x4a>
    1338:	00 c0       	rjmp	.+0      	; 0x133a <LCD_enuInit+0x50>
    133a:	00 00       	nop
    133c:	40 e0       	ldi	r20, 0x00	; 0
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    1346:	88 e2       	ldi	r24, 0x28	; 40
    1348:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_enuWriteNLatch>
    134c:	89 ef       	ldi	r24, 0xF9	; 249
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	f1 f7       	brne	.-4      	; 0x1350 <LCD_enuInit+0x66>
    1354:	00 c0       	rjmp	.+0      	; 0x1356 <LCD_enuInit+0x6c>
    1356:	00 00       	nop
    1358:	40 e0       	ldi	r20, 0x00	; 0
    135a:	61 e0       	ldi	r22, 0x01	; 1
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    1362:	8f e0       	ldi	r24, 0x0F	; 15
    1364:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_enuWriteNLatch>
    1368:	89 ef       	ldi	r24, 0xF9	; 249
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <LCD_enuInit+0x82>
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <LCD_enuInit+0x88>
    1372:	00 00       	nop
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    137e:	81 e0       	ldi	r24, 0x01	; 1
    1380:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_enuWriteNLatch>
    1384:	83 ef       	ldi	r24, 0xF3	; 243
    1386:	91 e0       	ldi	r25, 0x01	; 1
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <LCD_enuInit+0x9e>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <LCD_enuInit+0xa4>
    138e:	00 00       	nop
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    139a:	86 e0       	ldi	r24, 0x06	; 6
    139c:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_enuWriteNLatch>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	08 95       	ret

000013a4 <LCD_enuSendData>:
    13a4:	cf 93       	push	r28
    13a6:	c8 2f       	mov	r28, r24
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	61 e0       	ldi	r22, 0x01	; 1
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    13b2:	8c 2f       	mov	r24, r28
    13b4:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_enuWriteNLatch>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <LCD_enuDisplayUnsignedInteger>:
    13be:	af 92       	push	r10
    13c0:	bf 92       	push	r11
    13c2:	cf 92       	push	r12
    13c4:	df 92       	push	r13
    13c6:	ef 92       	push	r14
    13c8:	ff 92       	push	r15
    13ca:	0f 93       	push	r16
    13cc:	1f 93       	push	r17
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	61 15       	cp	r22, r1
    13d4:	71 05       	cpc	r23, r1
    13d6:	81 05       	cpc	r24, r1
    13d8:	91 05       	cpc	r25, r1
    13da:	61 f5       	brne	.+88     	; 0x1434 <LCD_enuDisplayUnsignedInteger+0x76>
    13dc:	41 e0       	ldi	r20, 0x01	; 1
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    13e6:	80 e3       	ldi	r24, 0x30	; 48
    13e8:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_enuWriteNLatch>
    13ec:	a1 2c       	mov	r10, r1
    13ee:	54 c0       	rjmp	.+168    	; 0x1498 <LCD_enuDisplayUnsignedInteger+0xda>
    13f0:	2a e0       	ldi	r18, 0x0A	; 10
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e0       	ldi	r20, 0x00	; 0
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	0e 94 28 0c 	call	0x1850	; 0x1850 <__udivmodsi4>
    13fc:	cc 0c       	add	r12, r12
    13fe:	dd 1c       	adc	r13, r13
    1400:	ee 1c       	adc	r14, r14
    1402:	ff 1c       	adc	r15, r15
    1404:	d7 01       	movw	r26, r14
    1406:	c6 01       	movw	r24, r12
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	aa 1f       	adc	r26, r26
    140e:	bb 1f       	adc	r27, r27
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	aa 1f       	adc	r26, r26
    1416:	bb 1f       	adc	r27, r27
    1418:	c8 0e       	add	r12, r24
    141a:	d9 1e       	adc	r13, r25
    141c:	ea 1e       	adc	r14, r26
    141e:	fb 1e       	adc	r15, r27
    1420:	c6 0e       	add	r12, r22
    1422:	d1 1c       	adc	r13, r1
    1424:	e1 1c       	adc	r14, r1
    1426:	f1 1c       	adc	r15, r1
    1428:	cf 5f       	subi	r28, 0xFF	; 255
    142a:	62 2f       	mov	r22, r18
    142c:	73 2f       	mov	r23, r19
    142e:	84 2f       	mov	r24, r20
    1430:	95 2f       	mov	r25, r21
    1432:	04 c0       	rjmp	.+8      	; 0x143c <LCD_enuDisplayUnsignedInteger+0x7e>
    1434:	c0 e0       	ldi	r28, 0x00	; 0
    1436:	c1 2c       	mov	r12, r1
    1438:	d1 2c       	mov	r13, r1
    143a:	76 01       	movw	r14, r12
    143c:	61 15       	cp	r22, r1
    143e:	71 05       	cpc	r23, r1
    1440:	81 05       	cpc	r24, r1
    1442:	91 05       	cpc	r25, r1
    1444:	a9 f6       	brne	.-86     	; 0x13f0 <LCD_enuDisplayUnsignedInteger+0x32>
    1446:	a1 2c       	mov	r10, r1
    1448:	1b c0       	rjmp	.+54     	; 0x1480 <LCD_enuDisplayUnsignedInteger+0xc2>
    144a:	41 e0       	ldi	r20, 0x01	; 1
    144c:	61 e0       	ldi	r22, 0x01	; 1
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    1454:	c7 01       	movw	r24, r14
    1456:	b6 01       	movw	r22, r12
    1458:	2a e0       	ldi	r18, 0x0A	; 10
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	40 e0       	ldi	r20, 0x00	; 0
    145e:	50 e0       	ldi	r21, 0x00	; 0
    1460:	0e 94 28 0c 	call	0x1850	; 0x1850 <__udivmodsi4>
    1464:	b2 2e       	mov	r11, r18
    1466:	03 2f       	mov	r16, r19
    1468:	14 2f       	mov	r17, r20
    146a:	d5 2f       	mov	r29, r21
    146c:	80 e3       	ldi	r24, 0x30	; 48
    146e:	86 0f       	add	r24, r22
    1470:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_enuWriteNLatch>
    1474:	a8 2e       	mov	r10, r24
    1476:	cb 2c       	mov	r12, r11
    1478:	d0 2e       	mov	r13, r16
    147a:	e1 2e       	mov	r14, r17
    147c:	fd 2e       	mov	r15, r29
    147e:	c1 50       	subi	r28, 0x01	; 1
    1480:	c1 14       	cp	r12, r1
    1482:	d1 04       	cpc	r13, r1
    1484:	e1 04       	cpc	r14, r1
    1486:	f1 04       	cpc	r15, r1
    1488:	01 f7       	brne	.-64     	; 0x144a <LCD_enuDisplayUnsignedInteger+0x8c>
    148a:	04 c0       	rjmp	.+8      	; 0x1494 <LCD_enuDisplayUnsignedInteger+0xd6>
    148c:	80 e3       	ldi	r24, 0x30	; 48
    148e:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_enuWriteNLatch>
    1492:	c1 50       	subi	r28, 0x01	; 1
    1494:	c1 11       	cpse	r28, r1
    1496:	fa cf       	rjmp	.-12     	; 0x148c <LCD_enuDisplayUnsignedInteger+0xce>
    1498:	8a 2d       	mov	r24, r10
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	ff 90       	pop	r15
    14a4:	ef 90       	pop	r14
    14a6:	df 90       	pop	r13
    14a8:	cf 90       	pop	r12
    14aa:	bf 90       	pop	r11
    14ac:	af 90       	pop	r10
    14ae:	08 95       	ret

000014b0 <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	ec 01       	movw	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pcString != NULL)
    14ba:	89 2b       	or	r24, r25
    14bc:	79 f4       	brne	.+30     	; 0x14dc <LCD_enuDisplayString+0x2c>
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
			Local_enuErrorState = LCD_enuWriteNLatch(*Copy_pcString++);
		}

	}
	else Local_enuErrorState = ES_NULL_POINTER;
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	11 c0       	rjmp	.+34     	; 0x14e4 <LCD_enuDisplayString+0x34>
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	61 e0       	ldi	r22, 0x01	; 1
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
			Local_enuErrorState = LCD_enuWriteNLatch(*Copy_pcString++);
    14cc:	8e 01       	movw	r16, r28
    14ce:	0f 5f       	subi	r16, 0xFF	; 255
    14d0:	1f 4f       	sbci	r17, 0xFF	; 255
    14d2:	88 81       	ld	r24, Y
    14d4:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_enuWriteNLatch>
    14d8:	e8 01       	movw	r28, r16
    14da:	01 c0       	rjmp	.+2      	; 0x14de <LCD_enuDisplayString+0x2e>
    14dc:	80 e0       	ldi	r24, 0x00	; 0
ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
    14de:	98 81       	ld	r25, Y
    14e0:	91 11       	cpse	r25, r1
    14e2:	ef cf       	rjmp	.-34     	; 0x14c2 <LCD_enuDisplayString+0x12>
		}

	}
	else Local_enuErrorState = ES_NULL_POINTER;
	return Local_enuErrorState;
}
    14e4:	df 91       	pop	r29
    14e6:	cf 91       	pop	r28
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <LCD_enuSetCursorPosition>:


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{
    14ee:	1f 93       	push	r17
    14f0:	cf 93       	push	r28
    14f2:	df 93       	push	r29

	ES_t Local_enuErrorState = ES_NOK;
	if ((Copy_u8XDimension <= LCD_u8XDIM_1) && (Copy_u8YDimension <= LCD_u8YDIM_15))
    14f4:	82 30       	cpi	r24, 0x02	; 2
    14f6:	a8 f4       	brcc	.+42     	; 0x1522 <LCD_enuSetCursorPosition+0x34>
    14f8:	60 31       	cpi	r22, 0x10	; 16
    14fa:	a8 f4       	brcc	.+42     	; 0x1526 <LCD_enuSetCursorPosition+0x38>
    14fc:	16 2f       	mov	r17, r22
    14fe:	c8 2f       	mov	r28, r24
		{
		Local_enuErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    150a:	d8 2f       	mov	r29, r24
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
    150c:	8c 2f       	mov	r24, r28
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	02 96       	adiw	r24, 0x02	; 2
    1512:	20 e4       	ldi	r18, 0x40	; 64
    1514:	82 9f       	mul	r24, r18
    1516:	10 0d       	add	r17, r0
    1518:	11 24       	eor	r1, r1
    151a:	81 2f       	mov	r24, r17
    151c:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_enuWriteNLatch>
    1520:	03 c0       	rjmp	.+6      	; 0x1528 <LCD_enuSetCursorPosition+0x3a>


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{

	ES_t Local_enuErrorState = ES_NOK;
    1522:	d0 e0       	ldi	r29, 0x00	; 0
    1524:	01 c0       	rjmp	.+2      	; 0x1528 <LCD_enuSetCursorPosition+0x3a>
    1526:	d0 e0       	ldi	r29, 0x00	; 0
		Local_enuErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
		}
	return Local_enuErrorState;

}
    1528:	8d 2f       	mov	r24, r29
    152a:	df 91       	pop	r29
    152c:	cf 91       	pop	r28
    152e:	1f 91       	pop	r17
    1530:	08 95       	ret

00001532 <LCD_enuClearDisplay>:

ES_t LCD_enuClearDisplay( void )
{
    1532:	cf 93       	push	r28

	ES_t Local_enuErrorState = ES_NOK;

		Local_enuErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	61 e0       	ldi	r22, 0x01	; 1
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	0e 94 1e 0b 	call	0x163c	; 0x163c <DIO_enuSetPinValue>
    153e:	c8 2f       	mov	r28, r24
		LCD_enuWriteNLatch(0x01);
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	0e 94 bc 08 	call	0x1178	; 0x1178 <LCD_enuWriteNLatch>

	return Local_enuErrorState;

}
    1546:	8c 2f       	mov	r24, r28
    1548:	cf 91       	pop	r28
    154a:	08 95       	ret

0000154c <DIO_enuInit>:
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
    154c:	81 eb       	ldi	r24, 0xB1	; 177
    154e:	8a bb       	out	0x1a, r24	; 26
    1550:	86 e1       	ldi	r24, 0x16	; 22
    1552:	8b bb       	out	0x1b, r24	; 27
    1554:	80 e0       	ldi	r24, 0x00	; 0
    1556:	08 95       	ret

00001558 <DIO_enuSetPinDirection>:
    1558:	84 30       	cpi	r24, 0x04	; 4
    155a:	08 f0       	brcs	.+2      	; 0x155e <DIO_enuSetPinDirection+0x6>
    155c:	67 c0       	rjmp	.+206    	; 0x162c <DIO_enuSetPinDirection+0xd4>
    155e:	68 30       	cpi	r22, 0x08	; 8
    1560:	08 f0       	brcs	.+2      	; 0x1564 <DIO_enuSetPinDirection+0xc>
    1562:	66 c0       	rjmp	.+204    	; 0x1630 <DIO_enuSetPinDirection+0xd8>
    1564:	42 30       	cpi	r20, 0x02	; 2
    1566:	08 f0       	brcs	.+2      	; 0x156a <DIO_enuSetPinDirection+0x12>
    1568:	65 c0       	rjmp	.+202    	; 0x1634 <DIO_enuSetPinDirection+0xdc>
    156a:	81 30       	cpi	r24, 0x01	; 1
    156c:	e9 f0       	breq	.+58     	; 0x15a8 <DIO_enuSetPinDirection+0x50>
    156e:	30 f0       	brcs	.+12     	; 0x157c <DIO_enuSetPinDirection+0x24>
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	81 f1       	breq	.+96     	; 0x15d4 <DIO_enuSetPinDirection+0x7c>
    1574:	83 30       	cpi	r24, 0x03	; 3
    1576:	09 f4       	brne	.+2      	; 0x157a <DIO_enuSetPinDirection+0x22>
    1578:	43 c0       	rjmp	.+134    	; 0x1600 <DIO_enuSetPinDirection+0xa8>
    157a:	5e c0       	rjmp	.+188    	; 0x1638 <DIO_enuSetPinDirection+0xe0>
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	06 2e       	mov	r0, r22
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_enuSetPinDirection+0x30>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	0a 94       	dec	r0
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_enuSetPinDirection+0x2c>
    158c:	80 95       	com	r24
    158e:	2a b3       	in	r18, 0x1a	; 26
    1590:	28 23       	and	r18, r24
    1592:	84 2f       	mov	r24, r20
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_enuSetPinDirection+0x44>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	6a 95       	dec	r22
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_enuSetPinDirection+0x40>
    15a0:	82 2b       	or	r24, r18
    15a2:	8a bb       	out	0x1a, r24	; 26
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	08 95       	ret
    15a8:	21 e0       	ldi	r18, 0x01	; 1
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	06 2e       	mov	r0, r22
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <DIO_enuSetPinDirection+0x5c>
    15b0:	22 0f       	add	r18, r18
    15b2:	33 1f       	adc	r19, r19
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <DIO_enuSetPinDirection+0x58>
    15b8:	20 95       	com	r18
    15ba:	87 b3       	in	r24, 0x17	; 23
    15bc:	28 23       	and	r18, r24
    15be:	84 2f       	mov	r24, r20
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	02 c0       	rjmp	.+4      	; 0x15c8 <DIO_enuSetPinDirection+0x70>
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	6a 95       	dec	r22
    15ca:	e2 f7       	brpl	.-8      	; 0x15c4 <DIO_enuSetPinDirection+0x6c>
    15cc:	82 2b       	or	r24, r18
    15ce:	87 bb       	out	0x17, r24	; 23
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	08 95       	ret
    15d4:	21 e0       	ldi	r18, 0x01	; 1
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	06 2e       	mov	r0, r22
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <DIO_enuSetPinDirection+0x88>
    15dc:	22 0f       	add	r18, r18
    15de:	33 1f       	adc	r19, r19
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <DIO_enuSetPinDirection+0x84>
    15e4:	20 95       	com	r18
    15e6:	84 b3       	in	r24, 0x14	; 20
    15e8:	28 23       	and	r18, r24
    15ea:	84 2f       	mov	r24, r20
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <DIO_enuSetPinDirection+0x9c>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	6a 95       	dec	r22
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <DIO_enuSetPinDirection+0x98>
    15f8:	82 2b       	or	r24, r18
    15fa:	84 bb       	out	0x14, r24	; 20
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	08 95       	ret
    1600:	21 e0       	ldi	r18, 0x01	; 1
    1602:	30 e0       	ldi	r19, 0x00	; 0
    1604:	06 2e       	mov	r0, r22
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_enuSetPinDirection+0xb4>
    1608:	22 0f       	add	r18, r18
    160a:	33 1f       	adc	r19, r19
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_enuSetPinDirection+0xb0>
    1610:	20 95       	com	r18
    1612:	81 b3       	in	r24, 0x11	; 17
    1614:	28 23       	and	r18, r24
    1616:	84 2f       	mov	r24, r20
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	02 c0       	rjmp	.+4      	; 0x1620 <DIO_enuSetPinDirection+0xc8>
    161c:	88 0f       	add	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	6a 95       	dec	r22
    1622:	e2 f7       	brpl	.-8      	; 0x161c <DIO_enuSetPinDirection+0xc4>
    1624:	82 2b       	or	r24, r18
    1626:	81 bb       	out	0x11, r24	; 17
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	08 95       	ret
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	08 95       	ret
    1630:	83 e0       	ldi	r24, 0x03	; 3
    1632:	08 95       	ret
    1634:	83 e0       	ldi	r24, 0x03	; 3
    1636:	08 95       	ret
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	08 95       	ret

0000163c <DIO_enuSetPinValue>:
    163c:	84 30       	cpi	r24, 0x04	; 4
    163e:	08 f0       	brcs	.+2      	; 0x1642 <DIO_enuSetPinValue+0x6>
    1640:	67 c0       	rjmp	.+206    	; 0x1710 <DIO_enuSetPinValue+0xd4>
    1642:	68 30       	cpi	r22, 0x08	; 8
    1644:	08 f0       	brcs	.+2      	; 0x1648 <DIO_enuSetPinValue+0xc>
    1646:	66 c0       	rjmp	.+204    	; 0x1714 <DIO_enuSetPinValue+0xd8>
    1648:	42 30       	cpi	r20, 0x02	; 2
    164a:	08 f0       	brcs	.+2      	; 0x164e <DIO_enuSetPinValue+0x12>
    164c:	65 c0       	rjmp	.+202    	; 0x1718 <DIO_enuSetPinValue+0xdc>
    164e:	81 30       	cpi	r24, 0x01	; 1
    1650:	e9 f0       	breq	.+58     	; 0x168c <DIO_enuSetPinValue+0x50>
    1652:	30 f0       	brcs	.+12     	; 0x1660 <DIO_enuSetPinValue+0x24>
    1654:	82 30       	cpi	r24, 0x02	; 2
    1656:	81 f1       	breq	.+96     	; 0x16b8 <DIO_enuSetPinValue+0x7c>
    1658:	83 30       	cpi	r24, 0x03	; 3
    165a:	09 f4       	brne	.+2      	; 0x165e <DIO_enuSetPinValue+0x22>
    165c:	43 c0       	rjmp	.+134    	; 0x16e4 <DIO_enuSetPinValue+0xa8>
    165e:	5e c0       	rjmp	.+188    	; 0x171c <DIO_enuSetPinValue+0xe0>
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	06 2e       	mov	r0, r22
    1666:	02 c0       	rjmp	.+4      	; 0x166c <DIO_enuSetPinValue+0x30>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <DIO_enuSetPinValue+0x2c>
    1670:	80 95       	com	r24
    1672:	2b b3       	in	r18, 0x1b	; 27
    1674:	28 23       	and	r18, r24
    1676:	84 2f       	mov	r24, r20
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	02 c0       	rjmp	.+4      	; 0x1680 <DIO_enuSetPinValue+0x44>
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	6a 95       	dec	r22
    1682:	e2 f7       	brpl	.-8      	; 0x167c <DIO_enuSetPinValue+0x40>
    1684:	82 2b       	or	r24, r18
    1686:	8b bb       	out	0x1b, r24	; 27
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	08 95       	ret
    168c:	21 e0       	ldi	r18, 0x01	; 1
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	06 2e       	mov	r0, r22
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <DIO_enuSetPinValue+0x5c>
    1694:	22 0f       	add	r18, r18
    1696:	33 1f       	adc	r19, r19
    1698:	0a 94       	dec	r0
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <DIO_enuSetPinValue+0x58>
    169c:	20 95       	com	r18
    169e:	88 b3       	in	r24, 0x18	; 24
    16a0:	28 23       	and	r18, r24
    16a2:	84 2f       	mov	r24, r20
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <DIO_enuSetPinValue+0x70>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	6a 95       	dec	r22
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <DIO_enuSetPinValue+0x6c>
    16b0:	82 2b       	or	r24, r18
    16b2:	88 bb       	out	0x18, r24	; 24
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	08 95       	ret
    16b8:	21 e0       	ldi	r18, 0x01	; 1
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	06 2e       	mov	r0, r22
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_enuSetPinValue+0x88>
    16c0:	22 0f       	add	r18, r18
    16c2:	33 1f       	adc	r19, r19
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_enuSetPinValue+0x84>
    16c8:	20 95       	com	r18
    16ca:	85 b3       	in	r24, 0x15	; 21
    16cc:	28 23       	and	r18, r24
    16ce:	84 2f       	mov	r24, r20
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <DIO_enuSetPinValue+0x9c>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	6a 95       	dec	r22
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <DIO_enuSetPinValue+0x98>
    16dc:	82 2b       	or	r24, r18
    16de:	85 bb       	out	0x15, r24	; 21
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	08 95       	ret
    16e4:	21 e0       	ldi	r18, 0x01	; 1
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	06 2e       	mov	r0, r22
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_enuSetPinValue+0xb4>
    16ec:	22 0f       	add	r18, r18
    16ee:	33 1f       	adc	r19, r19
    16f0:	0a 94       	dec	r0
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <DIO_enuSetPinValue+0xb0>
    16f4:	20 95       	com	r18
    16f6:	82 b3       	in	r24, 0x12	; 18
    16f8:	28 23       	and	r18, r24
    16fa:	84 2f       	mov	r24, r20
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 c0       	rjmp	.+4      	; 0x1704 <DIO_enuSetPinValue+0xc8>
    1700:	88 0f       	add	r24, r24
    1702:	99 1f       	adc	r25, r25
    1704:	6a 95       	dec	r22
    1706:	e2 f7       	brpl	.-8      	; 0x1700 <DIO_enuSetPinValue+0xc4>
    1708:	82 2b       	or	r24, r18
    170a:	82 bb       	out	0x12, r24	; 18
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	08 95       	ret
    1710:	83 e0       	ldi	r24, 0x03	; 3
    1712:	08 95       	ret
    1714:	83 e0       	ldi	r24, 0x03	; 3
    1716:	08 95       	ret
    1718:	83 e0       	ldi	r24, 0x03	; 3
    171a:	08 95       	ret
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	08 95       	ret

00001720 <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pu8Value != NULL)
    1720:	41 15       	cp	r20, r1
    1722:	51 05       	cpc	r21, r1
    1724:	e1 f1       	breq	.+120    	; 0x179e <DIO_enuGetPinValue+0x7e>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    1726:	84 30       	cpi	r24, 0x04	; 4
    1728:	e0 f5       	brcc	.+120    	; 0x17a2 <DIO_enuGetPinValue+0x82>
				&& Copy_u8PinID <= DIO_u8PIN7)
    172a:	68 30       	cpi	r22, 0x08	; 8
    172c:	e0 f5       	brcc	.+120    	; 0x17a6 <DIO_enuGetPinValue+0x86>
		{
			switch (Copy_u8PortID)
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	91 f0       	breq	.+36     	; 0x1756 <DIO_enuGetPinValue+0x36>
    1732:	28 f0       	brcs	.+10     	; 0x173e <DIO_enuGetPinValue+0x1e>
    1734:	82 30       	cpi	r24, 0x02	; 2
    1736:	d9 f0       	breq	.+54     	; 0x176e <DIO_enuGetPinValue+0x4e>
    1738:	83 30       	cpi	r24, 0x03	; 3
    173a:	29 f1       	breq	.+74     	; 0x1786 <DIO_enuGetPinValue+0x66>
    173c:	36 c0       	rjmp	.+108    	; 0x17aa <DIO_enuGetPinValue+0x8a>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    173e:	89 b3       	in	r24, 0x19	; 25
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <DIO_enuGetPinValue+0x28>
    1744:	95 95       	asr	r25
    1746:	87 95       	ror	r24
    1748:	6a 95       	dec	r22
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <DIO_enuGetPinValue+0x24>
    174c:	81 70       	andi	r24, 0x01	; 1
    174e:	fa 01       	movw	r30, r20
    1750:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    1752:	81 e0       	ldi	r24, 0x01	; 1
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    1754:	08 95       	ret
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    1756:	86 b3       	in	r24, 0x16	; 22
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_enuGetPinValue+0x40>
    175c:	95 95       	asr	r25
    175e:	87 95       	ror	r24
    1760:	6a 95       	dec	r22
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_enuGetPinValue+0x3c>
    1764:	81 70       	andi	r24, 0x01	; 1
    1766:	fa 01       	movw	r30, r20
    1768:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    176a:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    176c:	08 95       	ret
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    176e:	83 b3       	in	r24, 0x13	; 19
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_enuGetPinValue+0x58>
    1774:	95 95       	asr	r25
    1776:	87 95       	ror	r24
    1778:	6a 95       	dec	r22
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_enuGetPinValue+0x54>
    177c:	81 70       	andi	r24, 0x01	; 1
    177e:	fa 01       	movw	r30, r20
    1780:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    1782:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    1784:	08 95       	ret
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    1786:	80 b3       	in	r24, 0x10	; 16
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_enuGetPinValue+0x70>
    178c:	95 95       	asr	r25
    178e:	87 95       	ror	r24
    1790:	6a 95       	dec	r22
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_enuGetPinValue+0x6c>
    1794:	81 70       	andi	r24, 0x01	; 1
    1796:	fa 01       	movw	r30, r20
    1798:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
    179a:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    179c:	08 95       	ret
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    179e:	82 e0       	ldi	r24, 0x02	; 2
    17a0:	08 95       	ret
			}
			Local_enuErrorState = ES_OK;
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    17a2:	83 e0       	ldi	r24, 0x03	; 3
    17a4:	08 95       	ret
    17a6:	83 e0       	ldi	r24, 0x03	; 3
    17a8:	08 95       	ret

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}

	return Local_enuErrorState;
}
    17ac:	08 95       	ret

000017ae <SPI_vInitMaster>:
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
	SPCR |= (1<<SPE);//Enable the SPI
    17ae:	87 b3       	in	r24, 0x17	; 23
    17b0:	80 6b       	ori	r24, 0xB0	; 176
    17b2:	87 bb       	out	0x17, r24	; 23
    17b4:	8d b1       	in	r24, 0x0d	; 13
    17b6:	81 65       	ori	r24, 0x51	; 81
    17b8:	8d b9       	out	0x0d, r24	; 13
    17ba:	08 95       	ret

000017bc <SPI_ui8TransmitRecive>:
}

u8 SPI_ui8TransmitRecive (u8 data)
{
	SPDR = data;//move the given data to SPI Data register
    17bc:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    17be:	77 9b       	sbis	0x0e, 7	; 14
    17c0:	fe cf       	rjmp	.-4      	; 0x17be <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    17c2:	8f b1       	in	r24, 0x0f	; 15
}
    17c4:	08 95       	ret

000017c6 <UART_enuUART_Init>:

ES_t UART_enuUART_Init(void)
{
	ES_t Local_ErorrState = ES_NOK;

	UCSRA = 0x00; // flags RXC,TXC,UDRE -> 0,, U2X -> 0(Synchronous)
    17c6:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18; // set to be a reciever and a transmiter
    17c8:	88 e1       	ldi	r24, 0x18	; 24
    17ca:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86; // set frame format
    17cc:	86 e8       	ldi	r24, 0x86	; 134
    17ce:	80 bd       	out	0x20, r24	; 32

	UBRRL = 103; // 0110 0111 (BAUD)
    17d0:	87 e6       	ldi	r24, 0x67	; 103
    17d2:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;   // BAUD>>8  -> 0
    17d4:	10 bc       	out	0x20, r1	; 32

	return Local_ErorrState;
}
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	08 95       	ret

000017da <UART_enuSendChar>:
ES_t UART_enuSendChar( u8 Copy_u8CharData)
{
	ES_t Local_ErorrState = ES_NOK;
	// check if UDR ready(empty)for write or not using UDRE bit--> if ready..go else wait.

	while(! ((UCSRA >> 5) & 1)); // (UCSRA >> 5) -> UDRE
    17da:	5d 9b       	sbis	0x0b, 5	; 11
    17dc:	fe cf       	rjmp	.-4      	; 0x17da <UART_enuSendChar>
	UDR = Copy_u8CharData;
    17de:	8c b9       	out	0x0c, r24	; 12
	  while(!((UCSRA >> 6) & 1));
	  UCSRA |= (1>>6);

*/
	return Local_ErorrState;
}
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	08 95       	ret

000017e4 <UART_enuRecieveChar>:
{
	ES_t Local_ErorrState = ES_NOK;

// As long the RXc is 0 so there is no recieved data at that moment --> recieve the new data

	while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7) -> RXc
    17e4:	5f 9b       	sbis	0x0b, 7	; 11
    17e6:	fe cf       	rjmp	.-4      	; 0x17e4 <UART_enuRecieveChar>
	*Copy_u8RxChar = UDR;
    17e8:	2c b1       	in	r18, 0x0c	; 12
    17ea:	fc 01       	movw	r30, r24
    17ec:	20 83       	st	Z, r18

	return Local_ErorrState;
}
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	08 95       	ret

000017f2 <UART_enuSendString>:

ES_t UART_enuSendString(u8 * Copy_Au8StringData)
{
    17f2:	ac 01       	movw	r20, r24
	ES_t Local_ErorrState = ES_NOK;

	u8 Local_u8Iter = 0;
    17f4:	20 e0       	ldi	r18, 0x00	; 0

	while(Copy_Au8StringData[Local_u8Iter] != 0) // check if data not equal  NULL
    17f6:	09 c0       	rjmp	.+18     	; 0x180a <UART_enuSendString+0x18>
	{
		while(! ((UCSRA>>5) & 1 )); // wait until the UDR is empty using (UCSRA>>5) -> UDRE
    17f8:	5d 9b       	sbis	0x0b, 5	; 11
    17fa:	fe cf       	rjmp	.-4      	; 0x17f8 <UART_enuSendString+0x6>
		UDR = (Copy_Au8StringData[Local_u8Iter]);
    17fc:	9c b9       	out	0x0c, r25	; 12
		UART_First_ConnectionFlag++;
    17fe:	90 91 58 04 	lds	r25, 0x0458	; 0x800458 <__data_end>
    1802:	9f 5f       	subi	r25, 0xFF	; 255
    1804:	90 93 58 04 	sts	0x0458, r25	; 0x800458 <__data_end>
		Local_u8Iter++;
    1808:	2f 5f       	subi	r18, 0xFF	; 255
{
	ES_t Local_ErorrState = ES_NOK;

	u8 Local_u8Iter = 0;

	while(Copy_Au8StringData[Local_u8Iter] != 0) // check if data not equal  NULL
    180a:	fa 01       	movw	r30, r20
    180c:	e2 0f       	add	r30, r18
    180e:	f1 1d       	adc	r31, r1
    1810:	90 81       	ld	r25, Z
    1812:	91 11       	cpse	r25, r1
    1814:	f1 cf       	rjmp	.-30     	; 0x17f8 <UART_enuSendString+0x6>
		UART_First_ConnectionFlag++;
		Local_u8Iter++;
	}

	return Local_ErorrState;
}
    1816:	80 e0       	ldi	r24, 0x00	; 0
    1818:	08 95       	ret

0000181a <UART_enuRecieveString>:

ES_t UART_enuRecieveString(u8 * Copy_Au8RxString)
{
    181a:	ac 01       	movw	r20, r24

	(Copy_Au8RxString[Local_u8Iter++]) = Local_u8TempChar;

	}
#elif NEW_LINE == YES
	u8 Local_u8Iter = 0;
    181c:	20 e0       	ldi	r18, 0x00	; 0

	while(1)
	{

		while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7)-> RXc
    181e:	5f 9b       	sbis	0x0b, 7	; 11
    1820:	fe cf       	rjmp	.-4      	; 0x181e <UART_enuRecieveString+0x4>
		(Copy_Au8RxString[Local_u8Iter]) = UDR ;
    1822:	fa 01       	movw	r30, r20
    1824:	e2 0f       	add	r30, r18
    1826:	f1 1d       	adc	r31, r1
    1828:	9c b1       	in	r25, 0x0c	; 12
    182a:	90 83       	st	Z, r25

//to display what is typed

		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
    182c:	5d 9b       	sbis	0x0b, 5	; 11
    182e:	fe cf       	rjmp	.-4      	; 0x182c <UART_enuRecieveString+0x12>
		UDR = (Copy_Au8RxString[Local_u8Iter]);
    1830:	9c b9       	out	0x0c, r25	; 12

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
    1832:	90 81       	ld	r25, Z
    1834:	9d 30       	cpi	r25, 0x0D	; 13
    1836:	21 f0       	breq	.+8      	; 0x1840 <UART_enuRecieveString+0x26>
    1838:	9a 30       	cpi	r25, 0x0A	; 10
    183a:	11 f0       	breq	.+4      	; 0x1840 <UART_enuRecieveString+0x26>
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
			break;
		}

		Local_u8Iter++;
    183c:	2f 5f       	subi	r18, 0xFF	; 255
	}
    183e:	ef cf       	rjmp	.-34     	; 0x181e <UART_enuRecieveString+0x4>
		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
		UDR = (Copy_Au8RxString[Local_u8Iter]);

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
    1840:	10 82       	st	Z, r1
		Local_u8Iter++;
	}

#endif
	return Local_ErorrState;
}
    1842:	80 e0       	ldi	r24, 0x00	; 0
    1844:	08 95       	ret

00001846 <UART_enuCheck_Connection>:


u8 UART_enuCheck_Connection()
{
	if(UART_First_ConnectionFlag!=0)
    1846:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <__data_end>
    184a:	81 11       	cpse	r24, r1
	{
		return 1;
    184c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return 0;
}
    184e:	08 95       	ret

00001850 <__udivmodsi4>:
    1850:	a1 e2       	ldi	r26, 0x21	; 33
    1852:	1a 2e       	mov	r1, r26
    1854:	aa 1b       	sub	r26, r26
    1856:	bb 1b       	sub	r27, r27
    1858:	fd 01       	movw	r30, r26
    185a:	0d c0       	rjmp	.+26     	; 0x1876 <__udivmodsi4_ep>

0000185c <__udivmodsi4_loop>:
    185c:	aa 1f       	adc	r26, r26
    185e:	bb 1f       	adc	r27, r27
    1860:	ee 1f       	adc	r30, r30
    1862:	ff 1f       	adc	r31, r31
    1864:	a2 17       	cp	r26, r18
    1866:	b3 07       	cpc	r27, r19
    1868:	e4 07       	cpc	r30, r20
    186a:	f5 07       	cpc	r31, r21
    186c:	20 f0       	brcs	.+8      	; 0x1876 <__udivmodsi4_ep>
    186e:	a2 1b       	sub	r26, r18
    1870:	b3 0b       	sbc	r27, r19
    1872:	e4 0b       	sbc	r30, r20
    1874:	f5 0b       	sbc	r31, r21

00001876 <__udivmodsi4_ep>:
    1876:	66 1f       	adc	r22, r22
    1878:	77 1f       	adc	r23, r23
    187a:	88 1f       	adc	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	1a 94       	dec	r1
    1880:	69 f7       	brne	.-38     	; 0x185c <__udivmodsi4_loop>
    1882:	60 95       	com	r22
    1884:	70 95       	com	r23
    1886:	80 95       	com	r24
    1888:	90 95       	com	r25
    188a:	9b 01       	movw	r18, r22
    188c:	ac 01       	movw	r20, r24
    188e:	bd 01       	movw	r22, r26
    1890:	cf 01       	movw	r24, r30
    1892:	08 95       	ret

00001894 <__tablejump2__>:
    1894:	ee 0f       	add	r30, r30
    1896:	ff 1f       	adc	r31, r31
    1898:	05 90       	lpm	r0, Z+
    189a:	f4 91       	lpm	r31, Z
    189c:	e0 2d       	mov	r30, r0
    189e:	09 94       	ijmp

000018a0 <_exit>:
    18a0:	f8 94       	cli

000018a2 <__stop_program>:
    18a2:	ff cf       	rjmp	.-2      	; 0x18a2 <__stop_program>
