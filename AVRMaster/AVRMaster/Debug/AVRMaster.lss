
AVRMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001d58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000506  00800060  00001d58  00001dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800566  00800566  000022f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000022f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002324  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00002360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000474f  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fb6  00000000  00000000  00006cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002035  00000000  00000000  00007c8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000056c  00000000  00000000  00009cc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fbe  00000000  00000000  0000a230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000024c4  00000000  00000000  0000b1ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000d6b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 d8 0d 	jmp	0x1bb0	; 0x1bb0 <__vector_1>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	6a 05       	cpc	r22, r10
      56:	6f 05       	cpc	r22, r15
      58:	7b 05       	cpc	r23, r11
      5a:	80 05       	cpc	r24, r0
      5c:	85 05       	cpc	r24, r5
      5e:	8b 05       	cpc	r24, r11
      60:	8e 05       	cpc	r24, r14
      62:	91 05       	cpc	r25, r1
      64:	bf 05       	cpc	r27, r15

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	15 e0       	ldi	r17, 0x05	; 5
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e8 e5       	ldi	r30, 0x58	; 88
      7a:	fd e1       	ldi	r31, 0x1D	; 29
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	a6 36       	cpi	r26, 0x66	; 102
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	25 e0       	ldi	r18, 0x05	; 5
      8a:	a6 e6       	ldi	r26, 0x66	; 102
      8c:	b5 e0       	ldi	r27, 0x05	; 5
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	ad 36       	cpi	r26, 0x6D	; 109
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 43 02 	call	0x486	; 0x486 <main>
      9c:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <LoginSystem_SaveNewUser>:

#include <util/delay.h>


	ES_t LoginSystem_SaveNewUser(User_t Copy_strNewUser,u8 *Copy_u8NumofRegisteredUsers)
	{
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
      b8:	2b 97       	sbiw	r28, 0x0b	; 11
      ba:	0f b6       	in	r0, 0x3f	; 63
      bc:	f8 94       	cli
      be:	de bf       	out	0x3e, r29	; 62
      c0:	0f be       	out	0x3f, r0	; 63
      c2:	cd bf       	out	0x3d, r28	; 61
      c4:	e9 82       	std	Y+1, r14	; 0x01
      c6:	fa 82       	std	Y+2, r15	; 0x02
      c8:	0b 83       	std	Y+3, r16	; 0x03
      ca:	1c 83       	std	Y+4, r17	; 0x04
      cc:	2d 83       	std	Y+5, r18	; 0x05
      ce:	3e 83       	std	Y+6, r19	; 0x06
      d0:	4f 83       	std	Y+7, r20	; 0x07
      d2:	58 87       	std	Y+8, r21	; 0x08
      d4:	69 87       	std	Y+9, r22	; 0x09
      d6:	7a 87       	std	Y+10, r23	; 0x0a
      d8:	8b 87       	std	Y+11, r24	; 0x0b
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1), Copy_strNewUser.UserName,MAX_NO_OF_LETTERS);
      da:	f6 01       	movw	r30, r12
      dc:	80 81       	ld	r24, Z
      de:	f9 e0       	ldi	r31, 0x09	; 9
      e0:	8f 9f       	mul	r24, r31
      e2:	c0 01       	movw	r24, r0
      e4:	11 24       	eor	r1, r1
      e6:	44 e0       	ldi	r20, 0x04	; 4
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	be 01       	movw	r22, r28
      ec:	6f 5f       	subi	r22, 0xFF	; 255
      ee:	7f 4f       	sbci	r23, 0xFF	; 255
      f0:	42 96       	adiw	r24, 0x12	; 18
      f2:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <EEPROM_vWriteBlockToAddress>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	2f ef       	ldi	r18, 0xFF	; 255
      f8:	80 e7       	ldi	r24, 0x70	; 112
      fa:	92 e0       	ldi	r25, 0x02	; 2
      fc:	21 50       	subi	r18, 0x01	; 1
      fe:	80 40       	sbci	r24, 0x00	; 0
     100:	90 40       	sbci	r25, 0x00	; 0
     102:	e1 f7       	brne	.-8      	; 0xfc <LoginSystem_SaveNewUser+0x58>
     104:	00 c0       	rjmp	.+0      	; 0x106 <LoginSystem_SaveNewUser+0x62>
     106:	00 00       	nop
		_delay_ms(50);
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_strNewUser.Password,MAX_NO_OF_LETTERS);
     108:	f6 01       	movw	r30, r12
     10a:	80 81       	ld	r24, Z
     10c:	f9 e0       	ldi	r31, 0x09	; 9
     10e:	8f 9f       	mul	r24, r31
     110:	c0 01       	movw	r24, r0
     112:	11 24       	eor	r1, r1
     114:	44 e0       	ldi	r20, 0x04	; 4
     116:	50 e0       	ldi	r21, 0x00	; 0
     118:	be 01       	movw	r22, r28
     11a:	6a 5f       	subi	r22, 0xFA	; 250
     11c:	7f 4f       	sbci	r23, 0xFF	; 255
     11e:	46 96       	adiw	r24, 0x16	; 22
     120:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <EEPROM_vWriteBlockToAddress>
     124:	2f ef       	ldi	r18, 0xFF	; 255
     126:	80 e7       	ldi	r24, 0x70	; 112
     128:	92 e0       	ldi	r25, 0x02	; 2
     12a:	21 50       	subi	r18, 0x01	; 1
     12c:	80 40       	sbci	r24, 0x00	; 0
     12e:	90 40       	sbci	r25, 0x00	; 0
     130:	e1 f7       	brne	.-8      	; 0x12a <LoginSystem_SaveNewUser+0x86>
     132:	00 c0       	rjmp	.+0      	; 0x134 <LoginSystem_SaveNewUser+0x90>
     134:	00 00       	nop
		_delay_ms(50);
		

		EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_strNewUser.User_Priority);
     136:	f6 01       	movw	r30, r12
     138:	80 81       	ld	r24, Z
     13a:	f9 e0       	ldi	r31, 0x09	; 9
     13c:	8f 9f       	mul	r24, r31
     13e:	c0 01       	movw	r24, r0
     140:	11 24       	eor	r1, r1
     142:	6b 85       	ldd	r22, Y+11	; 0x0b
     144:	4a 96       	adiw	r24, 0x1a	; 26
     146:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <EEPROM_vWriteByteToAddress>
     14a:	2f ef       	ldi	r18, 0xFF	; 255
     14c:	80 e7       	ldi	r24, 0x70	; 112
     14e:	92 e0       	ldi	r25, 0x02	; 2
     150:	21 50       	subi	r18, 0x01	; 1
     152:	80 40       	sbci	r24, 0x00	; 0
     154:	90 40       	sbci	r25, 0x00	; 0
     156:	e1 f7       	brne	.-8      	; 0x150 <LoginSystem_SaveNewUser+0xac>
     158:	00 c0       	rjmp	.+0      	; 0x15a <LoginSystem_SaveNewUser+0xb6>
     15a:	00 00       	nop
		_delay_ms(50);
		(*Copy_u8NumofRegisteredUsers)++;
     15c:	f6 01       	movw	r30, r12
     15e:	60 81       	ld	r22, Z
     160:	6f 5f       	subi	r22, 0xFF	; 255
     162:	60 83       	st	Z, r22

		EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     164:	81 e1       	ldi	r24, 0x11	; 17
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <EEPROM_vWriteByteToAddress>
	}
     16c:	2b 96       	adiw	r28, 0x0b	; 11
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	1f 91       	pop	r17
     17e:	0f 91       	pop	r16
     180:	ff 90       	pop	r15
     182:	ef 90       	pop	r14
     184:	df 90       	pop	r13
     186:	cf 90       	pop	r12
     188:	08 95       	ret

0000018a <LoginSystem_enuGetDataFromUserByKeypad>:
	ES_t LoginSystem_enuGetDataFromUserByKeypad(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
	{
     18a:	af 92       	push	r10
     18c:	bf 92       	push	r11
     18e:	cf 92       	push	r12
     190:	df 92       	push	r13
     192:	ef 92       	push	r14
     194:	ff 92       	push	r15
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	1f 92       	push	r1
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	7c 01       	movw	r14, r24
     1a6:	8b 01       	movw	r16, r22
		ES_t Local_enuerrorStates = ES_NOK;
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
     1a8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Username:");
     1ac:	80 e8       	ldi	r24, 0x80	; 128
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
     1bc:	67 01       	movw	r12, r14
     1be:	57 01       	movw	r10, r14
     1c0:	84 e0       	ldi	r24, 0x04	; 4
     1c2:	a8 0e       	add	r10, r24
     1c4:	b1 1c       	adc	r11, r1
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     1c6:	ce 01       	movw	r24, r28
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_enuSendData>
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	f6 01       	movw	r30, r12
     1d8:	81 93       	st	Z+, r24
     1da:	6f 01       	movw	r12, r30
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
		LCD_enuDisplayString("Username:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1dc:	ae 16       	cp	r10, r30
     1de:	bf 06       	cpc	r11, r31
     1e0:	91 f7       	brne	.-28     	; 0x1c6 <LoginSystem_enuGetDataFromUserByKeypad+0x3c>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
			LCD_enuSendData(Local_u8PressedKey);
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
		}
		Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     1e2:	f7 01       	movw	r30, r14
     1e4:	14 82       	std	Z+4, r1	; 0x04

		LCD_enuClearDisplay();
     1e6:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Password:");
     1ea:	8a e8       	ldi	r24, 0x8A	; 138
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
     1fa:	78 01       	movw	r14, r16
     1fc:	68 01       	movw	r12, r16
     1fe:	f4 e0       	ldi	r31, 0x04	; 4
     200:	cf 0e       	add	r12, r31
     202:	d1 1c       	adc	r13, r1

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     204:	ce 01       	movw	r24, r28
     206:	01 96       	adiw	r24, 0x01	; 1
     208:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Keypad_enuGetPressedKey>
			LCD_enuSendData('*');
     20c:	8a e2       	ldi	r24, 0x2A	; 42
     20e:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_enuSendData>
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	f7 01       	movw	r30, r14
     216:	81 93       	st	Z+, r24
     218:	7f 01       	movw	r14, r30

		LCD_enuClearDisplay();
		LCD_enuDisplayString("Password:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     21a:	ec 15       	cp	r30, r12
     21c:	fd 05       	cpc	r31, r13
     21e:	91 f7       	brne	.-28     	; 0x204 <LoginSystem_enuGetDataFromUserByKeypad+0x7a>
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
			LCD_enuSendData('*');
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;

		}
		Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     220:	f8 01       	movw	r30, r16
     222:	14 82       	std	Z+4, r1	; 0x04
		Local_enuerrorStates = ES_OK;
		return Local_enuerrorStates;
	}
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	0f 90       	pop	r0
     228:	df 91       	pop	r29
     22a:	cf 91       	pop	r28
     22c:	1f 91       	pop	r17
     22e:	0f 91       	pop	r16
     230:	ff 90       	pop	r15
     232:	ef 90       	pop	r14
     234:	df 90       	pop	r13
     236:	cf 90       	pop	r12
     238:	bf 90       	pop	r11
     23a:	af 90       	pop	r10
     23c:	08 95       	ret

0000023e <LoginSystem_enuGetDataFromUserBY_UART>:
	
		ES_t LoginSystem_enuGetDataFromUserBY_UART(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
		{
     23e:	0f 93       	push	r16
     240:	1f 93       	push	r17
     242:	cf 93       	push	r28
     244:	df 93       	push	r29
     246:	8c 01       	movw	r16, r24
     248:	eb 01       	movw	r28, r22
			ES_t Local_enuerrorStates = ES_NOK;
			UART_enuSendString("\r\n\r\nUsername: ");
     24a:	84 e9       	ldi	r24, 0x94	; 148
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Username);
     252:	c8 01       	movw	r24, r16
     254:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <UART_enuRecieveString>
			Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     258:	f8 01       	movw	r30, r16
     25a:	14 82       	std	Z+4, r1	; 0x04
			UART_enuSendString("Password: ");
     25c:	83 ea       	ldi	r24, 0xA3	; 163
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Password);
     264:	ce 01       	movw	r24, r28
     266:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <UART_enuRecieveString>
			Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     26a:	1c 82       	std	Y+4, r1	; 0x04

			Local_enuerrorStates = ES_OK;
			return Local_enuerrorStates;
		}
     26c:	81 e0       	ldi	r24, 0x01	; 1
     26e:	df 91       	pop	r29
     270:	cf 91       	pop	r28
     272:	1f 91       	pop	r17
     274:	0f 91       	pop	r16
     276:	08 95       	ret

00000278 <LoginSystem_u8Strcmp>:



	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
     278:	dc 01       	movw	r26, r24
		u8 Local_u8Iterator=0;
     27a:	40 e0       	ldi	r20, 0x00	; 0
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     27c:	24 2f       	mov	r18, r20
     27e:	30 e0       	ldi	r19, 0x00	; 0
     280:	fd 01       	movw	r30, r26
     282:	e2 0f       	add	r30, r18
     284:	f3 1f       	adc	r31, r19
     286:	90 81       	ld	r25, Z
     288:	fb 01       	movw	r30, r22
     28a:	e2 0f       	add	r30, r18
     28c:	f3 1f       	adc	r31, r19
     28e:	20 81       	ld	r18, Z
     290:	92 13       	cpse	r25, r18
     292:	04 c0       	rjmp	.+8      	; 0x29c <LoginSystem_u8Strcmp+0x24>
		{
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     294:	99 23       	and	r25, r25
     296:	41 f0       	breq	.+16     	; 0x2a8 <LoginSystem_u8Strcmp+0x30>
				break;
			Local_u8Iterator++;
     298:	4f 5f       	subi	r20, 0xFF	; 255
     29a:	f0 cf       	rjmp	.-32     	; 0x27c <LoginSystem_u8Strcmp+0x4>
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     29c:	91 11       	cpse	r25, r1
     29e:	06 c0       	rjmp	.+12     	; 0x2ac <LoginSystem_u8Strcmp+0x34>
			return TRUE;
     2a0:	81 e0       	ldi	r24, 0x01	; 1
     2a2:	22 23       	and	r18, r18
     2a4:	21 f0       	breq	.+8      	; 0x2ae <LoginSystem_u8Strcmp+0x36>
     2a6:	02 c0       	rjmp	.+4      	; 0x2ac <LoginSystem_u8Strcmp+0x34>
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	08 95       	ret
		else
			return FALSE;
     2ac:	80 e0       	ldi	r24, 0x00	; 0
	}
     2ae:	08 95       	ret

000002b0 <LoginSystem_RemoveUser>:
	
	u8 LoginSystem_RemoveUser(User_t *Copy_AstrUsers,u8 *Copy_u8NumofRegisteredUsers)
		{
     2b0:	7f 92       	push	r7
     2b2:	8f 92       	push	r8
     2b4:	9f 92       	push	r9
     2b6:	af 92       	push	r10
     2b8:	bf 92       	push	r11
     2ba:	cf 92       	push	r12
     2bc:	df 92       	push	r13
     2be:	ef 92       	push	r14
     2c0:	ff 92       	push	r15
     2c2:	0f 93       	push	r16
     2c4:	1f 93       	push	r17
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <LoginSystem_RemoveUser+0x1c>
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <LoginSystem_RemoveUser+0x1e>
     2ce:	1f 92       	push	r1
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	8c 01       	movw	r16, r24
     2d6:	5b 01       	movw	r10, r22
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
     2d8:	8e ea       	ldi	r24, 0xAE	; 174
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
			UART_enuRecieveString(Local_Au8Username);
     2e0:	ce 01       	movw	r24, r28
     2e2:	01 96       	adiw	r24, 0x01	; 1
     2e4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <UART_enuRecieveString>
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     2e8:	1d 82       	std	Y+5, r1	; 0x05
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     2ea:	f5 01       	movw	r30, r10
     2ec:	90 80       	ld	r9, Z
     2ee:	78 01       	movw	r14, r16
     2f0:	d1 2c       	mov	r13, r1
     2f2:	d9 14       	cp	r13, r9
     2f4:	09 f4       	brne	.+2      	; 0x2f8 <LoginSystem_RemoveUser+0x48>
     2f6:	7e c0       	rjmp	.+252    	; 0x3f4 <LoginSystem_RemoveUser+0x144>
			{
				Copy_u8Flag = LoginSystem_u8Strcmp (Copy_AstrUsers[Local_u8Iterator].UserName,Local_Au8Username);
     2f8:	7e 2c       	mov	r7, r14
     2fa:	8f 2c       	mov	r8, r15
     2fc:	be 01       	movw	r22, r28
     2fe:	6f 5f       	subi	r22, 0xFF	; 255
     300:	7f 4f       	sbci	r23, 0xFF	; 255
     302:	c7 01       	movw	r24, r14
     304:	0e 94 3c 01 	call	0x278	; 0x278 <LoginSystem_u8Strcmp>
     308:	c8 2e       	mov	r12, r24
     30a:	fb e0       	ldi	r31, 0x0B	; 11
     30c:	ef 0e       	add	r14, r31
     30e:	f1 1c       	adc	r15, r1
				if (Copy_u8Flag )
     310:	88 23       	and	r24, r24
     312:	09 f4       	brne	.+2      	; 0x316 <LoginSystem_RemoveUser+0x66>
     314:	6d c0       	rjmp	.+218    	; 0x3f0 <LoginSystem_RemoveUser+0x140>
				{
					Copy_AstrUsers[Local_u8Iterator]=Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1];
     316:	f8 01       	movw	r30, r16
     318:	2b e0       	ldi	r18, 0x0B	; 11
     31a:	92 9e       	mul	r9, r18
     31c:	e0 0d       	add	r30, r0
     31e:	f1 1d       	adc	r31, r1
     320:	11 24       	eor	r1, r1
     322:	3b 97       	sbiw	r30, 0x0b	; 11
     324:	8b e0       	ldi	r24, 0x0B	; 11
     326:	a7 2d       	mov	r26, r7
     328:	b8 2d       	mov	r27, r8
     32a:	01 90       	ld	r0, Z+
     32c:	0d 92       	st	X+, r0
     32e:	8a 95       	dec	r24
     330:	e1 f7       	brne	.-8      	; 0x32a <LoginSystem_RemoveUser+0x7a>
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1), Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].UserName,MAX_NO_OF_LETTERS);
     332:	f5 01       	movw	r30, r10
     334:	80 81       	ld	r24, Z
     336:	f9 e0       	ldi	r31, 0x09	; 9
     338:	df 9e       	mul	r13, r31
     33a:	70 01       	movw	r14, r0
     33c:	11 24       	eor	r1, r1
     33e:	b8 01       	movw	r22, r16
     340:	2b e0       	ldi	r18, 0x0B	; 11
     342:	82 9f       	mul	r24, r18
     344:	60 0d       	add	r22, r0
     346:	71 1d       	adc	r23, r1
     348:	11 24       	eor	r1, r1
     34a:	6b 50       	subi	r22, 0x0B	; 11
     34c:	71 09       	sbc	r23, r1
     34e:	44 e0       	ldi	r20, 0x04	; 4
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	c7 01       	movw	r24, r14
     354:	42 96       	adiw	r24, 0x12	; 18
     356:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <EEPROM_vWriteBlockToAddress>
     35a:	8f ef       	ldi	r24, 0xFF	; 255
     35c:	90 e7       	ldi	r25, 0x70	; 112
     35e:	e2 e0       	ldi	r30, 0x02	; 2
     360:	81 50       	subi	r24, 0x01	; 1
     362:	90 40       	sbci	r25, 0x00	; 0
     364:	e0 40       	sbci	r30, 0x00	; 0
     366:	e1 f7       	brne	.-8      	; 0x360 <LoginSystem_RemoveUser+0xb0>
     368:	00 c0       	rjmp	.+0      	; 0x36a <LoginSystem_RemoveUser+0xba>
     36a:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].Password,MAX_NO_OF_LETTERS);
     36c:	f5 01       	movw	r30, r10
     36e:	80 81       	ld	r24, Z
     370:	b8 01       	movw	r22, r16
     372:	fb e0       	ldi	r31, 0x0B	; 11
     374:	8f 9f       	mul	r24, r31
     376:	60 0d       	add	r22, r0
     378:	71 1d       	adc	r23, r1
     37a:	11 24       	eor	r1, r1
     37c:	66 50       	subi	r22, 0x06	; 6
     37e:	71 09       	sbc	r23, r1
     380:	44 e0       	ldi	r20, 0x04	; 4
     382:	50 e0       	ldi	r21, 0x00	; 0
     384:	c7 01       	movw	r24, r14
     386:	46 96       	adiw	r24, 0x16	; 22
     388:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <EEPROM_vWriteBlockToAddress>
     38c:	2f ef       	ldi	r18, 0xFF	; 255
     38e:	80 e7       	ldi	r24, 0x70	; 112
     390:	92 e0       	ldi	r25, 0x02	; 2
     392:	21 50       	subi	r18, 0x01	; 1
     394:	80 40       	sbci	r24, 0x00	; 0
     396:	90 40       	sbci	r25, 0x00	; 0
     398:	e1 f7       	brne	.-8      	; 0x392 <LoginSystem_RemoveUser+0xe2>
     39a:	00 c0       	rjmp	.+0      	; 0x39c <LoginSystem_RemoveUser+0xec>
     39c:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].User_Priority);
     39e:	f5 01       	movw	r30, r10
     3a0:	80 81       	ld	r24, Z
     3a2:	fb e0       	ldi	r31, 0x0B	; 11
     3a4:	8f 9f       	mul	r24, r31
     3a6:	00 0d       	add	r16, r0
     3a8:	11 1d       	adc	r17, r1
     3aa:	11 24       	eor	r1, r1
     3ac:	f8 01       	movw	r30, r16
     3ae:	3b 97       	sbiw	r30, 0x0b	; 11
     3b0:	62 85       	ldd	r22, Z+10	; 0x0a
     3b2:	c7 01       	movw	r24, r14
     3b4:	4a 96       	adiw	r24, 0x1a	; 26
     3b6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <EEPROM_vWriteByteToAddress>
     3ba:	2f ef       	ldi	r18, 0xFF	; 255
     3bc:	80 e7       	ldi	r24, 0x70	; 112
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	21 50       	subi	r18, 0x01	; 1
     3c2:	80 40       	sbci	r24, 0x00	; 0
     3c4:	90 40       	sbci	r25, 0x00	; 0
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <LoginSystem_RemoveUser+0x110>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LoginSystem_RemoveUser+0x11a>
     3ca:	00 00       	nop
					_delay_ms(50);
					(*Copy_u8NumofRegisteredUsers)--;
     3cc:	f5 01       	movw	r30, r10
     3ce:	60 81       	ld	r22, Z
     3d0:	61 50       	subi	r22, 0x01	; 1
     3d2:	60 83       	st	Z, r22
					EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     3d4:	81 e1       	ldi	r24, 0x11	; 17
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <EEPROM_vWriteByteToAddress>
     3dc:	ff ef       	ldi	r31, 0xFF	; 255
     3de:	20 e7       	ldi	r18, 0x70	; 112
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	f1 50       	subi	r31, 0x01	; 1
     3e4:	20 40       	sbci	r18, 0x00	; 0
     3e6:	80 40       	sbci	r24, 0x00	; 0
     3e8:	e1 f7       	brne	.-8      	; 0x3e2 <LoginSystem_RemoveUser+0x132>
     3ea:	00 c0       	rjmp	.+0      	; 0x3ec <LoginSystem_RemoveUser+0x13c>
     3ec:	00 00       	nop
     3ee:	03 c0       	rjmp	.+6      	; 0x3f6 <LoginSystem_RemoveUser+0x146>
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
			UART_enuRecieveString(Local_Au8Username);
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     3f0:	d3 94       	inc	r13
     3f2:	7f cf       	rjmp	.-258    	; 0x2f2 <LoginSystem_RemoveUser+0x42>
     3f4:	c1 2c       	mov	r12, r1
					_delay_ms(50);
					break;
				}
			}
			return Copy_u8Flag;
		}
     3f6:	8c 2d       	mov	r24, r12
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	0f 90       	pop	r0
     3fe:	0f 90       	pop	r0
     400:	0f 90       	pop	r0
     402:	df 91       	pop	r29
     404:	cf 91       	pop	r28
     406:	1f 91       	pop	r17
     408:	0f 91       	pop	r16
     40a:	ff 90       	pop	r15
     40c:	ef 90       	pop	r14
     40e:	df 90       	pop	r13
     410:	cf 90       	pop	r12
     412:	bf 90       	pop	r11
     414:	af 90       	pop	r10
     416:	9f 90       	pop	r9
     418:	8f 90       	pop	r8
     41a:	7f 90       	pop	r7
     41c:	08 95       	ret

0000041e <SetBit>:
	

	
	void SetBit(u8 *x,u8 n)
	{
		(*x) |= (1<<n);
     41e:	21 e0       	ldi	r18, 0x01	; 1
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	01 c0       	rjmp	.+2      	; 0x426 <SetBit+0x8>
     424:	22 0f       	add	r18, r18
     426:	6a 95       	dec	r22
     428:	ea f7       	brpl	.-6      	; 0x424 <SetBit+0x6>
     42a:	fc 01       	movw	r30, r24
     42c:	30 81       	ld	r19, Z
     42e:	23 2b       	or	r18, r19
     430:	20 83       	st	Z, r18
     432:	08 95       	ret

00000434 <ClearBit>:
	}
	void ClearBit(u8 *x,u8 n)
	{
		(*x) &=~ (1<<n);
     434:	21 e0       	ldi	r18, 0x01	; 1
     436:	30 e0       	ldi	r19, 0x00	; 0
     438:	01 c0       	rjmp	.+2      	; 0x43c <ClearBit+0x8>
     43a:	22 0f       	add	r18, r18
     43c:	6a 95       	dec	r22
     43e:	ea f7       	brpl	.-6      	; 0x43a <ClearBit+0x6>
     440:	20 95       	com	r18
     442:	fc 01       	movw	r30, r24
     444:	30 81       	ld	r19, Z
     446:	23 23       	and	r18, r19
     448:	20 83       	st	Z, r18
     44a:	08 95       	ret

0000044c <ToggleBit>:
	}
	void ToggleBit(u8 *x,u8 n)
	{
		(*x) ^=(1<<n);
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	01 c0       	rjmp	.+2      	; 0x454 <ToggleBit+0x8>
     452:	22 0f       	add	r18, r18
     454:	6a 95       	dec	r22
     456:	ea f7       	brpl	.-6      	; 0x452 <ToggleBit+0x6>
     458:	fc 01       	movw	r30, r24
     45a:	30 81       	ld	r19, Z
     45c:	23 27       	eor	r18, r19
     45e:	20 83       	st	Z, r18
     460:	08 95       	ret

00000462 <Button_Pressed_Interrupt>:
	return 0;
}//end of main()

volatile void Button_Pressed_Interrupt()  //The function that's executed on the EXT INT ISR interrupt When a button is pressed Which Indicates that a LCD_KEYPAD user wants to initiate a login attempt,So it switch the program state into the "LCD_KEYPAD_LOGIN_PAGE_STATE"
{
	if (!(LoginSystem_u8AdminOnlineFlag || LoginSystem_u8PromotedUserOnlineFlag || Blocking_Flag ))
     462:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <LoginSystem_u8AdminOnlineFlag>
     466:	81 11       	cpse	r24, r1
     468:	0d c0       	rjmp	.+26     	; 0x484 <Button_Pressed_Interrupt+0x22>
     46a:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <LoginSystem_u8PromotedUserOnlineFlag>
     46e:	81 11       	cpse	r24, r1
     470:	09 c0       	rjmp	.+18     	; 0x484 <Button_Pressed_Interrupt+0x22>
     472:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <__data_end>
     476:	81 11       	cpse	r24, r1
     478:	05 c0       	rjmp	.+10     	; 0x484 <Button_Pressed_Interrupt+0x22>
	{
		Program_Status_Flag = LCD_KEYPAD_LOGIN_PAGE_STATE;
     47a:	83 e0       	ldi	r24, 0x03	; 3
     47c:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <Program_Status_Flag>
		ShowToUser = MAIN_MENU;
     480:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <ShowToUser>
     484:	08 95       	ret

00000486 <main>:

//Our Program is divided into several State "Finite State Machine"
//These States are explained as you go through the code 

int main (void)
{
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	c7 54       	subi	r28, 0x47	; 71
     490:	d1 09       	sbc	r29, r1
     492:	0f b6       	in	r0, 0x3f	; 63
     494:	f8 94       	cli
     496:	de bf       	out	0x3e, r29	; 62
     498:	0f be       	out	0x3f, r0	; 63
     49a:	cd bf       	out	0x3d, r28	; 61
	
/*************************************************************************************************************/
/*******************************************INITIALIZATIONS***************************************************/
/*************************************************************************************************************/
DIO_enuInit();
     49c:	0e 94 af 0c 	call	0x195e	; 0x195e <DIO_enuInit>
SPI_vidInit();
     4a0:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <SPI_vidInit>
UART_enuUART_Init();
     4a4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <UART_enuUART_Init>

LCD_enuInit();
     4a8:	0e 94 90 0b 	call	0x1720	; 0x1720 <LCD_enuInit>
Keypad_enuInit();
     4ac:	0e 94 a6 09 	call	0x134c	; 0x134c <Keypad_enuInit>
EXTI_enuInit();
     4b0:	0e 94 c6 0d 	call	0x1b8c	; 0x1b8c <EXTI_enuInit>
	
EXTI_enuCallBack((volatile void (*) (void))Button_Pressed_Interrupt);
     4b4:	81 e3       	ldi	r24, 0x31	; 49
     4b6:	92 e0       	ldi	r25, 0x02	; 2
     4b8:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <EXTI_enuCallBack>

/************************************************************************************************************/
/***********************************DEVICE OUTPUT CONFIGURATION**********************************************/
/************************************************************************************************************/

DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN1,DIO_u8OUTPUT); //UART Transmit Enable Pin output
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	61 e0       	ldi	r22, 0x01	; 1
     4c0:	83 e0       	ldi	r24, 0x03	; 3
     4c2:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(DIO_u8GROUP_C,DIO_u8PIN0,DIO_u8OUTPUT); // Blocking mode pin
     4c6:	41 e0       	ldi	r20, 0x01	; 1
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	82 e0       	ldi	r24, 0x02	; 2
     4cc:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
__asm("sei");	// GIE Enable
     4d0:	78 94       	sei
/**************************************VARIABLE DECLARATIONS*************************************************/
/************************************************************************************************************/

User_t LoginSystem_strAdmin;
User_t LoginSystem_AstrUsers[MAX_NO_OF_USERS];
u8 LoginSystem_NumOfRegisteredUsers=0;
     4d2:	28 96       	adiw	r28, 0x08	; 8
     4d4:	1f ae       	std	Y+63, r1	; 0x3f
     4d6:	28 97       	sbiw	r28, 0x08	; 8
u8 LoginSystem_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
u8 LoginSystem_Au8Password[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];

u8 Keypad_Pressed_Key;
u8 Current_State = 0;
     4d8:	26 96       	adiw	r28, 0x06	; 6
     4da:	1f ae       	std	Y+63, r1	; 0x3f
     4dc:	26 97       	sbiw	r28, 0x06	; 6

/************************************************************************************************************/
/********************************************WELCOME PAGE****************************************************/
/************************************************************************************************************/
	
	LCD_enuDisplayString("Welcome To Smart");
     4de:	88 ed       	ldi	r24, 0xD8	; 216
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
	LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
	LCD_enuDisplayString("Home !");
     4ee:	89 ee       	ldi	r24, 0xE9	; 233
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
	EEPROM_ui8ReadByteFromAddress(SAVED_INITIAL_PROGRAM_STATE_ADDRESS,&Program_Status_Flag);
     4f6:	67 e6       	ldi	r22, 0x67	; 103
     4f8:	75 e0       	ldi	r23, 0x05	; 5
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <EEPROM_ui8ReadByteFromAddress>
     500:	2f ef       	ldi	r18, 0xFF	; 255
     502:	3d e2       	ldi	r19, 0x2D	; 45
     504:	82 e2       	ldi	r24, 0x22	; 34
     506:	21 50       	subi	r18, 0x01	; 1
     508:	30 40       	sbci	r19, 0x00	; 0
     50a:	80 40       	sbci	r24, 0x00	; 0
     50c:	e1 f7       	brne	.-8      	; 0x506 <main+0x80>
     50e:	00 c0       	rjmp	.+0      	; 0x510 <main+0x8a>
     510:	00 00       	nop
	_delay_ms (700);
	LCD_enuClearDisplay();
     512:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
/************************************************************************************FIRST_TIME_USE_STATE*********************************************************************************/
/************************************************************First State of The Program In Case of First Time Use of The smart Home******************************************************/
/*****************************************************************It Registers The Admin For First Time and Save it in EEPROM***********************************************************/
	
			if (Program_Status_Flag == FIRST_TIME_USE_STATE)
     516:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <Program_Status_Flag>
     51a:	8f 3f       	cpi	r24, 0xFF	; 255
     51c:	09 f0       	breq	.+2      	; 0x520 <main+0x9a>
     51e:	91 c0       	rjmp	.+290    	; 0x642 <main+0x1bc>
			{

				EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,LoginSystem_NumOfRegisteredUsers);
     520:	28 96       	adiw	r28, 0x08	; 8
     522:	6f ad       	ldd	r22, Y+63	; 0x3f
     524:	28 97       	sbiw	r28, 0x08	; 8
     526:	81 e1       	ldi	r24, 0x11	; 17
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <EEPROM_vWriteByteToAddress>
     52e:	9f ef       	ldi	r25, 0xFF	; 255
     530:	e0 e7       	ldi	r30, 0x70	; 112
     532:	f2 e0       	ldi	r31, 0x02	; 2
     534:	91 50       	subi	r25, 0x01	; 1
     536:	e0 40       	sbci	r30, 0x00	; 0
     538:	f0 40       	sbci	r31, 0x00	; 0
     53a:	e1 f7       	brne	.-8      	; 0x534 <main+0xae>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <main+0xb8>
     53e:	00 00       	nop
				_delay_ms(50);
				LCD_enuDisplayString("For First Time");
     540:	80 ef       	ldi	r24, 0xF0	; 240
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Use");
     550:	8f ef       	ldi	r24, 0xFF	; 255
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
     558:	2f ef       	ldi	r18, 0xFF	; 255
     55a:	3d e2       	ldi	r19, 0x2D	; 45
     55c:	82 e2       	ldi	r24, 0x22	; 34
     55e:	21 50       	subi	r18, 0x01	; 1
     560:	30 40       	sbci	r19, 0x00	; 0
     562:	80 40       	sbci	r24, 0x00	; 0
     564:	e1 f7       	brne	.-8      	; 0x55e <main+0xd8>
     566:	00 c0       	rjmp	.+0      	; 0x568 <main+0xe2>
     568:	00 00       	nop
				_delay_ms(700);
				LCD_enuClearDisplay();
     56a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Register Admin");
     56e:	83 e0       	ldi	r24, 0x03	; 3
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     576:	60 e0       	ldi	r22, 0x00	; 0
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("on Keypad");
     57e:	82 e1       	ldi	r24, 0x12	; 18
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
     586:	9f ef       	ldi	r25, 0xFF	; 255
     588:	ed e2       	ldi	r30, 0x2D	; 45
     58a:	f2 e2       	ldi	r31, 0x22	; 34
     58c:	91 50       	subi	r25, 0x01	; 1
     58e:	e0 40       	sbci	r30, 0x00	; 0
     590:	f0 40       	sbci	r31, 0x00	; 0
     592:	e1 f7       	brne	.-8      	; 0x58c <main+0x106>
     594:	00 c0       	rjmp	.+0      	; 0x596 <main+0x110>
     596:	00 00       	nop
				_delay_ms(700);
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_strAdmin.UserName, LoginSystem_strAdmin.Password);
     598:	be 01       	movw	r22, r28
     59a:	6e 5c       	subi	r22, 0xCE	; 206
     59c:	7f 4f       	sbci	r23, 0xFF	; 255
     59e:	ce 01       	movw	r24, r28
     5a0:	8d 96       	adiw	r24, 0x2d	; 45
     5a2:	0e 94 c5 00 	call	0x18a	; 0x18a <LoginSystem_enuGetDataFromUserByKeypad>
				LoginSystem_strAdmin.User_Priority = ADMIN_PRIORITY;
     5a6:	81 e0       	ldi	r24, 0x01	; 1
     5a8:	8f ab       	std	Y+55, r24	; 0x37
				
				
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS ,LoginSystem_strAdmin.UserName , MAX_NO_OF_LETTERS);
     5aa:	44 e0       	ldi	r20, 0x04	; 4
     5ac:	50 e0       	ldi	r21, 0x00	; 0
     5ae:	be 01       	movw	r22, r28
     5b0:	63 5d       	subi	r22, 0xD3	; 211
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
     5b4:	81 e0       	ldi	r24, 0x01	; 1
     5b6:	90 e0       	ldi	r25, 0x00	; 0
     5b8:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <EEPROM_vWriteBlockToAddress>
     5bc:	2f ef       	ldi	r18, 0xFF	; 255
     5be:	30 e7       	ldi	r19, 0x70	; 112
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	21 50       	subi	r18, 0x01	; 1
     5c4:	30 40       	sbci	r19, 0x00	; 0
     5c6:	80 40       	sbci	r24, 0x00	; 0
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <main+0x13c>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <main+0x146>
     5cc:	00 00       	nop
				_delay_ms(50);
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS ,LoginSystem_strAdmin.Password , MAX_NO_OF_LETTERS);
     5ce:	44 e0       	ldi	r20, 0x04	; 4
     5d0:	50 e0       	ldi	r21, 0x00	; 0
     5d2:	be 01       	movw	r22, r28
     5d4:	6e 5c       	subi	r22, 0xCE	; 206
     5d6:	7f 4f       	sbci	r23, 0xFF	; 255
     5d8:	85 e0       	ldi	r24, 0x05	; 5
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 ac 0d 	call	0x1b58	; 0x1b58 <EEPROM_vWriteBlockToAddress>
     5e0:	9f ef       	ldi	r25, 0xFF	; 255
     5e2:	e0 e7       	ldi	r30, 0x70	; 112
     5e4:	f2 e0       	ldi	r31, 0x02	; 2
     5e6:	91 50       	subi	r25, 0x01	; 1
     5e8:	e0 40       	sbci	r30, 0x00	; 0
     5ea:	f0 40       	sbci	r31, 0x00	; 0
     5ec:	e1 f7       	brne	.-8      	; 0x5e6 <main+0x160>
     5ee:	00 c0       	rjmp	.+0      	; 0x5f0 <main+0x16a>
     5f0:	00 00       	nop
				_delay_ms(50);

				EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATE_ADDRESS,LOAD_LOGIN_SYSTEM_DATABASE_STATE);
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <EEPROM_vWriteByteToAddress>
     5fc:	2f ef       	ldi	r18, 0xFF	; 255
     5fe:	30 e7       	ldi	r19, 0x70	; 112
     600:	82 e0       	ldi	r24, 0x02	; 2
     602:	21 50       	subi	r18, 0x01	; 1
     604:	30 40       	sbci	r19, 0x00	; 0
     606:	80 40       	sbci	r24, 0x00	; 0
     608:	e1 f7       	brne	.-8      	; 0x602 <main+0x17c>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <main+0x186>
     60c:	00 00       	nop
				_delay_ms(50);
	
				LCD_enuClearDisplay();
     60e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Saved");
     612:	8c e1       	ldi	r24, 0x1C	; 28
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     61a:	60 e0       	ldi	r22, 0x00	; 0
     61c:	81 e0       	ldi	r24, 0x01	; 1
     61e:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Successfully");
     622:	80 e8       	ldi	r24, 0x80	; 128
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
     62a:	9f ef       	ldi	r25, 0xFF	; 255
     62c:	ed e2       	ldi	r30, 0x2D	; 45
     62e:	f2 e2       	ldi	r31, 0x22	; 34
     630:	91 50       	subi	r25, 0x01	; 1
     632:	e0 40       	sbci	r30, 0x00	; 0
     634:	f0 40       	sbci	r31, 0x00	; 0
     636:	e1 f7       	brne	.-8      	; 0x630 <main+0x1aa>
     638:	00 c0       	rjmp	.+0      	; 0x63a <main+0x1b4>
     63a:	00 00       	nop
				_delay_ms(700);
				LCD_enuClearDisplay();
     63c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
     640:	9f c0       	rjmp	.+318    	; 0x780 <main+0x2fa>
			
/********************************************************************************LOAD_LOGIN_SYSTEM_DATABASE_STATE*************************************************************************/
/********************************************************First State of The Program if it's not the First Time Use of The smart Home*****************************************************/
/****************************************************It Loads the Usernames and Passwords of The ADMIN and Registered Users from the EEPROM*********************************************/

			else if (Program_Status_Flag == LOAD_LOGIN_SYSTEM_DATABASE_STATE)
     642:	81 11       	cpse	r24, r1
     644:	a0 c0       	rjmp	.+320    	; 0x786 <main+0x300>
			{
				
				EEPROM_ui8ReadByteFromAddress(NO_OF_REGISTERED_USERS_ADDRESS,&LoginSystem_NumOfRegisteredUsers);
     646:	be 01       	movw	r22, r28
     648:	69 5b       	subi	r22, 0xB9	; 185
     64a:	7f 4f       	sbci	r23, 0xFF	; 255
     64c:	81 e1       	ldi	r24, 0x11	; 17
     64e:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <EEPROM_ui8ReadByteFromAddress>
     652:	2f ef       	ldi	r18, 0xFF	; 255
     654:	30 e7       	ldi	r19, 0x70	; 112
     656:	82 e0       	ldi	r24, 0x02	; 2
     658:	21 50       	subi	r18, 0x01	; 1
     65a:	30 40       	sbci	r19, 0x00	; 0
     65c:	80 40       	sbci	r24, 0x00	; 0
     65e:	e1 f7       	brne	.-8      	; 0x658 <main+0x1d2>
     660:	00 c0       	rjmp	.+0      	; 0x662 <main+0x1dc>
     662:	00 00       	nop
				_delay_ms(50);
				

				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS,LoginSystem_strAdmin.UserName,MAX_NO_OF_LETTERS);
     664:	44 e0       	ldi	r20, 0x04	; 4
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	be 01       	movw	r22, r28
     66a:	63 5d       	subi	r22, 0xD3	; 211
     66c:	7f 4f       	sbci	r23, 0xFF	; 255
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     676:	19 aa       	std	Y+49, r1	; 0x31
     678:	9f ef       	ldi	r25, 0xFF	; 255
     67a:	e0 e7       	ldi	r30, 0x70	; 112
     67c:	f2 e0       	ldi	r31, 0x02	; 2
     67e:	91 50       	subi	r25, 0x01	; 1
     680:	e0 40       	sbci	r30, 0x00	; 0
     682:	f0 40       	sbci	r31, 0x00	; 0
     684:	e1 f7       	brne	.-8      	; 0x67e <main+0x1f8>
     686:	00 c0       	rjmp	.+0      	; 0x688 <main+0x202>
     688:	00 00       	nop
				_delay_ms(50);
				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS,LoginSystem_strAdmin.Password,MAX_NO_OF_LETTERS);
     68a:	44 e0       	ldi	r20, 0x04	; 4
     68c:	50 e0       	ldi	r21, 0x00	; 0
     68e:	be 01       	movw	r22, r28
     690:	6e 5c       	subi	r22, 0xCE	; 206
     692:	7f 4f       	sbci	r23, 0xFF	; 255
     694:	85 e0       	ldi	r24, 0x05	; 5
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     69c:	1e aa       	std	Y+54, r1	; 0x36
     69e:	2f ef       	ldi	r18, 0xFF	; 255
     6a0:	30 e7       	ldi	r19, 0x70	; 112
     6a2:	82 e0       	ldi	r24, 0x02	; 2
     6a4:	21 50       	subi	r18, 0x01	; 1
     6a6:	30 40       	sbci	r19, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	e1 f7       	brne	.-8      	; 0x6a4 <main+0x21e>
     6ac:	00 c0       	rjmp	.+0      	; 0x6ae <main+0x228>
     6ae:	00 00       	nop
				_delay_ms(50);
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	8f ab       	std	Y+55, r24	; 0x37
     6b4:	9f ef       	ldi	r25, 0xFF	; 255
     6b6:	e0 e7       	ldi	r30, 0x70	; 112
     6b8:	f2 e0       	ldi	r31, 0x02	; 2
     6ba:	91 50       	subi	r25, 0x01	; 1
     6bc:	e0 40       	sbci	r30, 0x00	; 0
     6be:	f0 40       	sbci	r31, 0x00	; 0
     6c0:	e1 f7       	brne	.-8      	; 0x6ba <main+0x234>
     6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <main+0x23e>
     6c4:	00 00       	nop
				_delay_ms(50);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     6c6:	61 2c       	mov	r6, r1
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     6c8:	3b e0       	ldi	r19, 0x0B	; 11
     6ca:	53 2e       	mov	r5, r19
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(50);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     6cc:	28 96       	adiw	r28, 0x08	; 8
     6ce:	8f ad       	ldd	r24, Y+63	; 0x3f
     6d0:	28 97       	sbiw	r28, 0x08	; 8
     6d2:	68 16       	cp	r6, r24
     6d4:	08 f0       	brcs	.+2      	; 0x6d8 <main+0x252>
     6d6:	54 c0       	rjmp	.+168    	; 0x780 <main+0x2fa>
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
     6d8:	29 e0       	ldi	r18, 0x09	; 9
     6da:	62 9e       	mul	r6, r18
     6dc:	40 01       	movw	r8, r0
     6de:	11 24       	eor	r1, r1
     6e0:	64 01       	movw	r12, r8
     6e2:	32 e1       	ldi	r19, 0x12	; 18
     6e4:	c3 0e       	add	r12, r19
     6e6:	d1 1c       	adc	r13, r1
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     6e8:	56 9c       	mul	r5, r6
     6ea:	80 01       	movw	r16, r0
     6ec:	11 24       	eor	r1, r1
     6ee:	ee 24       	eor	r14, r14
     6f0:	e3 94       	inc	r14
     6f2:	f1 2c       	mov	r15, r1
     6f4:	ec 0e       	add	r14, r28
     6f6:	fd 1e       	adc	r15, r29
     6f8:	e0 0e       	add	r14, r16
     6fa:	f1 1e       	adc	r15, r17
     6fc:	44 e0       	ldi	r20, 0x04	; 4
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	b7 01       	movw	r22, r14
     702:	c6 01       	movw	r24, r12
     704:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <EEPROM_vReadBlockFromAddress>
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	90 e7       	ldi	r25, 0x70	; 112
     70c:	e2 e0       	ldi	r30, 0x02	; 2
     70e:	81 50       	subi	r24, 0x01	; 1
     710:	90 40       	sbci	r25, 0x00	; 0
     712:	e0 40       	sbci	r30, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <main+0x288>
     716:	00 c0       	rjmp	.+0      	; 0x718 <main+0x292>
     718:	00 00       	nop
					_delay_ms(50);

					EEPROM_vReadBlockFromAddress(Local_u16UserAddress + MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].Password,MAX_NO_OF_LETTERS);
     71a:	b8 01       	movw	r22, r16
     71c:	6b 5f       	subi	r22, 0xFB	; 251
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	21 e0       	ldi	r18, 0x01	; 1
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	2c 0f       	add	r18, r28
     726:	3d 1f       	adc	r19, r29
     728:	62 0f       	add	r22, r18
     72a:	73 1f       	adc	r23, r19
     72c:	44 e0       	ldi	r20, 0x04	; 4
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	c4 01       	movw	r24, r8
     732:	46 96       	adiw	r24, 0x16	; 22
     734:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <EEPROM_vReadBlockFromAddress>
     738:	3f ef       	ldi	r19, 0xFF	; 255
     73a:	80 e7       	ldi	r24, 0x70	; 112
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	31 50       	subi	r19, 0x01	; 1
     740:	80 40       	sbci	r24, 0x00	; 0
     742:	90 40       	sbci	r25, 0x00	; 0
     744:	e1 f7       	brne	.-8      	; 0x73e <main+0x2b8>
     746:	00 c0       	rjmp	.+0      	; 0x748 <main+0x2c2>
     748:	00 00       	nop
					_delay_ms(50);
					EEPROM_ui8ReadByteFromAddress(Local_u16UserAddress + 2*MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].User_Priority);
     74a:	b8 01       	movw	r22, r16
     74c:	66 5f       	subi	r22, 0xF6	; 246
     74e:	7f 4f       	sbci	r23, 0xFF	; 255
     750:	e1 e0       	ldi	r30, 0x01	; 1
     752:	f0 e0       	ldi	r31, 0x00	; 0
     754:	ec 0f       	add	r30, r28
     756:	fd 1f       	adc	r31, r29
     758:	6e 0f       	add	r22, r30
     75a:	7f 1f       	adc	r23, r31
     75c:	88 e0       	ldi	r24, 0x08	; 8
     75e:	8c 0d       	add	r24, r12
     760:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <EEPROM_ui8ReadByteFromAddress>
     764:	ff ef       	ldi	r31, 0xFF	; 255
     766:	20 e7       	ldi	r18, 0x70	; 112
     768:	32 e0       	ldi	r19, 0x02	; 2
     76a:	f1 50       	subi	r31, 0x01	; 1
     76c:	20 40       	sbci	r18, 0x00	; 0
     76e:	30 40       	sbci	r19, 0x00	; 0
     770:	e1 f7       	brne	.-8      	; 0x76a <main+0x2e4>
     772:	00 c0       	rjmp	.+0      	; 0x774 <main+0x2ee>
     774:	00 00       	nop
					_delay_ms(50);
					LoginSystem_AstrUsers[Local_u8Iterator].UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     776:	f7 01       	movw	r30, r14
     778:	14 82       	std	Z+4, r1	; 0x04
					LoginSystem_AstrUsers[Local_u8Iterator].Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     77a:	11 86       	std	Z+9, r1	; 0x09
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(50);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     77c:	63 94       	inc	r6
     77e:	a6 cf       	rjmp	.-180    	; 0x6cc <main+0x246>
					LoginSystem_AstrUsers[Local_u8Iterator].UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
					LoginSystem_AstrUsers[Local_u8Iterator].Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
				}
				

				Program_Status_Flag = IDLE_STATE;
     780:	87 e0       	ldi	r24, 0x07	; 7
     782:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <Program_Status_Flag>
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(50);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     786:	93 e0       	ldi	r25, 0x03	; 3
     788:	99 2e       	mov	r9, r25
	{
		
/************************************************************************************IDLE_STATE********************************************************************************************/
/***********************************Second State of The Program: The Program stays in this state as long as the LCD_Keypad System and The Remoted System aren't used**********************/
/**************************************************************It Displays The Currently Running Device on The LCD***********************************************************************/
	if (Program_Status_Flag == IDLE_STATE)
     78a:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <Program_Status_Flag>
     78e:	87 30       	cpi	r24, 0x07	; 7
     790:	19 f0       	breq	.+6      	; 0x798 <main+0x312>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     792:	8b e0       	ldi	r24, 0x0B	; 11
     794:	e8 2e       	mov	r14, r24
     796:	e4 c0       	rjmp	.+456    	; 0x960 <__stack+0x101>
/************************************************************************************IDLE_STATE********************************************************************************************/
/***********************************Second State of The Program: The Program stays in this state as long as the LCD_Keypad System and The Remoted System aren't used**********************/
/**************************************************************It Displays The Currently Running Device on The LCD***********************************************************************/
	if (Program_Status_Flag == IDLE_STATE)
	{
	UART_enuSendString("Press Any Key To Start A Login Attempt\r\n");	
     798:	82 e2       	ldi	r24, 0x22	; 34
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
	LCD_enuClearDisplay();
     7a0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
	u8 Local_u8Iterator = 1;
	if (Current_State == 0)
     7a4:	26 96       	adiw	r28, 0x06	; 6
     7a6:	8f ad       	ldd	r24, Y+63	; 0x3f
     7a8:	26 97       	sbiw	r28, 0x06	; 6
     7aa:	81 11       	cpse	r24, r1
     7ac:	0d c0       	rjmp	.+26     	; 0x7c8 <main+0x342>
	{
		LCD_enuClearDisplay();
     7ae:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
		LCD_enuDisplayString("All Devices");
     7b2:	8b e4       	ldi	r24, 0x4B	; 75
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     7ba:	60 e0       	ldi	r22, 0x00	; 0
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
		LCD_enuDisplayString("Are Off");
     7c2:	87 e5       	ldi	r24, 0x57	; 87
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	4d c0       	rjmp	.+154    	; 0x862 <__stack+0x3>
     7c8:	01 e0       	ldi	r16, 0x01	; 1
     7ca:	10 e0       	ldi	r17, 0x00	; 0
	}
	else
		{
			while ( Local_u8Iterator <= 4)
			{	
				LCD_enuSendData('L');
     7cc:	8c e4       	ldi	r24, 0x4C	; 76
     7ce:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_enuSendData>
				LCD_enuSendData('0'+Local_u8Iterator);
     7d2:	80 e3       	ldi	r24, 0x30	; 48
     7d4:	80 0f       	add	r24, r16
     7d6:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_enuSendData>
				LCD_enuSendData(':');
     7da:	8a e3       	ldi	r24, 0x3A	; 58
     7dc:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_enuSendData>
				On_Devices = ( GET_BIT( Current_State, Local_u8Iterator) )*Local_u8Iterator;	//We stored the state of each Device "On or Off" in a Corresponding bit in The Current_State Variable
				switch (On_Devices)
     7e0:	26 96       	adiw	r28, 0x06	; 6
     7e2:	8f ad       	ldd	r24, Y+63	; 0x3f
     7e4:	26 97       	sbiw	r28, 0x06	; 6
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	00 2e       	mov	r0, r16
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <main+0x36a>
     7ec:	95 95       	asr	r25
     7ee:	87 95       	ror	r24
     7f0:	0a 94       	dec	r0
     7f2:	e2 f7       	brpl	.-8      	; 0x7ec <main+0x366>
     7f4:	81 70       	andi	r24, 0x01	; 1
     7f6:	80 9f       	mul	r24, r16
     7f8:	80 2d       	mov	r24, r0
     7fa:	11 24       	eor	r1, r1
     7fc:	82 30       	cpi	r24, 0x02	; 2
     7fe:	41 f0       	breq	.+16     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     800:	18 f4       	brcc	.+6      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
     802:	81 30       	cpi	r24, 0x01	; 1
     804:	29 f0       	breq	.+10     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     806:	06 c0       	rjmp	.+12     	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     808:	83 30       	cpi	r24, 0x03	; 3
     80a:	11 f0       	breq	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80c:	84 30       	cpi	r24, 0x04	; 4
     80e:	11 f4       	brne	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
					break;
					case State_ROOM_3:
					LCD_enuSendData('+');
					break;
					case State_ROOM_4:
					LCD_enuSendData('+');
     810:	8b e2       	ldi	r24, 0x2B	; 43
     812:	01 c0       	rjmp	.+2      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
					break;
					default:
					LCD_enuSendData('-');
     814:	8d e2       	ldi	r24, 0x2D	; 45
     816:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_enuSendData>
     81a:	0f 5f       	subi	r16, 0xFF	; 255
     81c:	1f 4f       	sbci	r17, 0xFF	; 255
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
		LCD_enuDisplayString("Are Off");
	}
	else
		{
			while ( Local_u8Iterator <= 4)
     81e:	05 30       	cpi	r16, 0x05	; 5
     820:	11 05       	cpc	r17, r1
     822:	a1 f6       	brne	.-88     	; 0x7cc <main+0x346>
					LCD_enuSendData('-');
					break;
				}
			Local_u8Iterator ++;
			}
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
			LCD_enuDisplayString("Dim:");
     82c:	8f e5       	ldi	r24, 0x5F	; 95
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
			LCD_enuDisplayUnsignedInteger(Dimmer_Percentage);
     834:	8b 2d       	mov	r24, r11
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <LCD_enuDisplayUnsignedInteger>
			
			LCD_enuDisplayString(" A.Con:");
     83c:	84 e6       	ldi	r24, 0x64	; 100
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
			if ((!GET_BIT( Current_State, 6)) && (!GET_BIT( Current_State, 5)) )		//For Air Conditioner, We have 3 Possibilities: Open, Close and Auto. So, We will represent these 3 possibilities by 2 bits
     844:	26 96       	adiw	r28, 0x06	; 6
     846:	8f ad       	ldd	r24, Y+63	; 0x3f
     848:	26 97       	sbiw	r28, 0x06	; 6
     84a:	86 fd       	sbrc	r24, 6
     84c:	08 c0       	rjmp	.+16     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     84e:	85 fd       	sbrc	r24, 5
     850:	03 c0       	rjmp	.+6      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
			{
				LCD_enuDisplayString("Auto");											//The 2 bits are zero in the Automatic Control State
     852:	8c e6       	ldi	r24, 0x6C	; 108
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	05 c0       	rjmp	.+10     	; 0x862 <__stack+0x3>
			}
			else if ((!GET_BIT( Current_State, 6)) && (GET_BIT( Current_State, 5)))		//The sixth bit is zero and the fifth bit is one for "On" state
			{
				LCD_enuDisplayString("On");
     858:	81 e7       	ldi	r24, 0x71	; 113
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	02 c0       	rjmp	.+4      	; 0x862 <__stack+0x3>
			}
			else
			{
				LCD_enuDisplayString("Off");											//Otherwise "Off" State
     85e:	8b e5       	ldi	r24, 0x5B	; 91
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
		break;*/
		}
		while (Program_Status_Flag == IDLE_STATE)
					if(UART_enuCheck_Connection())
					{
						Program_Status_Flag = REMOTED_SYSTEM_LOGIN_PAGE_STATE;
     866:	12 e0       	ldi	r17, 0x02	; 2
		LCD_enuClearDisplay();
		LCD_enuDisplayString("Door is Opened");
		_delay_ms(1000);
		break;*/
		}
		while (Program_Status_Flag == IDLE_STATE)
     868:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <Program_Status_Flag>
     86c:	87 30       	cpi	r24, 0x07	; 7
     86e:	09 f0       	breq	.+2      	; 0x872 <__stack+0x13>
     870:	90 cf       	rjmp	.-224    	; 0x792 <main+0x30c>
					if(UART_enuCheck_Connection())
     872:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <UART_enuCheck_Connection>
     876:	88 23       	and	r24, r24
     878:	b9 f3       	breq	.-18     	; 0x868 <__stack+0x9>
					{
						Program_Status_Flag = REMOTED_SYSTEM_LOGIN_PAGE_STATE;
     87a:	10 93 67 05 	sts	0x0567, r17	; 0x800567 <Program_Status_Flag>
     87e:	f4 cf       	rjmp	.-24     	; 0x868 <__stack+0x9>
/*******************************************It takes the username and password from the user and Compare it with the admin info and the Remoted users database************************************************/
		while (Program_Status_Flag == REMOTED_SYSTEM_LOGIN_PAGE_STATE)
		{
			u8 LoginSystem_u8_AdminTrueFlag;
			u8 LoginSystem_u8_Remoted_USERTrueFlag;
			LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
     880:	be 01       	movw	r22, r28
     882:	68 5c       	subi	r22, 0xC8	; 200
     884:	7f 4f       	sbci	r23, 0xFF	; 255
     886:	ce 01       	movw	r24, r28
     888:	cd 96       	adiw	r24, 0x3d	; 61
     88a:	0e 94 1f 01 	call	0x23e	; 0x23e <LoginSystem_enuGetDataFromUserBY_UART>
	
			LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     88e:	be 01       	movw	r22, r28
     890:	63 5d       	subi	r22, 0xD3	; 211
     892:	7f 4f       	sbci	r23, 0xFF	; 255
     894:	ce 01       	movw	r24, r28
     896:	cd 96       	adiw	r24, 0x3d	; 61
     898:	0e 94 3c 01 	call	0x278	; 0x278 <LoginSystem_u8Strcmp>
     89c:	81 11       	cpse	r24, r1
     89e:	66 c0       	rjmp	.+204    	; 0x96c <__stack+0x10d>
     8a0:	f1 2c       	mov	r15, r1
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATE;	
			}
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     8a2:	28 96       	adiw	r28, 0x08	; 8
     8a4:	8f ad       	ldd	r24, Y+63	; 0x3f
     8a6:	28 97       	sbiw	r28, 0x08	; 8
     8a8:	f8 16       	cp	r15, r24
     8aa:	08 f0       	brcs	.+2      	; 0x8ae <__stack+0x4f>
     8ac:	48 c5       	rjmp	.+2704   	; 0x133e <__stack+0xadf>
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     8ae:	0f 2d       	mov	r16, r15
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	e0 9e       	mul	r14, r16
     8b4:	60 01       	movw	r12, r0
     8b6:	e1 9e       	mul	r14, r17
     8b8:	d0 0c       	add	r13, r0
     8ba:	11 24       	eor	r1, r1
     8bc:	be 01       	movw	r22, r28
     8be:	63 5c       	subi	r22, 0xC3	; 195
     8c0:	7f 4f       	sbci	r23, 0xFF	; 255
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	8c 0f       	add	r24, r28
     8c8:	9d 1f       	adc	r25, r29
     8ca:	8c 0d       	add	r24, r12
     8cc:	9d 1d       	adc	r25, r13
     8ce:	0e 94 3c 01 	call	0x278	; 0x278 <LoginSystem_u8Strcmp>
     8d2:	88 23       	and	r24, r24
     8d4:	09 f4       	brne	.+2      	; 0x8d8 <__stack+0x79>
     8d6:	78 c0       	rjmp	.+240    	; 0x9c8 <__stack+0x169>
     8d8:	c6 01       	movw	r24, r12
     8da:	05 96       	adiw	r24, 0x05	; 5
     8dc:	be 01       	movw	r22, r28
     8de:	68 5c       	subi	r22, 0xC8	; 200
     8e0:	7f 4f       	sbci	r23, 0xFF	; 255
     8e2:	21 e0       	ldi	r18, 0x01	; 1
     8e4:	30 e0       	ldi	r19, 0x00	; 0
     8e6:	2c 0f       	add	r18, r28
     8e8:	3d 1f       	adc	r19, r29
     8ea:	82 0f       	add	r24, r18
     8ec:	93 1f       	adc	r25, r19
     8ee:	0e 94 3c 01 	call	0x278	; 0x278 <LoginSystem_u8Strcmp>
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	81 11       	cpse	r24, r1
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <__stack+0x9b>
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	a9 2e       	mov	r10, r25
					if ( (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)  )
     8fc:	31 e0       	ldi	r19, 0x01	; 1
     8fe:	a3 12       	cpse	r10, r19
     900:	7d c0       	rjmp	.+250    	; 0x9fc <__stack+0x19d>
					{
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER) || (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER) )
     902:	e0 9e       	mul	r14, r16
     904:	c0 01       	movw	r24, r0
     906:	e1 9e       	mul	r14, r17
     908:	90 0d       	add	r25, r0
     90a:	11 24       	eor	r1, r1
     90c:	01 e0       	ldi	r16, 0x01	; 1
     90e:	10 e0       	ldi	r17, 0x00	; 0
     910:	0c 0f       	add	r16, r28
     912:	1d 1f       	adc	r17, r29
     914:	08 0f       	add	r16, r24
     916:	19 1f       	adc	r17, r25
     918:	f8 01       	movw	r30, r16
     91a:	82 85       	ldd	r24, Z+10	; 0x0a
     91c:	82 50       	subi	r24, 0x02	; 2
     91e:	82 30       	cpi	r24, 0x02	; 2
     920:	08 f4       	brcc	.+2      	; 0x924 <__stack+0xc5>
     922:	54 c0       	rjmp	.+168    	; 0x9cc <__stack+0x16d>
				}
			}
			
			if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
			{
				LoginSystem_u8TrialsLeft--;
     924:	1f ef       	ldi	r17, 0xFF	; 255
     926:	19 0d       	add	r17, r9
				UART_enuSendString("\r\nWrong Username or Password");
     928:	8a eb       	ldi	r24, 0xBA	; 186
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
     930:	ff ef       	ldi	r31, 0xFF	; 255
     932:	25 ea       	ldi	r18, 0xA5	; 165
     934:	3e e0       	ldi	r19, 0x0E	; 14
     936:	f1 50       	subi	r31, 0x01	; 1
     938:	20 40       	sbci	r18, 0x00	; 0
     93a:	30 40       	sbci	r19, 0x00	; 0
     93c:	e1 f7       	brne	.-8      	; 0x936 <__stack+0xd7>
     93e:	00 c0       	rjmp	.+0      	; 0x940 <__stack+0xe1>
     940:	00 00       	nop
				_delay_ms(300);
				UART_enuSendString("\r\nRemaining Trials: ");
     942:	87 ed       	ldi	r24, 0xD7	; 215
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
				UART_enuSendChar('0'+LoginSystem_u8TrialsLeft);
     94a:	8f e2       	ldi	r24, 0x2F	; 47
     94c:	89 0d       	add	r24, r9
     94e:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <UART_enuSendChar>
							//_delay_ms(1000);
				if (LoginSystem_u8TrialsLeft == 0)
     952:	11 11       	cpse	r17, r1
     954:	03 c0       	rjmp	.+6      	; 0x95c <__stack+0xfd>
				{
					Program_Status_Flag = BLOCKING_STATE;
     956:	86 e0       	ldi	r24, 0x06	; 6
     958:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <Program_Status_Flag>
     95c:	a1 2c       	mov	r10, r1
     95e:	91 2e       	mov	r9, r17
		}//end of the IDLE_STATE
				
/************************************************************************************REMOTED_SYSTEM_LOGIN_PAGE_STATE********************************************************************************************/
/****************The Program Enters This State if A User is Connected to the remoted System through bluetooth and Started a Login Attempt by Pressing any Key into the Bluetooth Terminal**********************/
/*******************************************It takes the username and password from the user and Compare it with the admin info and the Remoted users database************************************************/
		while (Program_Status_Flag == REMOTED_SYSTEM_LOGIN_PAGE_STATE)
     960:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <Program_Status_Flag>
     964:	82 30       	cpi	r24, 0x02	; 2
     966:	09 f4       	brne	.+2      	; 0x96a <__stack+0x10b>
     968:	8b cf       	rjmp	.-234    	; 0x880 <__stack+0x21>
     96a:	4a c0       	rjmp	.+148    	; 0xa00 <__stack+0x1a1>
		{
			u8 LoginSystem_u8_AdminTrueFlag;
			u8 LoginSystem_u8_Remoted_USERTrueFlag;
			LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
	
			LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     96c:	be 01       	movw	r22, r28
     96e:	6e 5c       	subi	r22, 0xCE	; 206
     970:	7f 4f       	sbci	r23, 0xFF	; 255
     972:	ce 01       	movw	r24, r28
     974:	c8 96       	adiw	r24, 0x38	; 56
     976:	0e 94 3c 01 	call	0x278	; 0x278 <LoginSystem_u8Strcmp>
     97a:	11 e0       	ldi	r17, 0x01	; 1
     97c:	81 11       	cpse	r24, r1
     97e:	01 c0       	rjmp	.+2      	; 0x982 <__stack+0x123>
     980:	10 e0       	ldi	r17, 0x00	; 0

			if(LoginSystem_u8_AdminTrueFlag == TRUE)
     982:	11 30       	cpi	r17, 0x01	; 1
     984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x129>
     986:	8c cf       	rjmp	.-232    	; 0x8a0 <__stack+0x41>
			{
				UART_enuSendString("\r\nLogged in Successfully");
     988:	84 e7       	ldi	r24, 0x74	; 116
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
     990:	ff ef       	ldi	r31, 0xFF	; 255
     992:	29 e6       	ldi	r18, 0x69	; 105
     994:	38 e1       	ldi	r19, 0x18	; 24
     996:	f1 50       	subi	r31, 0x01	; 1
     998:	20 40       	sbci	r18, 0x00	; 0
     99a:	30 40       	sbci	r19, 0x00	; 0
     99c:	e1 f7       	brne	.-8      	; 0x996 <__stack+0x137>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <__stack+0x141>
     9a0:	00 00       	nop
				_delay_ms(500);
				UART_enuSendString("\r\nWelcome Admin\r\n");
     9a2:	8d e8       	ldi	r24, 0x8D	; 141
     9a4:	91 e0       	ldi	r25, 0x01	; 1
     9a6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	99 e6       	ldi	r25, 0x69	; 105
     9ae:	e8 e1       	ldi	r30, 0x18	; 24
     9b0:	81 50       	subi	r24, 0x01	; 1
     9b2:	90 40       	sbci	r25, 0x00	; 0
     9b4:	e0 40       	sbci	r30, 0x00	; 0
     9b6:	e1 f7       	brne	.-8      	; 0x9b0 <__stack+0x151>
     9b8:	00 c0       	rjmp	.+0      	; 0x9ba <__stack+0x15b>
     9ba:	00 00       	nop
				_delay_ms(500);
				LoginSystem_u8AdminOnlineFlag = TRUE;
     9bc:	10 93 6a 05 	sts	0x056A, r17	; 0x80056a <LoginSystem_u8AdminOnlineFlag>
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATE;	
     9c0:	84 e0       	ldi	r24, 0x04	; 4
     9c2:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <Program_Status_Flag>
     9c6:	c0 c4       	rjmp	.+2432   	; 0x1348 <__stack+0xae9>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     9c8:	a1 2c       	mov	r10, r1
     9ca:	98 cf       	rjmp	.-208    	; 0x8fc <__stack+0x9d>
					if ( (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)  )
					{
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER) || (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER) )
						{
							UART_enuSendString("\r\nLogged in Successfully\r\n");
     9cc:	8f e9       	ldi	r24, 0x9F	; 159
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
     9d4:	ff ef       	ldi	r31, 0xFF	; 255
     9d6:	29 e6       	ldi	r18, 0x69	; 105
     9d8:	38 e1       	ldi	r19, 0x18	; 24
     9da:	f1 50       	subi	r31, 0x01	; 1
     9dc:	20 40       	sbci	r18, 0x00	; 0
     9de:	30 40       	sbci	r19, 0x00	; 0
     9e0:	e1 f7       	brne	.-8      	; 0x9da <__stack+0x17b>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <__stack+0x185>
     9e4:	00 00       	nop
							_delay_ms(500);
							LoginSystem_u8TrialsLeft =3;
							Program_Status_Flag = REMOTED_SYSTEM_MENU_STATE;
     9e6:	84 e0       	ldi	r24, 0x04	; 4
     9e8:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <Program_Status_Flag>
							if (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER)
     9ec:	f8 01       	movw	r30, r16
     9ee:	82 85       	ldd	r24, Z+10	; 0x0a
     9f0:	83 30       	cpi	r24, 0x03	; 3
     9f2:	09 f0       	breq	.+2      	; 0x9f6 <__stack+0x197>
     9f4:	a9 c4       	rjmp	.+2386   	; 0x1348 <__stack+0xae9>
							{
								LoginSystem_u8PromotedUserOnlineFlag = TRUE;
     9f6:	a0 92 69 05 	sts	0x0569, r10	; 0x800569 <LoginSystem_u8PromotedUserOnlineFlag>
     9fa:	a6 c4       	rjmp	.+2380   	; 0x1348 <__stack+0xae9>
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATE;	
			}
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     9fc:	f3 94       	inc	r15
     9fe:	51 cf       	rjmp	.-350    	; 0x8a2 <__stack+0x43>
					
					
					case '8':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     a00:	ab e0       	ldi	r26, 0x0B	; 11
     a02:	6a 2e       	mov	r6, r26
     a04:	bb e0       	ldi	r27, 0x0B	; 11
     a06:	8b 2e       	mov	r8, r27
								ShowToUser = PRIORITIES_MENU;
     a08:	1f e0       	ldi	r17, 0x0F	; 15
     a0a:	41 2e       	mov	r4, r17
					
					
					case '8':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     a0c:	0b e0       	ldi	r16, 0x0B	; 11
     a0e:	50 2e       	mov	r5, r16
				else
				{
					UART_enuSendString("\r\n");		//For the shape of menu
					UART_enuRecieveChar(&UART_CHOICE);
					if (UART_CHOICE > '6')
						UART_CHOICE =100;		//If the program enter this else, then a Remoted User is in control. So, We want him to go to default in the switch case if he entered by mistake a number that corresponds An admin option in the switch case
     a10:	74 e6       	ldi	r23, 0x64	; 100
     a12:	f7 2e       	mov	r15, r23
					
					case '6':
						ShowToUser = AIR_COND_MENU;  
					break;
					case '7':
					ShowToUser = DOOR_MENU;
     a14:	ea e0       	ldi	r30, 0x0A	; 10
     a16:	ee 2e       	mov	r14, r30
						SPI_ui8TransmitRecive(DIMMER);
						ShowToUser = DIMMER_MENU;
					break;
					
					case '6':
						ShowToUser = AIR_COND_MENU;  
     a18:	f9 e0       	ldi	r31, 0x09	; 9
     a1a:	df 2e       	mov	r13, r31
		}//end of the REMOTED_SYSTEM_LOGIN_PAGE_STATE
				
/**********************************************************************************************REMOTED_SYSTEM_MENU_STATE********************************************************************************************/
/****************The Program Enters This State The User Entered Matched Username and Password With The Admin info or the Remoted users database in the Remoted System Login Page "The Previous State"**************/
/************************************************It Displays The Menu of the Smart Home to The Remoted User and Displays Aditional Options To The Admin Only******************************************************/
		while (Program_Status_Flag == REMOTED_SYSTEM_MENU_STATE)
     a1c:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <Program_Status_Flag>
     a20:	84 30       	cpi	r24, 0x04	; 4
     a22:	09 f0       	breq	.+2      	; 0xa26 <__stack+0x1c7>
     a24:	20 c2       	rjmp	.+1088   	; 0xe66 <__stack+0x607>
						ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '5':
						SPI_ui8TransmitRecive(DIMMER);
						ShowToUser = DIMMER_MENU;
     a26:	08 e0       	ldi	r16, 0x08	; 8
/****************The Program Enters This State The User Entered Matched Username and Password With The Admin info or the Remoted users database in the Remoted System Login Page "The Previous State"**************/
/************************************************It Displays The Menu of the Smart Home to The Remoted User and Displays Aditional Options To The Admin Only******************************************************/
		while (Program_Status_Flag == REMOTED_SYSTEM_MENU_STATE)
		{
			
			while(ShowToUser == MAIN_MENU && Program_Status_Flag == REMOTED_SYSTEM_MENU_STATE)  //"Program_Status_Flag == REMOTED_SYSTEM_MENU_STATE" This condition is added here because if there's a remoted user entered this while loop and meanwhile a LCD_keypad Raised an interrupt by pressing the button "EXTI" to start a login attempt this action will result in logging the remoted user out as the LCD_Keypad user have More Priority "Except For Promoted Users and Admin" 
     a28:	10 91 68 05 	lds	r17, 0x0568	; 0x800568 <ShowToUser>
     a2c:	11 11       	cpse	r17, r1
     a2e:	d3 c0       	rjmp	.+422    	; 0xbd6 <__stack+0x377>
     a30:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <Program_Status_Flag>
     a34:	84 30       	cpi	r24, 0x04	; 4
     a36:	91 f7       	brne	.-28     	; 0xa1c <__stack+0x1bd>
			{
			//The first six chioces will Appear for Admin or Remoted user 
			UART_enuSendString("\r\n1-Room1");
     a38:	8c ee       	ldi	r24, 0xEC	; 236
     a3a:	91 e0       	ldi	r25, 0x01	; 1
     a3c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
			UART_enuSendString("\r\n2-Room2");
     a40:	86 ef       	ldi	r24, 0xF6	; 246
     a42:	91 e0       	ldi	r25, 0x01	; 1
     a44:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
			UART_enuSendString("\r\n3-Room3");
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	92 e0       	ldi	r25, 0x02	; 2
     a4c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
			UART_enuSendString("\r\n4-Room4");
     a50:	8a e0       	ldi	r24, 0x0A	; 10
     a52:	92 e0       	ldi	r25, 0x02	; 2
     a54:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
			UART_enuSendString("\r\n5-Dimmer");
     a58:	84 e1       	ldi	r24, 0x14	; 20
     a5a:	92 e0       	ldi	r25, 0x02	; 2
     a5c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
			UART_enuSendString("\r\n6-Air Conditioner");
     a60:	8f e1       	ldi	r24, 0x1F	; 31
     a62:	92 e0       	ldi	r25, 0x02	; 2
     a64:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>

			if (LoginSystem_u8AdminOnlineFlag ==TRUE) //The Last 3 options will Appear only to Admin
     a68:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <LoginSystem_u8AdminOnlineFlag>
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	91 f4       	brne	.+36     	; 0xa94 <__stack+0x235>
			{
				UART_enuSendString("\r\n7-Door");
     a70:	83 e3       	ldi	r24, 0x33	; 51
     a72:	92 e0       	ldi	r25, 0x02	; 2
     a74:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
				UART_enuSendString("\r\n8-Add User");
     a78:	8c e3       	ldi	r24, 0x3C	; 60
     a7a:	92 e0       	ldi	r25, 0x02	; 2
     a7c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
				UART_enuSendString("\r\n9-Remove User\r\n");
     a80:	89 e4       	ldi	r24, 0x49	; 73
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>

				UART_enuRecieveChar(&UART_CHOICE);
     a88:	ce 01       	movw	r24, r28
     a8a:	8c 5b       	subi	r24, 0xBC	; 188
     a8c:	9f 4f       	sbci	r25, 0xFF	; 255
     a8e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <UART_enuRecieveChar>
     a92:	11 c0       	rjmp	.+34     	; 0xab6 <__stack+0x257>
			}
				else
				{
					UART_enuSendString("\r\n");		//For the shape of menu
     a94:	89 e6       	ldi	r24, 0x69	; 105
     a96:	93 e0       	ldi	r25, 0x03	; 3
     a98:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     a9c:	ce 01       	movw	r24, r28
     a9e:	8c 5b       	subi	r24, 0xBC	; 188
     aa0:	9f 4f       	sbci	r25, 0xFF	; 255
     aa2:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <UART_enuRecieveChar>
					if (UART_CHOICE > '6')
     aa6:	25 96       	adiw	r28, 0x05	; 5
     aa8:	8f ad       	ldd	r24, Y+63	; 0x3f
     aaa:	25 97       	sbiw	r28, 0x05	; 5
     aac:	87 33       	cpi	r24, 0x37	; 55
     aae:	18 f0       	brcs	.+6      	; 0xab6 <__stack+0x257>
						UART_CHOICE =100;		//If the program enter this else, then a Remoted User is in control. So, We want him to go to default in the switch case if he entered by mistake a number that corresponds An admin option in the switch case
     ab0:	25 96       	adiw	r28, 0x05	; 5
     ab2:	ff ae       	std	Y+63, r15	; 0x3f
     ab4:	25 97       	sbiw	r28, 0x05	; 5
				}
				
				switch(UART_CHOICE)
     ab6:	25 96       	adiw	r28, 0x05	; 5
     ab8:	ef ad       	ldd	r30, Y+63	; 0x3f
     aba:	25 97       	sbiw	r28, 0x05	; 5
     abc:	8e 2f       	mov	r24, r30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	fc 01       	movw	r30, r24
     ac2:	f1 97       	sbiw	r30, 0x31	; 49
     ac4:	e9 30       	cpi	r30, 0x09	; 9
     ac6:	f1 05       	cpc	r31, r1
     ac8:	08 f0       	brcs	.+2      	; 0xacc <__stack+0x26d>
     aca:	75 c0       	rjmp	.+234    	; 0xbb6 <__stack+0x357>
     acc:	e6 5d       	subi	r30, 0xD6	; 214
     ace:	ff 4f       	sbci	r31, 0xFF	; 255
     ad0:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__tablejump2__>
				{
					case '1':
						SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,1);
     ada:	61 e0       	ldi	r22, 0x01	; 1
     adc:	04 c0       	rjmp	.+8      	; 0xae6 <__stack+0x287>
						ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '2':
						SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
     ade:	82 e0       	ldi	r24, 0x02	; 2
     ae0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,2);
     ae4:	62 e0       	ldi	r22, 0x02	; 2
     ae6:	ce 01       	movw	r24, r28
     ae8:	8b 5b       	subi	r24, 0xBB	; 187
     aea:	9f 4f       	sbci	r25, 0xFF	; 255
     aec:	0e 94 26 02 	call	0x44c	; 0x44c <ToggleBit>
						ShowToUser = LOG_OUT_CHOICE;
     af0:	50 92 68 05 	sts	0x0568, r5	; 0x800568 <ShowToUser>
					break;
     af4:	99 cf       	rjmp	.-206    	; 0xa28 <__stack+0x1c9>
					
					case '3':
						SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
     af6:	83 e0       	ldi	r24, 0x03	; 3
     af8:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,3);
     afc:	63 e0       	ldi	r22, 0x03	; 3
     afe:	f3 cf       	rjmp	.-26     	; 0xae6 <__stack+0x287>
						ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '4':
						SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
     b00:	84 e0       	ldi	r24, 0x04	; 4
     b02:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,4);
     b06:	64 e0       	ldi	r22, 0x04	; 4
     b08:	ee cf       	rjmp	.-36     	; 0xae6 <__stack+0x287>
						ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '5':
						SPI_ui8TransmitRecive(DIMMER);
     b0a:	8c e0       	ldi	r24, 0x0C	; 12
     b0c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						ShowToUser = DIMMER_MENU;
     b10:	00 93 68 05 	sts	0x0568, r16	; 0x800568 <ShowToUser>
					break;
     b14:	89 cf       	rjmp	.-238    	; 0xa28 <__stack+0x1c9>
					
					case '6':
						ShowToUser = AIR_COND_MENU;  
     b16:	d0 92 68 05 	sts	0x0568, r13	; 0x800568 <ShowToUser>
					break;
     b1a:	86 cf       	rjmp	.-244    	; 0xa28 <__stack+0x1c9>
					case '7':
					ShowToUser = DOOR_MENU;
     b1c:	e0 92 68 05 	sts	0x0568, r14	; 0x800568 <ShowToUser>
					break;
     b20:	83 cf       	rjmp	.-250    	; 0xa28 <__stack+0x1c9>
					
					
					case '8':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
     b22:	28 96       	adiw	r28, 0x08	; 8
     b24:	8f ad       	ldd	r24, Y+63	; 0x3f
     b26:	28 97       	sbiw	r28, 0x08	; 8
     b28:	84 30       	cpi	r24, 0x04	; 4
     b2a:	98 f4       	brcc	.+38     	; 0xb52 <__stack+0x2f3>
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     b2c:	68 9e       	mul	r6, r24
     b2e:	c0 01       	movw	r24, r0
     b30:	11 24       	eor	r1, r1
     b32:	bc 01       	movw	r22, r24
     b34:	6b 5f       	subi	r22, 0xFB	; 251
     b36:	7f 4f       	sbci	r23, 0xFF	; 255
     b38:	e1 e0       	ldi	r30, 0x01	; 1
     b3a:	f0 e0       	ldi	r31, 0x00	; 0
     b3c:	ec 0f       	add	r30, r28
     b3e:	fd 1f       	adc	r31, r29
     b40:	6e 0f       	add	r22, r30
     b42:	7f 1f       	adc	r23, r31
     b44:	8e 0f       	add	r24, r30
     b46:	9f 1f       	adc	r25, r31
     b48:	0e 94 1f 01 	call	0x23e	; 0x23e <LoginSystem_enuGetDataFromUserBY_UART>
								ShowToUser = PRIORITIES_MENU;
     b4c:	40 92 68 05 	sts	0x0568, r4	; 0x800568 <ShowToUser>
     b50:	6b cf       	rjmp	.-298    	; 0xa28 <__stack+0x1c9>
							}
						else
							{
								UART_enuSendString("\r\nReached The Max Number of Stored Users");
     b52:	8b e5       	ldi	r24, 0x5B	; 91
     b54:	92 e0       	ldi	r25, 0x02	; 2
     b56:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
								UART_enuSendString("\r\nCouldn't Store A New User");
     b5a:	84 e8       	ldi	r24, 0x84	; 132
     b5c:	92 e0       	ldi	r25, 0x02	; 2
     b5e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
								UART_enuSendString("\r\nReturning to Main Menu\r\n");
     b62:	8e ec       	ldi	r24, 0xCE	; 206
     b64:	92 e0       	ldi	r25, 0x02	; 2
     b66:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
								ShowToUser = MAIN_MENU;
     b6a:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <ShowToUser>
     b6e:	ff ef       	ldi	r31, 0xFF	; 255
     b70:	2d e2       	ldi	r18, 0x2D	; 45
     b72:	32 e2       	ldi	r19, 0x22	; 34
     b74:	f1 50       	subi	r31, 0x01	; 1
     b76:	20 40       	sbci	r18, 0x00	; 0
     b78:	30 40       	sbci	r19, 0x00	; 0
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <__stack+0x315>
     b7c:	19 c0       	rjmp	.+50     	; 0xbb0 <__stack+0x351>
								_delay_ms(700);
							}
					break;
					case '9':
						if (LoginSystem_RemoveUser(LoginSystem_AstrUsers,&LoginSystem_NumOfRegisteredUsers) == TRUE)
     b7e:	be 01       	movw	r22, r28
     b80:	69 5b       	subi	r22, 0xB9	; 185
     b82:	7f 4f       	sbci	r23, 0xFF	; 255
     b84:	ce 01       	movw	r24, r28
     b86:	01 96       	adiw	r24, 0x01	; 1
     b88:	0e 94 58 01 	call	0x2b0	; 0x2b0 <LoginSystem_RemoveUser>
     b8c:	81 30       	cpi	r24, 0x01	; 1
     b8e:	19 f4       	brne	.+6      	; 0xb96 <__stack+0x337>
						{		UART_enuSendString("\r\nRemoved Successfully\r\n");
     b90:	80 ea       	ldi	r24, 0xA0	; 160
     b92:	92 e0       	ldi	r25, 0x02	; 2
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <__stack+0x33b>
								ShowToUser=LOG_OUT_CHOICE;
						}
						else	{UART_enuSendString("\r\nUsername not Found \r\nReturning to Main Menu\r\n");}
     b96:	89 eb       	ldi	r24, 0xB9	; 185
     b98:	92 e0       	ldi	r25, 0x02	; 2
     b9a:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
						ShowToUser=MAIN_MENU;
     b9e:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <ShowToUser>
     ba2:	8f ef       	ldi	r24, 0xFF	; 255
     ba4:	9d e2       	ldi	r25, 0x2D	; 45
     ba6:	e2 e2       	ldi	r30, 0x22	; 34
     ba8:	81 50       	subi	r24, 0x01	; 1
     baa:	90 40       	sbci	r25, 0x00	; 0
     bac:	e0 40       	sbci	r30, 0x00	; 0
     bae:	e1 f7       	brne	.-8      	; 0xba8 <__stack+0x349>
     bb0:	00 c0       	rjmp	.+0      	; 0xbb2 <__stack+0x353>
     bb2:	00 00       	nop
     bb4:	39 cf       	rjmp	.-398    	; 0xa28 <__stack+0x1c9>
						_delay_ms(700);
					break;

					default:
					UART_enuSendString("\r\nInvalid Choice\r\n");
     bb6:	89 ee       	ldi	r24, 0xE9	; 233
     bb8:	92 e0       	ldi	r25, 0x02	; 2
     bba:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
     bbe:	ff ef       	ldi	r31, 0xFF	; 255
     bc0:	23 ed       	ldi	r18, 0xD3	; 211
     bc2:	30 e3       	ldi	r19, 0x30	; 48
     bc4:	f1 50       	subi	r31, 0x01	; 1
     bc6:	20 40       	sbci	r18, 0x00	; 0
     bc8:	30 40       	sbci	r19, 0x00	; 0
     bca:	e1 f7       	brne	.-8      	; 0xbc4 <__stack+0x365>
     bcc:	00 c0       	rjmp	.+0      	; 0xbce <__stack+0x36f>
     bce:	00 00       	nop
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
     bd0:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <ShowToUser>
					break;
     bd4:	29 cf       	rjmp	.-430    	; 0xa28 <__stack+0x1c9>
				}
			}
			switch (ShowToUser)
     bd6:	1a 30       	cpi	r17, 0x0A	; 10
     bd8:	09 f4       	brne	.+2      	; 0xbdc <__stack+0x37d>
     bda:	b8 c0       	rjmp	.+368    	; 0xd4c <__stack+0x4ed>
     bdc:	38 f4       	brcc	.+14     	; 0xbec <__stack+0x38d>
     bde:	18 30       	cpi	r17, 0x08	; 8
     be0:	09 f4       	brne	.+2      	; 0xbe4 <__stack+0x385>
     be2:	83 c0       	rjmp	.+262    	; 0xcea <__stack+0x48b>
     be4:	19 30       	cpi	r17, 0x09	; 9
     be6:	09 f4       	brne	.+2      	; 0xbea <__stack+0x38b>
     be8:	cd c0       	rjmp	.+410    	; 0xd84 <__stack+0x525>
     bea:	18 cf       	rjmp	.-464    	; 0xa1c <__stack+0x1bd>
     bec:	1b 30       	cpi	r17, 0x0B	; 11
     bee:	09 f4       	brne	.+2      	; 0xbf2 <__stack+0x393>
     bf0:	08 c1       	rjmp	.+528    	; 0xe02 <__stack+0x5a3>
     bf2:	1f 30       	cpi	r17, 0x0F	; 15
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <__stack+0x399>
     bf6:	12 cf       	rjmp	.-476    	; 0xa1c <__stack+0x1bd>
			{
				case PRIORITIES_MENU:
						UART_enuSendString("\r\n1-Remoted");
     bf8:	8c ef       	ldi	r24, 0xFC	; 252
     bfa:	92 e0       	ldi	r25, 0x02	; 2
     bfc:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
						UART_enuSendString("\r\n2-Promoted");
     c00:	88 e0       	ldi	r24, 0x08	; 8
     c02:	93 e0       	ldi	r25, 0x03	; 3
     c04:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
						UART_enuSendString("\r\n3-Nonremoted");
     c08:	85 e1       	ldi	r24, 0x15	; 21
     c0a:	93 e0       	ldi	r25, 0x03	; 3
     c0c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
						UART_enuSendString("\r\n\r\nPriority Arrangment: Promoted > Nonremoted (LCD+Keypad) > Remoted\r\n");
     c10:	84 e2       	ldi	r24, 0x24	; 36
     c12:	93 e0       	ldi	r25, 0x03	; 3
     c14:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
						UART_enuRecieveChar(&UART_CHOICE);
     c18:	ce 01       	movw	r24, r28
     c1a:	8c 5b       	subi	r24, 0xBC	; 188
     c1c:	9f 4f       	sbci	r25, 0xFF	; 255
     c1e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <UART_enuRecieveChar>
						if (UART_CHOICE == '1')
     c22:	25 96       	adiw	r28, 0x05	; 5
     c24:	8f ad       	ldd	r24, Y+63	; 0x3f
     c26:	25 97       	sbiw	r28, 0x05	; 5
     c28:	81 33       	cpi	r24, 0x31	; 49
     c2a:	69 f4       	brne	.+26     	; 0xc46 <__stack+0x3e7>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = REMOTED_USER;
     c2c:	28 96       	adiw	r28, 0x08	; 8
     c2e:	8f ad       	ldd	r24, Y+63	; 0x3f
     c30:	28 97       	sbiw	r28, 0x08	; 8
     c32:	e1 e0       	ldi	r30, 0x01	; 1
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	ec 0f       	add	r30, r28
     c38:	fd 1f       	adc	r31, r29
     c3a:	68 9e       	mul	r6, r24
     c3c:	e0 0d       	add	r30, r0
     c3e:	f1 1d       	adc	r31, r1
     c40:	11 24       	eor	r1, r1
     c42:	82 e0       	ldi	r24, 0x02	; 2
     c44:	0e c0       	rjmp	.+28     	; 0xc62 <__stack+0x403>
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
							ShowToUser = LOG_OUT_CHOICE;
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
						else if (UART_CHOICE == '2')
     c46:	82 33       	cpi	r24, 0x32	; 50
     c48:	21 f5       	brne	.+72     	; 0xc92 <__stack+0x433>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = PROMOTED_USER;
     c4a:	28 96       	adiw	r28, 0x08	; 8
     c4c:	8f ad       	ldd	r24, Y+63	; 0x3f
     c4e:	28 97       	sbiw	r28, 0x08	; 8
     c50:	e1 e0       	ldi	r30, 0x01	; 1
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	ec 0f       	add	r30, r28
     c56:	fd 1f       	adc	r31, r29
     c58:	68 9e       	mul	r6, r24
     c5a:	e0 0d       	add	r30, r0
     c5c:	f1 1d       	adc	r31, r1
     c5e:	11 24       	eor	r1, r1
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	82 87       	std	Z+10, r24	; 0x0a
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
     c64:	9e 01       	movw	r18, r28
     c66:	29 5b       	subi	r18, 0xB9	; 185
     c68:	3f 4f       	sbci	r19, 0xFF	; 255
     c6a:	69 01       	movw	r12, r18
     c6c:	e0 80       	ld	r14, Z
     c6e:	f1 80       	ldd	r15, Z+1	; 0x01
     c70:	02 81       	ldd	r16, Z+2	; 0x02
     c72:	13 81       	ldd	r17, Z+3	; 0x03
     c74:	24 81       	ldd	r18, Z+4	; 0x04
     c76:	35 81       	ldd	r19, Z+5	; 0x05
     c78:	46 81       	ldd	r20, Z+6	; 0x06
     c7a:	57 81       	ldd	r21, Z+7	; 0x07
     c7c:	60 85       	ldd	r22, Z+8	; 0x08
     c7e:	71 85       	ldd	r23, Z+9	; 0x09
     c80:	0e 94 52 00 	call	0xa4	; 0xa4 <LoginSystem_SaveNewUser>
							ShowToUser = LOG_OUT_CHOICE;
     c84:	80 92 68 05 	sts	0x0568, r8	; 0x800568 <ShowToUser>
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
     c88:	8c e6       	ldi	r24, 0x6C	; 108
     c8a:	93 e0       	ldi	r25, 0x03	; 3
     c8c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
     c90:	bf ce       	rjmp	.-642    	; 0xa10 <__stack+0x1b1>
						else if (UART_CHOICE == '3')
     c92:	83 33       	cpi	r24, 0x33	; 51
     c94:	e1 f4       	brne	.+56     	; 0xcce <__stack+0x46f>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = LCD_KEYPAD_USER;
     c96:	28 96       	adiw	r28, 0x08	; 8
     c98:	8f ad       	ldd	r24, Y+63	; 0x3f
     c9a:	28 97       	sbiw	r28, 0x08	; 8
     c9c:	e1 e0       	ldi	r30, 0x01	; 1
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	ec 0f       	add	r30, r28
     ca2:	fd 1f       	adc	r31, r29
     ca4:	68 9e       	mul	r6, r24
     ca6:	e0 0d       	add	r30, r0
     ca8:	f1 1d       	adc	r31, r1
     caa:	11 24       	eor	r1, r1
     cac:	12 86       	std	Z+10, r1	; 0x0a
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
     cae:	ce 01       	movw	r24, r28
     cb0:	89 5b       	subi	r24, 0xB9	; 185
     cb2:	9f 4f       	sbci	r25, 0xFF	; 255
     cb4:	6c 01       	movw	r12, r24
     cb6:	e0 80       	ld	r14, Z
     cb8:	f1 80       	ldd	r15, Z+1	; 0x01
     cba:	02 81       	ldd	r16, Z+2	; 0x02
     cbc:	13 81       	ldd	r17, Z+3	; 0x03
     cbe:	24 81       	ldd	r18, Z+4	; 0x04
     cc0:	35 81       	ldd	r19, Z+5	; 0x05
     cc2:	46 81       	ldd	r20, Z+6	; 0x06
     cc4:	57 81       	ldd	r21, Z+7	; 0x07
     cc6:	60 85       	ldd	r22, Z+8	; 0x08
     cc8:	71 85       	ldd	r23, Z+9	; 0x09
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	d9 cf       	rjmp	.-78     	; 0xc80 <__stack+0x421>
							ShowToUser = LOG_OUT_CHOICE;
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
						else
						{
							UART_enuSendString("\r\nInvalid Choice\r\n");
     cce:	89 ee       	ldi	r24, 0xE9	; 233
     cd0:	92 e0       	ldi	r25, 0x02	; 2
     cd2:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
     cd6:	9f ef       	ldi	r25, 0xFF	; 255
     cd8:	e3 ed       	ldi	r30, 0xD3	; 211
     cda:	f0 e3       	ldi	r31, 0x30	; 48
     cdc:	91 50       	subi	r25, 0x01	; 1
     cde:	e0 40       	sbci	r30, 0x00	; 0
     ce0:	f0 40       	sbci	r31, 0x00	; 0
     ce2:	e1 f7       	brne	.-8      	; 0xcdc <__stack+0x47d>
     ce4:	00 c0       	rjmp	.+0      	; 0xce6 <__stack+0x487>
     ce6:	00 00       	nop
     ce8:	93 ce       	rjmp	.-730    	; 0xa10 <__stack+0x1b1>
						}
						
				break;
				
				case DIMMER_MENU:
					UART_enuSendString("\r\nEnter The Percentage of Brightness: ");
     cea:	88 e8       	ldi	r24, 0x88	; 136
     cec:	93 e0       	ldi	r25, 0x03	; 3
     cee:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
					UART_enuRecieveChar(&Dimmer_Percentage_Tens);
     cf2:	ce 01       	movw	r24, r28
     cf4:	8d 5b       	subi	r24, 0xBD	; 189
     cf6:	9f 4f       	sbci	r25, 0xFF	; 255
     cf8:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Tens);
     cfc:	24 96       	adiw	r28, 0x04	; 4
     cfe:	8f ad       	ldd	r24, Y+63	; 0x3f
     d00:	24 97       	sbiw	r28, 0x04	; 4
     d02:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <UART_enuSendChar>
					Dimmer_Percentage_Tens = Dimmer_Percentage_Tens - '0';
     d06:	24 96       	adiw	r28, 0x04	; 4
     d08:	8f ad       	ldd	r24, Y+63	; 0x3f
     d0a:	24 97       	sbiw	r28, 0x04	; 4
     d0c:	80 53       	subi	r24, 0x30	; 48
     d0e:	24 96       	adiw	r28, 0x04	; 4
     d10:	8f af       	std	Y+63, r24	; 0x3f
     d12:	24 97       	sbiw	r28, 0x04	; 4
					
					UART_enuRecieveChar(&Dimmer_Percentage_Ones);
     d14:	ce 01       	movw	r24, r28
     d16:	8e 5b       	subi	r24, 0xBE	; 190
     d18:	9f 4f       	sbci	r25, 0xFF	; 255
     d1a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Ones);
     d1e:	23 96       	adiw	r28, 0x03	; 3
     d20:	8f ad       	ldd	r24, Y+63	; 0x3f
     d22:	23 97       	sbiw	r28, 0x03	; 3
     d24:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <UART_enuSendChar>
					Dimmer_Percentage_Ones = Dimmer_Percentage_Ones -'0';
     d28:	23 96       	adiw	r28, 0x03	; 3
     d2a:	8f ad       	ldd	r24, Y+63	; 0x3f
     d2c:	23 97       	sbiw	r28, 0x03	; 3
     d2e:	90 ed       	ldi	r25, 0xD0	; 208
     d30:	98 0f       	add	r25, r24
     d32:	23 96       	adiw	r28, 0x03	; 3
     d34:	9f af       	std	Y+63, r25	; 0x3f
     d36:	23 97       	sbiw	r28, 0x03	; 3
					
					Dimmer_Percentage =10*Dimmer_Percentage_Tens + Dimmer_Percentage_Ones;
     d38:	24 96       	adiw	r28, 0x04	; 4
     d3a:	8f ad       	ldd	r24, Y+63	; 0x3f
     d3c:	24 97       	sbiw	r28, 0x04	; 4
     d3e:	b9 2e       	mov	r11, r25
     d40:	2a e0       	ldi	r18, 0x0A	; 10
     d42:	82 9f       	mul	r24, r18
     d44:	b0 0c       	add	r11, r0
     d46:	11 24       	eor	r1, r1
					
					SPI_ui8TransmitRecive(Dimmer_Percentage);
     d48:	8b 2d       	mov	r24, r11
     d4a:	0f c0       	rjmp	.+30     	; 0xd6a <__stack+0x50b>
					ShowToUser=LOG_OUT_CHOICE;
				break;
				
				case DOOR_MENU:
					UART_enuSendString("\r\nDoor Options \r\n 1-Open Door\r\n 2-Close Door\r\n 0-Return to main menu\r\n ");
     d4c:	8f ea       	ldi	r24, 0xAF	; 175
     d4e:	93 e0       	ldi	r25, 0x03	; 3
     d50:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     d54:	ce 01       	movw	r24, r28
     d56:	8c 5b       	subi	r24, 0xBC	; 188
     d58:	9f 4f       	sbci	r25, 0xFF	; 255
     d5a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     d5e:	25 96       	adiw	r28, 0x05	; 5
     d60:	8f ad       	ldd	r24, Y+63	; 0x3f
     d62:	25 97       	sbiw	r28, 0x05	; 5
     d64:	81 33       	cpi	r24, 0x31	; 49
     d66:	31 f4       	brne	.+12     	; 0xd74 <__stack+0x515>
					{
						SPI_ui8TransmitRecive(OPEN_DOOR_COMMAND);	
     d68:	8d e0       	ldi	r24, 0x0D	; 13
     d6a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						ShowToUser = LOG_OUT_CHOICE;
     d6e:	80 92 68 05 	sts	0x0568, r8	; 0x800568 <ShowToUser>
     d72:	4e ce       	rjmp	.-868    	; 0xa10 <__stack+0x1b1>
					}
					else if(UART_CHOICE == '2')
     d74:	82 33       	cpi	r24, 0x32	; 50
     d76:	11 f4       	brne	.+4      	; 0xd7c <__stack+0x51d>
					{
						SPI_ui8TransmitRecive(CLOSE_DOOR_COMMAND);
     d78:	8e e0       	ldi	r24, 0x0E	; 14
     d7a:	f7 cf       	rjmp	.-18     	; 0xd6a <__stack+0x50b>
						ShowToUser = LOG_OUT_CHOICE;
					}
					else if (UART_CHOICE == '0') 
     d7c:	80 33       	cpi	r24, 0x30	; 48
     d7e:	09 f0       	breq	.+2      	; 0xd82 <__stack+0x523>
     d80:	6b c0       	rjmp	.+214    	; 0xe58 <__stack+0x5f9>
     d82:	67 c0       	rjmp	.+206    	; 0xe52 <__stack+0x5f3>
						{ShowToUser = MAIN_MENU;} 
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = DOOR_MENU;}
				break;
				case AIR_COND_MENU:
					
					UART_enuSendString("\r\n1-Open\r\n2-Close\r\n3-Automatic Control");
     d84:	8b e0       	ldi	r24, 0x0B	; 11
     d86:	94 e0       	ldi	r25, 0x04	; 4
     d88:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     d8c:	ce 01       	movw	r24, r28
     d8e:	8c 5b       	subi	r24, 0xBC	; 188
     d90:	9f 4f       	sbci	r25, 0xFF	; 255
     d92:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <UART_enuRecieveChar>
					if(UART_CHOICE == '1')
     d96:	25 96       	adiw	r28, 0x05	; 5
     d98:	8f ad       	ldd	r24, Y+63	; 0x3f
     d9a:	25 97       	sbiw	r28, 0x05	; 5
     d9c:	81 33       	cpi	r24, 0x31	; 49
     d9e:	59 f4       	brne	.+22     	; 0xdb6 <__stack+0x557>
					{
						SPI_ui8TransmitRecive(OPEN_AirCond_COMMAND);
     da0:	80 e1       	ldi	r24, 0x10	; 16
     da2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						ClearBit(&Current_State,6);
     da6:	66 e0       	ldi	r22, 0x06	; 6
     da8:	70 e0       	ldi	r23, 0x00	; 0
     daa:	ce 01       	movw	r24, r28
     dac:	8b 5b       	subi	r24, 0xBB	; 187
     dae:	9f 4f       	sbci	r25, 0xFF	; 255
     db0:	0e 94 1a 02 	call	0x434	; 0x434 <ClearBit>
     db4:	0b c0       	rjmp	.+22     	; 0xdcc <__stack+0x56d>
						SetBit(&Current_State,5);
					}	
					else if(UART_CHOICE == '2')
     db6:	82 33       	cpi	r24, 0x32	; 50
     db8:	81 f4       	brne	.+32     	; 0xdda <__stack+0x57b>
					{
						SPI_ui8TransmitRecive(CLOSE_AirCond_COMMAND);
     dba:	81 e1       	ldi	r24, 0x11	; 17
     dbc:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						SetBit(&Current_State,6);
     dc0:	66 e0       	ldi	r22, 0x06	; 6
     dc2:	ce 01       	movw	r24, r28
     dc4:	8b 5b       	subi	r24, 0xBB	; 187
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	0e 94 0f 02 	call	0x41e	; 0x41e <SetBit>
						SetBit(&Current_State,5);
     dcc:	65 e0       	ldi	r22, 0x05	; 5
     dce:	ce 01       	movw	r24, r28
     dd0:	8b 5b       	subi	r24, 0xBB	; 187
     dd2:	9f 4f       	sbci	r25, 0xFF	; 255
     dd4:	0e 94 0f 02 	call	0x41e	; 0x41e <SetBit>
     dd8:	ca cf       	rjmp	.-108    	; 0xd6e <__stack+0x50f>
					}
					else if(UART_CHOICE == '3')
     dda:	83 33       	cpi	r24, 0x33	; 51
     ddc:	41 f6       	brne	.-112    	; 0xd6e <__stack+0x50f>
					{
						SPI_ui8TransmitRecive(AUTO_AirCond_COMMAND);
     dde:	82 e1       	ldi	r24, 0x12	; 18
     de0:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						ClearBit(&Current_State,6);
     de4:	66 e0       	ldi	r22, 0x06	; 6
     de6:	70 e0       	ldi	r23, 0x00	; 0
     de8:	ce 01       	movw	r24, r28
     dea:	8b 5b       	subi	r24, 0xBB	; 187
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	0e 94 1a 02 	call	0x434	; 0x434 <ClearBit>
						ClearBit(&Current_State,5);
     df2:	65 e0       	ldi	r22, 0x05	; 5
     df4:	70 e0       	ldi	r23, 0x00	; 0
     df6:	ce 01       	movw	r24, r28
     df8:	8b 5b       	subi	r24, 0xBB	; 187
     dfa:	9f 4f       	sbci	r25, 0xFF	; 255
     dfc:	0e 94 1a 02 	call	0x434	; 0x434 <ClearBit>
     e00:	b6 cf       	rjmp	.-148    	; 0xd6e <__stack+0x50f>
					}
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case LOG_OUT_CHOICE:
					UART_enuSendString("\r\n\r\n1-Log Out\r\n2-Return to main menu\r\n");
     e02:	82 e3       	ldi	r24, 0x32	; 50
     e04:	94 e0       	ldi	r25, 0x04	; 4
     e06:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     e0a:	ce 01       	movw	r24, r28
     e0c:	8c 5b       	subi	r24, 0xBC	; 188
     e0e:	9f 4f       	sbci	r25, 0xFF	; 255
     e10:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     e14:	25 96       	adiw	r28, 0x05	; 5
     e16:	8f ad       	ldd	r24, Y+63	; 0x3f
     e18:	25 97       	sbiw	r28, 0x05	; 5
     e1a:	81 33       	cpi	r24, 0x31	; 49
     e1c:	c1 f4       	brne	.+48     	; 0xe4e <__stack+0x5ef>
						{
							Program_Status_Flag = IDLE_STATE;	
     e1e:	87 e0       	ldi	r24, 0x07	; 7
     e20:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <Program_Status_Flag>
							ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu 
     e24:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <ShowToUser>
							UART_enuSendString("\r\nLogged Out\r\n");
     e28:	89 e5       	ldi	r24, 0x59	; 89
     e2a:	94 e0       	ldi	r25, 0x04	; 4
     e2c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
							if (LoginSystem_u8AdminOnlineFlag == TRUE)	//If an Admin was online and wants to log out
     e30:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <LoginSystem_u8AdminOnlineFlag>
     e34:	81 30       	cpi	r24, 0x01	; 1
     e36:	19 f4       	brne	.+6      	; 0xe3e <__stack+0x5df>
								LoginSystem_u8AdminOnlineFlag = FALSE;	
     e38:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <LoginSystem_u8AdminOnlineFlag>
     e3c:	e9 cd       	rjmp	.-1070   	; 0xa10 <__stack+0x1b1>
							else if (LoginSystem_u8PromotedUserOnlineFlag == TRUE)	//If a promoted user was online and wants to log out
     e3e:	80 91 69 05 	lds	r24, 0x0569	; 0x800569 <LoginSystem_u8PromotedUserOnlineFlag>
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	09 f0       	breq	.+2      	; 0xe48 <__stack+0x5e9>
     e46:	e4 cd       	rjmp	.-1080   	; 0xa10 <__stack+0x1b1>
								LoginSystem_u8PromotedUserOnlineFlag = FALSE;
     e48:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <LoginSystem_u8PromotedUserOnlineFlag>
     e4c:	e1 cd       	rjmp	.-1086   	; 0xa10 <__stack+0x1b1>
						}
				
					else if(UART_CHOICE == '2')
     e4e:	82 33       	cpi	r24, 0x32	; 50
     e50:	19 f4       	brne	.+6      	; 0xe58 <__stack+0x5f9>
						{ShowToUser = MAIN_MENU;}
     e52:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <ShowToUser>
     e56:	dc cd       	rjmp	.-1096   	; 0xa10 <__stack+0x1b1>
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = LOG_OUT_CHOICE;}
     e58:	87 ef       	ldi	r24, 0xF7	; 247
     e5a:	93 e0       	ldi	r25, 0x03	; 3
     e5c:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <UART_enuSendString>
     e60:	10 93 68 05 	sts	0x0568, r17	; 0x800568 <ShowToUser>
     e64:	d5 cd       	rjmp	.-1110   	; 0xa10 <__stack+0x1b1>
				u8 LoginSystem_u8TrueFlag;
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     e66:	4b e0       	ldi	r20, 0x0B	; 11
     e68:	e4 2e       	mov	r14, r20
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
					_delay_ms(700);
					if (LoginSystem_u8TrialsLeft == 0)
					{
						Program_Status_Flag = BLOCKING_STATE;
     e6a:	56 e0       	ldi	r21, 0x06	; 6
     e6c:	85 2e       	mov	r8, r21
							LCD_enuDisplayString("Successfully");
							_delay_ms(700);
							LCD_enuClearDisplay();
							LCD_enuDisplayString("Welcome User");
							_delay_ms(700);
							Program_Status_Flag = LCD_KEYPAD_MENU_STATE;
     e6e:	65 e0       	ldi	r22, 0x05	; 5
     e70:	66 2e       	mov	r6, r22
		}//end of the REMOTED_SYSTEM_MENU_STATE
		
/***********************************************************************************************LCD_KEYPAD_LOGIN_PAGE_STATE*********************************************************************************************************/
/****************The Program Enters This State if A User Started a Login Attempt To LCD_Keypad System By Pressing A Button That generates an EXT interrupt The Transfers the Program_Status_Flag into this state*******************/
/***********************************************************It takes the username and password from the user and Compare it with NonRemoted users database************************************************************************/
		while (Program_Status_Flag == LCD_KEYPAD_LOGIN_PAGE_STATE)//off-line user should have Button interrupt
     e72:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <Program_Status_Flag>
     e76:	83 30       	cpi	r24, 0x03	; 3
     e78:	09 f0       	breq	.+2      	; 0xe7c <__stack+0x61d>
     e7a:	c7 c0       	rjmp	.+398    	; 0x100a <__stack+0x7ab>
		{	
				LCD_enuClearDisplay();
     e7c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
				LCD_enuDisplayString("User Login");
     e80:	88 e6       	ldi	r24, 0x68	; 104
     e82:	94 e0       	ldi	r25, 0x04	; 4
     e84:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	81 e0       	ldi	r24, 0x01	; 1
     e8c:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Attempt Detected");
     e90:	83 e7       	ldi	r24, 0x73	; 115
     e92:	94 e0       	ldi	r25, 0x04	; 4
     e94:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
     e98:	3f ef       	ldi	r19, 0xFF	; 255
     e9a:	8d e2       	ldi	r24, 0x2D	; 45
     e9c:	92 e2       	ldi	r25, 0x22	; 34
     e9e:	31 50       	subi	r19, 0x01	; 1
     ea0:	80 40       	sbci	r24, 0x00	; 0
     ea2:	90 40       	sbci	r25, 0x00	; 0
     ea4:	e1 f7       	brne	.-8      	; 0xe9e <__stack+0x63f>
     ea6:	00 c0       	rjmp	.+0      	; 0xea8 <__stack+0x649>
     ea8:	00 00       	nop
				_delay_ms(700);
				u8 LoginSystem_u8TrueFlag;
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
     eaa:	be 01       	movw	r22, r28
     eac:	68 5c       	subi	r22, 0xC8	; 200
     eae:	7f 4f       	sbci	r23, 0xFF	; 255
     eb0:	ce 01       	movw	r24, r28
     eb2:	cd 96       	adiw	r24, 0x3d	; 61
     eb4:	0e 94 c5 00 	call	0x18a	; 0x18a <LoginSystem_enuGetDataFromUserByKeypad>
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     eb8:	f1 2c       	mov	r15, r1
     eba:	28 96       	adiw	r28, 0x08	; 8
     ebc:	8f ad       	ldd	r24, Y+63	; 0x3f
     ebe:	28 97       	sbiw	r28, 0x08	; 8
     ec0:	f8 16       	cp	r15, r24
     ec2:	08 f0       	brcs	.+2      	; 0xec6 <__stack+0x667>
     ec4:	9a c0       	rjmp	.+308    	; 0xffa <__stack+0x79b>
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     ec6:	0f 2d       	mov	r16, r15
     ec8:	10 e0       	ldi	r17, 0x00	; 0
     eca:	e0 9e       	mul	r14, r16
     ecc:	60 01       	movw	r12, r0
     ece:	e1 9e       	mul	r14, r17
     ed0:	d0 0c       	add	r13, r0
     ed2:	11 24       	eor	r1, r1
     ed4:	be 01       	movw	r22, r28
     ed6:	63 5c       	subi	r22, 0xC3	; 195
     ed8:	7f 4f       	sbci	r23, 0xFF	; 255
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	8c 0f       	add	r24, r28
     ee0:	9d 1f       	adc	r25, r29
     ee2:	8c 0d       	add	r24, r12
     ee4:	9d 1d       	adc	r25, r13
     ee6:	0e 94 3c 01 	call	0x278	; 0x278 <LoginSystem_u8Strcmp>
     eea:	88 23       	and	r24, r24
     eec:	99 f0       	breq	.+38     	; 0xf14 <__stack+0x6b5>
     eee:	c6 01       	movw	r24, r12
     ef0:	05 96       	adiw	r24, 0x05	; 5
     ef2:	be 01       	movw	r22, r28
     ef4:	68 5c       	subi	r22, 0xC8	; 200
     ef6:	7f 4f       	sbci	r23, 0xFF	; 255
     ef8:	e1 e0       	ldi	r30, 0x01	; 1
     efa:	f0 e0       	ldi	r31, 0x00	; 0
     efc:	ec 0f       	add	r30, r28
     efe:	fd 1f       	adc	r31, r29
     f00:	8e 0f       	add	r24, r30
     f02:	9f 1f       	adc	r25, r31
     f04:	0e 94 3c 01 	call	0x278	; 0x278 <LoginSystem_u8Strcmp>
     f08:	91 e0       	ldi	r25, 0x01	; 1
     f0a:	81 11       	cpse	r24, r1
     f0c:	01 c0       	rjmp	.+2      	; 0xf10 <__stack+0x6b1>
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	79 2e       	mov	r7, r25
     f12:	01 c0       	rjmp	.+2      	; 0xf16 <__stack+0x6b7>
     f14:	71 2c       	mov	r7, r1
					if ( LoginSystem_u8TrueFlag == TRUE  )
     f16:	f1 e0       	ldi	r31, 0x01	; 1
     f18:	7f 12       	cpse	r7, r31
     f1a:	6d c0       	rjmp	.+218    	; 0xff6 <__stack+0x797>
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
     f1c:	e0 9e       	mul	r14, r16
     f1e:	f0 01       	movw	r30, r0
     f20:	e1 9e       	mul	r14, r17
     f22:	f0 0d       	add	r31, r0
     f24:	11 24       	eor	r1, r1
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	2c 0f       	add	r18, r28
     f2c:	3d 1f       	adc	r19, r29
     f2e:	e2 0f       	add	r30, r18
     f30:	f3 1f       	adc	r31, r19
     f32:	82 85       	ldd	r24, Z+10	; 0x0a
     f34:	88 23       	and	r24, r24
     f36:	a1 f1       	breq	.+104    	; 0xfa0 <__stack+0x741>
					}
					
				}
				if (LoginSystem_u8TrueFlag == FALSE)
				{
					LoginSystem_u8TrialsLeft--;
     f38:	9a 94       	dec	r9
					LCD_enuClearDisplay();
     f3a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Wrong Username");
     f3e:	84 e8       	ldi	r24, 0x84	; 132
     f40:	94 e0       	ldi	r25, 0x04	; 4
     f42:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("or Password");
     f4e:	8b ec       	ldi	r24, 0xCB	; 203
     f50:	91 e0       	ldi	r25, 0x01	; 1
     f52:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
     f56:	3f ef       	ldi	r19, 0xFF	; 255
     f58:	8d e2       	ldi	r24, 0x2D	; 45
     f5a:	92 e2       	ldi	r25, 0x22	; 34
     f5c:	31 50       	subi	r19, 0x01	; 1
     f5e:	80 40       	sbci	r24, 0x00	; 0
     f60:	90 40       	sbci	r25, 0x00	; 0
     f62:	e1 f7       	brne	.-8      	; 0xf5c <__stack+0x6fd>
     f64:	00 c0       	rjmp	.+0      	; 0xf66 <__stack+0x707>
     f66:	00 00       	nop
					_delay_ms(700);
					LCD_enuClearDisplay();
     f68:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Remaining Trials: ");
     f6c:	89 ed       	ldi	r24, 0xD9	; 217
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
     f7c:	89 2d       	mov	r24, r9
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <LCD_enuDisplayUnsignedInteger>
     f84:	ef ef       	ldi	r30, 0xFF	; 255
     f86:	fd e2       	ldi	r31, 0x2D	; 45
     f88:	22 e2       	ldi	r18, 0x22	; 34
     f8a:	e1 50       	subi	r30, 0x01	; 1
     f8c:	f0 40       	sbci	r31, 0x00	; 0
     f8e:	20 40       	sbci	r18, 0x00	; 0
     f90:	e1 f7       	brne	.-8      	; 0xf8a <__stack+0x72b>
     f92:	00 c0       	rjmp	.+0      	; 0xf94 <__stack+0x735>
     f94:	00 00       	nop
					_delay_ms(700);
					if (LoginSystem_u8TrialsLeft == 0)
     f96:	91 10       	cpse	r9, r1
     f98:	36 c0       	rjmp	.+108    	; 0x1006 <__stack+0x7a7>
					{
						Program_Status_Flag = BLOCKING_STATE;
     f9a:	80 92 67 05 	sts	0x0567, r8	; 0x800567 <Program_Status_Flag>
     f9e:	33 c0       	rjmp	.+102    	; 0x1006 <__stack+0x7a7>
					if ( LoginSystem_u8TrueFlag == TRUE  )
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
						{
							LoginSystem_u8TrialsLeft =3;
							LCD_enuClearDisplay();
     fa0:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
							LCD_enuDisplayString("Logged in");
     fa4:	83 e9       	ldi	r24, 0x93	; 147
     fa6:	94 e0       	ldi	r25, 0x04	; 4
     fa8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     fac:	60 e0       	ldi	r22, 0x00	; 0
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
							LCD_enuDisplayString("Successfully");
     fb4:	80 e8       	ldi	r24, 0x80	; 128
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
     fbc:	3f ef       	ldi	r19, 0xFF	; 255
     fbe:	8d e2       	ldi	r24, 0x2D	; 45
     fc0:	92 e2       	ldi	r25, 0x22	; 34
     fc2:	31 50       	subi	r19, 0x01	; 1
     fc4:	80 40       	sbci	r24, 0x00	; 0
     fc6:	90 40       	sbci	r25, 0x00	; 0
     fc8:	e1 f7       	brne	.-8      	; 0xfc2 <__stack+0x763>
     fca:	00 c0       	rjmp	.+0      	; 0xfcc <__stack+0x76d>
     fcc:	00 00       	nop
							_delay_ms(700);
							LCD_enuClearDisplay();
     fce:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
							LCD_enuDisplayString("Welcome User");
     fd2:	8d e9       	ldi	r24, 0x9D	; 157
     fd4:	94 e0       	ldi	r25, 0x04	; 4
     fd6:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
     fda:	ef ef       	ldi	r30, 0xFF	; 255
     fdc:	fd e2       	ldi	r31, 0x2D	; 45
     fde:	22 e2       	ldi	r18, 0x22	; 34
     fe0:	e1 50       	subi	r30, 0x01	; 1
     fe2:	f0 40       	sbci	r31, 0x00	; 0
     fe4:	20 40       	sbci	r18, 0x00	; 0
     fe6:	e1 f7       	brne	.-8      	; 0xfe0 <__stack+0x781>
     fe8:	00 c0       	rjmp	.+0      	; 0xfea <__stack+0x78b>
     fea:	00 00       	nop
							_delay_ms(700);
							Program_Status_Flag = LCD_KEYPAD_MENU_STATE;
     fec:	60 92 67 05 	sts	0x0567, r6	; 0x800567 <Program_Status_Flag>
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
					if ( LoginSystem_u8TrueFlag == TRUE  )
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
						{
							LoginSystem_u8TrialsLeft =3;
     ff0:	33 e0       	ldi	r19, 0x03	; 3
     ff2:	93 2e       	mov	r9, r19
     ff4:	3e cf       	rjmp	.-388    	; 0xe72 <__stack+0x613>
				LCD_enuDisplayString("Attempt Detected");
				_delay_ms(700);
				u8 LoginSystem_u8TrueFlag;
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     ff6:	f3 94       	inc	r15
     ff8:	60 cf       	rjmp	.-320    	; 0xeba <__stack+0x65b>
							break;
						}
					}
					
				}
				if (LoginSystem_u8TrueFlag == FALSE)
     ffa:	77 20       	and	r7, r7
     ffc:	09 f4       	brne	.+2      	; 0x1000 <__stack+0x7a1>
     ffe:	9c cf       	rjmp	.-200    	; 0xf38 <__stack+0x6d9>
    1000:	77 24       	eor	r7, r7
    1002:	73 94       	inc	r7
    1004:	36 cf       	rjmp	.-404    	; 0xe72 <__stack+0x613>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
					_delay_ms(700);
					if (LoginSystem_u8TrialsLeft == 0)
					{
						Program_Status_Flag = BLOCKING_STATE;
    1006:	71 2c       	mov	r7, r1
    1008:	34 cf       	rjmp	.-408    	; 0xe72 <__stack+0x613>
				break;
				
				case '2':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
					ToggleBit(&Current_State,2);
					ShowToUser = LOG_OUT_CHOICE;
    100a:	8b e0       	ldi	r24, 0x0B	; 11
    100c:	f8 2e       	mov	r15, r24
					break;
					
					case '2':
					SPI_ui8TransmitRecive(DIMMER);
					
					ShowToUser = DIMMER_MENU;
    100e:	98 e0       	ldi	r25, 0x08	; 8
    1010:	e9 2e       	mov	r14, r25
				break;
				
				case '2':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
					ToggleBit(&Current_State,2);
					ShowToUser = LOG_OUT_CHOICE;
    1012:	1b e0       	ldi	r17, 0x0B	; 11
					ToggleBit(&Current_State,3);
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '4':
					ShowToUser = MORE_MENU;
    1014:	20 e1       	ldi	r18, 0x10	; 16
    1016:	d2 2e       	mov	r13, r18
		}//end of the LCD_KEYPAD_LOGIN_PAGE_STATE
		
/*************************************************************************************LCD_KEYPAD_MENU_STATE*************************************************************************************/
/****************The Program Enters This State if The User Entered Matched Username and Password With Nonremoted users database in the LCD Keypad Login Page "The Previous State"**************/
/***************************************************************It Displays The Menu of the Smart Home to The Nonremoted User*****************************************************************/
		while (Program_Status_Flag == LCD_KEYPAD_MENU_STATE)//off line user menu
    1018:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <Program_Status_Flag>
    101c:	85 30       	cpi	r24, 0x05	; 5
    101e:	09 f0       	breq	.+2      	; 0x1022 <__stack+0x7c3>
    1020:	6a c1       	rjmp	.+724    	; 0x12f6 <__stack+0xa97>
		{
			while(ShowToUser == MAIN_MENU)
    1022:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <ShowToUser>
    1026:	81 11       	cpse	r24, r1
    1028:	68 c0       	rjmp	.+208    	; 0x10fa <__stack+0x89b>
			{
				LCD_enuClearDisplay();			
    102a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
				LCD_enuDisplayString("1:Room1 2:Room2");
    102e:	8a ea       	ldi	r24, 0xAA	; 170
    1030:	94 e0       	ldi	r25, 0x04	; 4
    1032:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    1036:	60 e0       	ldi	r22, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("3:Room3 4:More");
    103e:	8a eb       	ldi	r24, 0xBA	; 186
    1040:	94 e0       	ldi	r25, 0x04	; 4
    1042:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
    1046:	ce 01       	movw	r24, r28
    1048:	8a 5b       	subi	r24, 0xBA	; 186
    104a:	9f 4f       	sbci	r25, 0xFF	; 255
    104c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Keypad_enuGetPressedKey>
				switch (Keypad_Pressed_Key)
    1050:	27 96       	adiw	r28, 0x07	; 7
    1052:	8f ad       	ldd	r24, Y+63	; 0x3f
    1054:	27 97       	sbiw	r28, 0x07	; 7
    1056:	82 33       	cpi	r24, 0x32	; 50
    1058:	79 f0       	breq	.+30     	; 0x1078 <__stack+0x819>
    105a:	38 f4       	brcc	.+14     	; 0x106a <__stack+0x80b>
    105c:	81 33       	cpi	r24, 0x31	; 49
    105e:	e9 f4       	brne	.+58     	; 0x109a <__stack+0x83b>
				{
				case '1':
					SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,1);
    1066:	61 e0       	ldi	r22, 0x01	; 1
    1068:	10 c0       	rjmp	.+32     	; 0x108a <__stack+0x82b>
				LCD_enuClearDisplay();			
				LCD_enuDisplayString("1:Room1 2:Room2");
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
				LCD_enuDisplayString("3:Room3 4:More");
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
				switch (Keypad_Pressed_Key)
    106a:	83 33       	cpi	r24, 0x33	; 51
    106c:	51 f0       	breq	.+20     	; 0x1082 <__stack+0x823>
    106e:	84 33       	cpi	r24, 0x34	; 52
    1070:	a1 f4       	brne	.+40     	; 0x109a <__stack+0x83b>
					ToggleBit(&Current_State,3);
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '4':
					ShowToUser = MORE_MENU;
    1072:	d0 92 68 05 	sts	0x0568, r13	; 0x800568 <ShowToUser>
				break;
    1076:	d5 cf       	rjmp	.-86     	; 0x1022 <__stack+0x7c3>
					ToggleBit(&Current_State,1);
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '2':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
    1078:	82 e0       	ldi	r24, 0x02	; 2
    107a:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,2);
    107e:	62 e0       	ldi	r22, 0x02	; 2
    1080:	04 c0       	rjmp	.+8      	; 0x108a <__stack+0x82b>
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '3':
					SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
    1082:	83 e0       	ldi	r24, 0x03	; 3
    1084:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,3);
    1088:	63 e0       	ldi	r22, 0x03	; 3
    108a:	ce 01       	movw	r24, r28
    108c:	8b 5b       	subi	r24, 0xBB	; 187
    108e:	9f 4f       	sbci	r25, 0xFF	; 255
    1090:	0e 94 26 02 	call	0x44c	; 0x44c <ToggleBit>
					ShowToUser = LOG_OUT_CHOICE;
    1094:	10 93 68 05 	sts	0x0568, r17	; 0x800568 <ShowToUser>
				break;
    1098:	c4 cf       	rjmp	.-120    	; 0x1022 <__stack+0x7c3>
				case '4':
					ShowToUser = MORE_MENU;
				break;
				
				default:
				LCD_enuClearDisplay();
    109a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Invalid Choice");
    109e:	89 ec       	ldi	r24, 0xC9	; 201
    10a0:	94 e0       	ldi	r25, 0x04	; 4
    10a2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
    10a6:	3f ef       	ldi	r19, 0xFF	; 255
    10a8:	8d e2       	ldi	r24, 0x2D	; 45
    10aa:	92 e2       	ldi	r25, 0x22	; 34
    10ac:	31 50       	subi	r19, 0x01	; 1
    10ae:	80 40       	sbci	r24, 0x00	; 0
    10b0:	90 40       	sbci	r25, 0x00	; 0
    10b2:	e1 f7       	brne	.-8      	; 0x10ac <__stack+0x84d>
    10b4:	00 c0       	rjmp	.+0      	; 0x10b6 <__stack+0x857>
    10b6:	00 00       	nop
    10b8:	b4 cf       	rjmp	.-152    	; 0x1022 <__stack+0x7c3>
			}
			
			while (ShowToUser == MORE_MENU)
			{
					
				LCD_enuClearDisplay();
    10ba:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
				LCD_enuDisplayString("1:Room4 2:Dimmer");
    10be:	88 ed       	ldi	r24, 0xD8	; 216
    10c0:	94 e0       	ldi	r25, 0x04	; 4
    10c2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    10c6:	60 e0       	ldi	r22, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("3:AirCond 0:Ret");
    10ce:	89 ee       	ldi	r24, 0xE9	; 233
    10d0:	94 e0       	ldi	r25, 0x04	; 4
    10d2:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
    10d6:	ce 01       	movw	r24, r28
    10d8:	8a 5b       	subi	r24, 0xBA	; 186
    10da:	9f 4f       	sbci	r25, 0xFF	; 255
    10dc:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Keypad_enuGetPressedKey>
				switch (Keypad_Pressed_Key)
    10e0:	27 96       	adiw	r28, 0x07	; 7
    10e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    10e4:	27 97       	sbiw	r28, 0x07	; 7
    10e6:	81 33       	cpi	r24, 0x31	; 49
    10e8:	b1 f0       	breq	.+44     	; 0x1116 <__stack+0x8b7>
    10ea:	60 f0       	brcs	.+24     	; 0x1104 <__stack+0x8a5>
    10ec:	82 33       	cpi	r24, 0x32	; 50
    10ee:	81 f4       	brne	.+32     	; 0x1110 <__stack+0x8b1>
					ToggleBit(&Current_State,4);
					ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '2':
					SPI_ui8TransmitRecive(DIMMER);
    10f0:	8c e0       	ldi	r24, 0x0C	; 12
    10f2:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
					
					ShowToUser = DIMMER_MENU;
    10f6:	e0 92 68 05 	sts	0x0568, r14	; 0x800568 <ShowToUser>
				_delay_ms(700);
				break;
				}
			}
			
			while (ShowToUser == MORE_MENU)
    10fa:	00 91 68 05 	lds	r16, 0x0568	; 0x800568 <ShowToUser>
    10fe:	00 31       	cpi	r16, 0x10	; 16
    1100:	e1 f2       	breq	.-72     	; 0x10ba <__stack+0x85b>
    1102:	6f c0       	rjmp	.+222    	; 0x11e2 <__stack+0x983>
				LCD_enuClearDisplay();
				LCD_enuDisplayString("1:Room4 2:Dimmer");
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
				LCD_enuDisplayString("3:AirCond 0:Ret");
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
				switch (Keypad_Pressed_Key)
    1104:	80 33       	cpi	r24, 0x30	; 48
    1106:	09 f0       	breq	.+2      	; 0x110a <__stack+0x8ab>
    1108:	5c c0       	rjmp	.+184    	; 0x11c2 <__stack+0x963>
						ClearBit(&Current_State,5);
					}
					ShowToUser = LOG_OUT_CHOICE;
					break;
					case '0':
					ShowToUser = MAIN_MENU;
    110a:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <ShowToUser>
					break;
    110e:	f5 cf       	rjmp	.-22     	; 0x10fa <__stack+0x89b>
				LCD_enuClearDisplay();
				LCD_enuDisplayString("1:Room4 2:Dimmer");
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
				LCD_enuDisplayString("3:AirCond 0:Ret");
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
				switch (Keypad_Pressed_Key)
    1110:	83 33       	cpi	r24, 0x33	; 51
    1112:	59 f0       	breq	.+22     	; 0x112a <__stack+0x8cb>
    1114:	56 c0       	rjmp	.+172    	; 0x11c2 <__stack+0x963>
				{
					case '1':
					SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
    1116:	84 e0       	ldi	r24, 0x04	; 4
    1118:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,4);
    111c:	64 e0       	ldi	r22, 0x04	; 4
    111e:	ce 01       	movw	r24, r28
    1120:	8b 5b       	subi	r24, 0xBB	; 187
    1122:	9f 4f       	sbci	r25, 0xFF	; 255
    1124:	0e 94 26 02 	call	0x44c	; 0x44c <ToggleBit>
    1128:	49 c0       	rjmp	.+146    	; 0x11bc <__stack+0x95d>
					
					ShowToUser = DIMMER_MENU;
					break;
					
					case '3':
					LCD_enuClearDisplay();
    112a:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
					LCD_enuDisplayString("1-Open 2-Close");
    112e:	89 ef       	ldi	r24, 0xF9	; 249
    1130:	94 e0       	ldi	r25, 0x04	; 4
    1132:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("3-Automatic");
    113e:	88 e0       	ldi	r24, 0x08	; 8
    1140:	95 e0       	ldi	r25, 0x05	; 5
    1142:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
					Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
    1146:	ce 01       	movw	r24, r28
    1148:	8a 5b       	subi	r24, 0xBA	; 186
    114a:	9f 4f       	sbci	r25, 0xFF	; 255
    114c:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Keypad_enuGetPressedKey>
					if(Keypad_Pressed_Key == '1')
    1150:	27 96       	adiw	r28, 0x07	; 7
    1152:	8f ad       	ldd	r24, Y+63	; 0x3f
    1154:	27 97       	sbiw	r28, 0x07	; 7
    1156:	81 33       	cpi	r24, 0x31	; 49
    1158:	61 f4       	brne	.+24     	; 0x1172 <__stack+0x913>
					{
						SPI_ui8TransmitRecive(OPEN_AirCond_COMMAND);
    115a:	80 e1       	ldi	r24, 0x10	; 16
    115c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						ClearBit(&Current_State,6);
    1160:	66 e0       	ldi	r22, 0x06	; 6
    1162:	70 e0       	ldi	r23, 0x00	; 0
    1164:	ce 01       	movw	r24, r28
    1166:	8b 5b       	subi	r24, 0xBB	; 187
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	0e 94 1a 02 	call	0x434	; 0x434 <ClearBit>
						SetBit(&Current_State,5);
    116e:	65 e0       	ldi	r22, 0x05	; 5
    1170:	0c c0       	rjmp	.+24     	; 0x118a <__stack+0x92b>
					}
					else if(Keypad_Pressed_Key == '2')
    1172:	82 33       	cpi	r24, 0x32	; 50
    1174:	81 f4       	brne	.+32     	; 0x1196 <__stack+0x937>
					{
						SPI_ui8TransmitRecive(CLOSE_AirCond_COMMAND);
    1176:	81 e1       	ldi	r24, 0x11	; 17
    1178:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						SetBit(&Current_State,5);
    117c:	65 e0       	ldi	r22, 0x05	; 5
    117e:	ce 01       	movw	r24, r28
    1180:	8b 5b       	subi	r24, 0xBB	; 187
    1182:	9f 4f       	sbci	r25, 0xFF	; 255
    1184:	0e 94 0f 02 	call	0x41e	; 0x41e <SetBit>
						SetBit(&Current_State,6);
    1188:	66 e0       	ldi	r22, 0x06	; 6
    118a:	ce 01       	movw	r24, r28
    118c:	8b 5b       	subi	r24, 0xBB	; 187
    118e:	9f 4f       	sbci	r25, 0xFF	; 255
    1190:	0e 94 0f 02 	call	0x41e	; 0x41e <SetBit>
    1194:	13 c0       	rjmp	.+38     	; 0x11bc <__stack+0x95d>
					}
					else if(Keypad_Pressed_Key == '3')
    1196:	83 33       	cpi	r24, 0x33	; 51
    1198:	89 f4       	brne	.+34     	; 0x11bc <__stack+0x95d>
					{
						SPI_ui8TransmitRecive(AUTO_AirCond_COMMAND);
    119a:	82 e1       	ldi	r24, 0x12	; 18
    119c:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
						ClearBit(&Current_State,6);
    11a0:	66 e0       	ldi	r22, 0x06	; 6
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	ce 01       	movw	r24, r28
    11a6:	8b 5b       	subi	r24, 0xBB	; 187
    11a8:	9f 4f       	sbci	r25, 0xFF	; 255
    11aa:	0e 94 1a 02 	call	0x434	; 0x434 <ClearBit>
						ClearBit(&Current_State,5);
    11ae:	65 e0       	ldi	r22, 0x05	; 5
    11b0:	70 e0       	ldi	r23, 0x00	; 0
    11b2:	ce 01       	movw	r24, r28
    11b4:	8b 5b       	subi	r24, 0xBB	; 187
    11b6:	9f 4f       	sbci	r25, 0xFF	; 255
    11b8:	0e 94 1a 02 	call	0x434	; 0x434 <ClearBit>
					}
					ShowToUser = LOG_OUT_CHOICE;
    11bc:	10 93 68 05 	sts	0x0568, r17	; 0x800568 <ShowToUser>
					break;
    11c0:	9c cf       	rjmp	.-200    	; 0x10fa <__stack+0x89b>
					case '0':
					ShowToUser = MAIN_MENU;
					break;
					
					default:
					LCD_enuClearDisplay();
    11c2:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Invalid Choice");
    11c6:	89 ec       	ldi	r24, 0xC9	; 201
    11c8:	94 e0       	ldi	r25, 0x04	; 4
    11ca:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
    11ce:	ef ef       	ldi	r30, 0xFF	; 255
    11d0:	fd e2       	ldi	r31, 0x2D	; 45
    11d2:	22 e2       	ldi	r18, 0x22	; 34
    11d4:	e1 50       	subi	r30, 0x01	; 1
    11d6:	f0 40       	sbci	r31, 0x00	; 0
    11d8:	20 40       	sbci	r18, 0x00	; 0
    11da:	e1 f7       	brne	.-8      	; 0x11d4 <__stack+0x975>
    11dc:	00 c0       	rjmp	.+0      	; 0x11de <__stack+0x97f>
    11de:	00 00       	nop
    11e0:	8c cf       	rjmp	.-232    	; 0x10fa <__stack+0x89b>
					_delay_ms(700);
					break;
				}
			}
			switch(ShowToUser)
    11e2:	08 30       	cpi	r16, 0x08	; 8
    11e4:	21 f0       	breq	.+8      	; 0x11ee <__stack+0x98f>
    11e6:	0b 30       	cpi	r16, 0x0B	; 11
    11e8:	09 f4       	brne	.+2      	; 0x11ec <__stack+0x98d>
    11ea:	49 c0       	rjmp	.+146    	; 0x127e <__stack+0xa1f>
    11ec:	15 cf       	rjmp	.-470    	; 0x1018 <__stack+0x7b9>
			{
				case DIMMER_MENU:
					LCD_enuClearDisplay();
    11ee:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Brightness");
    11f2:	84 e1       	ldi	r24, 0x14	; 20
    11f4:	95 e0       	ldi	r25, 0x05	; 5
    11f6:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Percentage:");
    1202:	8f e1       	ldi	r24, 0x1F	; 31
    1204:	95 e0       	ldi	r25, 0x05	; 5
    1206:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
					Keypad_enuGetPressedKey(&Dimmer_Percentage_Tens);
    120a:	ce 01       	movw	r24, r28
    120c:	8d 5b       	subi	r24, 0xBD	; 189
    120e:	9f 4f       	sbci	r25, 0xFF	; 255
    1210:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Keypad_enuGetPressedKey>
					LCD_enuSendData(Dimmer_Percentage_Tens);
    1214:	24 96       	adiw	r28, 0x04	; 4
    1216:	8f ad       	ldd	r24, Y+63	; 0x3f
    1218:	24 97       	sbiw	r28, 0x04	; 4
    121a:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_enuSendData>
					Dimmer_Percentage_Tens = Dimmer_Percentage_Tens - '0';
    121e:	24 96       	adiw	r28, 0x04	; 4
    1220:	8f ad       	ldd	r24, Y+63	; 0x3f
    1222:	24 97       	sbiw	r28, 0x04	; 4
    1224:	80 53       	subi	r24, 0x30	; 48
    1226:	24 96       	adiw	r28, 0x04	; 4
    1228:	8f af       	std	Y+63, r24	; 0x3f
    122a:	24 97       	sbiw	r28, 0x04	; 4
					Keypad_enuGetPressedKey(&Dimmer_Percentage_Ones);
    122c:	ce 01       	movw	r24, r28
    122e:	8e 5b       	subi	r24, 0xBE	; 190
    1230:	9f 4f       	sbci	r25, 0xFF	; 255
    1232:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Keypad_enuGetPressedKey>
					LCD_enuSendData(Dimmer_Percentage_Ones);
    1236:	23 96       	adiw	r28, 0x03	; 3
    1238:	8f ad       	ldd	r24, Y+63	; 0x3f
    123a:	23 97       	sbiw	r28, 0x03	; 3
    123c:	0e 94 ed 0b 	call	0x17da	; 0x17da <LCD_enuSendData>
					Dimmer_Percentage_Ones = Dimmer_Percentage_Ones -'0';
    1240:	23 96       	adiw	r28, 0x03	; 3
    1242:	8f ad       	ldd	r24, Y+63	; 0x3f
    1244:	23 97       	sbiw	r28, 0x03	; 3
    1246:	90 ed       	ldi	r25, 0xD0	; 208
    1248:	98 0f       	add	r25, r24
    124a:	23 96       	adiw	r28, 0x03	; 3
    124c:	9f af       	std	Y+63, r25	; 0x3f
    124e:	23 97       	sbiw	r28, 0x03	; 3
					Dimmer_Percentage =10*Dimmer_Percentage_Tens + Dimmer_Percentage_Ones;
    1250:	24 96       	adiw	r28, 0x04	; 4
    1252:	8f ad       	ldd	r24, Y+63	; 0x3f
    1254:	24 97       	sbiw	r28, 0x04	; 4
    1256:	b9 2e       	mov	r11, r25
    1258:	3a e0       	ldi	r19, 0x0A	; 10
    125a:	83 9f       	mul	r24, r19
    125c:	b0 0c       	add	r11, r0
    125e:	11 24       	eor	r1, r1
					SPI_ui8TransmitRecive(Dimmer_Percentage);
    1260:	8b 2d       	mov	r24, r11
    1262:	0e 94 0a 0e 	call	0x1c14	; 0x1c14 <SPI_ui8TransmitRecive>
    1266:	8f ef       	ldi	r24, 0xFF	; 255
    1268:	9d e2       	ldi	r25, 0x2D	; 45
    126a:	e2 e2       	ldi	r30, 0x22	; 34
    126c:	81 50       	subi	r24, 0x01	; 1
    126e:	90 40       	sbci	r25, 0x00	; 0
    1270:	e0 40       	sbci	r30, 0x00	; 0
    1272:	e1 f7       	brne	.-8      	; 0x126c <__stack+0xa0d>
    1274:	00 c0       	rjmp	.+0      	; 0x1276 <__stack+0xa17>
    1276:	00 00       	nop
					_delay_ms(700);
					ShowToUser=LOG_OUT_CHOICE;
    1278:	f0 92 68 05 	sts	0x0568, r15	; 0x800568 <ShowToUser>
				break;
    127c:	cd ce       	rjmp	.-614    	; 0x1018 <__stack+0x7b9>
				
				case LOG_OUT_CHOICE:
					LCD_enuClearDisplay();
    127e:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
					LCD_enuDisplayString("1:Log Out 2:Ret");
    1282:	8b e2       	ldi	r24, 0x2B	; 43
    1284:	95 e0       	ldi	r25, 0x05	; 5
    1286:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
					Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
    128a:	ce 01       	movw	r24, r28
    128c:	8a 5b       	subi	r24, 0xBA	; 186
    128e:	9f 4f       	sbci	r25, 0xFF	; 255
    1290:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <Keypad_enuGetPressedKey>
					if (Keypad_Pressed_Key == '1')
    1294:	27 96       	adiw	r28, 0x07	; 7
    1296:	8f ad       	ldd	r24, Y+63	; 0x3f
    1298:	27 97       	sbiw	r28, 0x07	; 7
    129a:	81 33       	cpi	r24, 0x31	; 49
    129c:	a9 f4       	brne	.+42     	; 0x12c8 <__stack+0xa69>
					{
						Program_Status_Flag = IDLE_STATE;
    129e:	87 e0       	ldi	r24, 0x07	; 7
    12a0:	80 93 67 05 	sts	0x0567, r24	; 0x800567 <Program_Status_Flag>
						ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu
    12a4:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <ShowToUser>
						LCD_enuClearDisplay();
    12a8:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
						LCD_enuDisplayString("Logged Out");
    12ac:	8b e3       	ldi	r24, 0x3B	; 59
    12ae:	95 e0       	ldi	r25, 0x05	; 5
    12b0:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
    12b4:	ff ef       	ldi	r31, 0xFF	; 255
    12b6:	2d e2       	ldi	r18, 0x2D	; 45
    12b8:	32 e2       	ldi	r19, 0x22	; 34
    12ba:	f1 50       	subi	r31, 0x01	; 1
    12bc:	20 40       	sbci	r18, 0x00	; 0
    12be:	30 40       	sbci	r19, 0x00	; 0
    12c0:	e1 f7       	brne	.-8      	; 0x12ba <__stack+0xa5b>
    12c2:	00 c0       	rjmp	.+0      	; 0x12c4 <__stack+0xa65>
    12c4:	00 00       	nop
    12c6:	a8 ce       	rjmp	.-688    	; 0x1018 <__stack+0x7b9>
						
						_delay_ms(700);
					}
					else if(Keypad_Pressed_Key == '2')
    12c8:	82 33       	cpi	r24, 0x32	; 50
    12ca:	19 f4       	brne	.+6      	; 0x12d2 <__stack+0xa73>
						{ShowToUser = MAIN_MENU;}
    12cc:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <ShowToUser>
    12d0:	a3 ce       	rjmp	.-698    	; 0x1018 <__stack+0x7b9>
					else{LCD_enuClearDisplay();		LCD_enuDisplayString("Invalid Choice");	 _delay_ms(700);	ShowToUser = LOG_OUT_CHOICE;}
    12d2:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
    12d6:	89 ec       	ldi	r24, 0xC9	; 201
    12d8:	94 e0       	ldi	r25, 0x04	; 4
    12da:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
    12de:	8f ef       	ldi	r24, 0xFF	; 255
    12e0:	9d e2       	ldi	r25, 0x2D	; 45
    12e2:	e2 e2       	ldi	r30, 0x22	; 34
    12e4:	81 50       	subi	r24, 0x01	; 1
    12e6:	90 40       	sbci	r25, 0x00	; 0
    12e8:	e0 40       	sbci	r30, 0x00	; 0
    12ea:	e1 f7       	brne	.-8      	; 0x12e4 <__stack+0xa85>
    12ec:	00 c0       	rjmp	.+0      	; 0x12ee <__stack+0xa8f>
    12ee:	00 00       	nop
    12f0:	00 93 68 05 	sts	0x0568, r16	; 0x800568 <ShowToUser>
    12f4:	91 ce       	rjmp	.-734    	; 0x1018 <__stack+0x7b9>
				break;
			}
		}//end of the LCD_KEYPAD_MENU_STATE


		if(Program_Status_Flag == BLOCKING_STATE)
    12f6:	86 30       	cpi	r24, 0x06	; 6
    12f8:	09 f0       	breq	.+2      	; 0x12fc <__stack+0xa9d>
    12fa:	47 ca       	rjmp	.-2930   	; 0x78a <main+0x304>
		{
			EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATE_ADDRESS,BLOCKING_STATE);
    12fc:	66 e0       	ldi	r22, 0x06	; 6
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <EEPROM_vWriteByteToAddress>
			Blocking_Flag=TRUE;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <__data_end>
			LCD_enuClearDisplay();
    130c:	0e 94 a2 0c 	call	0x1944	; 0x1944 <LCD_enuClearDisplay>
			LCD_enuDisplayString("You are Blocked");
    1310:	86 e4       	ldi	r24, 0x46	; 70
    1312:	95 e0       	ldi	r25, 0x05	; 5
    1314:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	0e 94 84 0c 	call	0x1908	; 0x1908 <LCD_enuSetCursorPosition>
			LCD_enuDisplayString("From The System");
    1320:	86 e5       	ldi	r24, 0x56	; 86
    1322:	95 e0       	ldi	r25, 0x05	; 5
    1324:	0e 94 67 0c 	call	0x18ce	; 0x18ce <LCD_enuDisplayString>
			DIO_enuSetPinValue(DIO_u8GROUP_C,DIO_u8PIN0,DIO_u8HIGH);
    1328:	41 e0       	ldi	r20, 0x01	; 1
    132a:	60 e0       	ldi	r22, 0x00	; 0
    132c:	82 e0       	ldi	r24, 0x02	; 2
    132e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
			while (Program_Status_Flag == BLOCKING_STATE);
    1332:	80 91 67 05 	lds	r24, 0x0567	; 0x800567 <Program_Status_Flag>
    1336:	86 30       	cpi	r24, 0x06	; 6
    1338:	09 f0       	breq	.+2      	; 0x133c <__stack+0xadd>
    133a:	27 ca       	rjmp	.-2994   	; 0x78a <main+0x304>
    133c:	ff cf       	rjmp	.-2      	; 0x133c <__stack+0xadd>
					
						
				}
			}
			
			if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
    133e:	aa 20       	and	r10, r10
    1340:	09 f4       	brne	.+2      	; 0x1344 <__stack+0xae5>
    1342:	f0 ca       	rjmp	.-2592   	; 0x924 <__stack+0xc5>
    1344:	19 2d       	mov	r17, r9
    1346:	0b cb       	rjmp	.-2538   	; 0x95e <__stack+0xff>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
    1348:	13 e0       	ldi	r17, 0x03	; 3
    134a:	09 cb       	rjmp	.-2542   	; 0x95e <__stack+0xff>

0000134c <Keypad_enuInit>:

ES_t Keypad_enuInit(void)
{
	ES_t Local_enuerrorStates = ES_NOK;

	DIO_enuSetPinDirection(C1_PORT , C1_PIN , DIO_u8OUTPUT);
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	63 e0       	ldi	r22, 0x03	; 3
    1350:	83 e0       	ldi	r24, 0x03	; 3
    1352:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT , C2_PIN , DIO_u8OUTPUT);
    1356:	41 e0       	ldi	r20, 0x01	; 1
    1358:	64 e0       	ldi	r22, 0x04	; 4
    135a:	83 e0       	ldi	r24, 0x03	; 3
    135c:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT , C3_PIN , DIO_u8OUTPUT);
    1360:	41 e0       	ldi	r20, 0x01	; 1
    1362:	65 e0       	ldi	r22, 0x05	; 5
    1364:	83 e0       	ldi	r24, 0x03	; 3
    1366:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT , C4_PIN , DIO_u8OUTPUT);
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	66 e0       	ldi	r22, 0x06	; 6
    136e:	83 e0       	ldi	r24, 0x03	; 3
    1370:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT , R1_PIN , DIO_u8INPUT);
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	62 e0       	ldi	r22, 0x02	; 2
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT , R2_PIN , DIO_u8INPUT);
    137e:	40 e0       	ldi	r20, 0x00	; 0
    1380:	63 e0       	ldi	r22, 0x03	; 3
    1382:	82 e0       	ldi	r24, 0x02	; 2
    1384:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT , R3_PIN , DIO_u8INPUT);
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	64 e0       	ldi	r22, 0x04	; 4
    138c:	82 e0       	ldi	r24, 0x02	; 2
    138e:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT , R4_PIN , DIO_u8INPUT);
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	65 e0       	ldi	r22, 0x05	; 5
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT , C1_PIN , DIO_u8HIGH);
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	63 e0       	ldi	r22, 0x03	; 3
    13a0:	83 e0       	ldi	r24, 0x03	; 3
    13a2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT , C2_PIN , DIO_u8HIGH);
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	64 e0       	ldi	r22, 0x04	; 4
    13aa:	83 e0       	ldi	r24, 0x03	; 3
    13ac:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT , C3_PIN , DIO_u8HIGH);
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	65 e0       	ldi	r22, 0x05	; 5
    13b4:	83 e0       	ldi	r24, 0x03	; 3
    13b6:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT , C4_PIN , DIO_u8HIGH);
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	66 e0       	ldi	r22, 0x06	; 6
    13be:	83 e0       	ldi	r24, 0x03	; 3
    13c0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT , R1_PIN , DIO_u8PULL_UP);
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	62 e0       	ldi	r22, 0x02	; 2
    13c8:	82 e0       	ldi	r24, 0x02	; 2
    13ca:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT , R2_PIN , DIO_u8PULL_UP);
    13ce:	41 e0       	ldi	r20, 0x01	; 1
    13d0:	63 e0       	ldi	r22, 0x03	; 3
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT , R3_PIN , DIO_u8PULL_UP);
    13d8:	41 e0       	ldi	r20, 0x01	; 1
    13da:	64 e0       	ldi	r22, 0x04	; 4
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT , R4_PIN , DIO_u8PULL_UP);
    13e2:	41 e0       	ldi	r20, 0x01	; 1
    13e4:	65 e0       	ldi	r22, 0x05	; 5
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>

	return Local_enuerrorStates;
}
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	08 95       	ret

000013f0 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    13f0:	2f 92       	push	r2
    13f2:	3f 92       	push	r3
    13f4:	4f 92       	push	r4
    13f6:	5f 92       	push	r5
    13f8:	6f 92       	push	r6
    13fa:	7f 92       	push	r7
    13fc:	8f 92       	push	r8
    13fe:	9f 92       	push	r9
    1400:	af 92       	push	r10
    1402:	bf 92       	push	r11
    1404:	cf 92       	push	r12
    1406:	df 92       	push	r13
    1408:	ef 92       	push	r14
    140a:	ff 92       	push	r15
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	a3 97       	sbiw	r28, 0x23	; 35
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	6c 01       	movw	r12, r24
	ES_t Local_enuerrorStates = ES_NOK;

	u8 Local_Au8ColPorts [COL_NUM] = {C1_PORT,C2_PORT,C3_PORT,C4_PORT};
    1426:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    142a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    142e:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    1432:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1436:	8d 8f       	std	Y+29, r24	; 0x1d
    1438:	9e 8f       	std	Y+30, r25	; 0x1e
    143a:	af 8f       	std	Y+31, r26	; 0x1f
    143c:	b8 a3       	std	Y+32, r27	; 0x20
	u8 Local_Au8ColPins  [COL_NUM] = {C1_PIN, C2_PIN, C3_PIN, C4_PIN};
    143e:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
    1442:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
    1446:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    144a:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
    144e:	89 8f       	std	Y+25, r24	; 0x19
    1450:	9a 8f       	std	Y+26, r25	; 0x1a
    1452:	ab 8f       	std	Y+27, r26	; 0x1b
    1454:	bc 8f       	std	Y+28, r27	; 0x1c

	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
    1456:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    145a:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    145e:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    1462:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
    1466:	8d 8b       	std	Y+21, r24	; 0x15
    1468:	9e 8b       	std	Y+22, r25	; 0x16
    146a:	af 8b       	std	Y+23, r26	; 0x17
    146c:	b8 8f       	std	Y+24, r27	; 0x18
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};
    146e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
    1472:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
    1476:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    147a:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    147e:	89 8b       	std	Y+17, r24	; 0x11
    1480:	9a 8b       	std	Y+18, r25	; 0x12
    1482:	ab 8b       	std	Y+19, r26	; 0x13
    1484:	bc 8b       	std	Y+20, r27	; 0x14

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
    1486:	8f ef       	ldi	r24, 0xFF	; 255
    1488:	f6 01       	movw	r30, r12
    148a:	80 83       	st	Z, r24
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
    148c:	f6 01       	movw	r30, r12
    148e:	80 81       	ld	r24, Z
    1490:	8f 3f       	cpi	r24, 0xFF	; 255
    1492:	09 f0       	breq	.+2      	; 0x1496 <Keypad_enuGetPressedKey+0xa6>
    1494:	7b c0       	rjmp	.+246    	; 0x158c <Keypad_enuGetPressedKey+0x19c>
    1496:	3e 01       	movw	r6, r28
    1498:	f9 e1       	ldi	r31, 0x19	; 25
    149a:	6f 0e       	add	r6, r31
    149c:	71 1c       	adc	r7, r1
    149e:	ce 01       	movw	r24, r28
    14a0:	4d 96       	adiw	r24, 0x1d	; 29
    14a2:	9b a3       	std	Y+35, r25	; 0x23
    14a4:	8a a3       	std	Y+34, r24	; 0x22
    14a6:	e1 2c       	mov	r14, r1
    14a8:	f1 2c       	mov	r15, r1
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
    14aa:	f3 01       	movw	r30, r6
    14ac:	21 90       	ld	r2, Z+
    14ae:	3f 01       	movw	r6, r30
    14b0:	ea a1       	ldd	r30, Y+34	; 0x22
    14b2:	fb a1       	ldd	r31, Y+35	; 0x23
    14b4:	31 90       	ld	r3, Z+
    14b6:	fb a3       	std	Y+35, r31	; 0x23
    14b8:	ea a3       	std	Y+34, r30	; 0x22
    14ba:	40 e0       	ldi	r20, 0x00	; 0
    14bc:	62 2d       	mov	r22, r2
    14be:	83 2d       	mov	r24, r3
    14c0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    14c4:	4e 01       	movw	r8, r28
    14c6:	f1 e1       	ldi	r31, 0x11	; 17
    14c8:	8f 0e       	add	r8, r31
    14ca:	91 1c       	adc	r9, r1
    14cc:	5e 01       	movw	r10, r28
    14ce:	85 e1       	ldi	r24, 0x15	; 21
    14d0:	a8 0e       	add	r10, r24
    14d2:	b1 1c       	adc	r11, r1
    14d4:	00 e0       	ldi	r16, 0x00	; 0
    14d6:	10 e0       	ldi	r17, 0x00	; 0
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    14d8:	f4 01       	movw	r30, r8
    14da:	51 90       	ld	r5, Z+
    14dc:	4f 01       	movw	r8, r30
    14de:	f5 01       	movw	r30, r10
    14e0:	41 90       	ld	r4, Z+
    14e2:	5f 01       	movw	r10, r30
    14e4:	ae 01       	movw	r20, r28
    14e6:	4f 5d       	subi	r20, 0xDF	; 223
    14e8:	5f 4f       	sbci	r21, 0xFF	; 255
    14ea:	65 2d       	mov	r22, r5
    14ec:	84 2d       	mov	r24, r4
    14ee:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
    14f2:	89 a1       	ldd	r24, Y+33	; 0x21
    14f4:	81 11       	cpse	r24, r1
    14f6:	36 c0       	rjmp	.+108    	; 0x1564 <Keypad_enuGetPressedKey+0x174>
    14f8:	83 ec       	ldi	r24, 0xC3	; 195
    14fa:	99 e0       	ldi	r25, 0x09	; 9
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <Keypad_enuGetPressedKey+0x10c>
    1500:	00 c0       	rjmp	.+0      	; 0x1502 <Keypad_enuGetPressedKey+0x112>
    1502:	00 00       	nop
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    1504:	ae 01       	movw	r20, r28
    1506:	4f 5d       	subi	r20, 0xDF	; 223
    1508:	5f 4f       	sbci	r21, 0xFF	; 255
    150a:	65 2d       	mov	r22, r5
    150c:	84 2d       	mov	r24, r4
    150e:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
    1512:	89 a1       	ldd	r24, Y+33	; 0x21
    1514:	81 11       	cpse	r24, r1
    1516:	26 c0       	rjmp	.+76     	; 0x1564 <Keypad_enuGetPressedKey+0x174>
				{
					while (! Local_u8PinValue)
    1518:	89 a1       	ldd	r24, Y+33	; 0x21
    151a:	81 11       	cpse	r24, r1
    151c:	08 c0       	rjmp	.+16     	; 0x152e <Keypad_enuGetPressedKey+0x13e>
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    151e:	ae 01       	movw	r20, r28
    1520:	4f 5d       	subi	r20, 0xDF	; 223
    1522:	5f 4f       	sbci	r21, 0xFF	; 255
    1524:	65 2d       	mov	r22, r5
    1526:	84 2d       	mov	r24, r4
    1528:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <DIO_enuGetPinValue>
    152c:	f5 cf       	rjmp	.-22     	; 0x1518 <Keypad_enuGetPressedKey+0x128>

					u8 Local_Au8Values[ROW_NUM][COL_NUM] = KEYPAD_VALUES;
    152e:	80 e1       	ldi	r24, 0x10	; 16
    1530:	e0 e7       	ldi	r30, 0x70	; 112
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	de 01       	movw	r26, r28
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	01 90       	ld	r0, Z+
    153a:	0d 92       	st	X+, r0
    153c:	8a 95       	dec	r24
    153e:	e1 f7       	brne	.-8      	; 0x1538 <Keypad_enuGetPressedKey+0x148>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
    1540:	00 0f       	add	r16, r16
    1542:	11 1f       	adc	r17, r17
    1544:	00 0f       	add	r16, r16
    1546:	11 1f       	adc	r17, r17
    1548:	e1 e0       	ldi	r30, 0x01	; 1
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	ec 0f       	add	r30, r28
    154e:	fd 1f       	adc	r31, r29
    1550:	0e 0f       	add	r16, r30
    1552:	1f 1f       	adc	r17, r31
    1554:	f8 01       	movw	r30, r16
    1556:	ee 0d       	add	r30, r14
    1558:	ff 1d       	adc	r31, r15
    155a:	80 81       	ld	r24, Z
    155c:	f6 01       	movw	r30, r12
    155e:	80 83       	st	Z, r24
					return ES_OK;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	15 c0       	rjmp	.+42     	; 0x158e <Keypad_enuGetPressedKey+0x19e>
    1564:	0f 5f       	subi	r16, 0xFF	; 255
    1566:	1f 4f       	sbci	r17, 0xFF	; 255
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    1568:	04 30       	cpi	r16, 0x04	; 4
    156a:	11 05       	cpc	r17, r1
    156c:	09 f0       	breq	.+2      	; 0x1570 <Keypad_enuGetPressedKey+0x180>
    156e:	b4 cf       	rjmp	.-152    	; 0x14d8 <Keypad_enuGetPressedKey+0xe8>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
					return ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
    1570:	41 e0       	ldi	r20, 0x01	; 1
    1572:	62 2d       	mov	r22, r2
    1574:	83 2d       	mov	r24, r3
    1576:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    157a:	ff ef       	ldi	r31, 0xFF	; 255
    157c:	ef 1a       	sub	r14, r31
    157e:	ff 0a       	sbc	r15, r31

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    1580:	84 e0       	ldi	r24, 0x04	; 4
    1582:	e8 16       	cp	r14, r24
    1584:	f1 04       	cpc	r15, r1
    1586:	09 f0       	breq	.+2      	; 0x158a <Keypad_enuGetPressedKey+0x19a>
    1588:	90 cf       	rjmp	.-224    	; 0x14aa <Keypad_enuGetPressedKey+0xba>
    158a:	80 cf       	rjmp	.-256    	; 0x148c <Keypad_enuGetPressedKey+0x9c>
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	}
	return Local_enuerrorStates;
    158c:	80 e0       	ldi	r24, 0x00	; 0
}
    158e:	a3 96       	adiw	r28, 0x23	; 35
    1590:	0f b6       	in	r0, 0x3f	; 63
    1592:	f8 94       	cli
    1594:	de bf       	out	0x3e, r29	; 62
    1596:	0f be       	out	0x3f, r0	; 63
    1598:	cd bf       	out	0x3d, r28	; 61
    159a:	df 91       	pop	r29
    159c:	cf 91       	pop	r28
    159e:	1f 91       	pop	r17
    15a0:	0f 91       	pop	r16
    15a2:	ff 90       	pop	r15
    15a4:	ef 90       	pop	r14
    15a6:	df 90       	pop	r13
    15a8:	cf 90       	pop	r12
    15aa:	bf 90       	pop	r11
    15ac:	af 90       	pop	r10
    15ae:	9f 90       	pop	r9
    15b0:	8f 90       	pop	r8
    15b2:	7f 90       	pop	r7
    15b4:	6f 90       	pop	r6
    15b6:	5f 90       	pop	r5
    15b8:	4f 90       	pop	r4
    15ba:	3f 90       	pop	r3
    15bc:	2f 90       	pop	r2
    15be:	08 95       	ret

000015c0 <LCD_enuWriteNLatch>:

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch(Copy_u8Command);

	return Local_enuerrorStates;
}
    15c0:	1f 93       	push	r17
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	1f 92       	push	r1
    15c8:	cd b7       	in	r28, 0x3d	; 61
    15ca:	de b7       	in	r29, 0x3e	; 62
    15cc:	18 2f       	mov	r17, r24
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	63 e0       	ldi	r22, 0x03	; 3
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    15d8:	40 e0       	ldi	r20, 0x00	; 0
    15da:	62 e0       	ldi	r22, 0x02	; 2
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    15e2:	18 32       	cpi	r17, 0x28	; 40
    15e4:	99 f5       	brne	.+102    	; 0x164c <LCD_enuWriteNLatch+0x8c>
    15e6:	ae 01       	movw	r20, r28
    15e8:	4f 5f       	subi	r20, 0xFF	; 255
    15ea:	5f 4f       	sbci	r21, 0xFF	; 255
    15ec:	61 e0       	ldi	r22, 0x01	; 1
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <DIO_enuGetPinValue>
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	81 11       	cpse	r24, r1
    15f8:	29 c0       	rjmp	.+82     	; 0x164c <LCD_enuWriteNLatch+0x8c>
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	67 e0       	ldi	r22, 0x07	; 7
    15fe:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	66 e0       	ldi	r22, 0x06	; 6
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    160c:	41 e0       	ldi	r20, 0x01	; 1
    160e:	65 e0       	ldi	r22, 0x05	; 5
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    1616:	40 e0       	ldi	r20, 0x00	; 0
    1618:	64 e0       	ldi	r22, 0x04	; 4
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    1620:	41 e0       	ldi	r20, 0x01	; 1
    1622:	63 e0       	ldi	r22, 0x03	; 3
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    162a:	81 ee       	ldi	r24, 0xE1	; 225
    162c:	94 e0       	ldi	r25, 0x04	; 4
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	f1 f7       	brne	.-4      	; 0x162e <LCD_enuWriteNLatch+0x6e>
    1632:	00 c0       	rjmp	.+0      	; 0x1634 <LCD_enuWriteNLatch+0x74>
    1634:	00 00       	nop
    1636:	40 e0       	ldi	r20, 0x00	; 0
    1638:	63 e0       	ldi	r22, 0x03	; 3
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    1640:	83 ed       	ldi	r24, 0xD3	; 211
    1642:	90 e3       	ldi	r25, 0x30	; 48
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	f1 f7       	brne	.-4      	; 0x1644 <LCD_enuWriteNLatch+0x84>
    1648:	00 c0       	rjmp	.+0      	; 0x164a <LCD_enuWriteNLatch+0x8a>
    164a:	00 00       	nop
    164c:	41 2f       	mov	r20, r17
    164e:	44 1f       	adc	r20, r20
    1650:	44 27       	eor	r20, r20
    1652:	44 1f       	adc	r20, r20
    1654:	67 e0       	ldi	r22, 0x07	; 7
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    165c:	16 fb       	bst	r17, 6
    165e:	44 27       	eor	r20, r20
    1660:	40 f9       	bld	r20, 0
    1662:	66 e0       	ldi	r22, 0x06	; 6
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    166a:	15 fb       	bst	r17, 5
    166c:	44 27       	eor	r20, r20
    166e:	40 f9       	bld	r20, 0
    1670:	65 e0       	ldi	r22, 0x05	; 5
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    1678:	14 fb       	bst	r17, 4
    167a:	44 27       	eor	r20, r20
    167c:	40 f9       	bld	r20, 0
    167e:	64 e0       	ldi	r22, 0x04	; 4
    1680:	80 e0       	ldi	r24, 0x00	; 0
    1682:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    1686:	41 e0       	ldi	r20, 0x01	; 1
    1688:	63 e0       	ldi	r22, 0x03	; 3
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    1690:	81 ee       	ldi	r24, 0xE1	; 225
    1692:	94 e0       	ldi	r25, 0x04	; 4
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	f1 f7       	brne	.-4      	; 0x1694 <LCD_enuWriteNLatch+0xd4>
    1698:	00 c0       	rjmp	.+0      	; 0x169a <LCD_enuWriteNLatch+0xda>
    169a:	00 00       	nop
    169c:	40 e0       	ldi	r20, 0x00	; 0
    169e:	63 e0       	ldi	r22, 0x03	; 3
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    16a6:	83 ed       	ldi	r24, 0xD3	; 211
    16a8:	90 e3       	ldi	r25, 0x30	; 48
    16aa:	01 97       	sbiw	r24, 0x01	; 1
    16ac:	f1 f7       	brne	.-4      	; 0x16aa <LCD_enuWriteNLatch+0xea>
    16ae:	00 c0       	rjmp	.+0      	; 0x16b0 <LCD_enuWriteNLatch+0xf0>
    16b0:	00 00       	nop
    16b2:	13 fb       	bst	r17, 3
    16b4:	44 27       	eor	r20, r20
    16b6:	40 f9       	bld	r20, 0
    16b8:	67 e0       	ldi	r22, 0x07	; 7
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    16c0:	12 fb       	bst	r17, 2
    16c2:	44 27       	eor	r20, r20
    16c4:	40 f9       	bld	r20, 0
    16c6:	66 e0       	ldi	r22, 0x06	; 6
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    16ce:	11 fb       	bst	r17, 1
    16d0:	44 27       	eor	r20, r20
    16d2:	40 f9       	bld	r20, 0
    16d4:	65 e0       	ldi	r22, 0x05	; 5
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    16dc:	41 2f       	mov	r20, r17
    16de:	41 70       	andi	r20, 0x01	; 1
    16e0:	64 e0       	ldi	r22, 0x04	; 4
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    16e8:	41 e0       	ldi	r20, 0x01	; 1
    16ea:	63 e0       	ldi	r22, 0x03	; 3
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    16f2:	81 ee       	ldi	r24, 0xE1	; 225
    16f4:	94 e0       	ldi	r25, 0x04	; 4
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	f1 f7       	brne	.-4      	; 0x16f6 <LCD_enuWriteNLatch+0x136>
    16fa:	00 c0       	rjmp	.+0      	; 0x16fc <LCD_enuWriteNLatch+0x13c>
    16fc:	00 00       	nop
    16fe:	40 e0       	ldi	r20, 0x00	; 0
    1700:	63 e0       	ldi	r22, 0x03	; 3
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    1708:	83 ed       	ldi	r24, 0xD3	; 211
    170a:	90 e3       	ldi	r25, 0x30	; 48
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <LCD_enuWriteNLatch+0x14c>
    1710:	00 c0       	rjmp	.+0      	; 0x1712 <LCD_enuWriteNLatch+0x152>
    1712:	00 00       	nop
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	0f 90       	pop	r0
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	08 95       	ret

00001720 <LCD_enuInit>:
    1720:	41 e0       	ldi	r20, 0x01	; 1
    1722:	61 e0       	ldi	r22, 0x01	; 1
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	62 e0       	ldi	r22, 0x02	; 2
    172e:	81 e0       	ldi	r24, 0x01	; 1
    1730:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	63 e0       	ldi	r22, 0x03	; 3
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	67 e0       	ldi	r22, 0x07	; 7
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
    1748:	41 e0       	ldi	r20, 0x01	; 1
    174a:	66 e0       	ldi	r22, 0x06	; 6
    174c:	80 e0       	ldi	r24, 0x00	; 0
    174e:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
    1752:	41 e0       	ldi	r20, 0x01	; 1
    1754:	65 e0       	ldi	r22, 0x05	; 5
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	64 e0       	ldi	r22, 0x04	; 4
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	0e 94 b5 0c 	call	0x196a	; 0x196a <DIO_enuSetPinDirection>
    1766:	8d e2       	ldi	r24, 0x2D	; 45
    1768:	92 e2       	ldi	r25, 0x22	; 34
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <LCD_enuInit+0x4a>
    176e:	00 c0       	rjmp	.+0      	; 0x1770 <LCD_enuInit+0x50>
    1770:	00 00       	nop
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    177c:	88 e2       	ldi	r24, 0x28	; 40
    177e:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_enuWriteNLatch>
    1782:	89 ef       	ldi	r24, 0xF9	; 249
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	01 97       	sbiw	r24, 0x01	; 1
    1788:	f1 f7       	brne	.-4      	; 0x1786 <LCD_enuInit+0x66>
    178a:	00 c0       	rjmp	.+0      	; 0x178c <LCD_enuInit+0x6c>
    178c:	00 00       	nop
    178e:	40 e0       	ldi	r20, 0x00	; 0
    1790:	61 e0       	ldi	r22, 0x01	; 1
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    1798:	8f e0       	ldi	r24, 0x0F	; 15
    179a:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_enuWriteNLatch>
    179e:	89 ef       	ldi	r24, 0xF9	; 249
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	01 97       	sbiw	r24, 0x01	; 1
    17a4:	f1 f7       	brne	.-4      	; 0x17a2 <LCD_enuInit+0x82>
    17a6:	00 c0       	rjmp	.+0      	; 0x17a8 <LCD_enuInit+0x88>
    17a8:	00 00       	nop
    17aa:	40 e0       	ldi	r20, 0x00	; 0
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_enuWriteNLatch>
    17ba:	83 ef       	ldi	r24, 0xF3	; 243
    17bc:	91 e0       	ldi	r25, 0x01	; 1
    17be:	01 97       	sbiw	r24, 0x01	; 1
    17c0:	f1 f7       	brne	.-4      	; 0x17be <LCD_enuInit+0x9e>
    17c2:	00 c0       	rjmp	.+0      	; 0x17c4 <LCD_enuInit+0xa4>
    17c4:	00 00       	nop
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    17d0:	86 e0       	ldi	r24, 0x06	; 6
    17d2:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_enuWriteNLatch>
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	08 95       	ret

000017da <LCD_enuSendData>:
    17da:	cf 93       	push	r28
    17dc:	c8 2f       	mov	r28, r24
    17de:	41 e0       	ldi	r20, 0x01	; 1
    17e0:	61 e0       	ldi	r22, 0x01	; 1
    17e2:	81 e0       	ldi	r24, 0x01	; 1
    17e4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    17e8:	8c 2f       	mov	r24, r28
    17ea:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_enuWriteNLatch>
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	cf 91       	pop	r28
    17f2:	08 95       	ret

000017f4 <LCD_enuDisplayUnsignedInteger>:
}

/****************************************************************************************************/

ES_t LCD_enuDisplayUnsignedInteger(u16 Copy_u32Data)
{
    17f4:	6f 92       	push	r6
    17f6:	7f 92       	push	r7
    17f8:	8f 92       	push	r8
    17fa:	9f 92       	push	r9
    17fc:	af 92       	push	r10
    17fe:	bf 92       	push	r11
    1800:	cf 92       	push	r12
    1802:	df 92       	push	r13
    1804:	ef 92       	push	r14
    1806:	ff 92       	push	r15
    1808:	0f 93       	push	r16
    180a:	1f 93       	push	r17
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	fc 01       	movw	r30, r24
	ES_t Local_enuerrorStates = ES_NOK;



	if (Copy_u32Data == 0)
    1812:	89 2b       	or	r24, r25
    1814:	51 f4       	brne	.+20     	; 0x182a <LCD_enuDisplayUnsignedInteger+0x36>
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1816:	41 e0       	ldi	r20, 0x01	; 1
    1818:	61 e0       	ldi	r22, 0x01	; 1
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch('0');
    1820:	80 e3       	ldi	r24, 0x30	; 48
    1822:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_enuWriteNLatch>

/****************************************************************************************************/

ES_t LCD_enuDisplayUnsignedInteger(u16 Copy_u32Data)
{
	ES_t Local_enuerrorStates = ES_NOK;
    1826:	d0 e0       	ldi	r29, 0x00	; 0
    1828:	42 c0       	rjmp	.+132    	; 0x18ae <LCD_enuDisplayUnsignedInteger+0xba>
    182a:	c0 e0       	ldi	r28, 0x00	; 0
    182c:	c1 2c       	mov	r12, r1
    182e:	d1 2c       	mov	r13, r1
    1830:	76 01       	movw	r14, r12
		u32 Local_u32Reversed = 0;
		u8 Local_u8Counter=0;
		for (;Copy_u32Data>0;)
			{
				Local_u8Remainder = Copy_u32Data%10;
				Local_u32Reversed = Local_u32Reversed*10 + Local_u8Remainder;
    1832:	0a e0       	ldi	r16, 0x0A	; 10
    1834:	10 e0       	ldi	r17, 0x00	; 0
    1836:	aa e0       	ldi	r26, 0x0A	; 10
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	a7 01       	movw	r20, r14
    183c:	96 01       	movw	r18, r12
    183e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__muluhisi3>
    1842:	6b 01       	movw	r12, r22
    1844:	7c 01       	movw	r14, r24
    1846:	cf 01       	movw	r24, r30
    1848:	b8 01       	movw	r22, r16
    184a:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <__udivmodhi4>
    184e:	c8 0e       	add	r12, r24
    1850:	d9 1e       	adc	r13, r25
    1852:	e1 1c       	adc	r14, r1
    1854:	f1 1c       	adc	r15, r1
				Local_u8Counter++;
    1856:	cf 5f       	subi	r28, 0xFF	; 255
				Copy_u32Data/=10;
    1858:	fb 01       	movw	r30, r22
	else
	{
		u8 Local_u8Remainder;
		u32 Local_u32Reversed = 0;
		u8 Local_u8Counter=0;
		for (;Copy_u32Data>0;)
    185a:	30 97       	sbiw	r30, 0x00	; 0
    185c:	61 f7       	brne	.-40     	; 0x1836 <LCD_enuDisplayUnsignedInteger+0x42>
    185e:	d0 e0       	ldi	r29, 0x00	; 0
			}
			/*********in the previous step: 3malt reverse lel integer elly gayelly, 3ashan law ma3amaltelosh reverse hayetebe3 ma3koos**********/
			for (;Local_u32Reversed>0;)
			{
				DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
				Local_enuerrorStates = LCD_enuWriteNLatch(Local_u32Reversed%10 + '0');
    1860:	8a e0       	ldi	r24, 0x0A	; 10
    1862:	88 2e       	mov	r8, r24
    1864:	91 2c       	mov	r9, r1
    1866:	a1 2c       	mov	r10, r1
    1868:	b1 2c       	mov	r11, r1
				Local_u32Reversed = Local_u32Reversed*10 + Local_u8Remainder;
				Local_u8Counter++;
				Copy_u32Data/=10;
			}
			/*********in the previous step: 3malt reverse lel integer elly gayelly, 3ashan law ma3amaltelosh reverse hayetebe3 ma3koos**********/
			for (;Local_u32Reversed>0;)
    186a:	c1 14       	cp	r12, r1
    186c:	d1 04       	cpc	r13, r1
    186e:	e1 04       	cpc	r14, r1
    1870:	f1 04       	cpc	r15, r1
    1872:	b1 f0       	breq	.+44     	; 0x18a0 <LCD_enuDisplayUnsignedInteger+0xac>
			{
				DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1874:	41 e0       	ldi	r20, 0x01	; 1
    1876:	61 e0       	ldi	r22, 0x01	; 1
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
				Local_enuerrorStates = LCD_enuWriteNLatch(Local_u32Reversed%10 + '0');
    187e:	c7 01       	movw	r24, r14
    1880:	b6 01       	movw	r22, r12
    1882:	a5 01       	movw	r20, r10
    1884:	94 01       	movw	r18, r8
    1886:	0e 94 68 0e 	call	0x1cd0	; 0x1cd0 <__udivmodsi4>
    188a:	39 01       	movw	r6, r18
    188c:	8a 01       	movw	r16, r20
    188e:	80 e3       	ldi	r24, 0x30	; 48
    1890:	86 0f       	add	r24, r22
    1892:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_enuWriteNLatch>
    1896:	d8 2f       	mov	r29, r24
				Local_u32Reversed/=10;
    1898:	63 01       	movw	r12, r6
    189a:	78 01       	movw	r14, r16
				Local_u8Counter--;
    189c:	c1 50       	subi	r28, 0x01	; 1
    189e:	e5 cf       	rjmp	.-54     	; 0x186a <LCD_enuDisplayUnsignedInteger+0x76>
				/*********el mafrood a3mel error status check hna bs 3ashan write and latch me7taga te3mel return ES_OK fa me7taga ta3deel**********/
			}
			while (Local_u8Counter != 0)
    18a0:	cc 23       	and	r28, r28
    18a2:	29 f0       	breq	.+10     	; 0x18ae <LCD_enuDisplayUnsignedInteger+0xba>
			{
				LCD_enuWriteNLatch('0');
    18a4:	80 e3       	ldi	r24, 0x30	; 48
    18a6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_enuWriteNLatch>
				Local_u8Counter--;
    18aa:	c1 50       	subi	r28, 0x01	; 1
    18ac:	f9 cf       	rjmp	.-14     	; 0x18a0 <LCD_enuDisplayUnsignedInteger+0xac>
	}


	return Local_enuerrorStates;

}
    18ae:	8d 2f       	mov	r24, r29
    18b0:	df 91       	pop	r29
    18b2:	cf 91       	pop	r28
    18b4:	1f 91       	pop	r17
    18b6:	0f 91       	pop	r16
    18b8:	ff 90       	pop	r15
    18ba:	ef 90       	pop	r14
    18bc:	df 90       	pop	r13
    18be:	cf 90       	pop	r12
    18c0:	bf 90       	pop	r11
    18c2:	af 90       	pop	r10
    18c4:	9f 90       	pop	r9
    18c6:	8f 90       	pop	r8
    18c8:	7f 90       	pop	r7
    18ca:	6f 90       	pop	r6
    18cc:	08 95       	ret

000018ce <LCD_enuDisplayString>:

	return Local_enuerrorStates;
}
*/
ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
	ES_t Local_enuerrorStates = ES_NOK;
	if (Copy_pcString != NULL)
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	89 f0       	breq	.+34     	; 0x18fc <LCD_enuDisplayString+0x2e>
    18da:	ec 01       	movw	r28, r24
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	8e 01       	movw	r16, r28
	{
		while (*Copy_pcString)
    18e0:	98 81       	ld	r25, Y
    18e2:	99 23       	and	r25, r25
    18e4:	61 f0       	breq	.+24     	; 0x18fe <LCD_enuDisplayString+0x30>
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    18e6:	41 e0       	ldi	r20, 0x01	; 1
    18e8:	61 e0       	ldi	r22, 0x01	; 1
    18ea:	81 e0       	ldi	r24, 0x01	; 1
    18ec:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    18f0:	21 96       	adiw	r28, 0x01	; 1
			Local_enuerrorStates = LCD_enuWriteNLatch(*Copy_pcString++);
    18f2:	f8 01       	movw	r30, r16
    18f4:	80 81       	ld	r24, Z
    18f6:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_enuWriteNLatch>
    18fa:	f1 cf       	rjmp	.-30     	; 0x18de <LCD_enuDisplayString+0x10>
		}

	}
	else Local_enuerrorStates = ES_NULL_POINTER;
    18fc:	82 e0       	ldi	r24, 0x02	; 2
	return Local_enuerrorStates;
}
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	08 95       	ret

00001908 <LCD_enuSetCursorPosition>:


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29

	ES_t Local_enuerrorStates = ES_NOK;
	if ((Copy_u8XDimension <= LCD_u8XDIM_1) && (Copy_u8YDimension <= LCD_u8YDIM_15))
    190e:	82 30       	cpi	r24, 0x02	; 2
    1910:	98 f4       	brcc	.+38     	; 0x1938 <LCD_enuSetCursorPosition+0x30>
    1912:	60 31       	cpi	r22, 0x10	; 16
    1914:	88 f4       	brcc	.+34     	; 0x1938 <LCD_enuSetCursorPosition+0x30>
    1916:	c6 2f       	mov	r28, r22
    1918:	d8 2f       	mov	r29, r24
		{
		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    191a:	40 e0       	ldi	r20, 0x00	; 0
    191c:	61 e0       	ldi	r22, 0x01	; 1
    191e:	81 e0       	ldi	r24, 0x01	; 1
    1920:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    1924:	18 2f       	mov	r17, r24
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
    1926:	8c 2f       	mov	r24, r28
    1928:	90 e4       	ldi	r25, 0x40	; 64
    192a:	d9 9f       	mul	r29, r25
    192c:	80 0d       	add	r24, r0
    192e:	11 24       	eor	r1, r1
    1930:	80 58       	subi	r24, 0x80	; 128
    1932:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_enuWriteNLatch>
    1936:	01 c0       	rjmp	.+2      	; 0x193a <LCD_enuSetCursorPosition+0x32>


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{

	ES_t Local_enuerrorStates = ES_NOK;
    1938:	10 e0       	ldi	r17, 0x00	; 0
		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
		}
	return Local_enuerrorStates;

}
    193a:	81 2f       	mov	r24, r17
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	08 95       	ret

00001944 <LCD_enuClearDisplay>:

ES_t LCD_enuClearDisplay( void )
{
    1944:	cf 93       	push	r28

	ES_t Local_enuerrorStates = ES_NOK;

		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1946:	40 e0       	ldi	r20, 0x00	; 0
    1948:	61 e0       	ldi	r22, 0x01	; 1
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <DIO_enuSetPinValue>
    1950:	c8 2f       	mov	r28, r24
		LCD_enuWriteNLatch(0x01);
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <LCD_enuWriteNLatch>

	return Local_enuerrorStates;

}
    1958:	8c 2f       	mov	r24, r28
    195a:	cf 91       	pop	r28
    195c:	08 95       	ret

0000195e <DIO_enuInit>:
	{
		Local_enuerrorStates = ES_OUT_OF_RANGE;
	}

	return Local_enuerrorStates;
}
    195e:	81 eb       	ldi	r24, 0xB1	; 177
    1960:	8a bb       	out	0x1a, r24	; 26
    1962:	86 e1       	ldi	r24, 0x16	; 22
    1964:	8b bb       	out	0x1b, r24	; 27
    1966:	80 e0       	ldi	r24, 0x00	; 0
    1968:	08 95       	ret

0000196a <DIO_enuSetPinDirection>:
    196a:	84 30       	cpi	r24, 0x04	; 4
    196c:	08 f0       	brcs	.+2      	; 0x1970 <DIO_enuSetPinDirection+0x6>
    196e:	51 c0       	rjmp	.+162    	; 0x1a12 <DIO_enuSetPinDirection+0xa8>
    1970:	68 30       	cpi	r22, 0x08	; 8
    1972:	08 f0       	brcs	.+2      	; 0x1976 <DIO_enuSetPinDirection+0xc>
    1974:	4e c0       	rjmp	.+156    	; 0x1a12 <DIO_enuSetPinDirection+0xa8>
    1976:	42 30       	cpi	r20, 0x02	; 2
    1978:	08 f0       	brcs	.+2      	; 0x197c <DIO_enuSetPinDirection+0x12>
    197a:	4b c0       	rjmp	.+150    	; 0x1a12 <DIO_enuSetPinDirection+0xa8>
    197c:	82 30       	cpi	r24, 0x02	; 2
    197e:	39 f1       	breq	.+78     	; 0x19ce <DIO_enuSetPinDirection+0x64>
    1980:	83 30       	cpi	r24, 0x03	; 3
    1982:	b1 f1       	breq	.+108    	; 0x19f0 <DIO_enuSetPinDirection+0x86>
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	89 f0       	breq	.+34     	; 0x19aa <DIO_enuSetPinDirection+0x40>
    1988:	81 e0       	ldi	r24, 0x01	; 1
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	06 2e       	mov	r0, r22
    198e:	01 c0       	rjmp	.+2      	; 0x1992 <DIO_enuSetPinDirection+0x28>
    1990:	88 0f       	add	r24, r24
    1992:	0a 94       	dec	r0
    1994:	ea f7       	brpl	.-6      	; 0x1990 <DIO_enuSetPinDirection+0x26>
    1996:	80 95       	com	r24
    1998:	9a b3       	in	r25, 0x1a	; 26
    199a:	89 23       	and	r24, r25
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <DIO_enuSetPinDirection+0x36>
    199e:	44 0f       	add	r20, r20
    19a0:	6a 95       	dec	r22
    19a2:	ea f7       	brpl	.-6      	; 0x199e <DIO_enuSetPinDirection+0x34>
    19a4:	48 2b       	or	r20, r24
    19a6:	4a bb       	out	0x1a, r20	; 26
    19a8:	10 c0       	rjmp	.+32     	; 0x19ca <DIO_enuSetPinDirection+0x60>
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	06 2e       	mov	r0, r22
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <DIO_enuSetPinDirection+0x4a>
    19b2:	88 0f       	add	r24, r24
    19b4:	0a 94       	dec	r0
    19b6:	ea f7       	brpl	.-6      	; 0x19b2 <DIO_enuSetPinDirection+0x48>
    19b8:	80 95       	com	r24
    19ba:	97 b3       	in	r25, 0x17	; 23
    19bc:	89 23       	and	r24, r25
    19be:	01 c0       	rjmp	.+2      	; 0x19c2 <DIO_enuSetPinDirection+0x58>
    19c0:	44 0f       	add	r20, r20
    19c2:	6a 95       	dec	r22
    19c4:	ea f7       	brpl	.-6      	; 0x19c0 <DIO_enuSetPinDirection+0x56>
    19c6:	48 2b       	or	r20, r24
    19c8:	47 bb       	out	0x17, r20	; 23
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	08 95       	ret
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	06 2e       	mov	r0, r22
    19d4:	01 c0       	rjmp	.+2      	; 0x19d8 <DIO_enuSetPinDirection+0x6e>
    19d6:	88 0f       	add	r24, r24
    19d8:	0a 94       	dec	r0
    19da:	ea f7       	brpl	.-6      	; 0x19d6 <DIO_enuSetPinDirection+0x6c>
    19dc:	80 95       	com	r24
    19de:	94 b3       	in	r25, 0x14	; 20
    19e0:	89 23       	and	r24, r25
    19e2:	01 c0       	rjmp	.+2      	; 0x19e6 <DIO_enuSetPinDirection+0x7c>
    19e4:	44 0f       	add	r20, r20
    19e6:	6a 95       	dec	r22
    19e8:	ea f7       	brpl	.-6      	; 0x19e4 <DIO_enuSetPinDirection+0x7a>
    19ea:	48 2b       	or	r20, r24
    19ec:	44 bb       	out	0x14, r20	; 20
    19ee:	ed cf       	rjmp	.-38     	; 0x19ca <DIO_enuSetPinDirection+0x60>
    19f0:	81 e0       	ldi	r24, 0x01	; 1
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	06 2e       	mov	r0, r22
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <DIO_enuSetPinDirection+0x90>
    19f8:	88 0f       	add	r24, r24
    19fa:	0a 94       	dec	r0
    19fc:	ea f7       	brpl	.-6      	; 0x19f8 <DIO_enuSetPinDirection+0x8e>
    19fe:	80 95       	com	r24
    1a00:	91 b3       	in	r25, 0x11	; 17
    1a02:	89 23       	and	r24, r25
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <DIO_enuSetPinDirection+0x9e>
    1a06:	44 0f       	add	r20, r20
    1a08:	6a 95       	dec	r22
    1a0a:	ea f7       	brpl	.-6      	; 0x1a06 <DIO_enuSetPinDirection+0x9c>
    1a0c:	48 2b       	or	r20, r24
    1a0e:	41 bb       	out	0x11, r20	; 17
    1a10:	dc cf       	rjmp	.-72     	; 0x19ca <DIO_enuSetPinDirection+0x60>
    1a12:	83 e0       	ldi	r24, 0x03	; 3
    1a14:	08 95       	ret

00001a16 <DIO_enuSetPinValue>:
    1a16:	84 30       	cpi	r24, 0x04	; 4
    1a18:	08 f0       	brcs	.+2      	; 0x1a1c <DIO_enuSetPinValue+0x6>
    1a1a:	51 c0       	rjmp	.+162    	; 0x1abe <DIO_enuSetPinValue+0xa8>
    1a1c:	68 30       	cpi	r22, 0x08	; 8
    1a1e:	08 f0       	brcs	.+2      	; 0x1a22 <DIO_enuSetPinValue+0xc>
    1a20:	4e c0       	rjmp	.+156    	; 0x1abe <DIO_enuSetPinValue+0xa8>
    1a22:	42 30       	cpi	r20, 0x02	; 2
    1a24:	08 f0       	brcs	.+2      	; 0x1a28 <DIO_enuSetPinValue+0x12>
    1a26:	4b c0       	rjmp	.+150    	; 0x1abe <DIO_enuSetPinValue+0xa8>
    1a28:	82 30       	cpi	r24, 0x02	; 2
    1a2a:	39 f1       	breq	.+78     	; 0x1a7a <DIO_enuSetPinValue+0x64>
    1a2c:	83 30       	cpi	r24, 0x03	; 3
    1a2e:	b1 f1       	breq	.+108    	; 0x1a9c <DIO_enuSetPinValue+0x86>
    1a30:	81 30       	cpi	r24, 0x01	; 1
    1a32:	89 f0       	breq	.+34     	; 0x1a56 <DIO_enuSetPinValue+0x40>
    1a34:	81 e0       	ldi	r24, 0x01	; 1
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	06 2e       	mov	r0, r22
    1a3a:	01 c0       	rjmp	.+2      	; 0x1a3e <DIO_enuSetPinValue+0x28>
    1a3c:	88 0f       	add	r24, r24
    1a3e:	0a 94       	dec	r0
    1a40:	ea f7       	brpl	.-6      	; 0x1a3c <DIO_enuSetPinValue+0x26>
    1a42:	80 95       	com	r24
    1a44:	9b b3       	in	r25, 0x1b	; 27
    1a46:	89 23       	and	r24, r25
    1a48:	01 c0       	rjmp	.+2      	; 0x1a4c <DIO_enuSetPinValue+0x36>
    1a4a:	44 0f       	add	r20, r20
    1a4c:	6a 95       	dec	r22
    1a4e:	ea f7       	brpl	.-6      	; 0x1a4a <DIO_enuSetPinValue+0x34>
    1a50:	48 2b       	or	r20, r24
    1a52:	4b bb       	out	0x1b, r20	; 27
    1a54:	10 c0       	rjmp	.+32     	; 0x1a76 <DIO_enuSetPinValue+0x60>
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	06 2e       	mov	r0, r22
    1a5c:	01 c0       	rjmp	.+2      	; 0x1a60 <DIO_enuSetPinValue+0x4a>
    1a5e:	88 0f       	add	r24, r24
    1a60:	0a 94       	dec	r0
    1a62:	ea f7       	brpl	.-6      	; 0x1a5e <DIO_enuSetPinValue+0x48>
    1a64:	80 95       	com	r24
    1a66:	98 b3       	in	r25, 0x18	; 24
    1a68:	89 23       	and	r24, r25
    1a6a:	01 c0       	rjmp	.+2      	; 0x1a6e <DIO_enuSetPinValue+0x58>
    1a6c:	44 0f       	add	r20, r20
    1a6e:	6a 95       	dec	r22
    1a70:	ea f7       	brpl	.-6      	; 0x1a6c <DIO_enuSetPinValue+0x56>
    1a72:	48 2b       	or	r20, r24
    1a74:	48 bb       	out	0x18, r20	; 24
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	08 95       	ret
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	06 2e       	mov	r0, r22
    1a80:	01 c0       	rjmp	.+2      	; 0x1a84 <DIO_enuSetPinValue+0x6e>
    1a82:	88 0f       	add	r24, r24
    1a84:	0a 94       	dec	r0
    1a86:	ea f7       	brpl	.-6      	; 0x1a82 <DIO_enuSetPinValue+0x6c>
    1a88:	80 95       	com	r24
    1a8a:	95 b3       	in	r25, 0x15	; 21
    1a8c:	89 23       	and	r24, r25
    1a8e:	01 c0       	rjmp	.+2      	; 0x1a92 <DIO_enuSetPinValue+0x7c>
    1a90:	44 0f       	add	r20, r20
    1a92:	6a 95       	dec	r22
    1a94:	ea f7       	brpl	.-6      	; 0x1a90 <DIO_enuSetPinValue+0x7a>
    1a96:	48 2b       	or	r20, r24
    1a98:	45 bb       	out	0x15, r20	; 21
    1a9a:	ed cf       	rjmp	.-38     	; 0x1a76 <DIO_enuSetPinValue+0x60>
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	06 2e       	mov	r0, r22
    1aa2:	01 c0       	rjmp	.+2      	; 0x1aa6 <DIO_enuSetPinValue+0x90>
    1aa4:	88 0f       	add	r24, r24
    1aa6:	0a 94       	dec	r0
    1aa8:	ea f7       	brpl	.-6      	; 0x1aa4 <DIO_enuSetPinValue+0x8e>
    1aaa:	80 95       	com	r24
    1aac:	92 b3       	in	r25, 0x12	; 18
    1aae:	89 23       	and	r24, r25
    1ab0:	01 c0       	rjmp	.+2      	; 0x1ab4 <DIO_enuSetPinValue+0x9e>
    1ab2:	44 0f       	add	r20, r20
    1ab4:	6a 95       	dec	r22
    1ab6:	ea f7       	brpl	.-6      	; 0x1ab2 <DIO_enuSetPinValue+0x9c>
    1ab8:	48 2b       	or	r20, r24
    1aba:	42 bb       	out	0x12, r20	; 18
    1abc:	dc cf       	rjmp	.-72     	; 0x1a76 <DIO_enuSetPinValue+0x60>
    1abe:	83 e0       	ldi	r24, 0x03	; 3
    1ac0:	08 95       	ret

00001ac2 <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    1ac2:	fa 01       	movw	r30, r20
	ES_t Local_enuerrorStates = ES_NOK;

	if (Copy_pu8Value != NULL)
    1ac4:	30 97       	sbiw	r30, 0x00	; 0
    1ac6:	d9 f0       	breq	.+54     	; 0x1afe <DIO_enuGetPinValue+0x3c>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    1ac8:	84 30       	cpi	r24, 0x04	; 4
    1aca:	d8 f4       	brcc	.+54     	; 0x1b02 <DIO_enuGetPinValue+0x40>
				&& Copy_u8PinID <= DIO_u8PIN7)
    1acc:	68 30       	cpi	r22, 0x08	; 8
    1ace:	c8 f4       	brcc	.+50     	; 0x1b02 <DIO_enuGetPinValue+0x40>
		{
			switch (Copy_u8PortID)
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	41 f0       	breq	.+16     	; 0x1ae4 <DIO_enuGetPinValue+0x22>
    1ad4:	83 30       	cpi	r24, 0x03	; 3
    1ad6:	89 f0       	breq	.+34     	; 0x1afa <DIO_enuGetPinValue+0x38>
    1ad8:	81 30       	cpi	r24, 0x01	; 1
    1ada:	11 f0       	breq	.+4      	; 0x1ae0 <DIO_enuGetPinValue+0x1e>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    1adc:	89 b3       	in	r24, 0x19	; 25
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <DIO_enuGetPinValue+0x24>

				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    1ae0:	86 b3       	in	r24, 0x16	; 22
    1ae2:	01 c0       	rjmp	.+2      	; 0x1ae6 <DIO_enuGetPinValue+0x24>

				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    1ae4:	83 b3       	in	r24, 0x13	; 19
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	02 c0       	rjmp	.+4      	; 0x1aee <DIO_enuGetPinValue+0x2c>
    1aea:	95 95       	asr	r25
    1aec:	87 95       	ror	r24
    1aee:	6a 95       	dec	r22
    1af0:	e2 f7       	brpl	.-8      	; 0x1aea <DIO_enuGetPinValue+0x28>
    1af2:	81 70       	andi	r24, 0x01	; 1
    1af4:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuerrorStates = ES_OK;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    1af8:	08 95       	ret
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    1afa:	80 b3       	in	r24, 0x10	; 16
    1afc:	f4 cf       	rjmp	.-24     	; 0x1ae6 <DIO_enuGetPinValue+0x24>
			Local_enuerrorStates = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuerrorStates = ES_NULL_POINTER;
    1afe:	82 e0       	ldi	r24, 0x02	; 2
    1b00:	08 95       	ret
			}
			Local_enuerrorStates = ES_OK;
		}
		else
		{
			Local_enuerrorStates = ES_OUT_OF_RANGE;
    1b02:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_enuerrorStates = ES_NULL_POINTER;
	}

	return Local_enuerrorStates;
}
    1b04:	08 95       	ret

00001b06 <EEPROM_ui8ReadByteFromAddress>:
    1b06:	e1 99       	sbic	0x1c, 1	; 28
    1b08:	fe cf       	rjmp	.-4      	; 0x1b06 <EEPROM_ui8ReadByteFromAddress>
    1b0a:	9f bb       	out	0x1f, r25	; 31
    1b0c:	8e bb       	out	0x1e, r24	; 30
    1b0e:	e0 9a       	sbi	0x1c, 0	; 28
    1b10:	8d b3       	in	r24, 0x1d	; 29
    1b12:	fb 01       	movw	r30, r22
    1b14:	80 83       	st	Z, r24
    1b16:	08 95       	ret

00001b18 <EEPROM_vReadBlockFromAddress>:
    1b18:	e1 99       	sbic	0x1c, 1	; 28
    1b1a:	fe cf       	rjmp	.-4      	; 0x1b18 <EEPROM_vReadBlockFromAddress>
    1b1c:	46 0f       	add	r20, r22
    1b1e:	57 1f       	adc	r21, r23
    1b20:	fb 01       	movw	r30, r22
    1b22:	86 1b       	sub	r24, r22
    1b24:	97 0b       	sbc	r25, r23
    1b26:	e4 17       	cp	r30, r20
    1b28:	f5 07       	cpc	r31, r21
    1b2a:	49 f0       	breq	.+18     	; 0x1b3e <EEPROM_vReadBlockFromAddress+0x26>
    1b2c:	9c 01       	movw	r18, r24
    1b2e:	2e 0f       	add	r18, r30
    1b30:	3f 1f       	adc	r19, r31
    1b32:	3f bb       	out	0x1f, r19	; 31
    1b34:	2e bb       	out	0x1e, r18	; 30
    1b36:	e0 9a       	sbi	0x1c, 0	; 28
    1b38:	2d b3       	in	r18, 0x1d	; 29
    1b3a:	21 93       	st	Z+, r18
    1b3c:	f4 cf       	rjmp	.-24     	; 0x1b26 <EEPROM_vReadBlockFromAddress+0xe>
    1b3e:	08 95       	ret

00001b40 <EEPROM_vWriteByteToAddress>:
    1b40:	e1 99       	sbic	0x1c, 1	; 28
    1b42:	fe cf       	rjmp	.-4      	; 0x1b40 <EEPROM_vWriteByteToAddress>
    1b44:	9f bb       	out	0x1f, r25	; 31
    1b46:	8e bb       	out	0x1e, r24	; 30
    1b48:	e0 9a       	sbi	0x1c, 0	; 28
    1b4a:	8d b3       	in	r24, 0x1d	; 29
    1b4c:	86 17       	cp	r24, r22
    1b4e:	19 f0       	breq	.+6      	; 0x1b56 <EEPROM_vWriteByteToAddress+0x16>
    1b50:	6d bb       	out	0x1d, r22	; 29
    1b52:	e2 9a       	sbi	0x1c, 2	; 28
    1b54:	e1 9a       	sbi	0x1c, 1	; 28
    1b56:	08 95       	ret

00001b58 <EEPROM_vWriteBlockToAddress>:
    1b58:	46 0f       	add	r20, r22
    1b5a:	57 1f       	adc	r21, r23
    1b5c:	fb 01       	movw	r30, r22
    1b5e:	9c 01       	movw	r18, r24
    1b60:	26 1b       	sub	r18, r22
    1b62:	37 0b       	sbc	r19, r23
    1b64:	e4 17       	cp	r30, r20
    1b66:	f5 07       	cpc	r31, r21
    1b68:	81 f0       	breq	.+32     	; 0x1b8a <EEPROM_vWriteBlockToAddress+0x32>
    1b6a:	e1 99       	sbic	0x1c, 1	; 28
    1b6c:	fe cf       	rjmp	.-4      	; 0x1b6a <EEPROM_vWriteBlockToAddress+0x12>
    1b6e:	c9 01       	movw	r24, r18
    1b70:	8e 0f       	add	r24, r30
    1b72:	9f 1f       	adc	r25, r31
    1b74:	9f bb       	out	0x1f, r25	; 31
    1b76:	8e bb       	out	0x1e, r24	; 30
    1b78:	e0 9a       	sbi	0x1c, 0	; 28
    1b7a:	8d b3       	in	r24, 0x1d	; 29
    1b7c:	91 91       	ld	r25, Z+
    1b7e:	89 17       	cp	r24, r25
    1b80:	89 f3       	breq	.-30     	; 0x1b64 <EEPROM_vWriteBlockToAddress+0xc>
    1b82:	9d bb       	out	0x1d, r25	; 29
    1b84:	e2 9a       	sbi	0x1c, 2	; 28
    1b86:	e1 9a       	sbi	0x1c, 1	; 28
    1b88:	ed cf       	rjmp	.-38     	; 0x1b64 <EEPROM_vWriteBlockToAddress+0xc>
    1b8a:	08 95       	ret

00001b8c <EXTI_enuInit>:

		GICR &= ~(1<<6);
		Local_enuerrorStates = ES_OK;

return Local_enuerrorStates;
}
    1b8c:	8b b7       	in	r24, 0x3b	; 59
    1b8e:	80 64       	ori	r24, 0x40	; 64
    1b90:	8b bf       	out	0x3b, r24	; 59
    1b92:	85 b7       	in	r24, 0x35	; 53
    1b94:	83 60       	ori	r24, 0x03	; 3
    1b96:	85 bf       	out	0x35, r24	; 53
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	08 95       	ret

00001b9c <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(volatile void  (* pfunAppFunction)(void))//,u8 Copy_u8InterruptNum)
{
ES_t Local_enuerrorStates = ES_NOK ;

	if(pfunAppFunction != NULL)
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	31 f0       	breq	.+12     	; 0x1bac <EXTI_enuCallBack+0x10>
	{
		
		
			EXTI_pfunISR_fun = pfunAppFunction;
    1ba0:	90 93 6c 05 	sts	0x056C, r25	; 0x80056c <EXTI_pfunISR_fun+0x1>
    1ba4:	80 93 6b 05 	sts	0x056B, r24	; 0x80056b <EXTI_pfunISR_fun>

			Local_enuerrorStates = ES_OK;
    1ba8:	81 e0       	ldi	r24, 0x01	; 1
    1baa:	08 95       	ret
		
	}
	else
	{
		Local_enuerrorStates = ES_NULL_POINTER;
    1bac:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_enuerrorStates;
}
    1bae:	08 95       	ret

00001bb0 <__vector_1>:

ISR(VECT_INT0)
{
    1bb0:	1f 92       	push	r1
    1bb2:	0f 92       	push	r0
    1bb4:	0f b6       	in	r0, 0x3f	; 63
    1bb6:	0f 92       	push	r0
    1bb8:	11 24       	eor	r1, r1
    1bba:	2f 93       	push	r18
    1bbc:	3f 93       	push	r19
    1bbe:	4f 93       	push	r20
    1bc0:	5f 93       	push	r21
    1bc2:	6f 93       	push	r22
    1bc4:	7f 93       	push	r23
    1bc6:	8f 93       	push	r24
    1bc8:	9f 93       	push	r25
    1bca:	af 93       	push	r26
    1bcc:	bf 93       	push	r27
    1bce:	ef 93       	push	r30
    1bd0:	ff 93       	push	r31
	if(EXTI_pfunISR_fun != NULL)
    1bd2:	e0 91 6b 05 	lds	r30, 0x056B	; 0x80056b <EXTI_pfunISR_fun>
    1bd6:	f0 91 6c 05 	lds	r31, 0x056C	; 0x80056c <EXTI_pfunISR_fun+0x1>
    1bda:	30 97       	sbiw	r30, 0x00	; 0
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <__vector_1+0x30>
	{
		EXTI_pfunISR_fun ();
    1bde:	09 95       	icall
	}
}
    1be0:	ff 91       	pop	r31
    1be2:	ef 91       	pop	r30
    1be4:	bf 91       	pop	r27
    1be6:	af 91       	pop	r26
    1be8:	9f 91       	pop	r25
    1bea:	8f 91       	pop	r24
    1bec:	7f 91       	pop	r23
    1bee:	6f 91       	pop	r22
    1bf0:	5f 91       	pop	r21
    1bf2:	4f 91       	pop	r20
    1bf4:	3f 91       	pop	r19
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 90       	pop	r0
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	0f 90       	pop	r0
    1bfe:	1f 90       	pop	r1
    1c00:	18 95       	reti

00001c02 <SPI_vidInit>:
    1c02:	6c 9a       	sbi	0x0d, 4	; 13
    1c04:	bc 9a       	sbi	0x17, 4	; 23
    1c06:	bd 9a       	sbi	0x17, 5	; 23
    1c08:	be 98       	cbi	0x17, 6	; 23
    1c0a:	bf 9a       	sbi	0x17, 7	; 23
    1c0c:	69 9a       	sbi	0x0d, 1	; 13
    1c0e:	68 98       	cbi	0x0d, 0	; 13
    1c10:	6e 9a       	sbi	0x0d, 6	; 13
    1c12:	08 95       	ret

00001c14 <SPI_ui8TransmitRecive>:
    1c14:	c4 98       	cbi	0x18, 4	; 24
    1c16:	8f b9       	out	0x0f, r24	; 15
    1c18:	77 9b       	sbis	0x0e, 7	; 14
    1c1a:	fe cf       	rjmp	.-4      	; 0x1c18 <SPI_ui8TransmitRecive+0x4>
    1c1c:	c4 9a       	sbi	0x18, 4	; 24
    1c1e:	8f b1       	in	r24, 0x0f	; 15
    1c20:	08 95       	ret

00001c22 <UART_enuUART_Init>:

ES_t UART_enuUART_Init(void)
{
	ES_t Local_ErorrState = ES_NOK;

	UCSRA = 0x00; // flags RXC,TXC,UDRE -> 0,, U2X -> 0(Synchronous)
    1c22:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18; // set to be a reciever and a transmiter
    1c24:	88 e1       	ldi	r24, 0x18	; 24
    1c26:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86; // set frame format
    1c28:	86 e8       	ldi	r24, 0x86	; 134
    1c2a:	80 bd       	out	0x20, r24	; 32

	UBRRL = 103; // 0110 0111 (BAUD)
    1c2c:	87 e6       	ldi	r24, 0x67	; 103
    1c2e:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;   // BAUD>>8  -> 0
    1c30:	10 bc       	out	0x20, r1	; 32

	return Local_ErorrState;
}
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	08 95       	ret

00001c36 <UART_enuSendChar>:
ES_t UART_enuSendChar( u8 Copy_u8CharData)
{
	ES_t Local_ErorrState = ES_NOK;
	// check if UDR ready(empty)for write or not using UDRE bit--> if ready..go else wait.

	while(! ((UCSRA >> 5) & 1)); // (UCSRA >> 5) -> UDRE
    1c36:	5d 9b       	sbis	0x0b, 5	; 11
    1c38:	fe cf       	rjmp	.-4      	; 0x1c36 <UART_enuSendChar>
	UDR = Copy_u8CharData;
    1c3a:	8c b9       	out	0x0c, r24	; 12
	  while(!((UCSRA >> 6) & 1));
	  UCSRA |= (1>>6);

*/
	return Local_ErorrState;
}
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	08 95       	ret

00001c40 <UART_enuRecieveChar>:
{
	ES_t Local_ErorrState = ES_NOK;

// As long the RXc is 0 so there is no recieved data at that moment --> recieve the new data

	while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7) -> RXc
    1c40:	5f 9b       	sbis	0x0b, 7	; 11
    1c42:	fe cf       	rjmp	.-4      	; 0x1c40 <UART_enuRecieveChar>
	*Copy_u8RxChar = UDR;
    1c44:	2c b1       	in	r18, 0x0c	; 12
    1c46:	fc 01       	movw	r30, r24
    1c48:	20 83       	st	Z, r18
	//UART_First_ConnectionFlag ++;
	return Local_ErorrState;
}
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	08 95       	ret

00001c4e <UART_enuSendString>:

ES_t UART_enuSendString(u8 * Copy_Au8StringData)
{
    1c4e:	ac 01       	movw	r20, r24
	ES_t Local_ErorrState = ES_NOK;

	u8 Local_u8Iter = 0;
    1c50:	90 e0       	ldi	r25, 0x00	; 0

	while(Copy_Au8StringData[Local_u8Iter] != 0) // check if data not equal  NULL
    1c52:	fa 01       	movw	r30, r20
    1c54:	e9 0f       	add	r30, r25
    1c56:	f1 1d       	adc	r31, r1
    1c58:	20 81       	ld	r18, Z
    1c5a:	22 23       	and	r18, r18
    1c5c:	29 f0       	breq	.+10     	; 0x1c68 <UART_enuSendString+0x1a>
	{
		while(! ((UCSRA>>5) & 1 )); // wait until the UDR is empty using (UCSRA>>5) -> UDRE
    1c5e:	5d 9b       	sbis	0x0b, 5	; 11
    1c60:	fe cf       	rjmp	.-4      	; 0x1c5e <UART_enuSendString+0x10>
		UDR = (Copy_Au8StringData[Local_u8Iter]);
    1c62:	2c b9       	out	0x0c, r18	; 12
		//UART_First_ConnectionFlag++;
		Local_u8Iter++;
    1c64:	9f 5f       	subi	r25, 0xFF	; 255
    1c66:	f5 cf       	rjmp	.-22     	; 0x1c52 <UART_enuSendString+0x4>
	}

	return Local_ErorrState;
}
    1c68:	80 e0       	ldi	r24, 0x00	; 0
    1c6a:	08 95       	ret

00001c6c <UART_enuRecieveString>:

ES_t UART_enuRecieveString(u8 * Copy_Au8RxString)
{
    1c6c:	ac 01       	movw	r20, r24

	(Copy_Au8RxString[Local_u8Iter++]) = Local_u8TempChar;

	}
#elif NEW_LINE == YES
	u8 Local_u8Iter = 0;
    1c6e:	90 e0       	ldi	r25, 0x00	; 0

	while(1)
	{

		while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7)-> RXc
    1c70:	5f 9b       	sbis	0x0b, 7	; 11
    1c72:	fe cf       	rjmp	.-4      	; 0x1c70 <UART_enuRecieveString+0x4>
		(Copy_Au8RxString[Local_u8Iter]) = UDR ;
    1c74:	fa 01       	movw	r30, r20
    1c76:	e9 0f       	add	r30, r25
    1c78:	f1 1d       	adc	r31, r1
    1c7a:	2c b1       	in	r18, 0x0c	; 12
    1c7c:	20 83       	st	Z, r18

//to display what is typed

		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
    1c7e:	5d 9b       	sbis	0x0b, 5	; 11
    1c80:	fe cf       	rjmp	.-4      	; 0x1c7e <UART_enuRecieveString+0x12>
		UDR = (Copy_Au8RxString[Local_u8Iter]);
    1c82:	2c b9       	out	0x0c, r18	; 12

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
    1c84:	20 81       	ld	r18, Z
    1c86:	2d 30       	cpi	r18, 0x0D	; 13
    1c88:	21 f0       	breq	.+8      	; 0x1c92 <UART_enuRecieveString+0x26>
    1c8a:	2a 30       	cpi	r18, 0x0A	; 10
    1c8c:	11 f0       	breq	.+4      	; 0x1c92 <UART_enuRecieveString+0x26>
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
			break;
		}

		Local_u8Iter++;
    1c8e:	9f 5f       	subi	r25, 0xFF	; 255
	}
    1c90:	ef cf       	rjmp	.-34     	; 0x1c70 <UART_enuRecieveString+0x4>
		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
		UDR = (Copy_Au8RxString[Local_u8Iter]);

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
    1c92:	10 82       	st	Z, r1
		Local_u8Iter++;
	}

#endif
	return Local_ErorrState;
}
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	08 95       	ret

00001c98 <UART_enuCheck_Connection>:


u8 UART_enuCheck_Connection()
{	u8 readUDR;
	if(((UCSRA >> 7) & 1)!=0)
    1c98:	8b b1       	in	r24, 0x0b	; 11
    1c9a:	88 1f       	adc	r24, r24
    1c9c:	88 27       	eor	r24, r24
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	11 f0       	breq	.+4      	; 0x1ca6 <UART_enuCheck_Connection+0xe>
	{
		readUDR = UDR;
    1ca2:	8c b1       	in	r24, 0x0c	; 12
		return 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
	}

	return 0;
}
    1ca6:	08 95       	ret

00001ca8 <__udivmodhi4>:
    1ca8:	aa 1b       	sub	r26, r26
    1caa:	bb 1b       	sub	r27, r27
    1cac:	51 e1       	ldi	r21, 0x11	; 17
    1cae:	07 c0       	rjmp	.+14     	; 0x1cbe <__udivmodhi4_ep>

00001cb0 <__udivmodhi4_loop>:
    1cb0:	aa 1f       	adc	r26, r26
    1cb2:	bb 1f       	adc	r27, r27
    1cb4:	a6 17       	cp	r26, r22
    1cb6:	b7 07       	cpc	r27, r23
    1cb8:	10 f0       	brcs	.+4      	; 0x1cbe <__udivmodhi4_ep>
    1cba:	a6 1b       	sub	r26, r22
    1cbc:	b7 0b       	sbc	r27, r23

00001cbe <__udivmodhi4_ep>:
    1cbe:	88 1f       	adc	r24, r24
    1cc0:	99 1f       	adc	r25, r25
    1cc2:	5a 95       	dec	r21
    1cc4:	a9 f7       	brne	.-22     	; 0x1cb0 <__udivmodhi4_loop>
    1cc6:	80 95       	com	r24
    1cc8:	90 95       	com	r25
    1cca:	bc 01       	movw	r22, r24
    1ccc:	cd 01       	movw	r24, r26
    1cce:	08 95       	ret

00001cd0 <__udivmodsi4>:
    1cd0:	a1 e2       	ldi	r26, 0x21	; 33
    1cd2:	1a 2e       	mov	r1, r26
    1cd4:	aa 1b       	sub	r26, r26
    1cd6:	bb 1b       	sub	r27, r27
    1cd8:	fd 01       	movw	r30, r26
    1cda:	0d c0       	rjmp	.+26     	; 0x1cf6 <__udivmodsi4_ep>

00001cdc <__udivmodsi4_loop>:
    1cdc:	aa 1f       	adc	r26, r26
    1cde:	bb 1f       	adc	r27, r27
    1ce0:	ee 1f       	adc	r30, r30
    1ce2:	ff 1f       	adc	r31, r31
    1ce4:	a2 17       	cp	r26, r18
    1ce6:	b3 07       	cpc	r27, r19
    1ce8:	e4 07       	cpc	r30, r20
    1cea:	f5 07       	cpc	r31, r21
    1cec:	20 f0       	brcs	.+8      	; 0x1cf6 <__udivmodsi4_ep>
    1cee:	a2 1b       	sub	r26, r18
    1cf0:	b3 0b       	sbc	r27, r19
    1cf2:	e4 0b       	sbc	r30, r20
    1cf4:	f5 0b       	sbc	r31, r21

00001cf6 <__udivmodsi4_ep>:
    1cf6:	66 1f       	adc	r22, r22
    1cf8:	77 1f       	adc	r23, r23
    1cfa:	88 1f       	adc	r24, r24
    1cfc:	99 1f       	adc	r25, r25
    1cfe:	1a 94       	dec	r1
    1d00:	69 f7       	brne	.-38     	; 0x1cdc <__udivmodsi4_loop>
    1d02:	60 95       	com	r22
    1d04:	70 95       	com	r23
    1d06:	80 95       	com	r24
    1d08:	90 95       	com	r25
    1d0a:	9b 01       	movw	r18, r22
    1d0c:	ac 01       	movw	r20, r24
    1d0e:	bd 01       	movw	r22, r26
    1d10:	cf 01       	movw	r24, r30
    1d12:	08 95       	ret

00001d14 <__tablejump2__>:
    1d14:	ee 0f       	add	r30, r30
    1d16:	ff 1f       	adc	r31, r31
    1d18:	05 90       	lpm	r0, Z+
    1d1a:	f4 91       	lpm	r31, Z
    1d1c:	e0 2d       	mov	r30, r0
    1d1e:	09 94       	ijmp

00001d20 <__muluhisi3>:
    1d20:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__umulhisi3>
    1d24:	a5 9f       	mul	r26, r21
    1d26:	90 0d       	add	r25, r0
    1d28:	b4 9f       	mul	r27, r20
    1d2a:	90 0d       	add	r25, r0
    1d2c:	a4 9f       	mul	r26, r20
    1d2e:	80 0d       	add	r24, r0
    1d30:	91 1d       	adc	r25, r1
    1d32:	11 24       	eor	r1, r1
    1d34:	08 95       	ret

00001d36 <__umulhisi3>:
    1d36:	a2 9f       	mul	r26, r18
    1d38:	b0 01       	movw	r22, r0
    1d3a:	b3 9f       	mul	r27, r19
    1d3c:	c0 01       	movw	r24, r0
    1d3e:	a3 9f       	mul	r26, r19
    1d40:	70 0d       	add	r23, r0
    1d42:	81 1d       	adc	r24, r1
    1d44:	11 24       	eor	r1, r1
    1d46:	91 1d       	adc	r25, r1
    1d48:	b2 9f       	mul	r27, r18
    1d4a:	70 0d       	add	r23, r0
    1d4c:	81 1d       	adc	r24, r1
    1d4e:	11 24       	eor	r1, r1
    1d50:	91 1d       	adc	r25, r1
    1d52:	08 95       	ret

00001d54 <_exit>:
    1d54:	f8 94       	cli

00001d56 <__stop_program>:
    1d56:	ff cf       	rjmp	.-2      	; 0x1d56 <__stop_program>
