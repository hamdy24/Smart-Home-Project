
AVRMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000021e  00800060  000014f0  00001584  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080027e  0080027e  000017a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001f0  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003bf2  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f05  00000000  00000000  000055f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001c18  00000000  00000000  000064f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e4  00000000  00000000  00008110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e08  00000000  00000000  000085f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002263  00000000  00000000  000093fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  0000b65f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	e6 03       	fmuls	r22, r22
      56:	13 04       	cpc	r1, r3
      58:	e8 03       	fmulsu	r22, r16
      5a:	ed 03       	fmulsu	r22, r21
      5c:	f2 03       	fmuls	r23, r18
      5e:	f7 03       	fmuls	r23, r23
      60:	fc 03       	fmulsu	r23, r20
      62:	01 04       	cpc	r0, r1
      64:	03 04       	cpc	r0, r3

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	12 e0       	ldi	r17, 0x02	; 2
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e0 ef       	ldi	r30, 0xF0	; 240
      7a:	f4 e1       	ldi	r31, 0x14	; 20
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	ae 37       	cpi	r26, 0x7E	; 126
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	22 e0       	ldi	r18, 0x02	; 2
      8a:	ae e7       	ldi	r26, 0x7E	; 126
      8c:	b2 e0       	ldi	r27, 0x02	; 2
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	af 37       	cpi	r26, 0x7F	; 127
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 68 01 	call	0x2d0	; 0x2d0 <main>
      9c:	0c 94 76 0a 	jmp	0x14ec	; 0x14ec <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <LoginSystem_SaveNewUser>:

#include "main_config.h"

#include <util/delay.h>
	ES_t LoginSystem_SaveNewUser(User_t Copy_strNewUser,u8 *Copy_u8NumofRegisteredUsers)
	{
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
      b8:	2b 97       	sbiw	r28, 0x0b	; 11
      ba:	0f b6       	in	r0, 0x3f	; 63
      bc:	f8 94       	cli
      be:	de bf       	out	0x3e, r29	; 62
      c0:	0f be       	out	0x3f, r0	; 63
      c2:	cd bf       	out	0x3d, r28	; 61
      c4:	e9 82       	std	Y+1, r14	; 0x01
      c6:	fa 82       	std	Y+2, r15	; 0x02
      c8:	0b 83       	std	Y+3, r16	; 0x03
      ca:	1c 83       	std	Y+4, r17	; 0x04
      cc:	2d 83       	std	Y+5, r18	; 0x05
      ce:	3e 83       	std	Y+6, r19	; 0x06
      d0:	4f 83       	std	Y+7, r20	; 0x07
      d2:	58 87       	std	Y+8, r21	; 0x08
      d4:	69 87       	std	Y+9, r22	; 0x09
      d6:	7a 87       	std	Y+10, r23	; 0x0a
      d8:	8b 87       	std	Y+11, r24	; 0x0b
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1), Copy_strNewUser.UserName,MAX_NO_OF_LETTERS);
      da:	f6 01       	movw	r30, r12
      dc:	80 81       	ld	r24, Z
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	9c 01       	movw	r18, r24
      e2:	22 0f       	add	r18, r18
      e4:	33 1f       	adc	r19, r19
      e6:	22 0f       	add	r18, r18
      e8:	33 1f       	adc	r19, r19
      ea:	22 0f       	add	r18, r18
      ec:	33 1f       	adc	r19, r19
      ee:	82 0f       	add	r24, r18
      f0:	93 1f       	adc	r25, r19
      f2:	44 e0       	ldi	r20, 0x04	; 4
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	be 01       	movw	r22, r28
      f8:	6f 5f       	subi	r22, 0xFF	; 255
      fa:	7f 4f       	sbci	r23, 0xFF	; 255
      fc:	42 96       	adiw	r24, 0x12	; 18
      fe:	0e 94 a8 05 	call	0xb50	; 0xb50 <EEPROM_vWriteBlockToAddress>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     102:	83 ed       	ldi	r24, 0xD3	; 211
     104:	90 e3       	ldi	r25, 0x30	; 48
     106:	01 97       	sbiw	r24, 0x01	; 1
     108:	f1 f7       	brne	.-4      	; 0x106 <LoginSystem_SaveNewUser+0x62>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <LoginSystem_SaveNewUser+0x68>
     10c:	00 00       	nop
		_delay_ms(50);
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_strNewUser.Password,MAX_NO_OF_LETTERS);
     10e:	f6 01       	movw	r30, r12
     110:	80 81       	ld	r24, Z
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	9c 01       	movw	r18, r24
     116:	22 0f       	add	r18, r18
     118:	33 1f       	adc	r19, r19
     11a:	22 0f       	add	r18, r18
     11c:	33 1f       	adc	r19, r19
     11e:	22 0f       	add	r18, r18
     120:	33 1f       	adc	r19, r19
     122:	82 0f       	add	r24, r18
     124:	93 1f       	adc	r25, r19
     126:	44 e0       	ldi	r20, 0x04	; 4
     128:	50 e0       	ldi	r21, 0x00	; 0
     12a:	be 01       	movw	r22, r28
     12c:	6a 5f       	subi	r22, 0xFA	; 250
     12e:	7f 4f       	sbci	r23, 0xFF	; 255
     130:	46 96       	adiw	r24, 0x16	; 22
     132:	0e 94 a8 05 	call	0xb50	; 0xb50 <EEPROM_vWriteBlockToAddress>
     136:	83 ed       	ldi	r24, 0xD3	; 211
     138:	90 e3       	ldi	r25, 0x30	; 48
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <LoginSystem_SaveNewUser+0x96>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LoginSystem_SaveNewUser+0x9c>
     140:	00 00       	nop
		_delay_ms(50);
		

		EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_strNewUser.User_Priority);
     142:	6b 85       	ldd	r22, Y+11	; 0x0b
     144:	f6 01       	movw	r30, r12
     146:	80 81       	ld	r24, Z
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	9c 01       	movw	r18, r24
     14c:	22 0f       	add	r18, r18
     14e:	33 1f       	adc	r19, r19
     150:	22 0f       	add	r18, r18
     152:	33 1f       	adc	r19, r19
     154:	22 0f       	add	r18, r18
     156:	33 1f       	adc	r19, r19
     158:	82 0f       	add	r24, r18
     15a:	93 1f       	adc	r25, r19
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	4a 96       	adiw	r24, 0x1a	; 26
     160:	0e 94 96 05 	call	0xb2c	; 0xb2c <EEPROM_vWriteByteToAddress>
     164:	83 ed       	ldi	r24, 0xD3	; 211
     166:	90 e3       	ldi	r25, 0x30	; 48
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	f1 f7       	brne	.-4      	; 0x168 <LoginSystem_SaveNewUser+0xc4>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <LoginSystem_SaveNewUser+0xca>
     16e:	00 00       	nop
		_delay_ms(50);
		(*Copy_u8NumofRegisteredUsers)++;
     170:	f6 01       	movw	r30, r12
     172:	60 81       	ld	r22, Z
     174:	6f 5f       	subi	r22, 0xFF	; 255
     176:	60 83       	st	Z, r22

		EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	81 e1       	ldi	r24, 0x11	; 17
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 96 05 	call	0xb2c	; 0xb2c <EEPROM_vWriteByteToAddress>
	}
     182:	2b 96       	adiw	r28, 0x0b	; 11
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	df 90       	pop	r13
     19c:	cf 90       	pop	r12
     19e:	08 95       	ret

000001a0 <LoginSystem_enuGetDataFromUserByKeypad>:
	ES_t LoginSystem_enuGetDataFromUserByKeypad(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
	{
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	1f 92       	push	r1
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	6c 01       	movw	r12, r24
     1b6:	7b 01       	movw	r14, r22
		ES_t Local_enuErrorState = ES_NOK;
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
     1b8:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_enuClearDisplay>
		LCD_enuDisplayString("Username:");
     1bc:	80 e7       	ldi	r24, 0x70	; 112
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1cc:	10 e0       	ldi	r17, 0x00	; 0
     1ce:	0d c0       	rjmp	.+26     	; 0x1ea <LoginSystem_enuGetDataFromUserByKeypad+0x4a>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     1d0:	ce 01       	movw	r24, r28
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	0e 94 21 06 	call	0xc42	; 0xc42 <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	0e 94 f8 07 	call	0xff0	; 0xff0 <LCD_enuSendData>
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
     1de:	f6 01       	movw	r30, r12
     1e0:	e1 0f       	add	r30, r17
     1e2:	f1 1d       	adc	r31, r1
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	80 83       	st	Z, r24
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
		LCD_enuDisplayString("Username:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1e8:	1f 5f       	subi	r17, 0xFF	; 255
     1ea:	14 30       	cpi	r17, 0x04	; 4
     1ec:	88 f3       	brcs	.-30     	; 0x1d0 <LoginSystem_enuGetDataFromUserByKeypad+0x30>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
			LCD_enuSendData(Local_u8PressedKey);
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
		}
		Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     1ee:	f6 01       	movw	r30, r12
     1f0:	14 82       	std	Z+4, r1	; 0x04

		LCD_enuClearDisplay();
     1f2:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_enuClearDisplay>
		LCD_enuDisplayString("Password:");
     1f6:	8a e7       	ldi	r24, 0x7A	; 122
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	1a c0       	rjmp	.+52     	; 0x23e <LoginSystem_enuGetDataFromUserByKeypad+0x9e>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     20a:	ce 01       	movw	r24, r28
     20c:	01 96       	adiw	r24, 0x01	; 1
     20e:	0e 94 21 06 	call	0xc42	; 0xc42 <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	0e 94 f8 07 	call	0xff0	; 0xff0 <LCD_enuSendData>
     218:	87 ea       	ldi	r24, 0xA7	; 167
     21a:	91 e6       	ldi	r25, 0x61	; 97
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <LoginSystem_enuGetDataFromUserByKeypad+0x7c>
     220:	00 c0       	rjmp	.+0      	; 0x222 <LoginSystem_enuGetDataFromUserByKeypad+0x82>
     222:	00 00       	nop
			_delay_ms(100);
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
     224:	61 2f       	mov	r22, r17
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>
			LCD_enuSendData('*');
     22c:	8a e2       	ldi	r24, 0x2A	; 42
     22e:	0e 94 f8 07 	call	0xff0	; 0xff0 <LCD_enuSendData>
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;
     232:	f7 01       	movw	r30, r14
     234:	e1 0f       	add	r30, r17
     236:	f1 1d       	adc	r31, r1
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	80 83       	st	Z, r24

		LCD_enuClearDisplay();
		LCD_enuDisplayString("Password:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     23c:	1f 5f       	subi	r17, 0xFF	; 255
     23e:	14 30       	cpi	r17, 0x04	; 4
     240:	20 f3       	brcs	.-56     	; 0x20a <LoginSystem_enuGetDataFromUserByKeypad+0x6a>
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
			LCD_enuSendData('*');
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;

		}
		Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     242:	f7 01       	movw	r30, r14
     244:	14 82       	std	Z+4, r1	; 0x04
		Local_enuErrorState = ES_OK;
		return Local_enuErrorState;
	}
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0f 90       	pop	r0
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	ff 90       	pop	r15
     252:	ef 90       	pop	r14
     254:	df 90       	pop	r13
     256:	cf 90       	pop	r12
     258:	08 95       	ret

0000025a <LoginSystem_enuGetDataFromUserBY_UART>:
	
		ES_t LoginSystem_enuGetDataFromUserBY_UART(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
		{
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	8c 01       	movw	r16, r24
     264:	eb 01       	movw	r28, r22
			ES_t Local_enuErrorState = ES_NOK;
			UART_enuSendString("Username: ");
     266:	84 e8       	ldi	r24, 0x84	; 132
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Username);
     26e:	c8 01       	movw	r24, r16
     270:	0e 94 33 0a 	call	0x1466	; 0x1466 <UART_enuRecieveString>
			Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     274:	f8 01       	movw	r30, r16
     276:	14 82       	std	Z+4, r1	; 0x04
			UART_enuSendString("Password: ");
     278:	8f e8       	ldi	r24, 0x8F	; 143
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Password);
     280:	ce 01       	movw	r24, r28
     282:	0e 94 33 0a 	call	0x1466	; 0x1466 <UART_enuRecieveString>
			Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     286:	1c 82       	std	Y+4, r1	; 0x04

			Local_enuErrorState = ES_OK;
			return Local_enuErrorState;
		}
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	08 95       	ret

00000294 <LoginSystem_u8Strcmp>:



	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
     294:	dc 01       	movw	r26, r24
		u8 Local_u8Iterator=0;
     296:	40 e0       	ldi	r20, 0x00	; 0
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     298:	05 c0       	rjmp	.+10     	; 0x2a4 <LoginSystem_u8Strcmp+0x10>
		{
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     29a:	99 23       	and	r25, r25
     29c:	79 f0       	breq	.+30     	; 0x2bc <LoginSystem_u8Strcmp+0x28>
     29e:	22 23       	and	r18, r18
     2a0:	69 f0       	breq	.+26     	; 0x2bc <LoginSystem_u8Strcmp+0x28>
				break;
			Local_u8Iterator++;
     2a2:	4f 5f       	subi	r20, 0xFF	; 255


	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
		u8 Local_u8Iterator=0;
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     2a4:	24 2f       	mov	r18, r20
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	fd 01       	movw	r30, r26
     2aa:	e2 0f       	add	r30, r18
     2ac:	f3 1f       	adc	r31, r19
     2ae:	90 81       	ld	r25, Z
     2b0:	fb 01       	movw	r30, r22
     2b2:	e2 0f       	add	r30, r18
     2b4:	f3 1f       	adc	r31, r19
     2b6:	20 81       	ld	r18, Z
     2b8:	92 17       	cp	r25, r18
     2ba:	79 f3       	breq	.-34     	; 0x29a <LoginSystem_u8Strcmp+0x6>
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
				break;
			Local_u8Iterator++;
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     2bc:	91 11       	cpse	r25, r1
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <LoginSystem_u8Strcmp+0x34>
     2c0:	22 23       	and	r18, r18
     2c2:	21 f0       	breq	.+8      	; 0x2cc <LoginSystem_u8Strcmp+0x38>
			return TRUE;
		else
			return FALSE;
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	08 95       	ret
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	08 95       	ret
				break;
			Local_u8Iterator++;
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
			return TRUE;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
		else
			return FALSE;
	}
     2ce:	08 95       	ret

000002d0 <main>:
#include "LoginSystem.h"

#include <util/delay.h>

int main (void)
{
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
     2d8:	c5 54       	subi	r28, 0x45	; 69
     2da:	d1 09       	sbc	r29, r1
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	f8 94       	cli
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	0f be       	out	0x3f, r0	; 63
     2e4:	cd bf       	out	0x3d, r28	; 61
/************************************************************************************************************/
/*******************************************INITIALIZATION***************************************************/
	//TWI_Init();
	//EEPROM_enuInit();
	DIO_enuInit();
     2e6:	0e 94 cc 08 	call	0x1198	; 0x1198 <DIO_enuInit>
//	Timer1_enuInit();
	SPI_vInitMaster();
     2ea:	0e 94 fd 09 	call	0x13fa	; 0x13fa <SPI_vInitMaster>
	UART_enuUART_Init();
     2ee:	0e 94 09 0a 	call	0x1412	; 0x1412 <UART_enuUART_Init>
	
	
	LCD_enuInit();
     2f2:	0e 94 9b 07 	call	0xf36	; 0xf36 <LCD_enuInit>
	Keypad_enuInit();
     2f6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Keypad_enuInit>
	DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN1,DIO_u8OUTPUT);
     2fa:	41 e0       	ldi	r20, 0x01	; 1
     2fc:	61 e0       	ldi	r22, 0x01	; 1
     2fe:	83 e0       	ldi	r24, 0x03	; 3
     300:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
	
/***************************************************************************************************/
/* ***********************************************************************************************************/
/************************************************************************************************************/

	__asm("sei");// GIE
     304:	78 94       	sei

	u8 Program_Status_Flag;
	User_t LoginSystem_strAdmin;
	User_t LoginSystem_AstrUsers[MAX_NO_OF_USERS];
	u8 LoginSystem_NumOfRegisteredUsers=0;
     306:	19 ae       	std	Y+57, r1	; 0x39
	u8 LoginSystem_Au8Password[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];

	u8 Keypad_Pressed_Key;
	u8 Current_State=0;
	u8 UART_CHOICE;
	EEPROM_ui8ReadByteFromAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,&Program_Status_Flag);
     308:	be 01       	movw	r22, r28
     30a:	6f 5f       	subi	r22, 0xFF	; 255
     30c:	7f 4f       	sbci	r23, 0xFF	; 255
     30e:	80 e0       	ldi	r24, 0x00	; 0
     310:	0e 94 72 05 	call	0xae4	; 0xae4 <EEPROM_ui8ReadByteFromAddress>
     314:	2f ef       	ldi	r18, 0xFF	; 255
     316:	32 e5       	ldi	r19, 0x52	; 82
     318:	87 e0       	ldi	r24, 0x07	; 7
     31a:	21 50       	subi	r18, 0x01	; 1
     31c:	30 40       	sbci	r19, 0x00	; 0
     31e:	80 40       	sbci	r24, 0x00	; 0
     320:	e1 f7       	brne	.-8      	; 0x31a <main+0x4a>
     322:	00 c0       	rjmp	.+0      	; 0x324 <main+0x54>
     324:	00 00       	nop
	_delay_ms(150);

	LCD_enuDisplayString("Welcome To Smart");
     326:	8a e9       	ldi	r24, 0x9A	; 154
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
	LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     32e:	60 e0       	ldi	r22, 0x00	; 0
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>
	LCD_enuDisplayString("Home !");
     336:	8b ea       	ldi	r24, 0xAB	; 171
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
     33e:	9f ef       	ldi	r25, 0xFF	; 255
     340:	27 ea       	ldi	r18, 0xA7	; 167
     342:	31 e6       	ldi	r19, 0x61	; 97
     344:	91 50       	subi	r25, 0x01	; 1
     346:	20 40       	sbci	r18, 0x00	; 0
     348:	30 40       	sbci	r19, 0x00	; 0
     34a:	e1 f7       	brne	.-8      	; 0x344 <main+0x74>
     34c:	00 c0       	rjmp	.+0      	; 0x34e <main+0x7e>
     34e:	00 00       	nop
	_delay_ms (2000);
	LCD_enuClearDisplay();
     350:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_enuClearDisplay>

	
	
			if (Program_Status_Flag == FIRST_TIME_USE_STATUS)
     354:	89 81       	ldd	r24, Y+1	; 0x01
     356:	8f 3f       	cpi	r24, 0xFF	; 255
     358:	09 f0       	breq	.+2      	; 0x35c <main+0x8c>
     35a:	8f c0       	rjmp	.+286    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			{

				EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,LoginSystem_NumOfRegisteredUsers);
     35c:	69 ad       	ldd	r22, Y+57	; 0x39
     35e:	81 e1       	ldi	r24, 0x11	; 17
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 96 05 	call	0xb2c	; 0xb2c <EEPROM_vWriteByteToAddress>
     366:	8f ef       	ldi	r24, 0xFF	; 255
     368:	92 e5       	ldi	r25, 0x52	; 82
     36a:	27 e0       	ldi	r18, 0x07	; 7
     36c:	81 50       	subi	r24, 0x01	; 1
     36e:	90 40       	sbci	r25, 0x00	; 0
     370:	20 40       	sbci	r18, 0x00	; 0
     372:	e1 f7       	brne	.-8      	; 0x36c <main+0x9c>
     374:	00 c0       	rjmp	.+0      	; 0x376 <main+0xa6>
     376:	00 00       	nop
				_delay_ms(150);
				LCD_enuDisplayString("For First Time");
     378:	82 eb       	ldi	r24, 0xB2	; 178
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     380:	60 e0       	ldi	r22, 0x00	; 0
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Use");
     388:	81 ec       	ldi	r24, 0xC1	; 193
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
     390:	3f ef       	ldi	r19, 0xFF	; 255
     392:	87 ea       	ldi	r24, 0xA7	; 167
     394:	91 e6       	ldi	r25, 0x61	; 97
     396:	31 50       	subi	r19, 0x01	; 1
     398:	80 40       	sbci	r24, 0x00	; 0
     39a:	90 40       	sbci	r25, 0x00	; 0
     39c:	e1 f7       	brne	.-8      	; 0x396 <main+0xc6>
     39e:	00 c0       	rjmp	.+0      	; 0x3a0 <main+0xd0>
     3a0:	00 00       	nop
				_delay_ms(2000);
				LCD_enuClearDisplay();
     3a2:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_enuClearDisplay>
				LCD_enuDisplayString("Register Admin");
     3a6:	85 ec       	ldi	r24, 0xC5	; 197
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	81 e0       	ldi	r24, 0x01	; 1
     3b2:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("on Keypad");
     3b6:	84 ed       	ldi	r24, 0xD4	; 212
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
     3be:	2f ef       	ldi	r18, 0xFF	; 255
     3c0:	37 ea       	ldi	r19, 0xA7	; 167
     3c2:	81 e6       	ldi	r24, 0x61	; 97
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	30 40       	sbci	r19, 0x00	; 0
     3c8:	80 40       	sbci	r24, 0x00	; 0
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <main+0xf4>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0xfe>
     3ce:	00 00       	nop
				_delay_ms(2000);
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_strAdmin.UserName, LoginSystem_strAdmin.Password);
     3d0:	be 01       	movw	r22, r28
     3d2:	69 5f       	subi	r22, 0xF9	; 249
     3d4:	7f 4f       	sbci	r23, 0xFF	; 255
     3d6:	ce 01       	movw	r24, r28
     3d8:	02 96       	adiw	r24, 0x02	; 2
     3da:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LoginSystem_enuGetDataFromUserByKeypad>
				LoginSystem_strAdmin.User_Priority = ADMIN_PRIORITY;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	8c 87       	std	Y+12, r24	; 0x0c
				
				
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS ,LoginSystem_strAdmin.UserName , MAX_NO_OF_LETTERS);
     3e2:	44 e0       	ldi	r20, 0x04	; 4
     3e4:	50 e0       	ldi	r21, 0x00	; 0
     3e6:	be 01       	movw	r22, r28
     3e8:	6e 5f       	subi	r22, 0xFE	; 254
     3ea:	7f 4f       	sbci	r23, 0xFF	; 255
     3ec:	81 e0       	ldi	r24, 0x01	; 1
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 a8 05 	call	0xb50	; 0xb50 <EEPROM_vWriteBlockToAddress>
     3f4:	9f ef       	ldi	r25, 0xFF	; 255
     3f6:	23 ec       	ldi	r18, 0xC3	; 195
     3f8:	39 e0       	ldi	r19, 0x09	; 9
     3fa:	91 50       	subi	r25, 0x01	; 1
     3fc:	20 40       	sbci	r18, 0x00	; 0
     3fe:	30 40       	sbci	r19, 0x00	; 0
     400:	e1 f7       	brne	.-8      	; 0x3fa <main+0x12a>
     402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     404:	00 00       	nop
				_delay_ms(200);
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS ,LoginSystem_strAdmin.Password , MAX_NO_OF_LETTERS);
     406:	44 e0       	ldi	r20, 0x04	; 4
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	be 01       	movw	r22, r28
     40c:	69 5f       	subi	r22, 0xF9	; 249
     40e:	7f 4f       	sbci	r23, 0xFF	; 255
     410:	85 e0       	ldi	r24, 0x05	; 5
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 a8 05 	call	0xb50	; 0xb50 <EEPROM_vWriteBlockToAddress>
     418:	8f ef       	ldi	r24, 0xFF	; 255
     41a:	93 ec       	ldi	r25, 0xC3	; 195
     41c:	29 e0       	ldi	r18, 0x09	; 9
     41e:	81 50       	subi	r24, 0x01	; 1
     420:	90 40       	sbci	r25, 0x00	; 0
     422:	20 40       	sbci	r18, 0x00	; 0
     424:	e1 f7       	brne	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     426:	00 c0       	rjmp	.+0      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
     428:	00 00       	nop
				_delay_ms(200);

				EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,LOAD_LOGIN_SYSTEM_DATABASE);
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	80 e0       	ldi	r24, 0x00	; 0
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	0e 94 96 05 	call	0xb2c	; 0xb2c <EEPROM_vWriteByteToAddress>
     434:	3f ef       	ldi	r19, 0xFF	; 255
     436:	82 e5       	ldi	r24, 0x52	; 82
     438:	97 e0       	ldi	r25, 0x07	; 7
     43a:	31 50       	subi	r19, 0x01	; 1
     43c:	80 40       	sbci	r24, 0x00	; 0
     43e:	90 40       	sbci	r25, 0x00	; 0
     440:	e1 f7       	brne	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
     444:	00 00       	nop
				_delay_ms(150);

				LCD_enuClearDisplay();
     446:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_enuClearDisplay>
				LCD_enuDisplayString("Saved");
     44a:	8e ed       	ldi	r24, 0xDE	; 222
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     452:	60 e0       	ldi	r22, 0x00	; 0
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Successfully");
     45a:	89 e3       	ldi	r24, 0x39	; 57
     45c:	91 e0       	ldi	r25, 0x01	; 1
     45e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
     462:	2f ef       	ldi	r18, 0xFF	; 255
     464:	33 ed       	ldi	r19, 0xD3	; 211
     466:	80 e3       	ldi	r24, 0x30	; 48
     468:	21 50       	subi	r18, 0x01	; 1
     46a:	30 40       	sbci	r19, 0x00	; 0
     46c:	80 40       	sbci	r24, 0x00	; 0
     46e:	e1 f7       	brne	.-8      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
     470:	00 c0       	rjmp	.+0      	; 0x472 <__EEPROM_REGION_LENGTH__+0x72>
     472:	00 00       	nop
				_delay_ms(1000);
				Program_Status_Flag = IDLE_STATUS;
     474:	87 e0       	ldi	r24, 0x07	; 7
     476:	89 83       	std	Y+1, r24	; 0x01
     478:	aa c0       	rjmp	.+340    	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
			}

			/************************************************************************************************************/
			/************************************************************************************************************/

			else if (Program_Status_Flag == LOAD_LOGIN_SYSTEM_DATABASE)
     47a:	81 11       	cpse	r24, r1
     47c:	a8 c0       	rjmp	.+336    	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
			{
				/****************************************Load the Login System database from the EEPROM***************************************/
				EEPROM_ui8ReadByteFromAddress(NO_OF_REGISTERED_USERS_ADDRESS,&LoginSystem_NumOfRegisteredUsers);
     47e:	be 01       	movw	r22, r28
     480:	67 5c       	subi	r22, 0xC7	; 199
     482:	7f 4f       	sbci	r23, 0xFF	; 255
     484:	81 e1       	ldi	r24, 0x11	; 17
     486:	0e 94 72 05 	call	0xae4	; 0xae4 <EEPROM_ui8ReadByteFromAddress>
     48a:	9f ef       	ldi	r25, 0xFF	; 255
     48c:	23 ec       	ldi	r18, 0xC3	; 195
     48e:	39 e0       	ldi	r19, 0x09	; 9
     490:	91 50       	subi	r25, 0x01	; 1
     492:	20 40       	sbci	r18, 0x00	; 0
     494:	30 40       	sbci	r19, 0x00	; 0
     496:	e1 f7       	brne	.-8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     498:	00 c0       	rjmp	.+0      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
     49a:	00 00       	nop
				_delay_ms(200);
				

				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS,LoginSystem_strAdmin.UserName,MAX_NO_OF_LETTERS);
     49c:	44 e0       	ldi	r20, 0x04	; 4
     49e:	50 e0       	ldi	r21, 0x00	; 0
     4a0:	be 01       	movw	r22, r28
     4a2:	6e 5f       	subi	r22, 0xFE	; 254
     4a4:	7f 4f       	sbci	r23, 0xFF	; 255
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 7d 05 	call	0xafa	; 0xafa <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     4ae:	1e 82       	std	Y+6, r1	; 0x06
     4b0:	8f ef       	ldi	r24, 0xFF	; 255
     4b2:	92 e5       	ldi	r25, 0x52	; 82
     4b4:	27 e0       	ldi	r18, 0x07	; 7
     4b6:	81 50       	subi	r24, 0x01	; 1
     4b8:	90 40       	sbci	r25, 0x00	; 0
     4ba:	20 40       	sbci	r18, 0x00	; 0
     4bc:	e1 f7       	brne	.-8      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
     4be:	00 c0       	rjmp	.+0      	; 0x4c0 <__EEPROM_REGION_LENGTH__+0xc0>
     4c0:	00 00       	nop
				_delay_ms(150);
				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS,LoginSystem_strAdmin.Password,MAX_NO_OF_LETTERS);
     4c2:	44 e0       	ldi	r20, 0x04	; 4
     4c4:	50 e0       	ldi	r21, 0x00	; 0
     4c6:	be 01       	movw	r22, r28
     4c8:	69 5f       	subi	r22, 0xF9	; 249
     4ca:	7f 4f       	sbci	r23, 0xFF	; 255
     4cc:	85 e0       	ldi	r24, 0x05	; 5
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 7d 05 	call	0xafa	; 0xafa <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     4d4:	1b 86       	std	Y+11, r1	; 0x0b
     4d6:	3f ef       	ldi	r19, 0xFF	; 255
     4d8:	82 e5       	ldi	r24, 0x52	; 82
     4da:	97 e0       	ldi	r25, 0x07	; 7
     4dc:	31 50       	subi	r19, 0x01	; 1
     4de:	80 40       	sbci	r24, 0x00	; 0
     4e0:	90 40       	sbci	r25, 0x00	; 0
     4e2:	e1 f7       	brne	.-8      	; 0x4dc <__EEPROM_REGION_LENGTH__+0xdc>
     4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <__EEPROM_REGION_LENGTH__+0xe6>
     4e6:	00 00       	nop
				_delay_ms(150);
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	8c 87       	std	Y+12, r24	; 0x0c
     4ec:	2f ef       	ldi	r18, 0xFF	; 255
     4ee:	32 e5       	ldi	r19, 0x52	; 82
     4f0:	87 e0       	ldi	r24, 0x07	; 7
     4f2:	21 50       	subi	r18, 0x01	; 1
     4f4:	30 40       	sbci	r19, 0x00	; 0
     4f6:	80 40       	sbci	r24, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <__EEPROM_REGION_LENGTH__+0xfc>
     4fc:	00 00       	nop
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     4fe:	10 e0       	ldi	r17, 0x00	; 0
     500:	60 c0       	rjmp	.+192    	; 0x5c2 <__EEPROM_REGION_LENGTH__+0x1c2>
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
     502:	81 2f       	mov	r24, r17
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	6c 01       	movw	r12, r24
     508:	cc 0c       	add	r12, r12
     50a:	dd 1c       	adc	r13, r13
     50c:	cc 0c       	add	r12, r12
     50e:	dd 1c       	adc	r13, r13
     510:	cc 0c       	add	r12, r12
     512:	dd 1c       	adc	r13, r13
     514:	c8 0e       	add	r12, r24
     516:	d9 1e       	adc	r13, r25
     518:	46 01       	movw	r8, r12
     51a:	22 e1       	ldi	r18, 0x12	; 18
     51c:	82 0e       	add	r8, r18
     51e:	91 1c       	adc	r9, r1
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     520:	2b e0       	ldi	r18, 0x0B	; 11
     522:	28 9f       	mul	r18, r24
     524:	70 01       	movw	r14, r0
     526:	29 9f       	mul	r18, r25
     528:	f0 0c       	add	r15, r0
     52a:	11 24       	eor	r1, r1
     52c:	6d e0       	ldi	r22, 0x0D	; 13
     52e:	70 e0       	ldi	r23, 0x00	; 0
     530:	6c 0f       	add	r22, r28
     532:	7d 1f       	adc	r23, r29
     534:	6e 0d       	add	r22, r14
     536:	7f 1d       	adc	r23, r15
     538:	44 e0       	ldi	r20, 0x04	; 4
     53a:	50 e0       	ldi	r21, 0x00	; 0
     53c:	c4 01       	movw	r24, r8
     53e:	0e 94 7d 05 	call	0xafa	; 0xafa <EEPROM_vReadBlockFromAddress>
     542:	3f ef       	ldi	r19, 0xFF	; 255
     544:	82 e5       	ldi	r24, 0x52	; 82
     546:	97 e0       	ldi	r25, 0x07	; 7
     548:	31 50       	subi	r19, 0x01	; 1
     54a:	80 40       	sbci	r24, 0x00	; 0
     54c:	90 40       	sbci	r25, 0x00	; 0
     54e:	e1 f7       	brne	.-8      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
     550:	00 c0       	rjmp	.+0      	; 0x552 <__EEPROM_REGION_LENGTH__+0x152>
     552:	00 00       	nop
					_delay_ms(150);

					EEPROM_vReadBlockFromAddress(Local_u16UserAddress + MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].Password,MAX_NO_OF_LETTERS);
     554:	b7 01       	movw	r22, r14
     556:	6b 5f       	subi	r22, 0xFB	; 251
     558:	7f 4f       	sbci	r23, 0xFF	; 255
     55a:	2d e0       	ldi	r18, 0x0D	; 13
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	2c 0f       	add	r18, r28
     560:	3d 1f       	adc	r19, r29
     562:	62 0f       	add	r22, r18
     564:	73 1f       	adc	r23, r19
     566:	44 e0       	ldi	r20, 0x04	; 4
     568:	50 e0       	ldi	r21, 0x00	; 0
     56a:	c6 01       	movw	r24, r12
     56c:	46 96       	adiw	r24, 0x16	; 22
     56e:	0e 94 7d 05 	call	0xafa	; 0xafa <EEPROM_vReadBlockFromAddress>
     572:	3f ef       	ldi	r19, 0xFF	; 255
     574:	82 e5       	ldi	r24, 0x52	; 82
     576:	97 e0       	ldi	r25, 0x07	; 7
     578:	31 50       	subi	r19, 0x01	; 1
     57a:	80 40       	sbci	r24, 0x00	; 0
     57c:	90 40       	sbci	r25, 0x00	; 0
     57e:	e1 f7       	brne	.-8      	; 0x578 <__EEPROM_REGION_LENGTH__+0x178>
     580:	00 c0       	rjmp	.+0      	; 0x582 <__EEPROM_REGION_LENGTH__+0x182>
     582:	00 00       	nop
					_delay_ms(150);
					EEPROM_ui8ReadByteFromAddress(Local_u16UserAddress + 2*MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].User_Priority);
     584:	b7 01       	movw	r22, r14
     586:	66 5f       	subi	r22, 0xF6	; 246
     588:	7f 4f       	sbci	r23, 0xFF	; 255
     58a:	2d e0       	ldi	r18, 0x0D	; 13
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	2c 0f       	add	r18, r28
     590:	3d 1f       	adc	r19, r29
     592:	62 0f       	add	r22, r18
     594:	73 1f       	adc	r23, r19
     596:	88 e0       	ldi	r24, 0x08	; 8
     598:	88 0d       	add	r24, r8
     59a:	0e 94 72 05 	call	0xae4	; 0xae4 <EEPROM_ui8ReadByteFromAddress>
     59e:	3f ef       	ldi	r19, 0xFF	; 255
     5a0:	82 e5       	ldi	r24, 0x52	; 82
     5a2:	97 e0       	ldi	r25, 0x07	; 7
     5a4:	31 50       	subi	r19, 0x01	; 1
     5a6:	80 40       	sbci	r24, 0x00	; 0
     5a8:	90 40       	sbci	r25, 0x00	; 0
     5aa:	e1 f7       	brne	.-8      	; 0x5a4 <__EEPROM_REGION_LENGTH__+0x1a4>
     5ac:	00 c0       	rjmp	.+0      	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
     5ae:	00 00       	nop
					_delay_ms(150);
					LoginSystem_AstrUsers[Local_u8Iterator].UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     5b0:	e1 e0       	ldi	r30, 0x01	; 1
     5b2:	f0 e0       	ldi	r31, 0x00	; 0
     5b4:	ec 0f       	add	r30, r28
     5b6:	fd 1f       	adc	r31, r29
     5b8:	ee 0d       	add	r30, r14
     5ba:	ff 1d       	adc	r31, r15
     5bc:	10 8a       	std	Z+16, r1	; 0x10
					LoginSystem_AstrUsers[Local_u8Iterator].Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     5be:	15 8a       	std	Z+21, r1	; 0x15
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     5c0:	1f 5f       	subi	r17, 0xFF	; 255
     5c2:	89 ad       	ldd	r24, Y+57	; 0x39
     5c4:	18 17       	cp	r17, r24
     5c6:	08 f4       	brcc	.+2      	; 0x5ca <__EEPROM_REGION_LENGTH__+0x1ca>
     5c8:	9c cf       	rjmp	.-200    	; 0x502 <__EEPROM_REGION_LENGTH__+0x102>
				}
				
				


				Program_Status_Flag = IDLE_STATUS;
     5ca:	87 e0       	ldi	r24, 0x07	; 7
     5cc:	89 83       	std	Y+1, r24	; 0x01
			}
			
	while (1)
	{
	UART_enuSendString("PRESS ENTER TO START\r\n");
     5ce:	84 ee       	ldi	r24, 0xE4	; 228
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>

/************************************************************************************************************/
/************************************************************************************************************/


		while (Program_Status_Flag == IDLE_STATUS)
     5d6:	0a c0       	rjmp	.+20     	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
				
			}
			

			u8 Local_u8Data;
			UART_enuRecieveChar(Local_u8Data);
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	90 e0       	ldi	r25, 0x00	; 0
     5dc:	0e 94 18 0a 	call	0x1430	; 0x1430 <UART_enuRecieveChar>
			if(UART_enuCheck_Connection())
     5e0:	0e 94 49 0a 	call	0x1492	; 0x1492 <UART_enuCheck_Connection>
     5e4:	88 23       	and	r24, r24
     5e6:	11 f0       	breq	.+4      	; 0x5ec <__EEPROM_REGION_LENGTH__+0x1ec>
				{
					Program_Status_Flag = ADMIN_LOGIN_PAGE_STATUS;
     5e8:	82 e0       	ldi	r24, 0x02	; 2
     5ea:	89 83       	std	Y+1, r24	; 0x01

/************************************************************************************************************/
/************************************************************************************************************/


		while (Program_Status_Flag == IDLE_STATUS)
     5ec:	89 81       	ldd	r24, Y+1	; 0x01
     5ee:	87 30       	cpi	r24, 0x07	; 7
     5f0:	99 f3       	breq	.-26     	; 0x5d8 <__EEPROM_REGION_LENGTH__+0x1d8>
					Program_Status_Flag = ADMIN_LOGIN_PAGE_STATUS;
				}

		}

		if (Program_Status_Flag == ADMIN_LOGIN_PAGE_STATUS)
     5f2:	82 30       	cpi	r24, 0x02	; 2
     5f4:	09 f0       	breq	.+2      	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
     5f6:	9e c1       	rjmp	.+828    	; 0x934 <__stack+0xd5>
		{
						u8 LoginSystem_u8_AdminTrueFlag;
						u8 LoginSystem_u8_Remoted_USERTrueFlag;
						u8 LoginSystem_u8TrialsLeft =3;
						LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
     5f8:	be 01       	movw	r22, r28
     5fa:	61 5c       	subi	r22, 0xC1	; 193
     5fc:	7f 4f       	sbci	r23, 0xFF	; 255
     5fe:	ce 01       	movw	r24, r28
     600:	ca 96       	adiw	r24, 0x3a	; 58
     602:	0e 94 2d 01 	call	0x25a	; 0x25a <LoginSystem_enuGetDataFromUserBY_UART>


						LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     606:	be 01       	movw	r22, r28
     608:	6e 5f       	subi	r22, 0xFE	; 254
     60a:	7f 4f       	sbci	r23, 0xFF	; 255
     60c:	ce 01       	movw	r24, r28
     60e:	ca 96       	adiw	r24, 0x3a	; 58
     610:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     614:	88 23       	and	r24, r24
     616:	59 f0       	breq	.+22     	; 0x62e <__EEPROM_REGION_LENGTH__+0x22e>
     618:	be 01       	movw	r22, r28
     61a:	69 5f       	subi	r22, 0xF9	; 249
     61c:	7f 4f       	sbci	r23, 0xFF	; 255
     61e:	ce 01       	movw	r24, r28
     620:	cf 96       	adiw	r24, 0x3f	; 63
     622:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     626:	88 23       	and	r24, r24
     628:	21 f0       	breq	.+8      	; 0x632 <__EEPROM_REGION_LENGTH__+0x232>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	03 c0       	rjmp	.+6      	; 0x634 <__EEPROM_REGION_LENGTH__+0x234>
     62e:	80 e0       	ldi	r24, 0x00	; 0
     630:	01 c0       	rjmp	.+2      	; 0x634 <__EEPROM_REGION_LENGTH__+0x234>
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	08 2f       	mov	r16, r24

						if(LoginSystem_u8_AdminTrueFlag == TRUE)
     636:	81 30       	cpi	r24, 0x01	; 1
     638:	09 f0       	breq	.+2      	; 0x63c <__EEPROM_REGION_LENGTH__+0x23c>
     63a:	49 c0       	rjmp	.+146    	; 0x6ce <__EEPROM_REGION_LENGTH__+0x2ce>
						{
							Program_Status_Flag = ADMIN_MENU_STATUS;
     63c:	84 e0       	ldi	r24, 0x04	; 4
     63e:	89 83       	std	Y+1, r24	; 0x01
     640:	4b c0       	rjmp	.+150    	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>
						}
						else
						{
							for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
							{
								LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     642:	e1 2e       	mov	r14, r17
     644:	f1 2c       	mov	r15, r1
     646:	2b e0       	ldi	r18, 0x0B	; 11
     648:	2e 9d       	mul	r18, r14
     64a:	c0 01       	movw	r24, r0
     64c:	2f 9d       	mul	r18, r15
     64e:	90 0d       	add	r25, r0
     650:	11 24       	eor	r1, r1
     652:	be 01       	movw	r22, r28
     654:	66 5c       	subi	r22, 0xC6	; 198
     656:	7f 4f       	sbci	r23, 0xFF	; 255
     658:	2d e0       	ldi	r18, 0x0D	; 13
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	2c 0f       	add	r18, r28
     65e:	3d 1f       	adc	r19, r29
     660:	82 0f       	add	r24, r18
     662:	93 1f       	adc	r25, r19
     664:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     668:	88 23       	and	r24, r24
     66a:	b1 f0       	breq	.+44     	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
     66c:	2b e0       	ldi	r18, 0x0B	; 11
     66e:	2e 9d       	mul	r18, r14
     670:	c0 01       	movw	r24, r0
     672:	2f 9d       	mul	r18, r15
     674:	90 0d       	add	r25, r0
     676:	11 24       	eor	r1, r1
     678:	05 96       	adiw	r24, 0x05	; 5
     67a:	be 01       	movw	r22, r28
     67c:	61 5c       	subi	r22, 0xC1	; 193
     67e:	7f 4f       	sbci	r23, 0xFF	; 255
     680:	2d e0       	ldi	r18, 0x0D	; 13
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	2c 0f       	add	r18, r28
     686:	3d 1f       	adc	r19, r29
     688:	82 0f       	add	r24, r18
     68a:	93 1f       	adc	r25, r19
     68c:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     690:	88 23       	and	r24, r24
     692:	21 f0       	breq	.+8      	; 0x69c <__EEPROM_REGION_LENGTH__+0x29c>
     694:	81 e0       	ldi	r24, 0x01	; 1
     696:	03 c0       	rjmp	.+6      	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	01 c0       	rjmp	.+2      	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
     69c:	80 e0       	ldi	r24, 0x00	; 0
     69e:	a8 2e       	mov	r10, r24
								if (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)
     6a0:	31 e0       	ldi	r19, 0x01	; 1
     6a2:	83 13       	cpse	r24, r19
     6a4:	12 c0       	rjmp	.+36     	; 0x6ca <__EEPROM_REGION_LENGTH__+0x2ca>
								{
									if(LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER ) // pro>>>>   // rem: key or not
     6a6:	8b e0       	ldi	r24, 0x0B	; 11
     6a8:	8e 9d       	mul	r24, r14
     6aa:	f0 01       	movw	r30, r0
     6ac:	8f 9d       	mul	r24, r15
     6ae:	f0 0d       	add	r31, r0
     6b0:	11 24       	eor	r1, r1
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	8c 0f       	add	r24, r28
     6b8:	9d 1f       	adc	r25, r29
     6ba:	e8 0f       	add	r30, r24
     6bc:	f9 1f       	adc	r31, r25
     6be:	86 89       	ldd	r24, Z+22	; 0x16
     6c0:	82 30       	cpi	r24, 0x02	; 2
     6c2:	51 f4       	brne	.+20     	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>
									Program_Status_Flag = REMOTED_USER_MENU_STATUS;
     6c4:	88 e0       	ldi	r24, 0x08	; 8
     6c6:	89 83       	std	Y+1, r24	; 0x01
     6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>
						{
							Program_Status_Flag = ADMIN_MENU_STATUS;
						}
						else
						{
							for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     6ca:	1f 5f       	subi	r17, 0xFF	; 255
     6cc:	01 c0       	rjmp	.+2      	; 0x6d0 <__EEPROM_REGION_LENGTH__+0x2d0>
     6ce:	10 e0       	ldi	r17, 0x00	; 0
     6d0:	89 ad       	ldd	r24, Y+57	; 0x39
     6d2:	18 17       	cp	r17, r24
     6d4:	08 f4       	brcc	.+2      	; 0x6d8 <__EEPROM_REGION_LENGTH__+0x2d8>
     6d6:	b5 cf       	rjmp	.-150    	; 0x642 <__EEPROM_REGION_LENGTH__+0x242>
							}

						}


						if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
     6d8:	01 11       	cpse	r16, r1
     6da:	20 c0       	rjmp	.+64     	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
     6dc:	a1 10       	cpse	r10, r1
     6de:	1e c0       	rjmp	.+60     	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
						{
							LoginSystem_u8TrialsLeft--;
							UART_enuSendString("\r\nWrong Username or Password");
     6e0:	8b ef       	ldi	r24, 0xFB	; 251
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
     6e8:	9f ef       	ldi	r25, 0xFF	; 255
     6ea:	25 ea       	ldi	r18, 0xA5	; 165
     6ec:	3e e0       	ldi	r19, 0x0E	; 14
     6ee:	91 50       	subi	r25, 0x01	; 1
     6f0:	20 40       	sbci	r18, 0x00	; 0
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	e1 f7       	brne	.-8      	; 0x6ee <__EEPROM_REGION_LENGTH__+0x2ee>
     6f6:	00 c0       	rjmp	.+0      	; 0x6f8 <__EEPROM_REGION_LENGTH__+0x2f8>
     6f8:	00 00       	nop
							_delay_ms(300);
							UART_enuSendString("\r\nRemaining Trials: ");
     6fa:	88 e1       	ldi	r24, 0x18	; 24
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
							UART_enuSendChar('0'+LoginSystem_u8TrialsLeft);
     702:	82 e3       	ldi	r24, 0x32	; 50
     704:	0e 94 13 0a 	call	0x1426	; 0x1426 <UART_enuSendChar>
     708:	8f ef       	ldi	r24, 0xFF	; 255
     70a:	93 ed       	ldi	r25, 0xD3	; 211
     70c:	20 e3       	ldi	r18, 0x30	; 48
     70e:	81 50       	subi	r24, 0x01	; 1
     710:	90 40       	sbci	r25, 0x00	; 0
     712:	20 40       	sbci	r18, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <__EEPROM_REGION_LENGTH__+0x30e>
     716:	00 c0       	rjmp	.+0      	; 0x718 <__EEPROM_REGION_LENGTH__+0x318>
     718:	00 00       	nop
     71a:	0c c1       	rjmp	.+536    	; 0x934 <__stack+0xd5>
								Program_Status_Flag = BLOCKING_STATUS;
							}
						}
						else
						{
							UART_enuSendString("\r\nLogged in Successfully");
     71c:	8d e2       	ldi	r24, 0x2D	; 45
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
     724:	3f ef       	ldi	r19, 0xFF	; 255
     726:	89 e6       	ldi	r24, 0x69	; 105
     728:	98 e1       	ldi	r25, 0x18	; 24
     72a:	31 50       	subi	r19, 0x01	; 1
     72c:	80 40       	sbci	r24, 0x00	; 0
     72e:	90 40       	sbci	r25, 0x00	; 0
     730:	e1 f7       	brne	.-8      	; 0x72a <__EEPROM_REGION_LENGTH__+0x32a>
     732:	00 c0       	rjmp	.+0      	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
     734:	00 00       	nop
     736:	fe c0       	rjmp	.+508    	; 0x934 <__stack+0xd5>
		}
		*/
		while (Program_Status_Flag == ADMIN_MENU_STATUS)
		{
			u8 ShowToUser = MAIN_MENU;
			UART_enuSendString("\r\nWelcome Admin:\n");
     738:	86 e4       	ldi	r24, 0x46	; 70
     73a:	91 e0       	ldi	r25, 0x01	; 1
     73c:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
			UART_enuSendString(LoginSystem_strAdmin.UserName);
     740:	ce 01       	movw	r24, r28
     742:	02 96       	adiw	r24, 0x02	; 2
     744:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
     748:	2f ef       	ldi	r18, 0xFF	; 255
     74a:	39 e6       	ldi	r19, 0x69	; 105
     74c:	88 e1       	ldi	r24, 0x18	; 24
     74e:	21 50       	subi	r18, 0x01	; 1
     750:	30 40       	sbci	r19, 0x00	; 0
     752:	80 40       	sbci	r24, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <__EEPROM_REGION_LENGTH__+0x34e>
     756:	00 c0       	rjmp	.+0      	; 0x758 <__EEPROM_REGION_LENGTH__+0x358>
     758:	00 00       	nop

		}
		*/
		while (Program_Status_Flag == ADMIN_MENU_STATUS)
		{
			u8 ShowToUser = MAIN_MENU;
     75a:	10 e0       	ldi	r17, 0x00	; 0
     75c:	65 c0       	rjmp	.+202    	; 0x828 <__DATA_REGION_LENGTH__+0x28>
			_delay_ms(500);
	

			while(ShowToUser == MAIN_MENU)
			{
				UART_enuSendString("\r\n1-Add User");
     75e:	88 e5       	ldi	r24, 0x58	; 88
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuSendString("\r\n2-Remove User");
     766:	85 e6       	ldi	r24, 0x65	; 101
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuSendString("\r\n3-Room1");
     76e:	85 e7       	ldi	r24, 0x75	; 117
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuSendString("\r\n4-Room2");
     776:	8f e7       	ldi	r24, 0x7F	; 127
     778:	91 e0       	ldi	r25, 0x01	; 1
     77a:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuSendString("\r\n5-Room3");
     77e:	89 e8       	ldi	r24, 0x89	; 137
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuSendString("\r\n6-Room4");
     786:	83 e9       	ldi	r24, 0x93	; 147
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuSendString("\r\n7-Room5");
     78e:	8d e9       	ldi	r24, 0x9D	; 157
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuSendString("\r\n8-Dimmer");
     796:	87 ea       	ldi	r24, 0xA7	; 167
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuSendString("\r\n9-Door\r\n");
     79e:	82 eb       	ldi	r24, 0xB2	; 178
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
			//	UART_enuSendString("\r\n10-Air Conditioner\r\n");
				
				UART_enuRecieveChar(&UART_CHOICE);
     7a6:	ce 01       	movw	r24, r28
     7a8:	8b 5b       	subi	r24, 0xBB	; 187
     7aa:	9f 4f       	sbci	r25, 0xFF	; 255
     7ac:	0e 94 18 0a 	call	0x1430	; 0x1430 <UART_enuRecieveChar>
				switch(UART_CHOICE)
     7b0:	26 96       	adiw	r28, 0x06	; 6
     7b2:	ef ad       	ldd	r30, Y+63	; 0x3f
     7b4:	26 97       	sbiw	r28, 0x06	; 6
     7b6:	8e 2f       	mov	r24, r30
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	fc 01       	movw	r30, r24
     7bc:	f1 97       	sbiw	r30, 0x31	; 49
     7be:	e9 30       	cpi	r30, 0x09	; 9
     7c0:	f1 05       	cpc	r31, r1
     7c2:	18 f5       	brcc	.+70     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
     7c4:	e6 5d       	subi	r30, 0xD6	; 214
     7c6:	ff 4f       	sbci	r31, 0xFF	; 255
     7c8:	0c 94 70 0a 	jmp	0x14e0	; 0x14e0 <__tablejump2__>
				{
					case '1':
					ShowToUser = ADD_USER_COMMAND;
     7cc:	16 e0       	ldi	r17, 0x06	; 6
     7ce:	2c c0       	rjmp	.+88     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
					break;
					case '2':
					ShowToUser = REMOVE_USER_COMMAND;
					break;
					case '3':
					SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	0e 94 04 0a 	call	0x1408	; 0x1408 <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
     7d6:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     7d8:	27 c0       	rjmp	.+78     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
					case '4':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
     7da:	82 e0       	ldi	r24, 0x02	; 2
     7dc:	0e 94 04 0a 	call	0x1408	; 0x1408 <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
     7e0:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     7e2:	22 c0       	rjmp	.+68     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
					case '5':
					SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
     7e4:	83 e0       	ldi	r24, 0x03	; 3
     7e6:	0e 94 04 0a 	call	0x1408	; 0x1408 <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     7ea:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     7ec:	1d c0       	rjmp	.+58     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
					case '6':
					SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
     7ee:	84 e0       	ldi	r24, 0x04	; 4
     7f0:	0e 94 04 0a 	call	0x1408	; 0x1408 <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     7f4:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     7f6:	18 c0       	rjmp	.+48     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
					case '7':
					SPI_ui8TransmitRecive(ROOM5_LED_TOGGLE);
     7f8:	85 e0       	ldi	r24, 0x05	; 5
     7fa:	0e 94 04 0a 	call	0x1408	; 0x1408 <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     7fe:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     800:	13 c0       	rjmp	.+38     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
					case '8':
					ShowToUser = DIMMER_MENU;
     802:	18 e0       	ldi	r17, 0x08	; 8
					break;
     804:	11 c0       	rjmp	.+34     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
					case '9':
					ShowToUser = DOOR_MENU;
     806:	1a e0       	ldi	r17, 0x0A	; 10
					break;
     808:	0f c0       	rjmp	.+30     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
					/*case '10':
					ShowToUser = AIR_COND_MENU;
					break;
					*/
					default:
					UART_enuSendString("\r\nInvalid Choice");
     80a:	8d eb       	ldi	r24, 0xBD	; 189
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
     812:	9f ef       	ldi	r25, 0xFF	; 255
     814:	23 ed       	ldi	r18, 0xD3	; 211
     816:	30 e3       	ldi	r19, 0x30	; 48
     818:	91 50       	subi	r25, 0x01	; 1
     81a:	20 40       	sbci	r18, 0x00	; 0
     81c:	30 40       	sbci	r19, 0x00	; 0
     81e:	e1 f7       	brne	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     820:	00 c0       	rjmp	.+0      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     822:	00 00       	nop
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
					break;
     824:	01 c0       	rjmp	.+2      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
				{
					case '1':
					ShowToUser = ADD_USER_COMMAND;
					break;
					case '2':
					ShowToUser = REMOVE_USER_COMMAND;
     826:	17 e0       	ldi	r17, 0x07	; 7
			UART_enuSendString("\r\nWelcome Admin:\n");
			UART_enuSendString(LoginSystem_strAdmin.UserName);
			_delay_ms(500);
	

			while(ShowToUser == MAIN_MENU)
     828:	11 23       	and	r17, r17
     82a:	09 f4       	brne	.+2      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     82c:	98 cf       	rjmp	.-208    	; 0x75e <__EEPROM_REGION_LENGTH__+0x35e>
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
					break;
				}
			}
			switch (ShowToUser)
     82e:	16 30       	cpi	r17, 0x06	; 6
     830:	09 f0       	breq	.+2      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     832:	80 c0       	rjmp	.+256    	; 0x934 <__stack+0xd5>
			{
				case ADD_USER_COMMAND:
				LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     834:	89 ad       	ldd	r24, Y+57	; 0x39
     836:	2b e0       	ldi	r18, 0x0B	; 11
     838:	82 9f       	mul	r24, r18
     83a:	c0 01       	movw	r24, r0
     83c:	11 24       	eor	r1, r1
     83e:	bc 01       	movw	r22, r24
     840:	6b 5f       	subi	r22, 0xFB	; 251
     842:	7f 4f       	sbci	r23, 0xFF	; 255
     844:	2d e0       	ldi	r18, 0x0D	; 13
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	2c 0f       	add	r18, r28
     84a:	3d 1f       	adc	r19, r29
     84c:	62 0f       	add	r22, r18
     84e:	73 1f       	adc	r23, r19
     850:	82 0f       	add	r24, r18
     852:	93 1f       	adc	r25, r19
     854:	0e 94 2d 01 	call	0x25a	; 0x25a <LoginSystem_enuGetDataFromUserBY_UART>
				UART_enuSendString("\r\n1-Remoted");
     858:	8e ec       	ldi	r24, 0xCE	; 206
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuSendString("\r\n2-Promoted");
     860:	8a ed       	ldi	r24, 0xDA	; 218
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuSendString("\r\n3-Nonremoted");
     868:	87 ee       	ldi	r24, 0xE7	; 231
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuSendString("\r\nPriority Arrangment: Promoted > Nonremoted (LCD+Keypad) > Remoted");
     870:	86 ef       	ldi	r24, 0xF6	; 246
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
				UART_enuRecieveChar(&UART_CHOICE);
     878:	ce 01       	movw	r24, r28
     87a:	8b 5b       	subi	r24, 0xBB	; 187
     87c:	9f 4f       	sbci	r25, 0xFF	; 255
     87e:	0e 94 18 0a 	call	0x1430	; 0x1430 <UART_enuRecieveChar>
				/////////////////////////////////////////////////////////////fel
				if (UART_CHOICE == '1')
     882:	26 96       	adiw	r28, 0x06	; 6
     884:	8f ad       	ldd	r24, Y+63	; 0x3f
     886:	26 97       	sbiw	r28, 0x06	; 6
     888:	81 33       	cpi	r24, 0x31	; 49
     88a:	69 f4       	brne	.+26     	; 0x8a6 <__stack+0x47>
				LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = REMOTED_USER;
     88c:	89 ad       	ldd	r24, Y+57	; 0x39
     88e:	e1 e0       	ldi	r30, 0x01	; 1
     890:	f0 e0       	ldi	r31, 0x00	; 0
     892:	ec 0f       	add	r30, r28
     894:	fd 1f       	adc	r31, r29
     896:	3b e0       	ldi	r19, 0x0B	; 11
     898:	83 9f       	mul	r24, r19
     89a:	e0 0d       	add	r30, r0
     89c:	f1 1d       	adc	r31, r1
     89e:	11 24       	eor	r1, r1
     8a0:	82 e0       	ldi	r24, 0x02	; 2
     8a2:	86 8b       	std	Z+22, r24	; 0x16
     8a4:	2a c0       	rjmp	.+84     	; 0x8fa <__stack+0x9b>
				else if (UART_CHOICE == '2')
     8a6:	82 33       	cpi	r24, 0x32	; 50
     8a8:	69 f4       	brne	.+26     	; 0x8c4 <__stack+0x65>
				LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = PROMOTED_USER;
     8aa:	89 ad       	ldd	r24, Y+57	; 0x39
     8ac:	e1 e0       	ldi	r30, 0x01	; 1
     8ae:	f0 e0       	ldi	r31, 0x00	; 0
     8b0:	ec 0f       	add	r30, r28
     8b2:	fd 1f       	adc	r31, r29
     8b4:	9b e0       	ldi	r25, 0x0B	; 11
     8b6:	89 9f       	mul	r24, r25
     8b8:	e0 0d       	add	r30, r0
     8ba:	f1 1d       	adc	r31, r1
     8bc:	11 24       	eor	r1, r1
     8be:	83 e0       	ldi	r24, 0x03	; 3
     8c0:	86 8b       	std	Z+22, r24	; 0x16
     8c2:	1b c0       	rjmp	.+54     	; 0x8fa <__stack+0x9b>
				else if (UART_CHOICE == '3')
     8c4:	83 33       	cpi	r24, 0x33	; 51
     8c6:	61 f4       	brne	.+24     	; 0x8e0 <__stack+0x81>
				LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = NORMAL_USER;
     8c8:	89 ad       	ldd	r24, Y+57	; 0x39
     8ca:	e1 e0       	ldi	r30, 0x01	; 1
     8cc:	f0 e0       	ldi	r31, 0x00	; 0
     8ce:	ec 0f       	add	r30, r28
     8d0:	fd 1f       	adc	r31, r29
     8d2:	2b e0       	ldi	r18, 0x0B	; 11
     8d4:	82 9f       	mul	r24, r18
     8d6:	e0 0d       	add	r30, r0
     8d8:	f1 1d       	adc	r31, r1
     8da:	11 24       	eor	r1, r1
     8dc:	16 8a       	std	Z+22, r1	; 0x16
     8de:	0d c0       	rjmp	.+26     	; 0x8fa <__stack+0x9b>
				else{
				UART_enuSendString("\r\nInvalid Choice");/////////////////////////////////////////////////////////////fel a5er
     8e0:	8d eb       	ldi	r24, 0xBD	; 189
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 1f 0a 	call	0x143e	; 0x143e <UART_enuSendString>
     8e8:	3f ef       	ldi	r19, 0xFF	; 255
     8ea:	83 ed       	ldi	r24, 0xD3	; 211
     8ec:	90 e3       	ldi	r25, 0x30	; 48
     8ee:	31 50       	subi	r19, 0x01	; 1
     8f0:	80 40       	sbci	r24, 0x00	; 0
     8f2:	90 40       	sbci	r25, 0x00	; 0
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <__stack+0x8f>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <__stack+0x99>
     8f8:	00 00       	nop
				_delay_ms(1000);}
				LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);	
     8fa:	89 ad       	ldd	r24, Y+57	; 0x39
     8fc:	a1 e0       	ldi	r26, 0x01	; 1
     8fe:	b0 e0       	ldi	r27, 0x00	; 0
     900:	ac 0f       	add	r26, r28
     902:	bd 1f       	adc	r27, r29
     904:	2b e0       	ldi	r18, 0x0B	; 11
     906:	82 9f       	mul	r24, r18
     908:	a0 0d       	add	r26, r0
     90a:	b1 1d       	adc	r27, r1
     90c:	11 24       	eor	r1, r1
     90e:	fd 01       	movw	r30, r26
     910:	3c 96       	adiw	r30, 0x0c	; 12
     912:	ce 01       	movw	r24, r28
     914:	c9 96       	adiw	r24, 0x39	; 57
     916:	6c 01       	movw	r12, r24
     918:	1c 96       	adiw	r26, 0x0c	; 12
     91a:	ec 90       	ld	r14, X
     91c:	f1 80       	ldd	r15, Z+1	; 0x01
     91e:	02 81       	ldd	r16, Z+2	; 0x02
     920:	13 81       	ldd	r17, Z+3	; 0x03
     922:	24 81       	ldd	r18, Z+4	; 0x04
     924:	35 81       	ldd	r19, Z+5	; 0x05
     926:	46 81       	ldd	r20, Z+6	; 0x06
     928:	57 81       	ldd	r21, Z+7	; 0x07
     92a:	60 85       	ldd	r22, Z+8	; 0x08
     92c:	71 85       	ldd	r23, Z+9	; 0x09
     92e:	82 85       	ldd	r24, Z+10	; 0x0a
     930:	0e 94 52 00 	call	0xa4	; 0xa4 <LoginSystem_SaveNewUser>
				_delay_ms(200);
			}

		}
		*/
		while (Program_Status_Flag == ADMIN_MENU_STATUS)
     934:	89 81       	ldd	r24, Y+1	; 0x01
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	09 f4       	brne	.+2      	; 0x93c <__stack+0xdd>
     93a:	fe ce       	rjmp	.-516    	; 0x738 <__EEPROM_REGION_LENGTH__+0x338>
				
			
		}
		
					
		if (Program_Status_Flag == USER_LOGIN_PAGE_STATUS)///offline user should have interrupt
     93c:	83 30       	cpi	r24, 0x03	; 3
     93e:	09 f0       	breq	.+2      	; 0x942 <__stack+0xe3>
     940:	8b c0       	rjmp	.+278    	; 0xa58 <__stack+0x1f9>
			{

				u8 LoginSystem_u8TrueFlag;
				u8 LoginSystem_u8TrialsLeft =3;

				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
     942:	be 01       	movw	r22, r28
     944:	61 5c       	subi	r22, 0xC1	; 193
     946:	7f 4f       	sbci	r23, 0xFF	; 255
     948:	ce 01       	movw	r24, r28
     94a:	ca 96       	adiw	r24, 0x3a	; 58
     94c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LoginSystem_enuGetDataFromUserByKeypad>
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     950:	10 e0       	ldi	r17, 0x00	; 0
     952:	33 c0       	rjmp	.+102    	; 0x9ba <__stack+0x15b>
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     954:	e1 2e       	mov	r14, r17
     956:	f1 2c       	mov	r15, r1
     958:	2b e0       	ldi	r18, 0x0B	; 11
     95a:	2e 9d       	mul	r18, r14
     95c:	c0 01       	movw	r24, r0
     95e:	2f 9d       	mul	r18, r15
     960:	90 0d       	add	r25, r0
     962:	11 24       	eor	r1, r1
     964:	be 01       	movw	r22, r28
     966:	66 5c       	subi	r22, 0xC6	; 198
     968:	7f 4f       	sbci	r23, 0xFF	; 255
     96a:	2d e0       	ldi	r18, 0x0D	; 13
     96c:	30 e0       	ldi	r19, 0x00	; 0
     96e:	2c 0f       	add	r18, r28
     970:	3d 1f       	adc	r19, r29
     972:	82 0f       	add	r24, r18
     974:	93 1f       	adc	r25, r19
     976:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     97a:	88 23       	and	r24, r24
     97c:	b1 f0       	breq	.+44     	; 0x9aa <__stack+0x14b>
     97e:	2b e0       	ldi	r18, 0x0B	; 11
     980:	2e 9d       	mul	r18, r14
     982:	c0 01       	movw	r24, r0
     984:	2f 9d       	mul	r18, r15
     986:	90 0d       	add	r25, r0
     988:	11 24       	eor	r1, r1
     98a:	05 96       	adiw	r24, 0x05	; 5
     98c:	be 01       	movw	r22, r28
     98e:	61 5c       	subi	r22, 0xC1	; 193
     990:	7f 4f       	sbci	r23, 0xFF	; 255
     992:	2d e0       	ldi	r18, 0x0D	; 13
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	2c 0f       	add	r18, r28
     998:	3d 1f       	adc	r19, r29
     99a:	82 0f       	add	r24, r18
     99c:	93 1f       	adc	r25, r19
     99e:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     9a2:	88 23       	and	r24, r24
     9a4:	21 f0       	breq	.+8      	; 0x9ae <__stack+0x14f>
     9a6:	81 e0       	ldi	r24, 0x01	; 1
     9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <__stack+0x151>
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	01 c0       	rjmp	.+2      	; 0x9b0 <__stack+0x151>
     9ae:	80 e0       	ldi	r24, 0x00	; 0
     9b0:	b8 2e       	mov	r11, r24
					if (LoginSystem_u8TrueFlag == TRUE)
     9b2:	31 e0       	ldi	r19, 0x01	; 1
     9b4:	83 17       	cp	r24, r19
     9b6:	21 f0       	breq	.+8      	; 0x9c0 <__stack+0x161>
				u8 LoginSystem_u8TrueFlag;
				u8 LoginSystem_u8TrialsLeft =3;

				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     9b8:	1f 5f       	subi	r17, 0xFF	; 255
     9ba:	89 ad       	ldd	r24, Y+57	; 0x39
     9bc:	18 17       	cp	r17, r24
     9be:	50 f2       	brcs	.-108    	; 0x954 <__stack+0xf5>
					{
						break;
					}
				}

				if (LoginSystem_u8TrueFlag == FALSE)
     9c0:	b1 10       	cpse	r11, r1
     9c2:	31 c0       	rjmp	.+98     	; 0xa26 <__stack+0x1c7>
				{
					LoginSystem_u8TrialsLeft--;
					LCD_enuClearDisplay();
     9c4:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_enuClearDisplay>
					LCD_enuDisplayString("Wrong Username");
     9c8:	8a e3       	ldi	r24, 0x3A	; 58
     9ca:	92 e0       	ldi	r25, 0x02	; 2
     9cc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("or Password");
     9d8:	8c e0       	ldi	r24, 0x0C	; 12
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	92 e5       	ldi	r25, 0x52	; 82
     9e4:	27 e0       	ldi	r18, 0x07	; 7
     9e6:	81 50       	subi	r24, 0x01	; 1
     9e8:	90 40       	sbci	r25, 0x00	; 0
     9ea:	20 40       	sbci	r18, 0x00	; 0
     9ec:	e1 f7       	brne	.-8      	; 0x9e6 <__stack+0x187>
     9ee:	00 c0       	rjmp	.+0      	; 0x9f0 <__stack+0x191>
     9f0:	00 00       	nop
					_delay_ms(150);
					LCD_enuClearDisplay();
     9f2:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_enuClearDisplay>
					LCD_enuDisplayString("Remaining Trials: ");
     9f6:	8a e1       	ldi	r24, 0x1A	; 26
     9f8:	91 e0       	ldi	r25, 0x01	; 1
     9fa:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
     a06:	62 e0       	ldi	r22, 0x02	; 2
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 05 08 	call	0x100a	; 0x100a <LCD_enuDisplayUnsignedInteger>
     a12:	3f ef       	ldi	r19, 0xFF	; 255
     a14:	82 e5       	ldi	r24, 0x52	; 82
     a16:	97 e0       	ldi	r25, 0x07	; 7
     a18:	31 50       	subi	r19, 0x01	; 1
     a1a:	80 40       	sbci	r24, 0x00	; 0
     a1c:	90 40       	sbci	r25, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <__stack+0x1b9>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <__stack+0x1c3>
     a22:	00 00       	nop
     a24:	19 c0       	rjmp	.+50     	; 0xa58 <__stack+0x1f9>
						Program_Status_Flag = BLOCKING_STATUS;
					}
				}
				else
				{
					LCD_enuClearDisplay();
     a26:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_enuClearDisplay>
					LCD_enuDisplayString("Logged in");
     a2a:	89 e4       	ldi	r24, 0x49	; 73
     a2c:	92 e0       	ldi	r25, 0x02	; 2
     a2e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Successfully");
     a3a:	89 e3       	ldi	r24, 0x39	; 57
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
     a42:	2f ef       	ldi	r18, 0xFF	; 255
     a44:	3d e2       	ldi	r19, 0x2D	; 45
     a46:	82 e2       	ldi	r24, 0x22	; 34
     a48:	21 50       	subi	r18, 0x01	; 1
     a4a:	30 40       	sbci	r19, 0x00	; 0
     a4c:	80 40       	sbci	r24, 0x00	; 0
     a4e:	e1 f7       	brne	.-8      	; 0xa48 <__stack+0x1e9>
     a50:	00 c0       	rjmp	.+0      	; 0xa52 <__stack+0x1f3>
     a52:	00 00       	nop
					_delay_ms(700);
					Program_Status_Flag = USER_MENU_STATUS;
     a54:	85 e0       	ldi	r24, 0x05	; 5
     a56:	89 83       	std	Y+1, r24	; 0x01


/************************************************************************************************************/
/************************************************************************************************************/

		if (Program_Status_Flag == USER_MENU_STATUS)//**offline user menu
     a58:	89 81       	ldd	r24, Y+1	; 0x01
     a5a:	85 30       	cpi	r24, 0x05	; 5
     a5c:	09 f0       	breq	.+2      	; 0xa60 <__stack+0x201>
     a5e:	b7 cd       	rjmp	.-1170   	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>
		{
							LCD_enuClearDisplay();
     a60:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_enuClearDisplay>
							LCD_enuDisplayString("Welcome User");
     a64:	83 e5       	ldi	r24, 0x53	; 83
     a66:	92 e0       	ldi	r25, 0x02	; 2
     a68:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     a6c:	60 e0       	ldi	r22, 0x00	; 0
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>
							LCD_enuDisplayString(LoginSystem_strAdmin.UserName);
     a74:	ce 01       	movw	r24, r28
     a76:	02 96       	adiw	r24, 0x02	; 2
     a78:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
     a7c:	9f ef       	ldi	r25, 0xFF	; 255
     a7e:	29 e6       	ldi	r18, 0x69	; 105
     a80:	38 e1       	ldi	r19, 0x18	; 24
     a82:	91 50       	subi	r25, 0x01	; 1
     a84:	20 40       	sbci	r18, 0x00	; 0
     a86:	30 40       	sbci	r19, 0x00	; 0
     a88:	e1 f7       	brne	.-8      	; 0xa82 <__stack+0x223>
     a8a:	00 c0       	rjmp	.+0      	; 0xa8c <__stack+0x22d>
     a8c:	00 00       	nop
							_delay_ms(500);
							LCD_enuClearDisplay();
     a8e:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_enuClearDisplay>
							LCD_enuDisplayString("1-Lights 2-Dimmer");
     a92:	80 e6       	ldi	r24, 0x60	; 96
     a94:	92 e0       	ldi	r25, 0x02	; 2
     a96:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     a9a:	60 e0       	ldi	r22, 0x00	; 0
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	0e 94 9d 08 	call	0x113a	; 0x113a <LCD_enuSetCursorPosition>
							LCD_enuDisplayString("3-Air Cond");
     aa2:	82 e7       	ldi	r24, 0x72	; 114
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
							Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
     aaa:	ce 01       	movw	r24, r28
     aac:	8c 5b       	subi	r24, 0xBC	; 188
     aae:	9f 4f       	sbci	r25, 0xFF	; 255
     ab0:	0e 94 21 06 	call	0xc42	; 0xc42 <Keypad_enuGetPressedKey>
							switch (Keypad_Pressed_Key)
     ab4:	25 96       	adiw	r28, 0x05	; 5
     ab6:	8f ad       	ldd	r24, Y+63	; 0x3f
     ab8:	25 97       	sbiw	r28, 0x05	; 5
     aba:	81 53       	subi	r24, 0x31	; 49
     abc:	83 30       	cpi	r24, 0x03	; 3
     abe:	78 f0       	brcs	.+30     	; 0xade <__stack+0x27f>
								//////////////
								break;


								default:
								LCD_enuClearDisplay();
     ac0:	0e 94 bf 08 	call	0x117e	; 0x117e <LCD_enuClearDisplay>
								LCD_enuDisplayString("Invalid Choice");
     ac4:	8f eb       	ldi	r24, 0xBF	; 191
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <LCD_enuDisplayString>
     acc:	8f ef       	ldi	r24, 0xFF	; 255
     ace:	93 ec       	ldi	r25, 0xC3	; 195
     ad0:	29 e0       	ldi	r18, 0x09	; 9
     ad2:	81 50       	subi	r24, 0x01	; 1
     ad4:	90 40       	sbci	r25, 0x00	; 0
     ad6:	20 40       	sbci	r18, 0x00	; 0
     ad8:	e1 f7       	brne	.-8      	; 0xad2 <__stack+0x273>
     ada:	00 c0       	rjmp	.+0      	; 0xadc <__stack+0x27d>
     adc:	00 00       	nop
								_delay_ms(200);
								break;
								}
							Program_Status_Flag = IDLE_STATUS;
     ade:	87 e0       	ldi	r24, 0x07	; 7
     ae0:	89 83       	std	Y+1, r24	; 0x01
     ae2:	75 cd       	rjmp	.-1302   	; 0x5ce <__EEPROM_REGION_LENGTH__+0x1ce>

00000ae4 <EEPROM_ui8ReadByteFromAddress>:


void EEPROM_ui8ReadByteFromAddress( const u16 u16Address ,  u8 * data)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1);
     ae4:	e1 99       	sbic	0x1c, 1	; 28
     ae6:	fe cf       	rjmp	.-4      	; 0xae4 <EEPROM_ui8ReadByteFromAddress>
	/* Set up address register */
	EEAR = u16Address;
     ae8:	9f bb       	out	0x1f, r25	; 31
     aea:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
     aec:	8c b3       	in	r24, 0x1c	; 28
     aee:	81 60       	ori	r24, 0x01	; 1
     af0:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	* data = EEDR;
     af2:	8d b3       	in	r24, 0x1d	; 29
     af4:	fb 01       	movw	r30, r22
     af6:	80 83       	st	Z, r24
     af8:	08 95       	ret

00000afa <EEPROM_vReadBlockFromAddress>:
	//return 1;
}

void EEPROM_vReadBlockFromAddress(const u16 uAddress, u8* dist,const u16 size)
{
     afa:	dc 01       	movw	r26, r24
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     afc:	e1 99       	sbic	0x1c, 1	; 28
     afe:	fe cf       	rjmp	.-4      	; 0xafc <EEPROM_vReadBlockFromAddress+0x2>
     b00:	20 e0       	ldi	r18, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	0f c0       	rjmp	.+30     	; 0xb24 <EEPROM_vReadBlockFromAddress+0x2a>
	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uAddress + counter;
     b06:	f9 01       	movw	r30, r18
     b08:	ea 0f       	add	r30, r26
     b0a:	fb 1f       	adc	r31, r27
     b0c:	ff bb       	out	0x1f, r31	; 31
     b0e:	ee bb       	out	0x1e, r30	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
     b10:	9c b3       	in	r25, 0x1c	; 28
     b12:	91 60       	ori	r25, 0x01	; 1
     b14:	9c bb       	out	0x1c, r25	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
     b16:	fb 01       	movw	r30, r22
     b18:	e2 0f       	add	r30, r18
     b1a:	f3 1f       	adc	r31, r19
     b1c:	9d b3       	in	r25, 0x1d	; 29
     b1e:	90 83       	st	Z, r25

		counter++;//increase the bytes counter
     b20:	2f 5f       	subi	r18, 0xFF	; 255
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     b24:	24 17       	cp	r18, r20
     b26:	35 07       	cpc	r19, r21
     b28:	70 f3       	brcs	.-36     	; 0xb06 <EEPROM_vReadBlockFromAddress+0xc>
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
     b2a:	08 95       	ret

00000b2c <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16 uiAddress, const u8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     b2c:	e1 99       	sbic	0x1c, 1	; 28
     b2e:	fe cf       	rjmp	.-4      	; 0xb2c <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
     b30:	9f bb       	out	0x1f, r25	; 31
     b32:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
     b34:	8c b3       	in	r24, 0x1c	; 28
     b36:	81 60       	ori	r24, 0x01	; 1
     b38:	8c bb       	out	0x1c, r24	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
     b3a:	8d b3       	in	r24, 0x1d	; 29
     b3c:	86 17       	cp	r24, r22
     b3e:	39 f0       	breq	.+14     	; 0xb4e <EEPROM_vWriteByteToAddress+0x22>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
     b40:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
     b42:	8c b3       	in	r24, 0x1c	; 28
     b44:	84 60       	ori	r24, 0x04	; 4
     b46:	8c bb       	out	0x1c, r24	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
     b48:	8c b3       	in	r24, 0x1c	; 28
     b4a:	82 60       	ori	r24, 0x02	; 2
     b4c:	8c bb       	out	0x1c, r24	; 28
     b4e:	08 95       	ret

00000b50 <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	dc 01       	movw	r26, r24
     b56:	ea 01       	movw	r28, r20
	u16 counter = 0;//Bytes write counter
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
	while (counter < size)
     b5c:	1a c0       	rjmp	.+52     	; 0xb92 <EEPROM_vWriteBlockToAddress+0x42>
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     b5e:	e1 99       	sbic	0x1c, 1	; 28
     b60:	fe cf       	rjmp	.-4      	; 0xb5e <EEPROM_vWriteBlockToAddress+0xe>
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
     b62:	c9 01       	movw	r24, r18
     b64:	8a 0f       	add	r24, r26
     b66:	9b 1f       	adc	r25, r27
     b68:	9f bb       	out	0x1f, r25	; 31
     b6a:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
     b6c:	9c b3       	in	r25, 0x1c	; 28
     b6e:	91 60       	ori	r25, 0x01	; 1
     b70:	9c bb       	out	0x1c, r25	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
     b72:	5d b3       	in	r21, 0x1d	; 29
     b74:	fb 01       	movw	r30, r22
     b76:	e2 0f       	add	r30, r18
     b78:	f3 1f       	adc	r31, r19
     b7a:	90 81       	ld	r25, Z
     b7c:	59 17       	cp	r21, r25
     b7e:	39 f0       	breq	.+14     	; 0xb8e <EEPROM_vWriteBlockToAddress+0x3e>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
     b80:	9d bb       	out	0x1d, r25	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
     b82:	9c b3       	in	r25, 0x1c	; 28
     b84:	94 60       	ori	r25, 0x04	; 4
     b86:	9c bb       	out	0x1c, r25	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
     b88:	9c b3       	in	r25, 0x1c	; 28
     b8a:	92 60       	ori	r25, 0x02	; 2
     b8c:	9c bb       	out	0x1c, r25	; 28
		}
		else
		{

		}
		counter++;//increase bytes counter
     b8e:	2f 5f       	subi	r18, 0xFF	; 255
     b90:	3f 4f       	sbci	r19, 0xFF	; 255
}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
	u16 counter = 0;//Bytes write counter
	while (counter < size)
     b92:	2c 17       	cp	r18, r28
     b94:	3d 07       	cpc	r19, r29
     b96:	18 f3       	brcs	.-58     	; 0xb5e <EEPROM_vWriteBlockToAddress+0xe>
		{

		}
		counter++;//increase bytes counter
	}
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	08 95       	ret

00000b9e <Keypad_enuInit>:

ES_t Keypad_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	DIO_enuSetPinDirection(C1_PORT , C1_PIN , DIO_u8OUTPUT);
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	63 e0       	ldi	r22, 0x03	; 3
     ba2:	83 e0       	ldi	r24, 0x03	; 3
     ba4:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT , C2_PIN , DIO_u8OUTPUT);
     ba8:	41 e0       	ldi	r20, 0x01	; 1
     baa:	64 e0       	ldi	r22, 0x04	; 4
     bac:	83 e0       	ldi	r24, 0x03	; 3
     bae:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT , C3_PIN , DIO_u8OUTPUT);
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	65 e0       	ldi	r22, 0x05	; 5
     bb6:	83 e0       	ldi	r24, 0x03	; 3
     bb8:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT , C4_PIN , DIO_u8OUTPUT);
     bbc:	41 e0       	ldi	r20, 0x01	; 1
     bbe:	66 e0       	ldi	r22, 0x06	; 6
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT , R1_PIN , DIO_u8INPUT);
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	62 e0       	ldi	r22, 0x02	; 2
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT , R2_PIN , DIO_u8INPUT);
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	63 e0       	ldi	r22, 0x03	; 3
     bd4:	82 e0       	ldi	r24, 0x02	; 2
     bd6:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT , R3_PIN , DIO_u8INPUT);
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	64 e0       	ldi	r22, 0x04	; 4
     bde:	82 e0       	ldi	r24, 0x02	; 2
     be0:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT , R4_PIN , DIO_u8INPUT);
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	65 e0       	ldi	r22, 0x05	; 5
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT , C1_PIN , DIO_u8HIGH);
     bee:	41 e0       	ldi	r20, 0x01	; 1
     bf0:	63 e0       	ldi	r22, 0x03	; 3
     bf2:	83 e0       	ldi	r24, 0x03	; 3
     bf4:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT , C2_PIN , DIO_u8HIGH);
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	64 e0       	ldi	r22, 0x04	; 4
     bfc:	83 e0       	ldi	r24, 0x03	; 3
     bfe:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT , C3_PIN , DIO_u8HIGH);
     c02:	41 e0       	ldi	r20, 0x01	; 1
     c04:	65 e0       	ldi	r22, 0x05	; 5
     c06:	83 e0       	ldi	r24, 0x03	; 3
     c08:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT , C4_PIN , DIO_u8HIGH);
     c0c:	41 e0       	ldi	r20, 0x01	; 1
     c0e:	66 e0       	ldi	r22, 0x06	; 6
     c10:	83 e0       	ldi	r24, 0x03	; 3
     c12:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT , R1_PIN , DIO_u8PULL_UP);
     c16:	41 e0       	ldi	r20, 0x01	; 1
     c18:	62 e0       	ldi	r22, 0x02	; 2
     c1a:	82 e0       	ldi	r24, 0x02	; 2
     c1c:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT , R2_PIN , DIO_u8PULL_UP);
     c20:	41 e0       	ldi	r20, 0x01	; 1
     c22:	63 e0       	ldi	r22, 0x03	; 3
     c24:	82 e0       	ldi	r24, 0x02	; 2
     c26:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT , R3_PIN , DIO_u8PULL_UP);
     c2a:	41 e0       	ldi	r20, 0x01	; 1
     c2c:	64 e0       	ldi	r22, 0x04	; 4
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT , R4_PIN , DIO_u8PULL_UP);
     c34:	41 e0       	ldi	r20, 0x01	; 1
     c36:	65 e0       	ldi	r22, 0x05	; 5
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>

	return Local_enuErrorState;
}
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	08 95       	ret

00000c42 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
     c42:	6f 92       	push	r6
     c44:	7f 92       	push	r7
     c46:	8f 92       	push	r8
     c48:	9f 92       	push	r9
     c4a:	af 92       	push	r10
     c4c:	bf 92       	push	r11
     c4e:	cf 92       	push	r12
     c50:	df 92       	push	r13
     c52:	ef 92       	push	r14
     c54:	ff 92       	push	r15
     c56:	0f 93       	push	r16
     c58:	1f 93       	push	r17
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
     c62:	a1 97       	sbiw	r28, 0x21	; 33
     c64:	0f b6       	in	r0, 0x3f	; 63
     c66:	f8 94       	cli
     c68:	de bf       	out	0x3e, r29	; 62
     c6a:	0f be       	out	0x3f, r0	; 63
     c6c:	cd bf       	out	0x3d, r28	; 61
     c6e:	5c 01       	movw	r10, r24
	ES_t Local_enuErrorState = ES_NOK;

	u8 Local_Au8ColPorts [COL_NUM] = {C1_PORT,C2_PORT,C3_PORT,C4_PORT};
     c70:	83 e0       	ldi	r24, 0x03	; 3
     c72:	89 83       	std	Y+1, r24	; 0x01
     c74:	8a 83       	std	Y+2, r24	; 0x02
     c76:	8b 83       	std	Y+3, r24	; 0x03
     c78:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_Au8ColPins  [COL_NUM] = {C1_PIN, C2_PIN, C3_PIN, C4_PIN};
     c7a:	8d 83       	std	Y+5, r24	; 0x05
     c7c:	34 e0       	ldi	r19, 0x04	; 4
     c7e:	3e 83       	std	Y+6, r19	; 0x06
     c80:	25 e0       	ldi	r18, 0x05	; 5
     c82:	2f 83       	std	Y+7, r18	; 0x07
     c84:	96 e0       	ldi	r25, 0x06	; 6
     c86:	98 87       	std	Y+8, r25	; 0x08

	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
     c88:	92 e0       	ldi	r25, 0x02	; 2
     c8a:	99 87       	std	Y+9, r25	; 0x09
     c8c:	9a 87       	std	Y+10, r25	; 0x0a
     c8e:	9b 87       	std	Y+11, r25	; 0x0b
     c90:	9c 87       	std	Y+12, r25	; 0x0c
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};
     c92:	9d 87       	std	Y+13, r25	; 0x0d
     c94:	8e 87       	std	Y+14, r24	; 0x0e
     c96:	3f 87       	std	Y+15, r19	; 0x0f
     c98:	28 8b       	std	Y+16, r18	; 0x10

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
     c9a:	8f ef       	ldi	r24, 0xFF	; 255
     c9c:	f5 01       	movw	r30, r10
     c9e:	80 83       	st	Z, r24
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
     ca0:	77 c0       	rjmp	.+238    	; 0xd90 <Keypad_enuGetPressedKey+0x14e>
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
     ca2:	c8 2c       	mov	r12, r8
     ca4:	d1 2c       	mov	r13, r1
     ca6:	e5 e0       	ldi	r30, 0x05	; 5
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	ec 0f       	add	r30, r28
     cac:	fd 1f       	adc	r31, r29
     cae:	ec 0d       	add	r30, r12
     cb0:	fd 1d       	adc	r31, r13
     cb2:	60 80       	ld	r6, Z
     cb4:	e1 e0       	ldi	r30, 0x01	; 1
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	ec 0f       	add	r30, r28
     cba:	fd 1f       	adc	r31, r29
     cbc:	ec 0d       	add	r30, r12
     cbe:	fd 1d       	adc	r31, r13
     cc0:	70 80       	ld	r7, Z
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	66 2d       	mov	r22, r6
     cc6:	87 2d       	mov	r24, r7
     cc8:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
     ccc:	10 e0       	ldi	r17, 0x00	; 0
     cce:	51 c0       	rjmp	.+162    	; 0xd72 <Keypad_enuGetPressedKey+0x130>
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
     cd0:	e1 2e       	mov	r14, r17
     cd2:	f1 2c       	mov	r15, r1
     cd4:	ed e0       	ldi	r30, 0x0D	; 13
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	ec 0f       	add	r30, r28
     cda:	fd 1f       	adc	r31, r29
     cdc:	ee 0d       	add	r30, r14
     cde:	ff 1d       	adc	r31, r15
     ce0:	00 81       	ld	r16, Z
     ce2:	e9 e0       	ldi	r30, 0x09	; 9
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	ec 0f       	add	r30, r28
     ce8:	fd 1f       	adc	r31, r29
     cea:	ee 0d       	add	r30, r14
     cec:	ff 1d       	adc	r31, r15
     cee:	90 80       	ld	r9, Z
     cf0:	ae 01       	movw	r20, r28
     cf2:	4f 5e       	subi	r20, 0xEF	; 239
     cf4:	5f 4f       	sbci	r21, 0xFF	; 255
     cf6:	60 2f       	mov	r22, r16
     cf8:	89 2d       	mov	r24, r9
     cfa:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
     cfe:	89 89       	ldd	r24, Y+17	; 0x11
     d00:	81 11       	cpse	r24, r1
     d02:	36 c0       	rjmp	.+108    	; 0xd70 <Keypad_enuGetPressedKey+0x12e>
     d04:	83 ec       	ldi	r24, 0xC3	; 195
     d06:	99 e0       	ldi	r25, 0x09	; 9
     d08:	01 97       	sbiw	r24, 0x01	; 1
     d0a:	f1 f7       	brne	.-4      	; 0xd08 <Keypad_enuGetPressedKey+0xc6>
     d0c:	00 c0       	rjmp	.+0      	; 0xd0e <Keypad_enuGetPressedKey+0xcc>
     d0e:	00 00       	nop
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
     d10:	ae 01       	movw	r20, r28
     d12:	4f 5e       	subi	r20, 0xEF	; 239
     d14:	5f 4f       	sbci	r21, 0xFF	; 255
     d16:	60 2f       	mov	r22, r16
     d18:	89 2d       	mov	r24, r9
     d1a:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
     d1e:	89 89       	ldd	r24, Y+17	; 0x11
     d20:	81 11       	cpse	r24, r1
     d22:	26 c0       	rjmp	.+76     	; 0xd70 <Keypad_enuGetPressedKey+0x12e>
     d24:	07 c0       	rjmp	.+14     	; 0xd34 <Keypad_enuGetPressedKey+0xf2>
				{
					while (! Local_u8PinValue)
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
     d26:	ae 01       	movw	r20, r28
     d28:	4f 5e       	subi	r20, 0xEF	; 239
     d2a:	5f 4f       	sbci	r21, 0xFF	; 255
     d2c:	60 2f       	mov	r22, r16
     d2e:	89 2d       	mov	r24, r9
     d30:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_enuGetPinValue>
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
				if (! Local_u8PinValue)
				{
					while (! Local_u8PinValue)
     d34:	89 89       	ldd	r24, Y+17	; 0x11
     d36:	88 23       	and	r24, r24
     d38:	b1 f3       	breq	.-20     	; 0xd26 <Keypad_enuGetPressedKey+0xe4>
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);

					u8 Local_Au8Values[ROW_NUM][COL_NUM] = KEYPAD_VALUES;
     d3a:	80 e1       	ldi	r24, 0x10	; 16
     d3c:	e0 e6       	ldi	r30, 0x60	; 96
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	de 01       	movw	r26, r28
     d42:	52 96       	adiw	r26, 0x12	; 18
     d44:	01 90       	ld	r0, Z+
     d46:	0d 92       	st	X+, r0
     d48:	8a 95       	dec	r24
     d4a:	e1 f7       	brne	.-8      	; 0xd44 <Keypad_enuGetPressedKey+0x102>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
     d4c:	ee 0c       	add	r14, r14
     d4e:	ff 1c       	adc	r15, r15
     d50:	ee 0c       	add	r14, r14
     d52:	ff 1c       	adc	r15, r15
     d54:	e1 e0       	ldi	r30, 0x01	; 1
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	ec 0f       	add	r30, r28
     d5a:	fd 1f       	adc	r31, r29
     d5c:	ee 0e       	add	r14, r30
     d5e:	ff 1e       	adc	r15, r31
     d60:	f7 01       	movw	r30, r14
     d62:	ec 0d       	add	r30, r12
     d64:	fd 1d       	adc	r31, r13
     d66:	81 89       	ldd	r24, Z+17	; 0x11
     d68:	f5 01       	movw	r30, r10
     d6a:	80 83       	st	Z, r24
					return ES_OK;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	15 c0       	rjmp	.+42     	; 0xd9a <Keypad_enuGetPressedKey+0x158>
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
     d70:	1f 5f       	subi	r17, 0xFF	; 255
     d72:	14 30       	cpi	r17, 0x04	; 4
     d74:	08 f4       	brcc	.+2      	; 0xd78 <Keypad_enuGetPressedKey+0x136>
     d76:	ac cf       	rjmp	.-168    	; 0xcd0 <Keypad_enuGetPressedKey+0x8e>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
					return ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
     d78:	41 e0       	ldi	r20, 0x01	; 1
     d7a:	66 2d       	mov	r22, r6
     d7c:	87 2d       	mov	r24, r7
     d7e:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
     d82:	83 94       	inc	r8
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <Keypad_enuGetPressedKey+0x146>
     d86:	81 2c       	mov	r8, r1
     d88:	f3 e0       	ldi	r31, 0x03	; 3
     d8a:	f8 15       	cp	r31, r8
     d8c:	08 f0       	brcs	.+2      	; 0xd90 <Keypad_enuGetPressedKey+0x14e>
     d8e:	89 cf       	rjmp	.-238    	; 0xca2 <Keypad_enuGetPressedKey+0x60>
	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
     d90:	f5 01       	movw	r30, r10
     d92:	80 81       	ld	r24, Z
     d94:	8f 3f       	cpi	r24, 0xFF	; 255
     d96:	b9 f3       	breq	.-18     	; 0xd86 <Keypad_enuGetPressedKey+0x144>
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	}
	return Local_enuErrorState;
     d98:	80 e0       	ldi	r24, 0x00	; 0
}
     d9a:	a1 96       	adiw	r28, 0x21	; 33
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	ef 90       	pop	r14
     db2:	df 90       	pop	r13
     db4:	cf 90       	pop	r12
     db6:	bf 90       	pop	r11
     db8:	af 90       	pop	r10
     dba:	9f 90       	pop	r9
     dbc:	8f 90       	pop	r8
     dbe:	7f 90       	pop	r7
     dc0:	6f 90       	pop	r6
     dc2:	08 95       	ret

00000dc4 <LCD_enuWriteNLatch>:
				/*********el mafrood a3mel error status check hna bs 3ashan write and latch me7taga te3mel return ES_OK fa me7taga ta3deel**********/
			}
	}

	return Local_enuErrorState;
}
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	1f 92       	push	r1
     dcc:	cd b7       	in	r28, 0x3d	; 61
     dce:	de b7       	in	r29, 0x3e	; 62
     dd0:	18 2f       	mov	r17, r24
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	63 e0       	ldi	r22, 0x03	; 3
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     ddc:	40 e0       	ldi	r20, 0x00	; 0
     dde:	62 e0       	ldi	r22, 0x02	; 2
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     de6:	18 32       	cpi	r17, 0x28	; 40
     de8:	e1 f5       	brne	.+120    	; 0xe62 <LCD_enuWriteNLatch+0x9e>
     dea:	ae 01       	movw	r20, r28
     dec:	4f 5f       	subi	r20, 0xFF	; 255
     dee:	5f 4f       	sbci	r21, 0xFF	; 255
     df0:	61 e0       	ldi	r22, 0x01	; 1
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	0e 94 b6 09 	call	0x136c	; 0x136c <DIO_enuGetPinValue>
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	81 11       	cpse	r24, r1
     dfc:	32 c0       	rjmp	.+100    	; 0xe62 <LCD_enuWriteNLatch+0x9e>
     dfe:	41 2f       	mov	r20, r17
     e00:	44 1f       	adc	r20, r20
     e02:	44 27       	eor	r20, r20
     e04:	44 1f       	adc	r20, r20
     e06:	67 e0       	ldi	r22, 0x07	; 7
     e08:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     e0c:	16 fb       	bst	r17, 6
     e0e:	44 27       	eor	r20, r20
     e10:	40 f9       	bld	r20, 0
     e12:	66 e0       	ldi	r22, 0x06	; 6
     e14:	80 e0       	ldi	r24, 0x00	; 0
     e16:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     e1a:	15 fb       	bst	r17, 5
     e1c:	44 27       	eor	r20, r20
     e1e:	40 f9       	bld	r20, 0
     e20:	65 e0       	ldi	r22, 0x05	; 5
     e22:	80 e0       	ldi	r24, 0x00	; 0
     e24:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     e28:	14 fb       	bst	r17, 4
     e2a:	44 27       	eor	r20, r20
     e2c:	40 f9       	bld	r20, 0
     e2e:	64 e0       	ldi	r22, 0x04	; 4
     e30:	80 e0       	ldi	r24, 0x00	; 0
     e32:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	63 e0       	ldi	r22, 0x03	; 3
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     e40:	81 ee       	ldi	r24, 0xE1	; 225
     e42:	94 e0       	ldi	r25, 0x04	; 4
     e44:	01 97       	sbiw	r24, 0x01	; 1
     e46:	f1 f7       	brne	.-4      	; 0xe44 <LCD_enuWriteNLatch+0x80>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <LCD_enuWriteNLatch+0x86>
     e4a:	00 00       	nop
     e4c:	40 e0       	ldi	r20, 0x00	; 0
     e4e:	63 e0       	ldi	r22, 0x03	; 3
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     e56:	83 ed       	ldi	r24, 0xD3	; 211
     e58:	90 e3       	ldi	r25, 0x30	; 48
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <LCD_enuWriteNLatch+0x96>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <LCD_enuWriteNLatch+0x9c>
     e60:	00 00       	nop
     e62:	41 2f       	mov	r20, r17
     e64:	44 1f       	adc	r20, r20
     e66:	44 27       	eor	r20, r20
     e68:	44 1f       	adc	r20, r20
     e6a:	67 e0       	ldi	r22, 0x07	; 7
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     e72:	16 fb       	bst	r17, 6
     e74:	44 27       	eor	r20, r20
     e76:	40 f9       	bld	r20, 0
     e78:	66 e0       	ldi	r22, 0x06	; 6
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     e80:	15 fb       	bst	r17, 5
     e82:	44 27       	eor	r20, r20
     e84:	40 f9       	bld	r20, 0
     e86:	65 e0       	ldi	r22, 0x05	; 5
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     e8e:	14 fb       	bst	r17, 4
     e90:	44 27       	eor	r20, r20
     e92:	40 f9       	bld	r20, 0
     e94:	64 e0       	ldi	r22, 0x04	; 4
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     e9c:	41 e0       	ldi	r20, 0x01	; 1
     e9e:	63 e0       	ldi	r22, 0x03	; 3
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     ea6:	81 ee       	ldi	r24, 0xE1	; 225
     ea8:	94 e0       	ldi	r25, 0x04	; 4
     eaa:	01 97       	sbiw	r24, 0x01	; 1
     eac:	f1 f7       	brne	.-4      	; 0xeaa <LCD_enuWriteNLatch+0xe6>
     eae:	00 c0       	rjmp	.+0      	; 0xeb0 <LCD_enuWriteNLatch+0xec>
     eb0:	00 00       	nop
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	63 e0       	ldi	r22, 0x03	; 3
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     ebc:	83 ed       	ldi	r24, 0xD3	; 211
     ebe:	90 e3       	ldi	r25, 0x30	; 48
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	f1 f7       	brne	.-4      	; 0xec0 <LCD_enuWriteNLatch+0xfc>
     ec4:	00 c0       	rjmp	.+0      	; 0xec6 <LCD_enuWriteNLatch+0x102>
     ec6:	00 00       	nop
     ec8:	13 fb       	bst	r17, 3
     eca:	44 27       	eor	r20, r20
     ecc:	40 f9       	bld	r20, 0
     ece:	67 e0       	ldi	r22, 0x07	; 7
     ed0:	80 e0       	ldi	r24, 0x00	; 0
     ed2:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     ed6:	12 fb       	bst	r17, 2
     ed8:	44 27       	eor	r20, r20
     eda:	40 f9       	bld	r20, 0
     edc:	66 e0       	ldi	r22, 0x06	; 6
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     ee4:	11 fb       	bst	r17, 1
     ee6:	44 27       	eor	r20, r20
     ee8:	40 f9       	bld	r20, 0
     eea:	65 e0       	ldi	r22, 0x05	; 5
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     ef2:	41 2f       	mov	r20, r17
     ef4:	41 70       	andi	r20, 0x01	; 1
     ef6:	64 e0       	ldi	r22, 0x04	; 4
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     efe:	41 e0       	ldi	r20, 0x01	; 1
     f00:	63 e0       	ldi	r22, 0x03	; 3
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     f08:	81 ee       	ldi	r24, 0xE1	; 225
     f0a:	94 e0       	ldi	r25, 0x04	; 4
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	f1 f7       	brne	.-4      	; 0xf0c <LCD_enuWriteNLatch+0x148>
     f10:	00 c0       	rjmp	.+0      	; 0xf12 <LCD_enuWriteNLatch+0x14e>
     f12:	00 00       	nop
     f14:	40 e0       	ldi	r20, 0x00	; 0
     f16:	63 e0       	ldi	r22, 0x03	; 3
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     f1e:	83 ed       	ldi	r24, 0xD3	; 211
     f20:	90 e3       	ldi	r25, 0x30	; 48
     f22:	01 97       	sbiw	r24, 0x01	; 1
     f24:	f1 f7       	brne	.-4      	; 0xf22 <LCD_enuWriteNLatch+0x15e>
     f26:	00 c0       	rjmp	.+0      	; 0xf28 <LCD_enuWriteNLatch+0x164>
     f28:	00 00       	nop
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	0f 90       	pop	r0
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	08 95       	ret

00000f36 <LCD_enuInit>:
     f36:	41 e0       	ldi	r20, 0x01	; 1
     f38:	61 e0       	ldi	r22, 0x01	; 1
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
     f40:	41 e0       	ldi	r20, 0x01	; 1
     f42:	62 e0       	ldi	r22, 0x02	; 2
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
     f4a:	41 e0       	ldi	r20, 0x01	; 1
     f4c:	63 e0       	ldi	r22, 0x03	; 3
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
     f54:	41 e0       	ldi	r20, 0x01	; 1
     f56:	67 e0       	ldi	r22, 0x07	; 7
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
     f5e:	41 e0       	ldi	r20, 0x01	; 1
     f60:	66 e0       	ldi	r22, 0x06	; 6
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
     f68:	41 e0       	ldi	r20, 0x01	; 1
     f6a:	65 e0       	ldi	r22, 0x05	; 5
     f6c:	80 e0       	ldi	r24, 0x00	; 0
     f6e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
     f72:	41 e0       	ldi	r20, 0x01	; 1
     f74:	64 e0       	ldi	r22, 0x04	; 4
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_enuSetPinDirection>
     f7c:	8d e2       	ldi	r24, 0x2D	; 45
     f7e:	92 e2       	ldi	r25, 0x22	; 34
     f80:	01 97       	sbiw	r24, 0x01	; 1
     f82:	f1 f7       	brne	.-4      	; 0xf80 <LCD_enuInit+0x4a>
     f84:	00 c0       	rjmp	.+0      	; 0xf86 <LCD_enuInit+0x50>
     f86:	00 00       	nop
     f88:	40 e0       	ldi	r20, 0x00	; 0
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	81 e0       	ldi	r24, 0x01	; 1
     f8e:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     f92:	88 e2       	ldi	r24, 0x28	; 40
     f94:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_enuWriteNLatch>
     f98:	89 ef       	ldi	r24, 0xF9	; 249
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <LCD_enuInit+0x66>
     fa0:	00 c0       	rjmp	.+0      	; 0xfa2 <LCD_enuInit+0x6c>
     fa2:	00 00       	nop
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     fae:	8f e0       	ldi	r24, 0x0F	; 15
     fb0:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_enuWriteNLatch>
     fb4:	89 ef       	ldi	r24, 0xF9	; 249
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <LCD_enuInit+0x82>
     fbc:	00 c0       	rjmp	.+0      	; 0xfbe <LCD_enuInit+0x88>
     fbe:	00 00       	nop
     fc0:	40 e0       	ldi	r20, 0x00	; 0
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_enuWriteNLatch>
     fd0:	83 ef       	ldi	r24, 0xF3	; 243
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <LCD_enuInit+0x9e>
     fd8:	00 c0       	rjmp	.+0      	; 0xfda <LCD_enuInit+0xa4>
     fda:	00 00       	nop
     fdc:	40 e0       	ldi	r20, 0x00	; 0
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     fe6:	86 e0       	ldi	r24, 0x06	; 6
     fe8:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_enuWriteNLatch>
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	08 95       	ret

00000ff0 <LCD_enuSendData>:
     ff0:	cf 93       	push	r28
     ff2:	c8 2f       	mov	r28, r24
     ff4:	41 e0       	ldi	r20, 0x01	; 1
     ff6:	61 e0       	ldi	r22, 0x01	; 1
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
     ffe:	8c 2f       	mov	r24, r28
    1000:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_enuWriteNLatch>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	cf 91       	pop	r28
    1008:	08 95       	ret

0000100a <LCD_enuDisplayUnsignedInteger>:
    100a:	af 92       	push	r10
    100c:	bf 92       	push	r11
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	61 15       	cp	r22, r1
    1020:	71 05       	cpc	r23, r1
    1022:	81 05       	cpc	r24, r1
    1024:	91 05       	cpc	r25, r1
    1026:	61 f5       	brne	.+88     	; 0x1080 <LCD_enuDisplayUnsignedInteger+0x76>
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	61 e0       	ldi	r22, 0x01	; 1
    102c:	81 e0       	ldi	r24, 0x01	; 1
    102e:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
    1032:	80 e3       	ldi	r24, 0x30	; 48
    1034:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_enuWriteNLatch>
    1038:	a1 2c       	mov	r10, r1
    103a:	54 c0       	rjmp	.+168    	; 0x10e4 <LCD_enuDisplayUnsignedInteger+0xda>
    103c:	2a e0       	ldi	r18, 0x0A	; 10
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	50 e0       	ldi	r21, 0x00	; 0
    1044:	0e 94 4e 0a 	call	0x149c	; 0x149c <__udivmodsi4>
    1048:	cc 0c       	add	r12, r12
    104a:	dd 1c       	adc	r13, r13
    104c:	ee 1c       	adc	r14, r14
    104e:	ff 1c       	adc	r15, r15
    1050:	d7 01       	movw	r26, r14
    1052:	c6 01       	movw	r24, r12
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	aa 1f       	adc	r26, r26
    105a:	bb 1f       	adc	r27, r27
    105c:	88 0f       	add	r24, r24
    105e:	99 1f       	adc	r25, r25
    1060:	aa 1f       	adc	r26, r26
    1062:	bb 1f       	adc	r27, r27
    1064:	c8 0e       	add	r12, r24
    1066:	d9 1e       	adc	r13, r25
    1068:	ea 1e       	adc	r14, r26
    106a:	fb 1e       	adc	r15, r27
    106c:	c6 0e       	add	r12, r22
    106e:	d1 1c       	adc	r13, r1
    1070:	e1 1c       	adc	r14, r1
    1072:	f1 1c       	adc	r15, r1
    1074:	cf 5f       	subi	r28, 0xFF	; 255
    1076:	62 2f       	mov	r22, r18
    1078:	73 2f       	mov	r23, r19
    107a:	84 2f       	mov	r24, r20
    107c:	95 2f       	mov	r25, r21
    107e:	04 c0       	rjmp	.+8      	; 0x1088 <LCD_enuDisplayUnsignedInteger+0x7e>
    1080:	c0 e0       	ldi	r28, 0x00	; 0
    1082:	c1 2c       	mov	r12, r1
    1084:	d1 2c       	mov	r13, r1
    1086:	76 01       	movw	r14, r12
    1088:	61 15       	cp	r22, r1
    108a:	71 05       	cpc	r23, r1
    108c:	81 05       	cpc	r24, r1
    108e:	91 05       	cpc	r25, r1
    1090:	a9 f6       	brne	.-86     	; 0x103c <LCD_enuDisplayUnsignedInteger+0x32>
    1092:	a1 2c       	mov	r10, r1
    1094:	1b c0       	rjmp	.+54     	; 0x10cc <LCD_enuDisplayUnsignedInteger+0xc2>
    1096:	41 e0       	ldi	r20, 0x01	; 1
    1098:	61 e0       	ldi	r22, 0x01	; 1
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
    10a0:	c7 01       	movw	r24, r14
    10a2:	b6 01       	movw	r22, r12
    10a4:	2a e0       	ldi	r18, 0x0A	; 10
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	40 e0       	ldi	r20, 0x00	; 0
    10aa:	50 e0       	ldi	r21, 0x00	; 0
    10ac:	0e 94 4e 0a 	call	0x149c	; 0x149c <__udivmodsi4>
    10b0:	b2 2e       	mov	r11, r18
    10b2:	03 2f       	mov	r16, r19
    10b4:	14 2f       	mov	r17, r20
    10b6:	d5 2f       	mov	r29, r21
    10b8:	80 e3       	ldi	r24, 0x30	; 48
    10ba:	86 0f       	add	r24, r22
    10bc:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_enuWriteNLatch>
    10c0:	a8 2e       	mov	r10, r24
    10c2:	cb 2c       	mov	r12, r11
    10c4:	d0 2e       	mov	r13, r16
    10c6:	e1 2e       	mov	r14, r17
    10c8:	fd 2e       	mov	r15, r29
    10ca:	c1 50       	subi	r28, 0x01	; 1
    10cc:	c1 14       	cp	r12, r1
    10ce:	d1 04       	cpc	r13, r1
    10d0:	e1 04       	cpc	r14, r1
    10d2:	f1 04       	cpc	r15, r1
    10d4:	01 f7       	brne	.-64     	; 0x1096 <LCD_enuDisplayUnsignedInteger+0x8c>
    10d6:	04 c0       	rjmp	.+8      	; 0x10e0 <LCD_enuDisplayUnsignedInteger+0xd6>
    10d8:	80 e3       	ldi	r24, 0x30	; 48
    10da:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_enuWriteNLatch>
    10de:	c1 50       	subi	r28, 0x01	; 1
    10e0:	c1 11       	cpse	r28, r1
    10e2:	fa cf       	rjmp	.-12     	; 0x10d8 <LCD_enuDisplayUnsignedInteger+0xce>
    10e4:	8a 2d       	mov	r24, r10
    10e6:	df 91       	pop	r29
    10e8:	cf 91       	pop	r28
    10ea:	1f 91       	pop	r17
    10ec:	0f 91       	pop	r16
    10ee:	ff 90       	pop	r15
    10f0:	ef 90       	pop	r14
    10f2:	df 90       	pop	r13
    10f4:	cf 90       	pop	r12
    10f6:	bf 90       	pop	r11
    10f8:	af 90       	pop	r10
    10fa:	08 95       	ret

000010fc <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	ec 01       	movw	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pcString != NULL)
    1106:	89 2b       	or	r24, r25
    1108:	79 f4       	brne	.+30     	; 0x1128 <LCD_enuDisplayString+0x2c>
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
			Local_enuErrorState = LCD_enuWriteNLatch(*Copy_pcString++);
		}

	}
	else Local_enuErrorState = ES_NULL_POINTER;
    110a:	82 e0       	ldi	r24, 0x02	; 2
    110c:	11 c0       	rjmp	.+34     	; 0x1130 <LCD_enuDisplayString+0x34>
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    110e:	41 e0       	ldi	r20, 0x01	; 1
    1110:	61 e0       	ldi	r22, 0x01	; 1
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
			Local_enuErrorState = LCD_enuWriteNLatch(*Copy_pcString++);
    1118:	8e 01       	movw	r16, r28
    111a:	0f 5f       	subi	r16, 0xFF	; 255
    111c:	1f 4f       	sbci	r17, 0xFF	; 255
    111e:	88 81       	ld	r24, Y
    1120:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_enuWriteNLatch>
    1124:	e8 01       	movw	r28, r16
    1126:	01 c0       	rjmp	.+2      	; 0x112a <LCD_enuDisplayString+0x2e>
    1128:	80 e0       	ldi	r24, 0x00	; 0
ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
    112a:	98 81       	ld	r25, Y
    112c:	91 11       	cpse	r25, r1
    112e:	ef cf       	rjmp	.-34     	; 0x110e <LCD_enuDisplayString+0x12>
		}

	}
	else Local_enuErrorState = ES_NULL_POINTER;
	return Local_enuErrorState;
}
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <LCD_enuSetCursorPosition>:


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29

	ES_t Local_enuErrorState = ES_NOK;
	if ((Copy_u8XDimension <= LCD_u8XDIM_1) && (Copy_u8YDimension <= LCD_u8YDIM_15))
    1140:	82 30       	cpi	r24, 0x02	; 2
    1142:	a8 f4       	brcc	.+42     	; 0x116e <LCD_enuSetCursorPosition+0x34>
    1144:	60 31       	cpi	r22, 0x10	; 16
    1146:	a8 f4       	brcc	.+42     	; 0x1172 <LCD_enuSetCursorPosition+0x38>
    1148:	16 2f       	mov	r17, r22
    114a:	c8 2f       	mov	r28, r24
		{
		Local_enuErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	61 e0       	ldi	r22, 0x01	; 1
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
    1156:	d8 2f       	mov	r29, r24
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
    1158:	8c 2f       	mov	r24, r28
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	02 96       	adiw	r24, 0x02	; 2
    115e:	20 e4       	ldi	r18, 0x40	; 64
    1160:	82 9f       	mul	r24, r18
    1162:	10 0d       	add	r17, r0
    1164:	11 24       	eor	r1, r1
    1166:	81 2f       	mov	r24, r17
    1168:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_enuWriteNLatch>
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <LCD_enuSetCursorPosition+0x3a>


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{

	ES_t Local_enuErrorState = ES_NOK;
    116e:	d0 e0       	ldi	r29, 0x00	; 0
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <LCD_enuSetCursorPosition+0x3a>
    1172:	d0 e0       	ldi	r29, 0x00	; 0
		Local_enuErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
		}
	return Local_enuErrorState;

}
    1174:	8d 2f       	mov	r24, r29
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	08 95       	ret

0000117e <LCD_enuClearDisplay>:

ES_t LCD_enuClearDisplay( void )
{
    117e:	cf 93       	push	r28

	ES_t Local_enuErrorState = ES_NOK;

		Local_enuErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1180:	40 e0       	ldi	r20, 0x00	; 0
    1182:	61 e0       	ldi	r22, 0x01	; 1
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	0e 94 44 09 	call	0x1288	; 0x1288 <DIO_enuSetPinValue>
    118a:	c8 2f       	mov	r28, r24
		LCD_enuWriteNLatch(0x01);
    118c:	81 e0       	ldi	r24, 0x01	; 1
    118e:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <LCD_enuWriteNLatch>

	return Local_enuErrorState;

}
    1192:	8c 2f       	mov	r24, r28
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <DIO_enuInit>:
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
    1198:	81 eb       	ldi	r24, 0xB1	; 177
    119a:	8a bb       	out	0x1a, r24	; 26
    119c:	86 e1       	ldi	r24, 0x16	; 22
    119e:	8b bb       	out	0x1b, r24	; 27
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	08 95       	ret

000011a4 <DIO_enuSetPinDirection>:
    11a4:	84 30       	cpi	r24, 0x04	; 4
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <DIO_enuSetPinDirection+0x6>
    11a8:	67 c0       	rjmp	.+206    	; 0x1278 <DIO_enuSetPinDirection+0xd4>
    11aa:	68 30       	cpi	r22, 0x08	; 8
    11ac:	08 f0       	brcs	.+2      	; 0x11b0 <DIO_enuSetPinDirection+0xc>
    11ae:	66 c0       	rjmp	.+204    	; 0x127c <DIO_enuSetPinDirection+0xd8>
    11b0:	42 30       	cpi	r20, 0x02	; 2
    11b2:	08 f0       	brcs	.+2      	; 0x11b6 <DIO_enuSetPinDirection+0x12>
    11b4:	65 c0       	rjmp	.+202    	; 0x1280 <DIO_enuSetPinDirection+0xdc>
    11b6:	81 30       	cpi	r24, 0x01	; 1
    11b8:	e9 f0       	breq	.+58     	; 0x11f4 <DIO_enuSetPinDirection+0x50>
    11ba:	30 f0       	brcs	.+12     	; 0x11c8 <DIO_enuSetPinDirection+0x24>
    11bc:	82 30       	cpi	r24, 0x02	; 2
    11be:	81 f1       	breq	.+96     	; 0x1220 <DIO_enuSetPinDirection+0x7c>
    11c0:	83 30       	cpi	r24, 0x03	; 3
    11c2:	09 f4       	brne	.+2      	; 0x11c6 <DIO_enuSetPinDirection+0x22>
    11c4:	43 c0       	rjmp	.+134    	; 0x124c <DIO_enuSetPinDirection+0xa8>
    11c6:	5e c0       	rjmp	.+188    	; 0x1284 <DIO_enuSetPinDirection+0xe0>
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	06 2e       	mov	r0, r22
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <DIO_enuSetPinDirection+0x30>
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	0a 94       	dec	r0
    11d6:	e2 f7       	brpl	.-8      	; 0x11d0 <DIO_enuSetPinDirection+0x2c>
    11d8:	80 95       	com	r24
    11da:	2a b3       	in	r18, 0x1a	; 26
    11dc:	28 23       	and	r18, r24
    11de:	84 2f       	mov	r24, r20
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <DIO_enuSetPinDirection+0x44>
    11e4:	88 0f       	add	r24, r24
    11e6:	99 1f       	adc	r25, r25
    11e8:	6a 95       	dec	r22
    11ea:	e2 f7       	brpl	.-8      	; 0x11e4 <DIO_enuSetPinDirection+0x40>
    11ec:	82 2b       	or	r24, r18
    11ee:	8a bb       	out	0x1a, r24	; 26
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	08 95       	ret
    11f4:	21 e0       	ldi	r18, 0x01	; 1
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	06 2e       	mov	r0, r22
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_enuSetPinDirection+0x5c>
    11fc:	22 0f       	add	r18, r18
    11fe:	33 1f       	adc	r19, r19
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_enuSetPinDirection+0x58>
    1204:	20 95       	com	r18
    1206:	87 b3       	in	r24, 0x17	; 23
    1208:	28 23       	and	r18, r24
    120a:	84 2f       	mov	r24, r20
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <DIO_enuSetPinDirection+0x70>
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	6a 95       	dec	r22
    1216:	e2 f7       	brpl	.-8      	; 0x1210 <DIO_enuSetPinDirection+0x6c>
    1218:	82 2b       	or	r24, r18
    121a:	87 bb       	out	0x17, r24	; 23
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	08 95       	ret
    1220:	21 e0       	ldi	r18, 0x01	; 1
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	06 2e       	mov	r0, r22
    1226:	02 c0       	rjmp	.+4      	; 0x122c <DIO_enuSetPinDirection+0x88>
    1228:	22 0f       	add	r18, r18
    122a:	33 1f       	adc	r19, r19
    122c:	0a 94       	dec	r0
    122e:	e2 f7       	brpl	.-8      	; 0x1228 <DIO_enuSetPinDirection+0x84>
    1230:	20 95       	com	r18
    1232:	84 b3       	in	r24, 0x14	; 20
    1234:	28 23       	and	r18, r24
    1236:	84 2f       	mov	r24, r20
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <DIO_enuSetPinDirection+0x9c>
    123c:	88 0f       	add	r24, r24
    123e:	99 1f       	adc	r25, r25
    1240:	6a 95       	dec	r22
    1242:	e2 f7       	brpl	.-8      	; 0x123c <DIO_enuSetPinDirection+0x98>
    1244:	82 2b       	or	r24, r18
    1246:	84 bb       	out	0x14, r24	; 20
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	08 95       	ret
    124c:	21 e0       	ldi	r18, 0x01	; 1
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	06 2e       	mov	r0, r22
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_enuSetPinDirection+0xb4>
    1254:	22 0f       	add	r18, r18
    1256:	33 1f       	adc	r19, r19
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_enuSetPinDirection+0xb0>
    125c:	20 95       	com	r18
    125e:	81 b3       	in	r24, 0x11	; 17
    1260:	28 23       	and	r18, r24
    1262:	84 2f       	mov	r24, r20
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 c0       	rjmp	.+4      	; 0x126c <DIO_enuSetPinDirection+0xc8>
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	6a 95       	dec	r22
    126e:	e2 f7       	brpl	.-8      	; 0x1268 <DIO_enuSetPinDirection+0xc4>
    1270:	82 2b       	or	r24, r18
    1272:	81 bb       	out	0x11, r24	; 17
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	08 95       	ret
    1278:	83 e0       	ldi	r24, 0x03	; 3
    127a:	08 95       	ret
    127c:	83 e0       	ldi	r24, 0x03	; 3
    127e:	08 95       	ret
    1280:	83 e0       	ldi	r24, 0x03	; 3
    1282:	08 95       	ret
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	08 95       	ret

00001288 <DIO_enuSetPinValue>:
    1288:	84 30       	cpi	r24, 0x04	; 4
    128a:	08 f0       	brcs	.+2      	; 0x128e <DIO_enuSetPinValue+0x6>
    128c:	67 c0       	rjmp	.+206    	; 0x135c <DIO_enuSetPinValue+0xd4>
    128e:	68 30       	cpi	r22, 0x08	; 8
    1290:	08 f0       	brcs	.+2      	; 0x1294 <DIO_enuSetPinValue+0xc>
    1292:	66 c0       	rjmp	.+204    	; 0x1360 <DIO_enuSetPinValue+0xd8>
    1294:	42 30       	cpi	r20, 0x02	; 2
    1296:	08 f0       	brcs	.+2      	; 0x129a <DIO_enuSetPinValue+0x12>
    1298:	65 c0       	rjmp	.+202    	; 0x1364 <DIO_enuSetPinValue+0xdc>
    129a:	81 30       	cpi	r24, 0x01	; 1
    129c:	e9 f0       	breq	.+58     	; 0x12d8 <DIO_enuSetPinValue+0x50>
    129e:	30 f0       	brcs	.+12     	; 0x12ac <DIO_enuSetPinValue+0x24>
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	81 f1       	breq	.+96     	; 0x1304 <DIO_enuSetPinValue+0x7c>
    12a4:	83 30       	cpi	r24, 0x03	; 3
    12a6:	09 f4       	brne	.+2      	; 0x12aa <DIO_enuSetPinValue+0x22>
    12a8:	43 c0       	rjmp	.+134    	; 0x1330 <DIO_enuSetPinValue+0xa8>
    12aa:	5e c0       	rjmp	.+188    	; 0x1368 <DIO_enuSetPinValue+0xe0>
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	06 2e       	mov	r0, r22
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_enuSetPinValue+0x30>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_enuSetPinValue+0x2c>
    12bc:	80 95       	com	r24
    12be:	2b b3       	in	r18, 0x1b	; 27
    12c0:	28 23       	and	r18, r24
    12c2:	84 2f       	mov	r24, r20
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <DIO_enuSetPinValue+0x44>
    12c8:	88 0f       	add	r24, r24
    12ca:	99 1f       	adc	r25, r25
    12cc:	6a 95       	dec	r22
    12ce:	e2 f7       	brpl	.-8      	; 0x12c8 <DIO_enuSetPinValue+0x40>
    12d0:	82 2b       	or	r24, r18
    12d2:	8b bb       	out	0x1b, r24	; 27
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	08 95       	ret
    12d8:	21 e0       	ldi	r18, 0x01	; 1
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	06 2e       	mov	r0, r22
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_enuSetPinValue+0x5c>
    12e0:	22 0f       	add	r18, r18
    12e2:	33 1f       	adc	r19, r19
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_enuSetPinValue+0x58>
    12e8:	20 95       	com	r18
    12ea:	88 b3       	in	r24, 0x18	; 24
    12ec:	28 23       	and	r18, r24
    12ee:	84 2f       	mov	r24, r20
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <DIO_enuSetPinValue+0x70>
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	6a 95       	dec	r22
    12fa:	e2 f7       	brpl	.-8      	; 0x12f4 <DIO_enuSetPinValue+0x6c>
    12fc:	82 2b       	or	r24, r18
    12fe:	88 bb       	out	0x18, r24	; 24
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	08 95       	ret
    1304:	21 e0       	ldi	r18, 0x01	; 1
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	06 2e       	mov	r0, r22
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <DIO_enuSetPinValue+0x88>
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	0a 94       	dec	r0
    1312:	e2 f7       	brpl	.-8      	; 0x130c <DIO_enuSetPinValue+0x84>
    1314:	20 95       	com	r18
    1316:	85 b3       	in	r24, 0x15	; 21
    1318:	28 23       	and	r18, r24
    131a:	84 2f       	mov	r24, r20
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <DIO_enuSetPinValue+0x9c>
    1320:	88 0f       	add	r24, r24
    1322:	99 1f       	adc	r25, r25
    1324:	6a 95       	dec	r22
    1326:	e2 f7       	brpl	.-8      	; 0x1320 <DIO_enuSetPinValue+0x98>
    1328:	82 2b       	or	r24, r18
    132a:	85 bb       	out	0x15, r24	; 21
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	08 95       	ret
    1330:	21 e0       	ldi	r18, 0x01	; 1
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	06 2e       	mov	r0, r22
    1336:	02 c0       	rjmp	.+4      	; 0x133c <DIO_enuSetPinValue+0xb4>
    1338:	22 0f       	add	r18, r18
    133a:	33 1f       	adc	r19, r19
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <DIO_enuSetPinValue+0xb0>
    1340:	20 95       	com	r18
    1342:	82 b3       	in	r24, 0x12	; 18
    1344:	28 23       	and	r18, r24
    1346:	84 2f       	mov	r24, r20
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	02 c0       	rjmp	.+4      	; 0x1350 <DIO_enuSetPinValue+0xc8>
    134c:	88 0f       	add	r24, r24
    134e:	99 1f       	adc	r25, r25
    1350:	6a 95       	dec	r22
    1352:	e2 f7       	brpl	.-8      	; 0x134c <DIO_enuSetPinValue+0xc4>
    1354:	82 2b       	or	r24, r18
    1356:	82 bb       	out	0x12, r24	; 18
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	08 95       	ret
    135c:	83 e0       	ldi	r24, 0x03	; 3
    135e:	08 95       	ret
    1360:	83 e0       	ldi	r24, 0x03	; 3
    1362:	08 95       	ret
    1364:	83 e0       	ldi	r24, 0x03	; 3
    1366:	08 95       	ret
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	08 95       	ret

0000136c <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pu8Value != NULL)
    136c:	41 15       	cp	r20, r1
    136e:	51 05       	cpc	r21, r1
    1370:	e1 f1       	breq	.+120    	; 0x13ea <DIO_enuGetPinValue+0x7e>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    1372:	84 30       	cpi	r24, 0x04	; 4
    1374:	e0 f5       	brcc	.+120    	; 0x13ee <DIO_enuGetPinValue+0x82>
				&& Copy_u8PinID <= DIO_u8PIN7)
    1376:	68 30       	cpi	r22, 0x08	; 8
    1378:	e0 f5       	brcc	.+120    	; 0x13f2 <DIO_enuGetPinValue+0x86>
		{
			switch (Copy_u8PortID)
    137a:	81 30       	cpi	r24, 0x01	; 1
    137c:	91 f0       	breq	.+36     	; 0x13a2 <DIO_enuGetPinValue+0x36>
    137e:	28 f0       	brcs	.+10     	; 0x138a <DIO_enuGetPinValue+0x1e>
    1380:	82 30       	cpi	r24, 0x02	; 2
    1382:	d9 f0       	breq	.+54     	; 0x13ba <DIO_enuGetPinValue+0x4e>
    1384:	83 30       	cpi	r24, 0x03	; 3
    1386:	29 f1       	breq	.+74     	; 0x13d2 <DIO_enuGetPinValue+0x66>
    1388:	36 c0       	rjmp	.+108    	; 0x13f6 <DIO_enuGetPinValue+0x8a>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    138a:	89 b3       	in	r24, 0x19	; 25
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <DIO_enuGetPinValue+0x28>
    1390:	95 95       	asr	r25
    1392:	87 95       	ror	r24
    1394:	6a 95       	dec	r22
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <DIO_enuGetPinValue+0x24>
    1398:	81 70       	andi	r24, 0x01	; 1
    139a:	fa 01       	movw	r30, r20
    139c:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    139e:	81 e0       	ldi	r24, 0x01	; 1
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    13a0:	08 95       	ret
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    13a2:	86 b3       	in	r24, 0x16	; 22
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <DIO_enuGetPinValue+0x40>
    13a8:	95 95       	asr	r25
    13aa:	87 95       	ror	r24
    13ac:	6a 95       	dec	r22
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <DIO_enuGetPinValue+0x3c>
    13b0:	81 70       	andi	r24, 0x01	; 1
    13b2:	fa 01       	movw	r30, r20
    13b4:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    13b8:	08 95       	ret
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    13ba:	83 b3       	in	r24, 0x13	; 19
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <DIO_enuGetPinValue+0x58>
    13c0:	95 95       	asr	r25
    13c2:	87 95       	ror	r24
    13c4:	6a 95       	dec	r22
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <DIO_enuGetPinValue+0x54>
    13c8:	81 70       	andi	r24, 0x01	; 1
    13ca:	fa 01       	movw	r30, r20
    13cc:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    13ce:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    13d0:	08 95       	ret
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    13d2:	80 b3       	in	r24, 0x10	; 16
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 c0       	rjmp	.+4      	; 0x13dc <DIO_enuGetPinValue+0x70>
    13d8:	95 95       	asr	r25
    13da:	87 95       	ror	r24
    13dc:	6a 95       	dec	r22
    13de:	e2 f7       	brpl	.-8      	; 0x13d8 <DIO_enuGetPinValue+0x6c>
    13e0:	81 70       	andi	r24, 0x01	; 1
    13e2:	fa 01       	movw	r30, r20
    13e4:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
    13e6:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    13e8:	08 95       	ret
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    13ea:	82 e0       	ldi	r24, 0x02	; 2
    13ec:	08 95       	ret
			}
			Local_enuErrorState = ES_OK;
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    13ee:	83 e0       	ldi	r24, 0x03	; 3
    13f0:	08 95       	ret
    13f2:	83 e0       	ldi	r24, 0x03	; 3
    13f4:	08 95       	ret

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    13f6:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}

	return Local_enuErrorState;
}
    13f8:	08 95       	ret

000013fa <SPI_vInitMaster>:
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
	SPCR |= (1<<SPE);//Enable the SPI
    13fa:	87 b3       	in	r24, 0x17	; 23
    13fc:	80 6b       	ori	r24, 0xB0	; 176
    13fe:	87 bb       	out	0x17, r24	; 23
    1400:	8d b1       	in	r24, 0x0d	; 13
    1402:	81 65       	ori	r24, 0x51	; 81
    1404:	8d b9       	out	0x0d, r24	; 13
    1406:	08 95       	ret

00001408 <SPI_ui8TransmitRecive>:
}

u8 SPI_ui8TransmitRecive (u8 data)
{
	SPDR = data;//move the given data to SPI Data register
    1408:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    140a:	77 9b       	sbis	0x0e, 7	; 14
    140c:	fe cf       	rjmp	.-4      	; 0x140a <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    140e:	8f b1       	in	r24, 0x0f	; 15
}
    1410:	08 95       	ret

00001412 <UART_enuUART_Init>:

ES_t UART_enuUART_Init(void)
{
	ES_t Local_ErorrState = ES_NOK;

	UCSRA = 0x00; // flags RXC,TXC,UDRE -> 0,, U2X -> 0(Synchronous)
    1412:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18; // set to be a reciever and a transmiter
    1414:	88 e1       	ldi	r24, 0x18	; 24
    1416:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86; // set frame format
    1418:	86 e8       	ldi	r24, 0x86	; 134
    141a:	80 bd       	out	0x20, r24	; 32

	UBRRL = 103; // 0110 0111 (BAUD)
    141c:	87 e6       	ldi	r24, 0x67	; 103
    141e:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;   // BAUD>>8  -> 0
    1420:	10 bc       	out	0x20, r1	; 32

	return Local_ErorrState;
}
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	08 95       	ret

00001426 <UART_enuSendChar>:
ES_t UART_enuSendChar( u8 Copy_u8CharData)
{
	ES_t Local_ErorrState = ES_NOK;
	// check if UDR ready(empty)for write or not using UDRE bit--> if ready..go else wait.

	while(! ((UCSRA >> 5) & 1)); // (UCSRA >> 5) -> UDRE
    1426:	5d 9b       	sbis	0x0b, 5	; 11
    1428:	fe cf       	rjmp	.-4      	; 0x1426 <UART_enuSendChar>
	UDR = Copy_u8CharData;
    142a:	8c b9       	out	0x0c, r24	; 12
	  while(!((UCSRA >> 6) & 1));
	  UCSRA |= (1>>6);

*/
	return Local_ErorrState;
}
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	08 95       	ret

00001430 <UART_enuRecieveChar>:
{
	ES_t Local_ErorrState = ES_NOK;

// As long the RXc is 0 so there is no recieved data at that moment --> recieve the new data

	while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7) -> RXc
    1430:	5f 9b       	sbis	0x0b, 7	; 11
    1432:	fe cf       	rjmp	.-4      	; 0x1430 <UART_enuRecieveChar>
	*Copy_u8RxChar = UDR;
    1434:	2c b1       	in	r18, 0x0c	; 12
    1436:	fc 01       	movw	r30, r24
    1438:	20 83       	st	Z, r18

	return Local_ErorrState;
}
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	08 95       	ret

0000143e <UART_enuSendString>:

ES_t UART_enuSendString(u8 * Copy_Au8StringData)
{
    143e:	ac 01       	movw	r20, r24
	ES_t Local_ErorrState = ES_NOK;

	u8 Local_u8Iter = 0;
    1440:	20 e0       	ldi	r18, 0x00	; 0

	while(Copy_Au8StringData[Local_u8Iter] != 0) // check if data not equal  NULL
    1442:	09 c0       	rjmp	.+18     	; 0x1456 <UART_enuSendString+0x18>
	{
		while(! ((UCSRA>>5) & 1 )); // wait until the UDR is empty using (UCSRA>>5) -> UDRE
    1444:	5d 9b       	sbis	0x0b, 5	; 11
    1446:	fe cf       	rjmp	.-4      	; 0x1444 <UART_enuSendString+0x6>
		UDR = (Copy_Au8StringData[Local_u8Iter]);
    1448:	9c b9       	out	0x0c, r25	; 12
		UART_First_ConnectionFlag++;
    144a:	90 91 7e 02 	lds	r25, 0x027E	; 0x80027e <__data_end>
    144e:	9f 5f       	subi	r25, 0xFF	; 255
    1450:	90 93 7e 02 	sts	0x027E, r25	; 0x80027e <__data_end>
		Local_u8Iter++;
    1454:	2f 5f       	subi	r18, 0xFF	; 255
{
	ES_t Local_ErorrState = ES_NOK;

	u8 Local_u8Iter = 0;

	while(Copy_Au8StringData[Local_u8Iter] != 0) // check if data not equal  NULL
    1456:	fa 01       	movw	r30, r20
    1458:	e2 0f       	add	r30, r18
    145a:	f1 1d       	adc	r31, r1
    145c:	90 81       	ld	r25, Z
    145e:	91 11       	cpse	r25, r1
    1460:	f1 cf       	rjmp	.-30     	; 0x1444 <UART_enuSendString+0x6>
		UART_First_ConnectionFlag++;
		Local_u8Iter++;
	}

	return Local_ErorrState;
}
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	08 95       	ret

00001466 <UART_enuRecieveString>:

ES_t UART_enuRecieveString(u8 * Copy_Au8RxString)
{
    1466:	ac 01       	movw	r20, r24

	(Copy_Au8RxString[Local_u8Iter++]) = Local_u8TempChar;

	}
#elif NEW_LINE == YES
	u8 Local_u8Iter = 0;
    1468:	20 e0       	ldi	r18, 0x00	; 0

	while(1)
	{

		while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7)-> RXc
    146a:	5f 9b       	sbis	0x0b, 7	; 11
    146c:	fe cf       	rjmp	.-4      	; 0x146a <UART_enuRecieveString+0x4>
		(Copy_Au8RxString[Local_u8Iter]) = UDR ;
    146e:	fa 01       	movw	r30, r20
    1470:	e2 0f       	add	r30, r18
    1472:	f1 1d       	adc	r31, r1
    1474:	9c b1       	in	r25, 0x0c	; 12
    1476:	90 83       	st	Z, r25

//to display what is typed

		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
    1478:	5d 9b       	sbis	0x0b, 5	; 11
    147a:	fe cf       	rjmp	.-4      	; 0x1478 <UART_enuRecieveString+0x12>
		UDR = (Copy_Au8RxString[Local_u8Iter]);
    147c:	9c b9       	out	0x0c, r25	; 12

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
    147e:	90 81       	ld	r25, Z
    1480:	9d 30       	cpi	r25, 0x0D	; 13
    1482:	21 f0       	breq	.+8      	; 0x148c <UART_enuRecieveString+0x26>
    1484:	9a 30       	cpi	r25, 0x0A	; 10
    1486:	11 f0       	breq	.+4      	; 0x148c <UART_enuRecieveString+0x26>
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
			break;
		}

		Local_u8Iter++;
    1488:	2f 5f       	subi	r18, 0xFF	; 255
	}
    148a:	ef cf       	rjmp	.-34     	; 0x146a <UART_enuRecieveString+0x4>
		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
		UDR = (Copy_Au8RxString[Local_u8Iter]);

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
    148c:	10 82       	st	Z, r1
		Local_u8Iter++;
	}

#endif
	return Local_ErorrState;
}
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	08 95       	ret

00001492 <UART_enuCheck_Connection>:


u8 UART_enuCheck_Connection()
{
	if(UART_First_ConnectionFlag!=0)
    1492:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <__data_end>
    1496:	81 11       	cpse	r24, r1
	{
		return 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
	}

	return 0;
}
    149a:	08 95       	ret

0000149c <__udivmodsi4>:
    149c:	a1 e2       	ldi	r26, 0x21	; 33
    149e:	1a 2e       	mov	r1, r26
    14a0:	aa 1b       	sub	r26, r26
    14a2:	bb 1b       	sub	r27, r27
    14a4:	fd 01       	movw	r30, r26
    14a6:	0d c0       	rjmp	.+26     	; 0x14c2 <__udivmodsi4_ep>

000014a8 <__udivmodsi4_loop>:
    14a8:	aa 1f       	adc	r26, r26
    14aa:	bb 1f       	adc	r27, r27
    14ac:	ee 1f       	adc	r30, r30
    14ae:	ff 1f       	adc	r31, r31
    14b0:	a2 17       	cp	r26, r18
    14b2:	b3 07       	cpc	r27, r19
    14b4:	e4 07       	cpc	r30, r20
    14b6:	f5 07       	cpc	r31, r21
    14b8:	20 f0       	brcs	.+8      	; 0x14c2 <__udivmodsi4_ep>
    14ba:	a2 1b       	sub	r26, r18
    14bc:	b3 0b       	sbc	r27, r19
    14be:	e4 0b       	sbc	r30, r20
    14c0:	f5 0b       	sbc	r31, r21

000014c2 <__udivmodsi4_ep>:
    14c2:	66 1f       	adc	r22, r22
    14c4:	77 1f       	adc	r23, r23
    14c6:	88 1f       	adc	r24, r24
    14c8:	99 1f       	adc	r25, r25
    14ca:	1a 94       	dec	r1
    14cc:	69 f7       	brne	.-38     	; 0x14a8 <__udivmodsi4_loop>
    14ce:	60 95       	com	r22
    14d0:	70 95       	com	r23
    14d2:	80 95       	com	r24
    14d4:	90 95       	com	r25
    14d6:	9b 01       	movw	r18, r22
    14d8:	ac 01       	movw	r20, r24
    14da:	bd 01       	movw	r22, r26
    14dc:	cf 01       	movw	r24, r30
    14de:	08 95       	ret

000014e0 <__tablejump2__>:
    14e0:	ee 0f       	add	r30, r30
    14e2:	ff 1f       	adc	r31, r31
    14e4:	05 90       	lpm	r0, Z+
    14e6:	f4 91       	lpm	r31, Z
    14e8:	e0 2d       	mov	r30, r0
    14ea:	09 94       	ijmp

000014ec <_exit>:
    14ec:	f8 94       	cli

000014ee <__stop_program>:
    14ee:	ff cf       	rjmp	.-2      	; 0x14ee <__stop_program>
