
AVRMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ad4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003fa  00800060  00001ad4  00001b68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080045a  0080045a  00001f62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001f62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001f94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000455a  00000000  00000000  000021f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001000  00000000  00000000  00006752  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001ed3  00000000  00000000  00007752  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00009628  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000efc  00000000  00000000  00009b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000256a  00000000  00000000  0000aa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000298  00000000  00000000  0000cfda  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 b7 0c 	jmp	0x196e	; 0x196e <__vector_1>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	e5 04       	cpc	r14, r5
      56:	ca 04       	cpc	r12, r10
      58:	c3 04       	cpc	r12, r3
      5a:	bc 04       	cpc	r11, r12
      5c:	b5 04       	cpc	r11, r5
      5e:	ae 04       	cpc	r10, r14
      60:	8f 04       	cpc	r8, r15
      62:	a7 03       	fmuls	r18, r23
      64:	45 05       	cpc	r20, r5

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	14 e0       	ldi	r17, 0x04	; 4
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e4 ed       	ldi	r30, 0xD4	; 212
      7a:	fa e1       	ldi	r31, 0x1A	; 26
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	aa 35       	cpi	r26, 0x5A	; 90
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	24 e0       	ldi	r18, 0x04	; 4
      8a:	aa e5       	ldi	r26, 0x5A	; 90
      8c:	b4 e0       	ldi	r27, 0x04	; 4
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	a0 36       	cpi	r26, 0x60	; 96
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 3a 02 	call	0x474	; 0x474 <main>
      9c:	0c 94 68 0d 	jmp	0x1ad0	; 0x1ad0 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <LoginSystem_SaveNewUser>:

#include <util/delay.h>


	ES_t LoginSystem_SaveNewUser(User_t Copy_strNewUser,u8 *Copy_u8NumofRegisteredUsers)
	{
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
      b8:	2b 97       	sbiw	r28, 0x0b	; 11
      ba:	0f b6       	in	r0, 0x3f	; 63
      bc:	f8 94       	cli
      be:	de bf       	out	0x3e, r29	; 62
      c0:	0f be       	out	0x3f, r0	; 63
      c2:	cd bf       	out	0x3d, r28	; 61
      c4:	e9 82       	std	Y+1, r14	; 0x01
      c6:	fa 82       	std	Y+2, r15	; 0x02
      c8:	0b 83       	std	Y+3, r16	; 0x03
      ca:	1c 83       	std	Y+4, r17	; 0x04
      cc:	2d 83       	std	Y+5, r18	; 0x05
      ce:	3e 83       	std	Y+6, r19	; 0x06
      d0:	4f 83       	std	Y+7, r20	; 0x07
      d2:	58 87       	std	Y+8, r21	; 0x08
      d4:	69 87       	std	Y+9, r22	; 0x09
      d6:	7a 87       	std	Y+10, r23	; 0x0a
      d8:	8b 87       	std	Y+11, r24	; 0x0b
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1), Copy_strNewUser.UserName,MAX_NO_OF_LETTERS);
      da:	f6 01       	movw	r30, r12
      dc:	80 81       	ld	r24, Z
      de:	f9 e0       	ldi	r31, 0x09	; 9
      e0:	8f 9f       	mul	r24, r31
      e2:	c0 01       	movw	r24, r0
      e4:	11 24       	eor	r1, r1
      e6:	44 e0       	ldi	r20, 0x04	; 4
      e8:	50 e0       	ldi	r21, 0x00	; 0
      ea:	be 01       	movw	r22, r28
      ec:	6f 5f       	subi	r22, 0xFF	; 255
      ee:	7f 4f       	sbci	r23, 0xFF	; 255
      f0:	42 96       	adiw	r24, 0x12	; 18
      f2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <EEPROM_vWriteBlockToAddress>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f6:	2f ef       	ldi	r18, 0xFF	; 255
      f8:	80 e7       	ldi	r24, 0x70	; 112
      fa:	92 e0       	ldi	r25, 0x02	; 2
      fc:	21 50       	subi	r18, 0x01	; 1
      fe:	80 40       	sbci	r24, 0x00	; 0
     100:	90 40       	sbci	r25, 0x00	; 0
     102:	e1 f7       	brne	.-8      	; 0xfc <LoginSystem_SaveNewUser+0x58>
     104:	00 c0       	rjmp	.+0      	; 0x106 <LoginSystem_SaveNewUser+0x62>
     106:	00 00       	nop
		_delay_ms(50);
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_strNewUser.Password,MAX_NO_OF_LETTERS);
     108:	f6 01       	movw	r30, r12
     10a:	80 81       	ld	r24, Z
     10c:	f9 e0       	ldi	r31, 0x09	; 9
     10e:	8f 9f       	mul	r24, r31
     110:	c0 01       	movw	r24, r0
     112:	11 24       	eor	r1, r1
     114:	44 e0       	ldi	r20, 0x04	; 4
     116:	50 e0       	ldi	r21, 0x00	; 0
     118:	be 01       	movw	r22, r28
     11a:	6a 5f       	subi	r22, 0xFA	; 250
     11c:	7f 4f       	sbci	r23, 0xFF	; 255
     11e:	46 96       	adiw	r24, 0x16	; 22
     120:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <EEPROM_vWriteBlockToAddress>
     124:	2f ef       	ldi	r18, 0xFF	; 255
     126:	80 e7       	ldi	r24, 0x70	; 112
     128:	92 e0       	ldi	r25, 0x02	; 2
     12a:	21 50       	subi	r18, 0x01	; 1
     12c:	80 40       	sbci	r24, 0x00	; 0
     12e:	90 40       	sbci	r25, 0x00	; 0
     130:	e1 f7       	brne	.-8      	; 0x12a <LoginSystem_SaveNewUser+0x86>
     132:	00 c0       	rjmp	.+0      	; 0x134 <LoginSystem_SaveNewUser+0x90>
     134:	00 00       	nop
		_delay_ms(50);
		

		EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_strNewUser.User_Priority);
     136:	f6 01       	movw	r30, r12
     138:	80 81       	ld	r24, Z
     13a:	f9 e0       	ldi	r31, 0x09	; 9
     13c:	8f 9f       	mul	r24, r31
     13e:	c0 01       	movw	r24, r0
     140:	11 24       	eor	r1, r1
     142:	6b 85       	ldd	r22, Y+11	; 0x0b
     144:	4a 96       	adiw	r24, 0x1a	; 26
     146:	0e 94 cd 07 	call	0xf9a	; 0xf9a <EEPROM_vWriteByteToAddress>
     14a:	2f ef       	ldi	r18, 0xFF	; 255
     14c:	80 e7       	ldi	r24, 0x70	; 112
     14e:	92 e0       	ldi	r25, 0x02	; 2
     150:	21 50       	subi	r18, 0x01	; 1
     152:	80 40       	sbci	r24, 0x00	; 0
     154:	90 40       	sbci	r25, 0x00	; 0
     156:	e1 f7       	brne	.-8      	; 0x150 <LoginSystem_SaveNewUser+0xac>
     158:	00 c0       	rjmp	.+0      	; 0x15a <LoginSystem_SaveNewUser+0xb6>
     15a:	00 00       	nop
		_delay_ms(50);
		(*Copy_u8NumofRegisteredUsers)++;
     15c:	f6 01       	movw	r30, r12
     15e:	60 81       	ld	r22, Z
     160:	6f 5f       	subi	r22, 0xFF	; 255
     162:	60 83       	st	Z, r22

		EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     164:	81 e1       	ldi	r24, 0x11	; 17
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 cd 07 	call	0xf9a	; 0xf9a <EEPROM_vWriteByteToAddress>
	}
     16c:	2b 96       	adiw	r28, 0x0b	; 11
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	df 91       	pop	r29
     17a:	cf 91       	pop	r28
     17c:	1f 91       	pop	r17
     17e:	0f 91       	pop	r16
     180:	ff 90       	pop	r15
     182:	ef 90       	pop	r14
     184:	df 90       	pop	r13
     186:	cf 90       	pop	r12
     188:	08 95       	ret

0000018a <LoginSystem_enuGetDataFromUserByKeypad>:
	ES_t LoginSystem_enuGetDataFromUserByKeypad(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
	{
     18a:	af 92       	push	r10
     18c:	bf 92       	push	r11
     18e:	cf 92       	push	r12
     190:	df 92       	push	r13
     192:	ef 92       	push	r14
     194:	ff 92       	push	r15
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	1f 92       	push	r1
     1a0:	cd b7       	in	r28, 0x3d	; 61
     1a2:	de b7       	in	r29, 0x3e	; 62
     1a4:	5c 01       	movw	r10, r24
     1a6:	6b 01       	movw	r12, r22
		ES_t Local_enuerrorStates = ES_NOK;
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
     1a8:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Username:");
     1ac:	80 e7       	ldi	r24, 0x70	; 112
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1b4:	60 e0       	ldi	r22, 0x00	; 0
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
     1bc:	85 01       	movw	r16, r10
     1be:	75 01       	movw	r14, r10
     1c0:	24 e0       	ldi	r18, 0x04	; 4
     1c2:	e2 0e       	add	r14, r18
     1c4:	f1 1c       	adc	r15, r1
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     1c6:	ce 01       	movw	r24, r28
     1c8:	01 96       	adiw	r24, 0x01	; 1
     1ca:	0e 94 47 08 	call	0x108e	; 0x108e <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_enuSendData>
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
     1d4:	89 81       	ldd	r24, Y+1	; 0x01
     1d6:	f8 01       	movw	r30, r16
     1d8:	81 93       	st	Z+, r24
     1da:	8f 01       	movw	r16, r30
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
		LCD_enuDisplayString("Username:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1dc:	ee 15       	cp	r30, r14
     1de:	ff 05       	cpc	r31, r15
     1e0:	91 f7       	brne	.-28     	; 0x1c6 <LoginSystem_enuGetDataFromUserByKeypad+0x3c>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
			LCD_enuSendData(Local_u8PressedKey);
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
		}
		Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     1e2:	f5 01       	movw	r30, r10
     1e4:	14 82       	std	Z+4, r1	; 0x04

		LCD_enuClearDisplay();
     1e6:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Password:");
     1ea:	8a e7       	ldi	r24, 0x7A	; 122
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
     1fa:	76 01       	movw	r14, r12

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1fc:	10 e0       	ldi	r17, 0x00	; 0
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     1fe:	ce 01       	movw	r24, r28
     200:	01 96       	adiw	r24, 0x01	; 1
     202:	0e 94 47 08 	call	0x108e	; 0x108e <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_enuSendData>
     20c:	ff ef       	ldi	r31, 0xFF	; 255
     20e:	29 e6       	ldi	r18, 0x69	; 105
     210:	88 e1       	ldi	r24, 0x18	; 24
     212:	f1 50       	subi	r31, 0x01	; 1
     214:	20 40       	sbci	r18, 0x00	; 0
     216:	80 40       	sbci	r24, 0x00	; 0
     218:	e1 f7       	brne	.-8      	; 0x212 <LoginSystem_enuGetDataFromUserByKeypad+0x88>
     21a:	00 c0       	rjmp	.+0      	; 0x21c <LoginSystem_enuGetDataFromUserByKeypad+0x92>
     21c:	00 00       	nop
			_delay_ms(500);
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
     21e:	61 2f       	mov	r22, r17
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
			LCD_enuSendData('*');
     226:	8a e2       	ldi	r24, 0x2A	; 42
     228:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <LCD_enuSendData>
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;
     22c:	89 81       	ldd	r24, Y+1	; 0x01
     22e:	f7 01       	movw	r30, r14
     230:	81 93       	st	Z+, r24
     232:	7f 01       	movw	r14, r30

		LCD_enuClearDisplay();
		LCD_enuDisplayString("Password:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     234:	1f 5f       	subi	r17, 0xFF	; 255
     236:	14 30       	cpi	r17, 0x04	; 4
     238:	11 f7       	brne	.-60     	; 0x1fe <LoginSystem_enuGetDataFromUserByKeypad+0x74>
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
			LCD_enuSendData('*');
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;

		}
		Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     23a:	f6 01       	movw	r30, r12
     23c:	14 82       	std	Z+4, r1	; 0x04
		Local_enuerrorStates = ES_OK;
		return Local_enuerrorStates;
	}
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0f 90       	pop	r0
     242:	df 91       	pop	r29
     244:	cf 91       	pop	r28
     246:	1f 91       	pop	r17
     248:	0f 91       	pop	r16
     24a:	ff 90       	pop	r15
     24c:	ef 90       	pop	r14
     24e:	df 90       	pop	r13
     250:	cf 90       	pop	r12
     252:	bf 90       	pop	r11
     254:	af 90       	pop	r10
     256:	08 95       	ret

00000258 <LoginSystem_enuGetDataFromUserBY_UART>:
	
		ES_t LoginSystem_enuGetDataFromUserBY_UART(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
		{
     258:	0f 93       	push	r16
     25a:	1f 93       	push	r17
     25c:	cf 93       	push	r28
     25e:	df 93       	push	r29
     260:	8c 01       	movw	r16, r24
     262:	eb 01       	movw	r28, r22
			ES_t Local_enuerrorStates = ES_NOK;
			UART_enuSendString("\r\n\r\nUsername: ");
     264:	84 e8       	ldi	r24, 0x84	; 132
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Username);
     26c:	c8 01       	movw	r24, r16
     26e:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <UART_enuRecieveString>
			Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     272:	f8 01       	movw	r30, r16
     274:	14 82       	std	Z+4, r1	; 0x04
			UART_enuSendString("Password: ");
     276:	83 e9       	ldi	r24, 0x93	; 147
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Password);
     27e:	ce 01       	movw	r24, r28
     280:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <UART_enuRecieveString>
			Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     284:	1c 82       	std	Y+4, r1	; 0x04

			Local_enuerrorStates = ES_OK;
			return Local_enuerrorStates;
		}
     286:	81 e0       	ldi	r24, 0x01	; 1
     288:	df 91       	pop	r29
     28a:	cf 91       	pop	r28
     28c:	1f 91       	pop	r17
     28e:	0f 91       	pop	r16
     290:	08 95       	ret

00000292 <LoginSystem_u8Strcmp>:



	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
     292:	dc 01       	movw	r26, r24
		u8 Local_u8Iterator=0;
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     294:	9c 91       	ld	r25, X
     296:	fb 01       	movw	r30, r22
     298:	20 81       	ld	r18, Z
     29a:	92 13       	cpse	r25, r18
     29c:	13 c0       	rjmp	.+38     	; 0x2c4 <LoginSystem_u8Strcmp+0x32>
		{
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     29e:	99 23       	and	r25, r25
     2a0:	a9 f0       	breq	.+42     	; 0x2cc <LoginSystem_u8Strcmp+0x3a>
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	02 c0       	rjmp	.+4      	; 0x2aa <LoginSystem_u8Strcmp+0x18>
     2a6:	99 23       	and	r25, r25
     2a8:	89 f0       	breq	.+34     	; 0x2cc <LoginSystem_u8Strcmp+0x3a>
				break;
			Local_u8Iterator++;
     2aa:	4f 5f       	subi	r20, 0xFF	; 255


	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
		u8 Local_u8Iterator=0;
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     2ac:	24 2f       	mov	r18, r20
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	fd 01       	movw	r30, r26
     2b2:	e2 0f       	add	r30, r18
     2b4:	f3 1f       	adc	r31, r19
     2b6:	90 81       	ld	r25, Z
     2b8:	fb 01       	movw	r30, r22
     2ba:	e2 0f       	add	r30, r18
     2bc:	f3 1f       	adc	r31, r19
     2be:	20 81       	ld	r18, Z
     2c0:	92 17       	cp	r25, r18
     2c2:	89 f3       	breq	.-30     	; 0x2a6 <LoginSystem_u8Strcmp+0x14>
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
				break;
			Local_u8Iterator++;
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     2c4:	99 23       	and	r25, r25
     2c6:	21 f0       	breq	.+8      	; 0x2d0 <LoginSystem_u8Strcmp+0x3e>
			return TRUE;
		else
			return FALSE;
     2c8:	80 e0       	ldi	r24, 0x00	; 0
	}
     2ca:	08 95       	ret
				break;
			Local_u8Iterator++;
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
			return TRUE;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
     2ce:	08 95       	ret
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	21 11       	cpse	r18, r1
     2d4:	f9 cf       	rjmp	.-14     	; 0x2c8 <LoginSystem_u8Strcmp+0x36>
		else
			return FALSE;
	}
     2d6:	08 95       	ret

000002d8 <LoginSystem_RemoveUser>:
	
	u8 LoginSystem_RemoveUser(User_t *Copy_AstrUsers,u8 *Copy_u8NumofRegisteredUsers)
		{
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <LoginSystem_RemoveUser+0x12>
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <LoginSystem_RemoveUser+0x14>
     2ec:	1f 92       	push	r1
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	8c 01       	movw	r16, r24
     2f4:	7b 01       	movw	r14, r22
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
     2f6:	8e e9       	ldi	r24, 0x9E	; 158
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
			UART_enuRecieveString(Local_Au8Username);
     2fe:	ce 01       	movw	r24, r28
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <UART_enuRecieveString>
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     306:	1d 82       	std	Y+5, r1	; 0x05
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     308:	f7 01       	movw	r30, r14
     30a:	50 81       	ld	r21, Z
     30c:	55 23       	and	r21, r21
     30e:	21 f1       	breq	.+72     	; 0x358 <LoginSystem_RemoveUser+0x80>
     310:	49 81       	ldd	r20, Y+1	; 0x01
     312:	d8 01       	movw	r26, r16
     314:	c1 2c       	mov	r12, r1


	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
		u8 Local_u8Iterator=0;
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     316:	2c 91       	ld	r18, X
     318:	24 13       	cpse	r18, r20
     31a:	99 c0       	rjmp	.+306    	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
		{
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     31c:	44 23       	and	r20, r20
     31e:	59 f1       	breq	.+86     	; 0x376 <LoginSystem_RemoveUser+0x9e>
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	02 c0       	rjmp	.+4      	; 0x328 <LoginSystem_RemoveUser+0x50>
     324:	22 23       	and	r18, r18
     326:	39 f1       	breq	.+78     	; 0x376 <LoginSystem_RemoveUser+0x9e>
				break;
			Local_u8Iterator++;
     328:	3f 5f       	subi	r19, 0xFF	; 255


	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
		u8 Local_u8Iterator=0;
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     32a:	83 2f       	mov	r24, r19
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	fd 01       	movw	r30, r26
     330:	e8 0f       	add	r30, r24
     332:	f9 1f       	adc	r31, r25
     334:	20 81       	ld	r18, Z
     336:	e1 e0       	ldi	r30, 0x01	; 1
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ec 0f       	add	r30, r28
     33c:	fd 1f       	adc	r31, r29
     33e:	e8 0f       	add	r30, r24
     340:	f9 1f       	adc	r31, r25
     342:	80 81       	ld	r24, Z
     344:	28 17       	cp	r18, r24
     346:	71 f3       	breq	.-36     	; 0x324 <LoginSystem_RemoveUser+0x4c>
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
				break;
			Local_u8Iterator++;
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     348:	21 11       	cpse	r18, r1
     34a:	02 c0       	rjmp	.+4      	; 0x350 <LoginSystem_RemoveUser+0x78>
     34c:	88 23       	and	r24, r24
     34e:	99 f0       	breq	.+38     	; 0x376 <LoginSystem_RemoveUser+0x9e>
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
			UART_enuRecieveString(Local_Au8Username);
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     350:	c3 94       	inc	r12
     352:	1b 96       	adiw	r26, 0x0b	; 11
     354:	c5 12       	cpse	r12, r21
     356:	df cf       	rjmp	.-66     	; 0x316 <LoginSystem_RemoveUser+0x3e>
     358:	80 e0       	ldi	r24, 0x00	; 0
					_delay_ms(50);
					break;
				}
			}
			return Copy_u8Flag;
		}
     35a:	0f 90       	pop	r0
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	1f 91       	pop	r17
     36a:	0f 91       	pop	r16
     36c:	ff 90       	pop	r15
     36e:	ef 90       	pop	r14
     370:	df 90       	pop	r13
     372:	cf 90       	pop	r12
     374:	08 95       	ret
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
			{
				Copy_u8Flag = LoginSystem_u8Strcmp (Copy_AstrUsers[Local_u8Iterator].UserName,Local_Au8Username);
				if (Copy_u8Flag )
				{
					Copy_AstrUsers[Local_u8Iterator]=Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1];
     376:	f8 01       	movw	r30, r16
     378:	2b e0       	ldi	r18, 0x0B	; 11
     37a:	52 9f       	mul	r21, r18
     37c:	e0 0d       	add	r30, r0
     37e:	f1 1d       	adc	r31, r1
     380:	11 24       	eor	r1, r1
     382:	3b 97       	sbiw	r30, 0x0b	; 11
     384:	8b e0       	ldi	r24, 0x0B	; 11
     386:	01 90       	ld	r0, Z+
     388:	0d 92       	st	X+, r0
     38a:	8a 95       	dec	r24
     38c:	e1 f7       	brne	.-8      	; 0x386 <LoginSystem_RemoveUser+0xae>
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1), Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].UserName,MAX_NO_OF_LETTERS);
     38e:	f7 01       	movw	r30, r14
     390:	80 81       	ld	r24, Z
     392:	f9 e0       	ldi	r31, 0x09	; 9
     394:	cf 9e       	mul	r12, r31
     396:	60 01       	movw	r12, r0
     398:	11 24       	eor	r1, r1
     39a:	b8 01       	movw	r22, r16
     39c:	2b e0       	ldi	r18, 0x0B	; 11
     39e:	82 9f       	mul	r24, r18
     3a0:	60 0d       	add	r22, r0
     3a2:	71 1d       	adc	r23, r1
     3a4:	11 24       	eor	r1, r1
     3a6:	6b 50       	subi	r22, 0x0B	; 11
     3a8:	71 09       	sbc	r23, r1
     3aa:	44 e0       	ldi	r20, 0x04	; 4
     3ac:	50 e0       	ldi	r21, 0x00	; 0
     3ae:	c6 01       	movw	r24, r12
     3b0:	42 96       	adiw	r24, 0x12	; 18
     3b2:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <EEPROM_vWriteBlockToAddress>
     3b6:	8f ef       	ldi	r24, 0xFF	; 255
     3b8:	90 e7       	ldi	r25, 0x70	; 112
     3ba:	e2 e0       	ldi	r30, 0x02	; 2
     3bc:	81 50       	subi	r24, 0x01	; 1
     3be:	90 40       	sbci	r25, 0x00	; 0
     3c0:	e0 40       	sbci	r30, 0x00	; 0
     3c2:	e1 f7       	brne	.-8      	; 0x3bc <LoginSystem_RemoveUser+0xe4>
     3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <LoginSystem_RemoveUser+0xee>
     3c6:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].Password,MAX_NO_OF_LETTERS);
     3c8:	f7 01       	movw	r30, r14
     3ca:	80 81       	ld	r24, Z
     3cc:	b8 01       	movw	r22, r16
     3ce:	fb e0       	ldi	r31, 0x0B	; 11
     3d0:	8f 9f       	mul	r24, r31
     3d2:	60 0d       	add	r22, r0
     3d4:	71 1d       	adc	r23, r1
     3d6:	11 24       	eor	r1, r1
     3d8:	66 50       	subi	r22, 0x06	; 6
     3da:	71 09       	sbc	r23, r1
     3dc:	44 e0       	ldi	r20, 0x04	; 4
     3de:	50 e0       	ldi	r21, 0x00	; 0
     3e0:	c6 01       	movw	r24, r12
     3e2:	46 96       	adiw	r24, 0x16	; 22
     3e4:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <EEPROM_vWriteBlockToAddress>
     3e8:	2f ef       	ldi	r18, 0xFF	; 255
     3ea:	80 e7       	ldi	r24, 0x70	; 112
     3ec:	92 e0       	ldi	r25, 0x02	; 2
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	80 40       	sbci	r24, 0x00	; 0
     3f2:	90 40       	sbci	r25, 0x00	; 0
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <LoginSystem_RemoveUser+0x116>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <LoginSystem_RemoveUser+0x120>
     3f8:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].User_Priority);
     3fa:	f7 01       	movw	r30, r14
     3fc:	80 81       	ld	r24, Z
     3fe:	fb e0       	ldi	r31, 0x0B	; 11
     400:	8f 9f       	mul	r24, r31
     402:	00 0d       	add	r16, r0
     404:	11 1d       	adc	r17, r1
     406:	11 24       	eor	r1, r1
     408:	f8 01       	movw	r30, r16
     40a:	3b 97       	sbiw	r30, 0x0b	; 11
     40c:	62 85       	ldd	r22, Z+10	; 0x0a
     40e:	c6 01       	movw	r24, r12
     410:	4a 96       	adiw	r24, 0x1a	; 26
     412:	0e 94 cd 07 	call	0xf9a	; 0xf9a <EEPROM_vWriteByteToAddress>
     416:	2f ef       	ldi	r18, 0xFF	; 255
     418:	80 e7       	ldi	r24, 0x70	; 112
     41a:	92 e0       	ldi	r25, 0x02	; 2
     41c:	21 50       	subi	r18, 0x01	; 1
     41e:	80 40       	sbci	r24, 0x00	; 0
     420:	90 40       	sbci	r25, 0x00	; 0
     422:	e1 f7       	brne	.-8      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
     424:	00 c0       	rjmp	.+0      	; 0x426 <__EEPROM_REGION_LENGTH__+0x26>
     426:	00 00       	nop
					_delay_ms(50);
					(*Copy_u8NumofRegisteredUsers)--;
     428:	f7 01       	movw	r30, r14
     42a:	60 81       	ld	r22, Z
     42c:	61 50       	subi	r22, 0x01	; 1
     42e:	60 83       	st	Z, r22
					EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     430:	81 e1       	ldi	r24, 0x11	; 17
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 cd 07 	call	0xf9a	; 0xf9a <EEPROM_vWriteByteToAddress>
     438:	ff ef       	ldi	r31, 0xFF	; 255
     43a:	20 e7       	ldi	r18, 0x70	; 112
     43c:	82 e0       	ldi	r24, 0x02	; 2
     43e:	f1 50       	subi	r31, 0x01	; 1
     440:	20 40       	sbci	r18, 0x00	; 0
     442:	80 40       	sbci	r24, 0x00	; 0
     444:	e1 f7       	brne	.-8      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
     446:	00 c0       	rjmp	.+0      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
     448:	00 00       	nop
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	86 cf       	rjmp	.-244    	; 0x35a <LoginSystem_RemoveUser+0x82>


	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
		u8 Local_u8Iterator=0;
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     44e:	84 2f       	mov	r24, r20
     450:	7b cf       	rjmp	.-266    	; 0x348 <LoginSystem_RemoveUser+0x70>

00000452 <Button_Pressed_Interrupt>:
u8 ShowToUser = MAIN_MENU;
//u8 Program_Status_Flag = 0;
u8 LCD_KEYPAD_USER_FLAG = 0;
volatile void Button_Pressed_Interrupt()
{
	if (LoginSystem_u8AdminOnlineFlag)	//5od karar hna
     452:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <LoginSystem_u8AdminOnlineFlag>
     456:	81 11       	cpse	r24, r1
     458:	0a c0       	rjmp	.+20     	; 0x46e <Button_Pressed_Interrupt+0x1c>
	{
		LCD_KEYPAD_USER_FLAG = 0;
	}
	else if	(LoginSystem_u8PromotedUserOnlineFlag)
     45a:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <LoginSystem_u8PromotedUserOnlineFlag>
     45e:	81 11       	cpse	r24, r1
     460:	06 c0       	rjmp	.+12     	; 0x46e <Button_Pressed_Interrupt+0x1c>
	{
		LCD_KEYPAD_USER_FLAG = 0;
	}
	else
	{
		LCD_KEYPAD_USER_FLAG = 1;
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <__data_end>
		ShowToUser = MAIN_MENU;
     468:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <ShowToUser>
     46c:	08 95       	ret
u8 LCD_KEYPAD_USER_FLAG = 0;
volatile void Button_Pressed_Interrupt()
{
	if (LoginSystem_u8AdminOnlineFlag)	//5od karar hna
	{
		LCD_KEYPAD_USER_FLAG = 0;
     46e:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <__data_end>
     472:	08 95       	ret

00000474 <main>:
		ShowToUser = MAIN_MENU;
	}
	
}
int main (void)
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
     47c:	cc 54       	subi	r28, 0x4C	; 76
     47e:	d1 09       	sbc	r29, r1
     480:	0f b6       	in	r0, 0x3f	; 63
     482:	f8 94       	cli
     484:	de bf       	out	0x3e, r29	; 62
     486:	0f be       	out	0x3f, r0	; 63
     488:	cd bf       	out	0x3d, r28	; 61
/************************************************************************************************************/
/*******************************************INITIALIZATION***************************************************/
	//TWI_Init();
	//EEPROM_enuInit();
	DIO_enuInit();
     48a:	0e 94 c8 0b 	call	0x1790	; 0x1790 <DIO_enuInit>
//	Timer1_enuInit();
	SPI_vInitMaster();
     48e:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <SPI_vInitMaster>
	UART_enuUART_Init();
     492:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <UART_enuUART_Init>
	
	
	LCD_enuInit();
     496:	0e 94 80 0a 	call	0x1500	; 0x1500 <LCD_enuInit>
	Keypad_enuInit();
     49a:	0e 94 f5 07 	call	0xfea	; 0xfea <Keypad_enuInit>
	DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN1,DIO_u8OUTPUT);
     49e:	41 e0       	ldi	r20, 0x01	; 1
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	83 e0       	ldi	r24, 0x03	; 3
     4a4:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	EXTI_enuInit();
     4a8:	0e 94 a5 0c 	call	0x194a	; 0x194a <EXTI_enuInit>
	__asm("sei");// GIE
     4ac:	78 94       	sei
	EXTI_enuCallBack((volatile void (*) (void))Button_Pressed_Interrupt);
     4ae:	89 e2       	ldi	r24, 0x29	; 41
     4b0:	92 e0       	ldi	r25, 0x02	; 2
     4b2:	0e 94 ad 0c 	call	0x195a	; 0x195a <EXTI_enuCallBack>
/***************************************************************************************************/
/* ***********************************************************************************************************/
/************************************************************************************************************/


	u8 Program_Status_Flag = 0;
     4b6:	28 96       	adiw	r28, 0x08	; 8
     4b8:	1f ae       	std	Y+63, r1	; 0x3f
     4ba:	28 97       	sbiw	r28, 0x08	; 8
	User_t LoginSystem_strAdmin;
	User_t LoginSystem_AstrUsers[MAX_NO_OF_USERS];
	u8 LoginSystem_NumOfRegisteredUsers=0;
     4bc:	27 96       	adiw	r28, 0x07	; 7
     4be:	1f ae       	std	Y+63, r1	; 0x3f
     4c0:	27 97       	sbiw	r28, 0x07	; 7
	u8 Dimmer_Percentage_Tens;
	u8 Dimmer_Percentage_Ones;
//	u8 ShowToUser = MAIN_MENU;
	u8 LoginSystem_u8TrialsLeft =3;
	
	LCD_enuDisplayString("Welcome To Smart");
     4c2:	88 ec       	ldi	r24, 0xC8	; 200
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
	LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     4ca:	60 e0       	ldi	r22, 0x00	; 0
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
	LCD_enuDisplayString("Home ! ");
     4d2:	89 ed       	ldi	r24, 0xD9	; 217
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
	EEPROM_ui8ReadByteFromAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,&Program_Status_Flag);
     4da:	be 01       	movw	r22, r28
     4dc:	69 5b       	subi	r22, 0xB9	; 185
     4de:	7f 4f       	sbci	r23, 0xFF	; 255
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <EEPROM_ui8ReadByteFromAddress>
     4e6:	2f ef       	ldi	r18, 0xFF	; 255
     4e8:	89 e6       	ldi	r24, 0x69	; 105
     4ea:	98 e1       	ldi	r25, 0x18	; 24
     4ec:	21 50       	subi	r18, 0x01	; 1
     4ee:	80 40       	sbci	r24, 0x00	; 0
     4f0:	90 40       	sbci	r25, 0x00	; 0
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <main+0x78>
     4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <main+0x82>
     4f6:	00 00       	nop
	_delay_ms(500);
	LCD_enuDisplayUnsignedInteger(Program_Status_Flag);
     4f8:	28 96       	adiw	r28, 0x08	; 8
     4fa:	8f ad       	ldd	r24, Y+63	; 0x3f
     4fc:	28 97       	sbiw	r28, 0x08	; 8
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <LCD_enuDisplayUnsignedInteger>
     504:	ef ef       	ldi	r30, 0xFF	; 255
     506:	f7 ea       	ldi	r31, 0xA7	; 167
     508:	21 e6       	ldi	r18, 0x61	; 97
     50a:	e1 50       	subi	r30, 0x01	; 1
     50c:	f0 40       	sbci	r31, 0x00	; 0
     50e:	20 40       	sbci	r18, 0x00	; 0
     510:	e1 f7       	brne	.-8      	; 0x50a <main+0x96>
     512:	00 c0       	rjmp	.+0      	; 0x514 <main+0xa0>
     514:	00 00       	nop
	_delay_ms (2000);
	LCD_enuClearDisplay();
     516:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>

	
	
			if (Program_Status_Flag == FIRST_TIME_USE_STATUS)
     51a:	28 96       	adiw	r28, 0x08	; 8
     51c:	8f ad       	ldd	r24, Y+63	; 0x3f
     51e:	28 97       	sbiw	r28, 0x08	; 8
     520:	8f 3f       	cpi	r24, 0xFF	; 255
     522:	09 f4       	brne	.+2      	; 0x526 <main+0xb2>
     524:	74 c4       	rjmp	.+2280   	; 0xe0e <__stack+0x5af>
			}

			/************************************************************************************************************/
			/************************************************************************************************************/

			else if (Program_Status_Flag == LOAD_LOGIN_SYSTEM_DATABASE)
     526:	88 23       	and	r24, r24
     528:	09 f4       	brne	.+2      	; 0x52c <main+0xb8>
     52a:	cb c3       	rjmp	.+1942   	; 0xcc2 <__stack+0x463>
     52c:	fe 01       	movw	r30, r28
     52e:	bd 96       	adiw	r30, 0x2d	; 45
     530:	2a 96       	adiw	r28, 0x0a	; 10
     532:	ff af       	std	Y+63, r31	; 0x3f
     534:	ee af       	std	Y+62, r30	; 0x3e
     536:	2a 97       	sbiw	r28, 0x0a	; 10
     538:	ce 01       	movw	r24, r28
     53a:	c2 96       	adiw	r24, 0x32	; 50
     53c:	2d 96       	adiw	r28, 0x0d	; 13
     53e:	9f af       	std	Y+63, r25	; 0x3f
     540:	8e af       	std	Y+62, r24	; 0x3e
     542:	2d 97       	sbiw	r28, 0x0d	; 13
     544:	bc 97       	sbiw	r30, 0x2c	; 44
     546:	5f 01       	movw	r10, r30
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     548:	53 e0       	ldi	r21, 0x03	; 3
     54a:	35 2e       	mov	r3, r21
						}
						else
						{
							for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
							{
								LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     54c:	6b e0       	ldi	r22, 0x0B	; 11
     54e:	96 2e       	mov	r9, r22
     550:	7b e0       	ldi	r23, 0x0B	; 11
     552:	27 2e       	mov	r2, r23
					case '8':
					SPI_ui8TransmitRecive(DIMMER);
					ShowToUser = DIMMER_MENU;
					break;
					case '9':
					ShowToUser = DOOR_MENU;  
     554:	ea e0       	ldi	r30, 0x0A	; 10
     556:	5e 2e       	mov	r5, r30
					SPI_ui8TransmitRecive(ROOM5_LED_TOGGLE);
					ShowToUser = LOG_OUT_CHOICE;
					break;
					case '8':
					SPI_ui8TransmitRecive(DIMMER);
					ShowToUser = DIMMER_MENU;
     558:	f8 e0       	ldi	r31, 0x08	; 8
     55a:	6f 2e       	mov	r6, r31
					SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
					ShowToUser = LOG_OUT_CHOICE;
					break;
					case '7':
					SPI_ui8TransmitRecive(ROOM5_LED_TOGGLE);
					ShowToUser = LOG_OUT_CHOICE;
     55c:	ab e0       	ldi	r26, 0x0B	; 11
     55e:	8a 2e       	mov	r8, r26
				Program_Status_Flag = IDLE_STATUS;
			}
		
	while (1)
	{
		UART_enuSendString("PRESS ENTER TO START\r\n");	
     560:	83 e1       	ldi	r24, 0x13	; 19
     562:	91 e0       	ldi	r25, 0x01	; 1
     564:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>

/************************************************************************************************************/
/************************************************************************************************************/


		if (Program_Status_Flag == IDLE_STATUS)
     568:	28 96       	adiw	r28, 0x08	; 8
     56a:	8f ad       	ldd	r24, Y+63	; 0x3f
     56c:	28 97       	sbiw	r28, 0x08	; 8
     56e:	87 30       	cpi	r24, 0x07	; 7
     570:	09 f4       	brne	.+2      	; 0x574 <main+0x100>
     572:	4c c0       	rjmp	.+152    	; 0x60c <main+0x198>
     574:	07 2d       	mov	r16, r7
				Program_Status_Flag = ADMIN_LOGIN_PAGE_STATUS;
			}
		}
		
	
		while (Program_Status_Flag == ADMIN_LOGIN_PAGE_STATUS)
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	a9 f5       	brne	.+106    	; 0x5e4 <main+0x170>
		{
						u8 LoginSystem_u8_AdminTrueFlag;
						u8 LoginSystem_u8_Remoted_USERTrueFlag;
						LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
     57a:	be 01       	movw	r22, r28
     57c:	68 5c       	subi	r22, 0xC8	; 200
     57e:	7f 4f       	sbci	r23, 0xFF	; 255
     580:	ce 01       	movw	r24, r28
     582:	cd 96       	adiw	r24, 0x3d	; 61
     584:	0e 94 2c 01 	call	0x258	; 0x258 <LoginSystem_enuGetDataFromUserBY_UART>


						LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     588:	2a 96       	adiw	r28, 0x0a	; 10
     58a:	6e ad       	ldd	r22, Y+62	; 0x3e
     58c:	7f ad       	ldd	r23, Y+63	; 0x3f
     58e:	2a 97       	sbiw	r28, 0x0a	; 10
     590:	ce 01       	movw	r24, r28
     592:	cd 96       	adiw	r24, 0x3d	; 61
     594:	0e 94 49 01 	call	0x292	; 0x292 <LoginSystem_u8Strcmp>
     598:	81 11       	cpse	r24, r1
     59a:	5d c0       	rjmp	.+186    	; 0x656 <main+0x1e2>
							Program_Status_Flag = ADMIN_MENU_STATUS;
							
						}
						else
						{
							for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     59c:	27 96       	adiw	r28, 0x07	; 7
     59e:	8f ad       	ldd	r24, Y+63	; 0x3f
     5a0:	27 97       	sbiw	r28, 0x07	; 7
     5a2:	88 23       	and	r24, r24
     5a4:	b1 f0       	breq	.+44     	; 0x5d2 <main+0x15e>
     5a6:	10 e0       	ldi	r17, 0x00	; 0
							{
								LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     5a8:	91 9e       	mul	r9, r17
     5aa:	70 01       	movw	r14, r0
     5ac:	11 24       	eor	r1, r1
     5ae:	65 01       	movw	r12, r10
     5b0:	ce 0c       	add	r12, r14
     5b2:	df 1c       	adc	r13, r15
     5b4:	be 01       	movw	r22, r28
     5b6:	63 5c       	subi	r22, 0xC3	; 195
     5b8:	7f 4f       	sbci	r23, 0xFF	; 255
     5ba:	c6 01       	movw	r24, r12
     5bc:	0e 94 49 01 	call	0x292	; 0x292 <LoginSystem_u8Strcmp>
     5c0:	81 11       	cpse	r24, r1
     5c2:	12 c0       	rjmp	.+36     	; 0x5e8 <main+0x174>
     5c4:	00 e0       	ldi	r16, 0x00	; 0
							Program_Status_Flag = ADMIN_MENU_STATUS;
							
						}
						else
						{
							for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     5c6:	1f 5f       	subi	r17, 0xFF	; 255
     5c8:	27 96       	adiw	r28, 0x07	; 7
     5ca:	8f ad       	ldd	r24, Y+63	; 0x3f
     5cc:	27 97       	sbiw	r28, 0x07	; 7
     5ce:	18 17       	cp	r17, r24
     5d0:	58 f3       	brcs	.-42     	; 0x5a8 <main+0x134>
									}
								}
							}

						}
						if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
     5d2:	00 23       	and	r16, r16
     5d4:	09 f4       	brne	.+2      	; 0x5d8 <main+0x164>
     5d6:	c5 c2       	rjmp	.+1418   	; 0xb62 <__stack+0x303>
     5d8:	28 96       	adiw	r28, 0x08	; 8
     5da:	8f ad       	ldd	r24, Y+63	; 0x3f
     5dc:	28 97       	sbiw	r28, 0x08	; 8
     5de:	01 e0       	ldi	r16, 0x01	; 1
				Program_Status_Flag = ADMIN_LOGIN_PAGE_STATUS;
			}
		}
		
	
		while (Program_Status_Flag == ADMIN_LOGIN_PAGE_STATUS)
     5e0:	82 30       	cpi	r24, 0x02	; 2
     5e2:	59 f2       	breq	.-106    	; 0x57a <main+0x106>
     5e4:	70 2e       	mov	r7, r16
     5e6:	63 c0       	rjmp	.+198    	; 0x6ae <main+0x23a>
						}
						else
						{
							for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
							{
								LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     5e8:	c7 01       	movw	r24, r14
     5ea:	05 96       	adiw	r24, 0x05	; 5
     5ec:	be 01       	movw	r22, r28
     5ee:	68 5c       	subi	r22, 0xC8	; 200
     5f0:	7f 4f       	sbci	r23, 0xFF	; 255
     5f2:	8a 0d       	add	r24, r10
     5f4:	9b 1d       	adc	r25, r11
     5f6:	0e 94 49 01 	call	0x292	; 0x292 <LoginSystem_u8Strcmp>
     5fa:	88 23       	and	r24, r24
     5fc:	19 f3       	breq	.-58     	; 0x5c4 <main+0x150>
								if (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)
								{
									if(LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER )// pro>>>>   // rem: key or not
     5fe:	f6 01       	movw	r30, r12
     600:	82 85       	ldd	r24, Z+10	; 0x0a
     602:	82 30       	cpi	r24, 0x02	; 2
     604:	09 f4       	brne	.+2      	; 0x608 <main+0x194>
     606:	90 c2       	rjmp	.+1312   	; 0xb28 <__stack+0x2c9>
						}
						else
						{
							for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
							{
								LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     608:	01 e0       	ldi	r16, 0x01	; 1
     60a:	dd cf       	rjmp	.-70     	; 0x5c6 <main+0x152>
				break;
				case State_Dimmer:
				LCD_enuDisplayString("Dimmer controlled");
				break;
				default:
				LCD_enuClearDisplay();
     60c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
				LCD_enuDisplayString("All Devices");
     610:	8a e2       	ldi	r24, 0x2A	; 42
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Are Off");
     620:	86 e3       	ldi	r24, 0x36	; 54
     622:	91 e0       	ldi	r25, 0x01	; 1
     624:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
     628:	28 96       	adiw	r28, 0x08	; 8
     62a:	8f ad       	ldd	r24, Y+63	; 0x3f
     62c:	28 97       	sbiw	r28, 0x08	; 8
				break;
				
			}
			while (Program_Status_Flag == IDLE_STATUS)
     62e:	87 30       	cpi	r24, 0x07	; 7
     630:	09 f0       	breq	.+2      	; 0x634 <main+0x1c0>
     632:	a0 cf       	rjmp	.-192    	; 0x574 <main+0x100>
			if (LCD_KEYPAD_USER_FLAG == 1)
     634:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <__data_end>
     638:	81 30       	cpi	r24, 0x01	; 1
     63a:	29 f4       	brne	.+10     	; 0x646 <main+0x1d2>
			{
				Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
     63c:	83 e0       	ldi	r24, 0x03	; 3
     63e:	28 96       	adiw	r28, 0x08	; 8
     640:	8f af       	std	Y+63, r24	; 0x3f
     642:	28 97       	sbiw	r28, 0x08	; 8
     644:	97 cf       	rjmp	.-210    	; 0x574 <main+0x100>
			}
			else if(UART_enuCheck_Connection())
     646:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <UART_enuCheck_Connection>
     64a:	81 11       	cpse	r24, r1
     64c:	84 c2       	rjmp	.+1288   	; 0xb56 <__stack+0x2f7>
     64e:	28 96       	adiw	r28, 0x08	; 8
     650:	8f ad       	ldd	r24, Y+63	; 0x3f
     652:	28 97       	sbiw	r28, 0x08	; 8
     654:	ec cf       	rjmp	.-40     	; 0x62e <main+0x1ba>
						u8 LoginSystem_u8_AdminTrueFlag;
						u8 LoginSystem_u8_Remoted_USERTrueFlag;
						LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);


						LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     656:	2d 96       	adiw	r28, 0x0d	; 13
     658:	6e ad       	ldd	r22, Y+62	; 0x3e
     65a:	7f ad       	ldd	r23, Y+63	; 0x3f
     65c:	2d 97       	sbiw	r28, 0x0d	; 13
     65e:	ce 01       	movw	r24, r28
     660:	c8 96       	adiw	r24, 0x38	; 56
     662:	0e 94 49 01 	call	0x292	; 0x292 <LoginSystem_u8Strcmp>
     666:	88 23       	and	r24, r24
     668:	09 f4       	brne	.+2      	; 0x66c <main+0x1f8>
     66a:	98 cf       	rjmp	.-208    	; 0x59c <main+0x128>
     66c:	70 2e       	mov	r7, r16

						if(LoginSystem_u8_AdminTrueFlag == TRUE)
						{
							UART_enuSendString("\r\nLogged in Successfully");
     66e:	8e e2       	ldi	r24, 0x2E	; 46
     670:	94 e0       	ldi	r25, 0x04	; 4
     672:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
     676:	ff ef       	ldi	r31, 0xFF	; 255
     678:	29 e6       	ldi	r18, 0x69	; 105
     67a:	88 e1       	ldi	r24, 0x18	; 24
     67c:	f1 50       	subi	r31, 0x01	; 1
     67e:	20 40       	sbci	r18, 0x00	; 0
     680:	80 40       	sbci	r24, 0x00	; 0
     682:	e1 f7       	brne	.-8      	; 0x67c <main+0x208>
     684:	00 c0       	rjmp	.+0      	; 0x686 <main+0x212>
     686:	00 00       	nop
							_delay_ms(500);
							UART_enuSendString("\r\nWelcome Admin\r\n");
     688:	87 e4       	ldi	r24, 0x47	; 71
     68a:	94 e0       	ldi	r25, 0x04	; 4
     68c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
     690:	9f ef       	ldi	r25, 0xFF	; 255
     692:	e9 e6       	ldi	r30, 0x69	; 105
     694:	f8 e1       	ldi	r31, 0x18	; 24
     696:	91 50       	subi	r25, 0x01	; 1
     698:	e0 40       	sbci	r30, 0x00	; 0
     69a:	f0 40       	sbci	r31, 0x00	; 0
     69c:	e1 f7       	brne	.-8      	; 0x696 <main+0x222>
     69e:	00 c0       	rjmp	.+0      	; 0x6a0 <main+0x22c>
     6a0:	00 00       	nop
							_delay_ms(500);
							LoginSystem_u8TrialsLeft =3;
							Program_Status_Flag = ADMIN_MENU_STATUS;
     6a2:	84 e0       	ldi	r24, 0x04	; 4
     6a4:	28 96       	adiw	r28, 0x08	; 8
     6a6:	8f af       	std	Y+63, r24	; 0x3f
     6a8:	28 97       	sbiw	r28, 0x08	; 8
						{
							UART_enuSendString("\r\nLogged in Successfully");
							_delay_ms(500);
							UART_enuSendString("\r\nWelcome Admin\r\n");
							_delay_ms(500);
							LoginSystem_u8TrialsLeft =3;
     6aa:	93 e0       	ldi	r25, 0x03	; 3
     6ac:	39 2e       	mov	r3, r25
				{
					case '1':
					ShowToUser = ADD_USER_COMMAND;
					break;
					case '2':
					ShowToUser = REMOVE_USER_COMMAND;
     6ae:	37 e0       	ldi	r19, 0x07	; 7
     6b0:	43 2e       	mov	r4, r19
						}
					
			}
				
		
		while (Program_Status_Flag == ADMIN_MENU_STATUS)
     6b2:	84 30       	cpi	r24, 0x04	; 4
     6b4:	09 f0       	breq	.+2      	; 0x6b8 <main+0x244>
     6b6:	87 c0       	rjmp	.+270    	; 0x7c6 <main+0x352>
     6b8:	10 91 5b 04 	lds	r17, 0x045B	; 0x80045b <ShowToUser>
		{
			
			while(ShowToUser == MAIN_MENU)
     6bc:	11 11       	cpse	r17, r1
     6be:	00 c2       	rjmp	.+1024   	; 0xac0 <__stack+0x261>
			{
				UART_enuSendString("\r\n1-Add User");
     6c0:	8b e8       	ldi	r24, 0x8B	; 139
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
				UART_enuSendString("\r\n2-Remove User");
     6c8:	88 e9       	ldi	r24, 0x98	; 152
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
				UART_enuSendString("\r\n3-Room1");
     6d0:	88 ea       	ldi	r24, 0xA8	; 168
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
				UART_enuSendString("\r\n4-Room2");
     6d8:	82 eb       	ldi	r24, 0xB2	; 178
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
				UART_enuSendString("\r\n5-Room3");
     6e0:	8c eb       	ldi	r24, 0xBC	; 188
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
				UART_enuSendString("\r\n6-Room4");
     6e8:	86 ec       	ldi	r24, 0xC6	; 198
     6ea:	91 e0       	ldi	r25, 0x01	; 1
     6ec:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
				UART_enuSendString("\r\n7-Room5");
     6f0:	80 ed       	ldi	r24, 0xD0	; 208
     6f2:	91 e0       	ldi	r25, 0x01	; 1
     6f4:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
				UART_enuSendString("\r\n8-Dimmer");
     6f8:	8a ed       	ldi	r24, 0xDA	; 218
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
				UART_enuSendString("\r\n9-Door\r\n");
     700:	85 ee       	ldi	r24, 0xE5	; 229
     702:	91 e0       	ldi	r25, 0x01	; 1
     704:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
			//	UART_enuSendString("\r\n10-Air Conditioner\r\n");
				
				UART_enuRecieveChar(&UART_CHOICE);
     708:	ce 01       	movw	r24, r28
     70a:	8c 5b       	subi	r24, 0xBC	; 188
     70c:	9f 4f       	sbci	r25, 0xFF	; 255
     70e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <UART_enuRecieveChar>
				switch(UART_CHOICE)
     712:	25 96       	adiw	r28, 0x05	; 5
     714:	ef ad       	ldd	r30, Y+63	; 0x3f
     716:	25 97       	sbiw	r28, 0x05	; 5
     718:	8e 2f       	mov	r24, r30
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	fc 01       	movw	r30, r24
     71e:	f1 97       	sbiw	r30, 0x31	; 49
     720:	e9 30       	cpi	r30, 0x09	; 9
     722:	f1 05       	cpc	r31, r1
     724:	80 f0       	brcs	.+32     	; 0x746 <main+0x2d2>
					/*case '10':
					ShowToUser = AIR_COND_MENU;
					break;
					*/
					default:
					UART_enuSendString("\r\nInvalid Choice\r\n");
     726:	80 ef       	ldi	r24, 0xF0	; 240
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
     72e:	9f ef       	ldi	r25, 0xFF	; 255
     730:	e3 ed       	ldi	r30, 0xD3	; 211
     732:	f0 e3       	ldi	r31, 0x30	; 48
     734:	91 50       	subi	r25, 0x01	; 1
     736:	e0 40       	sbci	r30, 0x00	; 0
     738:	f0 40       	sbci	r31, 0x00	; 0
     73a:	e1 f7       	brne	.-8      	; 0x734 <main+0x2c0>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <main+0x2ca>
     73e:	00 00       	nop
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
     740:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <ShowToUser>
					break;
     744:	bd cf       	rjmp	.-134    	; 0x6c0 <main+0x24c>
				UART_enuSendString("\r\n8-Dimmer");
				UART_enuSendString("\r\n9-Door\r\n");
			//	UART_enuSendString("\r\n10-Air Conditioner\r\n");
				
				UART_enuRecieveChar(&UART_CHOICE);
				switch(UART_CHOICE)
     746:	e6 5d       	subi	r30, 0xD6	; 214
     748:	ff 4f       	sbci	r31, 0xFF	; 255
     74a:	0c 94 53 0d 	jmp	0x1aa6	; 0x1aa6 <__tablejump2__>
					case '7':
					SPI_ui8TransmitRecive(ROOM5_LED_TOGGLE);
					ShowToUser = LOG_OUT_CHOICE;
					break;
					case '8':
					SPI_ui8TransmitRecive(DIMMER);
     74e:	8c e0       	ldi	r24, 0x0C	; 12
     750:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <SPI_ui8TransmitRecive>
					ShowToUser = DIMMER_MENU;
     754:	60 92 5b 04 	sts	0x045B, r6	; 0x80045b <ShowToUser>
					ShowToUser=MAIN_MENU;
					_delay_ms(700);
				break;
				
				case DIMMER_MENU:
					UART_enuSendString("\r\nEnter The Percentage of Brightness: ");
     758:	8d e1       	ldi	r24, 0x1D	; 29
     75a:	93 e0       	ldi	r25, 0x03	; 3
     75c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
					UART_enuRecieveChar(&Dimmer_Percentage_Tens);
     760:	ce 01       	movw	r24, r28
     762:	8d 5b       	subi	r24, 0xBD	; 189
     764:	9f 4f       	sbci	r25, 0xFF	; 255
     766:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Tens);
     76a:	24 96       	adiw	r28, 0x04	; 4
     76c:	8f ad       	ldd	r24, Y+63	; 0x3f
     76e:	24 97       	sbiw	r28, 0x04	; 4
     770:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <UART_enuSendChar>
					Dimmer_Percentage_Tens = Dimmer_Percentage_Tens - '0';
     774:	24 96       	adiw	r28, 0x04	; 4
     776:	8f ad       	ldd	r24, Y+63	; 0x3f
     778:	24 97       	sbiw	r28, 0x04	; 4
     77a:	80 53       	subi	r24, 0x30	; 48
     77c:	24 96       	adiw	r28, 0x04	; 4
     77e:	8f af       	std	Y+63, r24	; 0x3f
     780:	24 97       	sbiw	r28, 0x04	; 4
					
					UART_enuRecieveChar(&Dimmer_Percentage_Ones);
     782:	ce 01       	movw	r24, r28
     784:	8e 5b       	subi	r24, 0xBE	; 190
     786:	9f 4f       	sbci	r25, 0xFF	; 255
     788:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Ones);
     78c:	23 96       	adiw	r28, 0x03	; 3
     78e:	8f ad       	ldd	r24, Y+63	; 0x3f
     790:	23 97       	sbiw	r28, 0x03	; 3
     792:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <UART_enuSendChar>
					Dimmer_Percentage_Ones = Dimmer_Percentage_Ones -'0';
     796:	23 96       	adiw	r28, 0x03	; 3
     798:	8f ad       	ldd	r24, Y+63	; 0x3f
     79a:	23 97       	sbiw	r28, 0x03	; 3
     79c:	80 53       	subi	r24, 0x30	; 48
     79e:	23 96       	adiw	r28, 0x03	; 3
     7a0:	8f af       	std	Y+63, r24	; 0x3f
     7a2:	23 97       	sbiw	r28, 0x03	; 3
					
					Dimmer_Percentage =10*Dimmer_Percentage_Tens + Dimmer_Percentage_Ones;
					
					SPI_ui8TransmitRecive(Dimmer_Percentage);
     7a4:	24 96       	adiw	r28, 0x04	; 4
     7a6:	9f ad       	ldd	r25, Y+63	; 0x3f
     7a8:	24 97       	sbiw	r28, 0x04	; 4
     7aa:	ea e0       	ldi	r30, 0x0A	; 10
     7ac:	9e 9f       	mul	r25, r30
     7ae:	80 0d       	add	r24, r0
     7b0:	11 24       	eor	r1, r1
     7b2:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <SPI_ui8TransmitRecive>
					ShowToUser=LOG_OUT_CHOICE;
     7b6:	20 92 5b 04 	sts	0x045B, r2	; 0x80045b <ShowToUser>
     7ba:	28 96       	adiw	r28, 0x08	; 8
     7bc:	8f ad       	ldd	r24, Y+63	; 0x3f
     7be:	28 97       	sbiw	r28, 0x08	; 8
						}
					
			}
				
		
		while (Program_Status_Flag == ADMIN_MENU_STATUS)
     7c0:	84 30       	cpi	r24, 0x04	; 4
     7c2:	09 f4       	brne	.+2      	; 0x7c6 <main+0x352>
     7c4:	79 cf       	rjmp	.-270    	; 0x6b8 <main+0x244>
     7c6:	2b 96       	adiw	r28, 0x0b	; 11
     7c8:	1f ad       	ldd	r17, Y+63	; 0x3f
     7ca:	2b 97       	sbiw	r28, 0x0b	; 11
				
			}
		}
		
		//if (Program_Status_Flag == USER_LOGIN_PAGE_STATUS);
		while (Program_Status_Flag == USER_LOGIN_PAGE_STATUS)///off line user should have interrupt
     7cc:	83 30       	cpi	r24, 0x03	; 3
     7ce:	09 f0       	breq	.+2      	; 0x7d2 <main+0x35e>
     7d0:	51 c2       	rjmp	.+1186   	; 0xc74 <__stack+0x415>
		{

				u8 LoginSystem_u8TrueFlag;
			//	u8 LoginSystem_u8TrialsLeft =3;

				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
     7d2:	be 01       	movw	r22, r28
     7d4:	68 5c       	subi	r22, 0xC8	; 200
     7d6:	7f 4f       	sbci	r23, 0xFF	; 255
     7d8:	ce 01       	movw	r24, r28
     7da:	cd 96       	adiw	r24, 0x3d	; 61
     7dc:	0e 94 c5 00 	call	0x18a	; 0x18a <LoginSystem_enuGetDataFromUserByKeypad>
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     7e0:	27 96       	adiw	r28, 0x07	; 7
     7e2:	8f ad       	ldd	r24, Y+63	; 0x3f
     7e4:	27 97       	sbiw	r28, 0x07	; 7
     7e6:	88 23       	and	r24, r24
     7e8:	09 f4       	brne	.+2      	; 0x7ec <main+0x378>
     7ea:	0a c2       	rjmp	.+1044   	; 0xc00 <__stack+0x3a1>
     7ec:	10 e0       	ldi	r17, 0x00	; 0
     7ee:	07 c0       	rjmp	.+14     	; 0x7fe <main+0x38a>
     7f0:	1f 5f       	subi	r17, 0xFF	; 255
     7f2:	27 96       	adiw	r28, 0x07	; 7
     7f4:	8f ad       	ldd	r24, Y+63	; 0x3f
     7f6:	27 97       	sbiw	r28, 0x07	; 7
     7f8:	18 17       	cp	r17, r24
     7fa:	08 f0       	brcs	.+2      	; 0x7fe <main+0x38a>
     7fc:	03 c2       	rjmp	.+1030   	; 0xc04 <__stack+0x3a5>
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     7fe:	91 9e       	mul	r9, r17
     800:	70 01       	movw	r14, r0
     802:	11 24       	eor	r1, r1
     804:	be 01       	movw	r22, r28
     806:	63 5c       	subi	r22, 0xC3	; 195
     808:	7f 4f       	sbci	r23, 0xFF	; 255
     80a:	c5 01       	movw	r24, r10
     80c:	8e 0d       	add	r24, r14
     80e:	9f 1d       	adc	r25, r15
     810:	0e 94 49 01 	call	0x292	; 0x292 <LoginSystem_u8Strcmp>
     814:	88 23       	and	r24, r24
     816:	61 f3       	breq	.-40     	; 0x7f0 <main+0x37c>
     818:	c7 01       	movw	r24, r14
     81a:	05 96       	adiw	r24, 0x05	; 5
     81c:	be 01       	movw	r22, r28
     81e:	68 5c       	subi	r22, 0xC8	; 200
     820:	7f 4f       	sbci	r23, 0xFF	; 255
     822:	8a 0d       	add	r24, r10
     824:	9b 1d       	adc	r25, r11
     826:	0e 94 49 01 	call	0x292	; 0x292 <LoginSystem_u8Strcmp>
     82a:	88 23       	and	r24, r24
     82c:	09 f3       	breq	.-62     	; 0x7f0 <main+0x37c>
					if (LoginSystem_u8TrueFlag == TRUE)
					{
						LoginSystem_u8TrialsLeft =3;
     82e:	23 e0       	ldi	r18, 0x03	; 3
     830:	32 2e       	mov	r3, r18
						Program_Status_Flag = BLOCKING_STATUS;
					}
				}
				else
				{
					LCD_enuClearDisplay();
     832:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Logged in");
     836:	83 ee       	ldi	r24, 0xE3	; 227
     838:	93 e0       	ldi	r25, 0x03	; 3
     83a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     83e:	60 e0       	ldi	r22, 0x00	; 0
     840:	81 e0       	ldi	r24, 0x01	; 1
     842:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Successfully");
     846:	8a e3       	ldi	r24, 0x3A	; 58
     848:	94 e0       	ldi	r25, 0x04	; 4
     84a:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	9d e2       	ldi	r25, 0x2D	; 45
     852:	e2 e2       	ldi	r30, 0x22	; 34
     854:	81 50       	subi	r24, 0x01	; 1
     856:	90 40       	sbci	r25, 0x00	; 0
     858:	e0 40       	sbci	r30, 0x00	; 0
     85a:	e1 f7       	brne	.-8      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     85e:	00 00       	nop
					_delay_ms(700);
					LCD_enuClearDisplay();
     860:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Welcome");
     864:	8d ee       	ldi	r24, 0xED	; 237
     866:	93 e0       	ldi	r25, 0x03	; 3
     868:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     86c:	60 e0       	ldi	r22, 0x00	; 0
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("User");
     874:	83 e9       	ldi	r24, 0x93	; 147
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
     87c:	ff ef       	ldi	r31, 0xFF	; 255
     87e:	2d e2       	ldi	r18, 0x2D	; 45
     880:	82 e2       	ldi	r24, 0x22	; 34
     882:	f1 50       	subi	r31, 0x01	; 1
     884:	20 40       	sbci	r18, 0x00	; 0
     886:	80 40       	sbci	r24, 0x00	; 0
     888:	e1 f7       	brne	.-8      	; 0x882 <__stack+0x23>
     88a:	00 c0       	rjmp	.+0      	; 0x88c <__stack+0x2d>
     88c:	00 00       	nop
					_delay_ms(700);
					Program_Status_Flag = USER_MENU_STATUS;
     88e:	85 e0       	ldi	r24, 0x05	; 5
     890:	28 96       	adiw	r28, 0x08	; 8
     892:	8f af       	std	Y+63, r24	; 0x3f
     894:	28 97       	sbiw	r28, 0x08	; 8
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	2b 96       	adiw	r28, 0x0b	; 11
     89a:	9f af       	std	Y+63, r25	; 0x3f
     89c:	2b 97       	sbiw	r28, 0x0b	; 11
/************************************************************************************************************/
/************************************************************************************************************/

		if (Program_Status_Flag == USER_MENU_STATUS)//off line user menu
		{
							LCD_enuClearDisplay();
     89e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
							LCD_enuDisplayString("Welcome User");
     8a2:	85 ef       	ldi	r24, 0xF5	; 245
     8a4:	93 e0       	ldi	r25, 0x03	; 3
     8a6:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
     8b2:	ef ef       	ldi	r30, 0xFF	; 255
     8b4:	f9 e6       	ldi	r31, 0x69	; 105
     8b6:	28 e1       	ldi	r18, 0x18	; 24
     8b8:	e1 50       	subi	r30, 0x01	; 1
     8ba:	f0 40       	sbci	r31, 0x00	; 0
     8bc:	20 40       	sbci	r18, 0x00	; 0
     8be:	e1 f7       	brne	.-8      	; 0x8b8 <__stack+0x59>
     8c0:	00 c0       	rjmp	.+0      	; 0x8c2 <__stack+0x63>
     8c2:	00 00       	nop
							_delay_ms(500);
							LCD_enuClearDisplay();
     8c4:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
							LCD_enuDisplayString("1-Lights 2-Dimmer");
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	94 e0       	ldi	r25, 0x04	; 4
     8cc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
							LCD_enuDisplayString("3-Air Cond");
     8d8:	84 e1       	ldi	r24, 0x14	; 20
     8da:	94 e0       	ldi	r25, 0x04	; 4
     8dc:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
							Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
     8e0:	ce 01       	movw	r24, r28
     8e2:	8b 5b       	subi	r24, 0xBB	; 187
     8e4:	9f 4f       	sbci	r25, 0xFF	; 255
     8e6:	0e 94 47 08 	call	0x108e	; 0x108e <Keypad_enuGetPressedKey>
							switch (Keypad_Pressed_Key)
     8ea:	26 96       	adiw	r28, 0x06	; 6
     8ec:	8f ad       	ldd	r24, Y+63	; 0x3f
     8ee:	26 97       	sbiw	r28, 0x06	; 6
     8f0:	81 53       	subi	r24, 0x31	; 49
     8f2:	83 30       	cpi	r24, 0x03	; 3
     8f4:	78 f0       	brcs	.+30     	; 0x914 <__stack+0xb5>
								//////////////
								break;


								default:
								LCD_enuClearDisplay();
     8f6:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
								LCD_enuDisplayString("Invalid Choice");
     8fa:	8f e1       	ldi	r24, 0x1F	; 31
     8fc:	94 e0       	ldi	r25, 0x04	; 4
     8fe:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	93 ec       	ldi	r25, 0xC3	; 195
     906:	e9 e0       	ldi	r30, 0x09	; 9
     908:	81 50       	subi	r24, 0x01	; 1
     90a:	90 40       	sbci	r25, 0x00	; 0
     90c:	e0 40       	sbci	r30, 0x00	; 0
     90e:	e1 f7       	brne	.-8      	; 0x908 <__stack+0xa9>
     910:	00 c0       	rjmp	.+0      	; 0x912 <__stack+0xb3>
     912:	00 00       	nop
								_delay_ms(200);
								break;
								}
							Program_Status_Flag = IDLE_STATUS;
     914:	87 e0       	ldi	r24, 0x07	; 7
     916:	28 96       	adiw	r28, 0x08	; 8
     918:	8f af       	std	Y+63, r24	; 0x3f
     91a:	28 97       	sbiw	r28, 0x08	; 8
     91c:	21 ce       	rjmp	.-958    	; 0x560 <main+0xec>
					case '6':
					SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
					ShowToUser = LOG_OUT_CHOICE;
					break;
					case '7':
					SPI_ui8TransmitRecive(ROOM5_LED_TOGGLE);
     91e:	85 e0       	ldi	r24, 0x05	; 5
     920:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     924:	80 92 5b 04 	sts	0x045B, r8	; 0x80045b <ShowToUser>
					break;
     928:	1b e0       	ldi	r17, 0x0B	; 11
						{ShowToUser = MAIN_MENU;} 
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = DOOR_MENU;}
				break;
				
				case LOG_OUT_CHOICE:
					UART_enuSendString("\r\n1-Log Out\r\n2-Return to main menu\r\n");
     92a:	80 ea       	ldi	r24, 0xA0	; 160
     92c:	93 e0       	ldi	r25, 0x03	; 3
     92e:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     932:	ce 01       	movw	r24, r28
     934:	8c 5b       	subi	r24, 0xBC	; 188
     936:	9f 4f       	sbci	r25, 0xFF	; 255
     938:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     93c:	25 96       	adiw	r28, 0x05	; 5
     93e:	8f ad       	ldd	r24, Y+63	; 0x3f
     940:	25 97       	sbiw	r28, 0x05	; 5
     942:	81 33       	cpi	r24, 0x31	; 49
     944:	09 f4       	brne	.+2      	; 0x948 <__stack+0xe9>
     946:	32 c1       	rjmp	.+612    	; 0xbac <__stack+0x34d>
							Program_Status_Flag = IDLE_STATUS;	
							ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu 
							UART_enuSendString("\r\nLogged Out\r\n");
						}
				
					else if(UART_CHOICE == '2')
     948:	82 33       	cpi	r24, 0x32	; 50
     94a:	09 f4       	brne	.+2      	; 0x94e <__stack+0xef>
     94c:	b6 c0       	rjmp	.+364    	; 0xaba <__stack+0x25b>
						{ShowToUser = MAIN_MENU;}
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = LOG_OUT_CHOICE;}
     94e:	8c e8       	ldi	r24, 0x8C	; 140
     950:	93 e0       	ldi	r25, 0x03	; 3
     952:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
     956:	10 93 5b 04 	sts	0x045B, r17	; 0x80045b <ShowToUser>
     95a:	2f cf       	rjmp	.-418    	; 0x7ba <main+0x346>
					case '5':
					SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
					ShowToUser = LOG_OUT_CHOICE;
					break;
					case '6':
					SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
     95c:	84 e0       	ldi	r24, 0x04	; 4
     95e:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     962:	80 92 5b 04 	sts	0x045B, r8	; 0x80045b <ShowToUser>
					break;
     966:	1b e0       	ldi	r17, 0x0B	; 11
     968:	e0 cf       	rjmp	.-64     	; 0x92a <__stack+0xcb>
					case '4':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
					ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
					break;
					case '5':
					SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
     96a:	83 e0       	ldi	r24, 0x03	; 3
     96c:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     970:	80 92 5b 04 	sts	0x045B, r8	; 0x80045b <ShowToUser>
					break;
     974:	1b e0       	ldi	r17, 0x0B	; 11
     976:	d9 cf       	rjmp	.-78     	; 0x92a <__stack+0xcb>
					case '3':
					SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
					ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
					break;
					case '4':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
     978:	82 e0       	ldi	r24, 0x02	; 2
     97a:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
     97e:	80 92 5b 04 	sts	0x045B, r8	; 0x80045b <ShowToUser>
					break;
     982:	1b e0       	ldi	r17, 0x0B	; 11
     984:	d2 cf       	rjmp	.-92     	; 0x92a <__stack+0xcb>
					break;
					case '2':
					ShowToUser = REMOVE_USER_COMMAND;
					break;
					case '3':
					SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
     98c:	80 92 5b 04 	sts	0x045B, r8	; 0x80045b <ShowToUser>
					break;
     990:	1b e0       	ldi	r17, 0x0B	; 11
     992:	cb cf       	rjmp	.-106    	; 0x92a <__stack+0xcb>
				{
					case '1':
					ShowToUser = ADD_USER_COMMAND;
					break;
					case '2':
					ShowToUser = REMOVE_USER_COMMAND;
     994:	40 92 5b 04 	sts	0x045B, r4	; 0x80045b <ShowToUser>
					}
					ShowToUser=LOG_OUT_CHOICE;
				break;
				
				case REMOVE_USER_COMMAND:
					if (LoginSystem_RemoveUser(LoginSystem_AstrUsers,&LoginSystem_NumOfRegisteredUsers) == TRUE)
     998:	be 01       	movw	r22, r28
     99a:	6a 5b       	subi	r22, 0xBA	; 186
     99c:	7f 4f       	sbci	r23, 0xFF	; 255
     99e:	c5 01       	movw	r24, r10
     9a0:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LoginSystem_RemoveUser>
     9a4:	81 30       	cpi	r24, 0x01	; 1
     9a6:	09 f4       	brne	.+2      	; 0x9aa <__stack+0x14b>
     9a8:	9e c0       	rjmp	.+316    	; 0xae6 <__stack+0x287>
						{UART_enuSendString("\r\nRemoved Successfully\r\n");	ShowToUser=LOG_OUT_CHOICE;}
					else	{UART_enuSendString("\r\nUsername not Found \r\nReturning to Main Menu\r\n");}
     9aa:	8d ee       	ldi	r24, 0xED	; 237
     9ac:	92 e0       	ldi	r25, 0x02	; 2
     9ae:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
					ShowToUser=MAIN_MENU;
     9b2:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <ShowToUser>
     9b6:	2f ef       	ldi	r18, 0xFF	; 255
     9b8:	8d e2       	ldi	r24, 0x2D	; 45
     9ba:	92 e2       	ldi	r25, 0x22	; 34
     9bc:	21 50       	subi	r18, 0x01	; 1
     9be:	80 40       	sbci	r24, 0x00	; 0
     9c0:	90 40       	sbci	r25, 0x00	; 0
     9c2:	e1 f7       	brne	.-8      	; 0x9bc <__stack+0x15d>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <__stack+0x167>
     9c6:	00 00       	nop
     9c8:	f8 ce       	rjmp	.-528    	; 0x7ba <main+0x346>
				
				UART_enuRecieveChar(&UART_CHOICE);
				switch(UART_CHOICE)
				{
					case '1':
					ShowToUser = ADD_USER_COMMAND;
     9ca:	86 e0       	ldi	r24, 0x06	; 6
     9cc:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <ShowToUser>
				}
			}
			switch (ShowToUser)
			{
				case ADD_USER_COMMAND:
					if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
     9d0:	27 96       	adiw	r28, 0x07	; 7
     9d2:	8f ad       	ldd	r24, Y+63	; 0x3f
     9d4:	27 97       	sbiw	r28, 0x07	; 7
     9d6:	84 30       	cpi	r24, 0x04	; 4
     9d8:	08 f0       	brcs	.+2      	; 0x9dc <__stack+0x17d>
     9da:	90 c0       	rjmp	.+288    	; 0xafc <__stack+0x29d>
					{
						LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     9dc:	98 9e       	mul	r9, r24
     9de:	c0 01       	movw	r24, r0
     9e0:	11 24       	eor	r1, r1
     9e2:	bc 01       	movw	r22, r24
     9e4:	6b 5f       	subi	r22, 0xFB	; 251
     9e6:	7f 4f       	sbci	r23, 0xFF	; 255
     9e8:	6a 0d       	add	r22, r10
     9ea:	7b 1d       	adc	r23, r11
     9ec:	8a 0d       	add	r24, r10
     9ee:	9b 1d       	adc	r25, r11
     9f0:	0e 94 2c 01 	call	0x258	; 0x258 <LoginSystem_enuGetDataFromUserBY_UART>
						UART_enuSendString("\r\n1-Remoted");
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	92 e0       	ldi	r25, 0x02	; 2
     9f8:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
						UART_enuSendString("\r\n2-Promoted");
     9fc:	8f e0       	ldi	r24, 0x0F	; 15
     9fe:	92 e0       	ldi	r25, 0x02	; 2
     a00:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
						UART_enuSendString("\r\n3-Nonremoted");
     a04:	8c e1       	ldi	r24, 0x1C	; 28
     a06:	92 e0       	ldi	r25, 0x02	; 2
     a08:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
						UART_enuSendString("\r\n\r\nPriority Arrangment: Promoted > Nonremoted (LCD+Keypad) > Remoted\r\n");
     a0c:	8b e2       	ldi	r24, 0x2B	; 43
     a0e:	92 e0       	ldi	r25, 0x02	; 2
     a10:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
						UART_enuRecieveChar(&UART_CHOICE);
     a14:	ce 01       	movw	r24, r28
     a16:	8c 5b       	subi	r24, 0xBC	; 188
     a18:	9f 4f       	sbci	r25, 0xFF	; 255
     a1a:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <UART_enuRecieveChar>
						if (UART_CHOICE == '1')
     a1e:	25 96       	adiw	r28, 0x05	; 5
     a20:	8f ad       	ldd	r24, Y+63	; 0x3f
     a22:	25 97       	sbiw	r28, 0x05	; 5
     a24:	81 33       	cpi	r24, 0x31	; 49
     a26:	09 f4       	brne	.+2      	; 0xa2a <__stack+0x1cb>
     a28:	cc c0       	rjmp	.+408    	; 0xbc2 <__stack+0x363>
						LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = REMOTED_USER;
						else if (UART_CHOICE == '2')
     a2a:	82 33       	cpi	r24, 0x32	; 50
     a2c:	09 f4       	brne	.+2      	; 0xa30 <__stack+0x1d1>
     a2e:	35 c1       	rjmp	.+618    	; 0xc9a <__stack+0x43b>
						LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = PROMOTED_USER;
						else if (UART_CHOICE == '3')
     a30:	83 33       	cpi	r24, 0x33	; 51
     a32:	09 f0       	breq	.+2      	; 0xa36 <__stack+0x1d7>
     a34:	d3 c0       	rjmp	.+422    	; 0xbdc <__stack+0x37d>
						LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = NORMAL_USER;
     a36:	27 96       	adiw	r28, 0x07	; 7
     a38:	2f ad       	ldd	r18, Y+63	; 0x3f
     a3a:	27 97       	sbiw	r28, 0x07	; 7
     a3c:	82 2f       	mov	r24, r18
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	f5 01       	movw	r30, r10
     a42:	92 9e       	mul	r9, r18
     a44:	e0 0d       	add	r30, r0
     a46:	f1 1d       	adc	r31, r1
     a48:	11 24       	eor	r1, r1
     a4a:	12 86       	std	Z+10, r1	; 0x0a
						else{
							UART_enuSendString("\r\nInvalid Choice\r\n");/////////////////////////////////////////////////////////////fel a5er
						_delay_ms(1000);}
						LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
     a4c:	98 9e       	mul	r9, r24
     a4e:	f0 01       	movw	r30, r0
     a50:	99 9e       	mul	r9, r25
     a52:	f0 0d       	add	r31, r0
     a54:	11 24       	eor	r1, r1
     a56:	ea 0d       	add	r30, r10
     a58:	fb 1d       	adc	r31, r11
     a5a:	ce 01       	movw	r24, r28
     a5c:	8a 5b       	subi	r24, 0xBA	; 186
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	6c 01       	movw	r12, r24
     a62:	e0 80       	ld	r14, Z
     a64:	f1 80       	ldd	r15, Z+1	; 0x01
     a66:	02 81       	ldd	r16, Z+2	; 0x02
     a68:	13 81       	ldd	r17, Z+3	; 0x03
     a6a:	24 81       	ldd	r18, Z+4	; 0x04
     a6c:	35 81       	ldd	r19, Z+5	; 0x05
     a6e:	46 81       	ldd	r20, Z+6	; 0x06
     a70:	57 81       	ldd	r21, Z+7	; 0x07
     a72:	60 85       	ldd	r22, Z+8	; 0x08
     a74:	71 85       	ldd	r23, Z+9	; 0x09
     a76:	82 85       	ldd	r24, Z+10	; 0x0a
     a78:	0e 94 52 00 	call	0xa4	; 0xa4 <LoginSystem_SaveNewUser>
						UART_enuSendString("\r\nRegistered Successfully\r\n");
     a7c:	83 e7       	ldi	r24, 0x73	; 115
     a7e:	92 e0       	ldi	r25, 0x02	; 2
     a80:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
						ShowToUser = LOG_OUT_CHOICE;
					}
					else if(UART_CHOICE == '2')
					{
						SPI_ui8TransmitRecive(CLOSE_DOOR_COMMAND);
						ShowToUser = LOG_OUT_CHOICE;
     a84:	20 92 5b 04 	sts	0x045B, r2	; 0x80045b <ShowToUser>
     a88:	98 ce       	rjmp	.-720    	; 0x7ba <main+0x346>
					case '8':
					SPI_ui8TransmitRecive(DIMMER);
					ShowToUser = DIMMER_MENU;
					break;
					case '9':
					ShowToUser = DOOR_MENU;  
     a8a:	50 92 5b 04 	sts	0x045B, r5	; 0x80045b <ShowToUser>
					break;
     a8e:	1a e0       	ldi	r17, 0x0A	; 10
					SPI_ui8TransmitRecive(Dimmer_Percentage);
					ShowToUser=LOG_OUT_CHOICE;
				break;
				
				case DOOR_MENU:
					UART_enuSendString("\r\nDoor Options \r\n 1-Open Door\r\n 2-Close Door\r\n 0-Return to main menu\r\n ");
     a90:	84 e4       	ldi	r24, 0x44	; 68
     a92:	93 e0       	ldi	r25, 0x03	; 3
     a94:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     a98:	ce 01       	movw	r24, r28
     a9a:	8c 5b       	subi	r24, 0xBC	; 188
     a9c:	9f 4f       	sbci	r25, 0xFF	; 255
     a9e:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     aa2:	25 96       	adiw	r28, 0x05	; 5
     aa4:	8f ad       	ldd	r24, Y+63	; 0x3f
     aa6:	25 97       	sbiw	r28, 0x05	; 5
     aa8:	81 33       	cpi	r24, 0x31	; 49
     aaa:	09 f4       	brne	.+2      	; 0xaae <__stack+0x24f>
     aac:	79 c0       	rjmp	.+242    	; 0xba0 <__stack+0x341>
					{
						SPI_ui8TransmitRecive(OPEN_DOOR_COMMAND);	
						ShowToUser = LOG_OUT_CHOICE;
					}
					else if(UART_CHOICE == '2')
     aae:	82 33       	cpi	r24, 0x32	; 50
     ab0:	09 f4       	brne	.+2      	; 0xab4 <__stack+0x255>
     ab2:	ef c0       	rjmp	.+478    	; 0xc92 <__stack+0x433>
					{
						SPI_ui8TransmitRecive(CLOSE_DOOR_COMMAND);
						ShowToUser = LOG_OUT_CHOICE;
					}
					else if (UART_CHOICE == '0') 
     ab4:	80 33       	cpi	r24, 0x30	; 48
     ab6:	09 f0       	breq	.+2      	; 0xaba <__stack+0x25b>
     ab8:	4a cf       	rjmp	.-364    	; 0x94e <__stack+0xef>
						{ShowToUser = MAIN_MENU;} 
     aba:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <ShowToUser>
     abe:	7d ce       	rjmp	.-774    	; 0x7ba <main+0x346>
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
					break;
				}
			}
			switch (ShowToUser)
     ac0:	18 30       	cpi	r17, 0x08	; 8
     ac2:	09 f4       	brne	.+2      	; 0xac6 <__stack+0x267>
     ac4:	49 ce       	rjmp	.-878    	; 0x758 <main+0x2e4>
     ac6:	a0 f4       	brcc	.+40     	; 0xaf0 <__stack+0x291>
     ac8:	16 30       	cpi	r17, 0x06	; 6
     aca:	09 f4       	brne	.+2      	; 0xace <__stack+0x26f>
     acc:	81 cf       	rjmp	.-254    	; 0x9d0 <__stack+0x171>
     ace:	17 30       	cpi	r17, 0x07	; 7
     ad0:	09 f0       	breq	.+2      	; 0xad4 <__stack+0x275>
     ad2:	73 ce       	rjmp	.-794    	; 0x7ba <main+0x346>
					}
					ShowToUser=LOG_OUT_CHOICE;
				break;
				
				case REMOVE_USER_COMMAND:
					if (LoginSystem_RemoveUser(LoginSystem_AstrUsers,&LoginSystem_NumOfRegisteredUsers) == TRUE)
     ad4:	be 01       	movw	r22, r28
     ad6:	6a 5b       	subi	r22, 0xBA	; 186
     ad8:	7f 4f       	sbci	r23, 0xFF	; 255
     ada:	c5 01       	movw	r24, r10
     adc:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <LoginSystem_RemoveUser>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	09 f0       	breq	.+2      	; 0xae6 <__stack+0x287>
     ae4:	62 cf       	rjmp	.-316    	; 0x9aa <__stack+0x14b>
						{UART_enuSendString("\r\nRemoved Successfully\r\n");	ShowToUser=LOG_OUT_CHOICE;}
     ae6:	84 ed       	ldi	r24, 0xD4	; 212
     ae8:	92 e0       	ldi	r25, 0x02	; 2
     aea:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
     aee:	61 cf       	rjmp	.-318    	; 0x9b2 <__stack+0x153>
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
					break;
				}
			}
			switch (ShowToUser)
     af0:	1a 30       	cpi	r17, 0x0A	; 10
     af2:	71 f2       	breq	.-100    	; 0xa90 <__stack+0x231>
     af4:	1b 30       	cpi	r17, 0x0B	; 11
     af6:	09 f4       	brne	.+2      	; 0xafa <__stack+0x29b>
     af8:	18 cf       	rjmp	.-464    	; 0x92a <__stack+0xcb>
     afa:	5f ce       	rjmp	.-834    	; 0x7ba <main+0x346>
						LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
						UART_enuSendString("\r\nRegistered Successfully\r\n");
					}
					else
					{
						UART_enuSendString("\r\nReached The Max Number of Stored Users");
     afc:	8f e8       	ldi	r24, 0x8F	; 143
     afe:	92 e0       	ldi	r25, 0x02	; 2
     b00:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
						UART_enuSendString("\r\nCouldn't Store A New User");
     b04:	88 eb       	ldi	r24, 0xB8	; 184
     b06:	92 e0       	ldi	r25, 0x02	; 2
     b08:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
						UART_enuSendString("\r\nReturning to Main Menu\r\n");
     b0c:	82 e0       	ldi	r24, 0x02	; 2
     b0e:	93 e0       	ldi	r25, 0x03	; 3
     b10:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
     b14:	9f ef       	ldi	r25, 0xFF	; 255
     b16:	ed e2       	ldi	r30, 0x2D	; 45
     b18:	f2 e2       	ldi	r31, 0x22	; 34
     b1a:	91 50       	subi	r25, 0x01	; 1
     b1c:	e0 40       	sbci	r30, 0x00	; 0
     b1e:	f0 40       	sbci	r31, 0x00	; 0
     b20:	e1 f7       	brne	.-8      	; 0xb1a <__stack+0x2bb>
     b22:	00 c0       	rjmp	.+0      	; 0xb24 <__stack+0x2c5>
     b24:	00 00       	nop
     b26:	ae cf       	rjmp	.-164    	; 0xa84 <__stack+0x225>
								LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
								if (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)
								{
									if(LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER )// pro>>>>   // rem: key or not
									{
									UART_enuSendString("\r\nLogged in Successfully\r\n");
     b28:	8e e3       	ldi	r24, 0x3E	; 62
     b2a:	91 e0       	ldi	r25, 0x01	; 1
     b2c:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
     b30:	2f ef       	ldi	r18, 0xFF	; 255
     b32:	89 e6       	ldi	r24, 0x69	; 105
     b34:	98 e1       	ldi	r25, 0x18	; 24
     b36:	21 50       	subi	r18, 0x01	; 1
     b38:	80 40       	sbci	r24, 0x00	; 0
     b3a:	90 40       	sbci	r25, 0x00	; 0
     b3c:	e1 f7       	brne	.-8      	; 0xb36 <__stack+0x2d7>
     b3e:	00 c0       	rjmp	.+0      	; 0xb40 <__stack+0x2e1>
     b40:	00 00       	nop
									_delay_ms(500);
									LoginSystem_u8TrialsLeft =3;
									Program_Status_Flag = REMOTED_USER_MENU_STATUS;
     b42:	e8 e0       	ldi	r30, 0x08	; 8
     b44:	28 96       	adiw	r28, 0x08	; 8
     b46:	ef af       	std	Y+63, r30	; 0x3f
     b48:	28 97       	sbiw	r28, 0x08	; 8
     b4a:	88 e0       	ldi	r24, 0x08	; 8
     b4c:	77 24       	eor	r7, r7
     b4e:	73 94       	inc	r7
								{
									if(LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER )// pro>>>>   // rem: key or not
									{
									UART_enuSendString("\r\nLogged in Successfully\r\n");
									_delay_ms(500);
									LoginSystem_u8TrialsLeft =3;
     b50:	43 e0       	ldi	r20, 0x03	; 3
     b52:	34 2e       	mov	r3, r20
     b54:	ac cd       	rjmp	.-1192   	; 0x6ae <main+0x23a>
			{
				Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
			}
			else if(UART_enuCheck_Connection())
			{
				Program_Status_Flag = ADMIN_LOGIN_PAGE_STATUS;
     b56:	f2 e0       	ldi	r31, 0x02	; 2
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ff af       	std	Y+63, r31	; 0x3f
     b5c:	28 97       	sbiw	r28, 0x08	; 8
     b5e:	82 e0       	ldi	r24, 0x02	; 2
     b60:	09 cd       	rjmp	.-1518   	; 0x574 <main+0x100>
							}

						}
						if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
						{
							LoginSystem_u8TrialsLeft--;
     b62:	1f ef       	ldi	r17, 0xFF	; 255
     b64:	13 0d       	add	r17, r3
							UART_enuSendString("\r\nWrong Username or Password");
     b66:	89 e5       	ldi	r24, 0x59	; 89
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
     b6e:	ff ef       	ldi	r31, 0xFF	; 255
     b70:	25 ea       	ldi	r18, 0xA5	; 165
     b72:	8e e0       	ldi	r24, 0x0E	; 14
     b74:	f1 50       	subi	r31, 0x01	; 1
     b76:	20 40       	sbci	r18, 0x00	; 0
     b78:	80 40       	sbci	r24, 0x00	; 0
     b7a:	e1 f7       	brne	.-8      	; 0xb74 <__stack+0x315>
     b7c:	00 c0       	rjmp	.+0      	; 0xb7e <__stack+0x31f>
     b7e:	00 00       	nop
							_delay_ms(300);
							UART_enuSendString("\r\nRemaining Trials: ");
     b80:	86 e7       	ldi	r24, 0x76	; 118
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
							UART_enuSendChar('0'+LoginSystem_u8TrialsLeft);
     b88:	8f e2       	ldi	r24, 0x2F	; 47
     b8a:	83 0d       	add	r24, r3
     b8c:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <UART_enuSendChar>
							//_delay_ms(1000);
							if (LoginSystem_u8TrialsLeft == 0)
     b90:	11 23       	and	r17, r17
     b92:	09 f4       	brne	.+2      	; 0xb96 <__stack+0x337>
     b94:	8f c0       	rjmp	.+286    	; 0xcb4 <__stack+0x455>
     b96:	28 96       	adiw	r28, 0x08	; 8
     b98:	8f ad       	ldd	r24, Y+63	; 0x3f
     b9a:	28 97       	sbiw	r28, 0x08	; 8
     b9c:	31 2e       	mov	r3, r17
     b9e:	eb cc       	rjmp	.-1578   	; 0x576 <main+0x102>
				case DOOR_MENU:
					UART_enuSendString("\r\nDoor Options \r\n 1-Open Door\r\n 2-Close Door\r\n 0-Return to main menu\r\n ");
					UART_enuRecieveChar(&UART_CHOICE);
					if (UART_CHOICE == '1')
					{
						SPI_ui8TransmitRecive(OPEN_DOOR_COMMAND);	
     ba0:	8d e0       	ldi	r24, 0x0D	; 13
     ba2:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <SPI_ui8TransmitRecive>
						ShowToUser = LOG_OUT_CHOICE;
     ba6:	20 92 5b 04 	sts	0x045B, r2	; 0x80045b <ShowToUser>
     baa:	07 ce       	rjmp	.-1010   	; 0x7ba <main+0x346>
				case LOG_OUT_CHOICE:
					UART_enuSendString("\r\n1-Log Out\r\n2-Return to main menu\r\n");
					UART_enuRecieveChar(&UART_CHOICE);
					if (UART_CHOICE == '1')
						{
							Program_Status_Flag = IDLE_STATUS;	
     bac:	f7 e0       	ldi	r31, 0x07	; 7
     bae:	28 96       	adiw	r28, 0x08	; 8
     bb0:	ff af       	std	Y+63, r31	; 0x3f
     bb2:	28 97       	sbiw	r28, 0x08	; 8
							ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu 
     bb4:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <ShowToUser>
							UART_enuSendString("\r\nLogged Out\r\n");
     bb8:	85 ec       	ldi	r24, 0xC5	; 197
     bba:	93 e0       	ldi	r25, 0x03	; 3
     bbc:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
     bc0:	fc cd       	rjmp	.-1032   	; 0x7ba <main+0x346>
						UART_enuSendString("\r\n2-Promoted");
						UART_enuSendString("\r\n3-Nonremoted");
						UART_enuSendString("\r\n\r\nPriority Arrangment: Promoted > Nonremoted (LCD+Keypad) > Remoted\r\n");
						UART_enuRecieveChar(&UART_CHOICE);
						if (UART_CHOICE == '1')
						LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = REMOTED_USER;
     bc2:	27 96       	adiw	r28, 0x07	; 7
     bc4:	2f ad       	ldd	r18, Y+63	; 0x3f
     bc6:	27 97       	sbiw	r28, 0x07	; 7
     bc8:	82 2f       	mov	r24, r18
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	f5 01       	movw	r30, r10
     bce:	92 9e       	mul	r9, r18
     bd0:	e0 0d       	add	r30, r0
     bd2:	f1 1d       	adc	r31, r1
     bd4:	11 24       	eor	r1, r1
     bd6:	22 e0       	ldi	r18, 0x02	; 2
     bd8:	22 87       	std	Z+10, r18	; 0x0a
     bda:	38 cf       	rjmp	.-400    	; 0xa4c <__stack+0x1ed>
						else if (UART_CHOICE == '2')
						LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = PROMOTED_USER;
						else if (UART_CHOICE == '3')
						LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = NORMAL_USER;
						else{
							UART_enuSendString("\r\nInvalid Choice\r\n");/////////////////////////////////////////////////////////////fel a5er
     bdc:	80 ef       	ldi	r24, 0xF0	; 240
     bde:	91 e0       	ldi	r25, 0x01	; 1
     be0:	0e 94 02 0d 	call	0x1a04	; 0x1a04 <UART_enuSendString>
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	93 ed       	ldi	r25, 0xD3	; 211
     be8:	e0 e3       	ldi	r30, 0x30	; 48
     bea:	81 50       	subi	r24, 0x01	; 1
     bec:	90 40       	sbci	r25, 0x00	; 0
     bee:	e0 40       	sbci	r30, 0x00	; 0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <__stack+0x38b>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <__stack+0x395>
     bf4:	00 00       	nop
     bf6:	27 96       	adiw	r28, 0x07	; 7
     bf8:	8f ad       	ldd	r24, Y+63	; 0x3f
     bfa:	27 97       	sbiw	r28, 0x07	; 7
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	26 cf       	rjmp	.-436    	; 0xa4c <__stack+0x1ed>
					{
						LoginSystem_u8TrialsLeft =3;
						break;
					}
				}
				if (LoginSystem_u8TrueFlag == FALSE)
     c00:	11 11       	cpse	r17, r1
     c02:	17 ce       	rjmp	.-978    	; 0x832 <__DATA_REGION_LENGTH__+0x32>
				{
					LoginSystem_u8TrialsLeft--;
     c04:	3a 94       	dec	r3
					LCD_enuClearDisplay();
     c06:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Wrong Username");
     c0a:	84 ed       	ldi	r24, 0xD4	; 212
     c0c:	93 e0       	ldi	r25, 0x03	; 3
     c0e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     c12:	60 e0       	ldi	r22, 0x00	; 0
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("or Password");
     c1a:	8a e6       	ldi	r24, 0x6A	; 106
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
     c22:	2f ef       	ldi	r18, 0xFF	; 255
     c24:	82 e5       	ldi	r24, 0x52	; 82
     c26:	97 e0       	ldi	r25, 0x07	; 7
     c28:	21 50       	subi	r18, 0x01	; 1
     c2a:	80 40       	sbci	r24, 0x00	; 0
     c2c:	90 40       	sbci	r25, 0x00	; 0
     c2e:	e1 f7       	brne	.-8      	; 0xc28 <__stack+0x3c9>
     c30:	00 c0       	rjmp	.+0      	; 0xc32 <__stack+0x3d3>
     c32:	00 00       	nop
					_delay_ms(150);
					LCD_enuClearDisplay();
     c34:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Remaining Trials: ");
     c38:	88 e7       	ldi	r24, 0x78	; 120
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     c40:	60 e0       	ldi	r22, 0x00	; 0
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
     c48:	83 2d       	mov	r24, r3
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <LCD_enuDisplayUnsignedInteger>
     c50:	ef ef       	ldi	r30, 0xFF	; 255
     c52:	f2 e5       	ldi	r31, 0x52	; 82
     c54:	27 e0       	ldi	r18, 0x07	; 7
     c56:	e1 50       	subi	r30, 0x01	; 1
     c58:	f0 40       	sbci	r31, 0x00	; 0
     c5a:	20 40       	sbci	r18, 0x00	; 0
     c5c:	e1 f7       	brne	.-8      	; 0xc56 <__stack+0x3f7>
     c5e:	00 c0       	rjmp	.+0      	; 0xc60 <__stack+0x401>
     c60:	00 00       	nop
					_delay_ms(150);
					if (LoginSystem_u8TrialsLeft == 0)
     c62:	33 20       	and	r3, r3
     c64:	71 f0       	breq	.+28     	; 0xc82 <__stack+0x423>
     c66:	28 96       	adiw	r28, 0x08	; 8
     c68:	8f ad       	ldd	r24, Y+63	; 0x3f
     c6a:	28 97       	sbiw	r28, 0x08	; 8
     c6c:	10 e0       	ldi	r17, 0x00	; 0
				
			}
		}
		
		//if (Program_Status_Flag == USER_LOGIN_PAGE_STATUS);
		while (Program_Status_Flag == USER_LOGIN_PAGE_STATUS)///off line user should have interrupt
     c6e:	83 30       	cpi	r24, 0x03	; 3
     c70:	09 f4       	brne	.+2      	; 0xc74 <__stack+0x415>
     c72:	af cd       	rjmp	.-1186   	; 0x7d2 <main+0x35e>
     c74:	2b 96       	adiw	r28, 0x0b	; 11
     c76:	1f af       	std	Y+63, r17	; 0x3f
     c78:	2b 97       	sbiw	r28, 0x0b	; 11


/************************************************************************************************************/
/************************************************************************************************************/

		if (Program_Status_Flag == USER_MENU_STATUS)//off line user menu
     c7a:	85 30       	cpi	r24, 0x05	; 5
     c7c:	09 f0       	breq	.+2      	; 0xc80 <__stack+0x421>
     c7e:	70 cc       	rjmp	.-1824   	; 0x560 <main+0xec>
     c80:	0e ce       	rjmp	.-996    	; 0x89e <__stack+0x3f>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
					_delay_ms(150);
					if (LoginSystem_u8TrialsLeft == 0)
					{
						Program_Status_Flag = BLOCKING_STATUS;
     c82:	86 e0       	ldi	r24, 0x06	; 6
     c84:	28 96       	adiw	r28, 0x08	; 8
     c86:	8f af       	std	Y+63, r24	; 0x3f
     c88:	28 97       	sbiw	r28, 0x08	; 8
     c8a:	2b 96       	adiw	r28, 0x0b	; 11
     c8c:	1f ae       	std	Y+63, r1	; 0x3f
     c8e:	2b 97       	sbiw	r28, 0x0b	; 11
     c90:	67 cc       	rjmp	.-1842   	; 0x560 <main+0xec>
						SPI_ui8TransmitRecive(OPEN_DOOR_COMMAND);	
						ShowToUser = LOG_OUT_CHOICE;
					}
					else if(UART_CHOICE == '2')
					{
						SPI_ui8TransmitRecive(CLOSE_DOOR_COMMAND);
     c92:	8e e0       	ldi	r24, 0x0E	; 14
     c94:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <SPI_ui8TransmitRecive>
     c98:	f5 ce       	rjmp	.-534    	; 0xa84 <__stack+0x225>
						UART_enuSendString("\r\n\r\nPriority Arrangment: Promoted > Nonremoted (LCD+Keypad) > Remoted\r\n");
						UART_enuRecieveChar(&UART_CHOICE);
						if (UART_CHOICE == '1')
						LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = REMOTED_USER;
						else if (UART_CHOICE == '2')
						LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = PROMOTED_USER;
     c9a:	27 96       	adiw	r28, 0x07	; 7
     c9c:	2f ad       	ldd	r18, Y+63	; 0x3f
     c9e:	27 97       	sbiw	r28, 0x07	; 7
     ca0:	82 2f       	mov	r24, r18
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	f5 01       	movw	r30, r10
     ca6:	92 9e       	mul	r9, r18
     ca8:	e0 0d       	add	r30, r0
     caa:	f1 1d       	adc	r31, r1
     cac:	11 24       	eor	r1, r1
     cae:	23 e0       	ldi	r18, 0x03	; 3
     cb0:	22 87       	std	Z+10, r18	; 0x0a
     cb2:	cc ce       	rjmp	.-616    	; 0xa4c <__stack+0x1ed>
     cb4:	70 2e       	mov	r7, r16
							UART_enuSendString("\r\nRemaining Trials: ");
							UART_enuSendChar('0'+LoginSystem_u8TrialsLeft);
							//_delay_ms(1000);
							if (LoginSystem_u8TrialsLeft == 0)
							{
								Program_Status_Flag = BLOCKING_STATUS;
     cb6:	86 e0       	ldi	r24, 0x06	; 6
     cb8:	28 96       	adiw	r28, 0x08	; 8
     cba:	8f af       	std	Y+63, r24	; 0x3f
     cbc:	28 97       	sbiw	r28, 0x08	; 8
     cbe:	31 2c       	mov	r3, r1
     cc0:	f6 cc       	rjmp	.-1556   	; 0x6ae <main+0x23a>
			/************************************************************************************************************/

			else if (Program_Status_Flag == LOAD_LOGIN_SYSTEM_DATABASE)
			{
				/****************************************Load the Login System database from the EEPROM***************************************/
				EEPROM_ui8ReadByteFromAddress(NO_OF_REGISTERED_USERS_ADDRESS,&LoginSystem_NumOfRegisteredUsers);
     cc2:	be 01       	movw	r22, r28
     cc4:	6a 5b       	subi	r22, 0xBA	; 186
     cc6:	7f 4f       	sbci	r23, 0xFF	; 255
     cc8:	81 e1       	ldi	r24, 0x11	; 17
     cca:	0e 94 ad 07 	call	0xf5a	; 0xf5a <EEPROM_ui8ReadByteFromAddress>
     cce:	ff ef       	ldi	r31, 0xFF	; 255
     cd0:	23 ec       	ldi	r18, 0xC3	; 195
     cd2:	89 e0       	ldi	r24, 0x09	; 9
     cd4:	f1 50       	subi	r31, 0x01	; 1
     cd6:	20 40       	sbci	r18, 0x00	; 0
     cd8:	80 40       	sbci	r24, 0x00	; 0
     cda:	e1 f7       	brne	.-8      	; 0xcd4 <__stack+0x475>
     cdc:	00 c0       	rjmp	.+0      	; 0xcde <__stack+0x47f>
     cde:	00 00       	nop
				_delay_ms(200);
				

				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS,LoginSystem_strAdmin.UserName,MAX_NO_OF_LETTERS);
     ce0:	fe 01       	movw	r30, r28
     ce2:	bd 96       	adiw	r30, 0x2d	; 45
     ce4:	2a 96       	adiw	r28, 0x0a	; 10
     ce6:	ff af       	std	Y+63, r31	; 0x3f
     ce8:	ee af       	std	Y+62, r30	; 0x3e
     cea:	2a 97       	sbiw	r28, 0x0a	; 10
     cec:	44 e0       	ldi	r20, 0x04	; 4
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	bf 01       	movw	r22, r30
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     cfa:	19 aa       	std	Y+49, r1	; 0x31
     cfc:	ff ef       	ldi	r31, 0xFF	; 255
     cfe:	22 e5       	ldi	r18, 0x52	; 82
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	f1 50       	subi	r31, 0x01	; 1
     d04:	20 40       	sbci	r18, 0x00	; 0
     d06:	80 40       	sbci	r24, 0x00	; 0
     d08:	e1 f7       	brne	.-8      	; 0xd02 <__stack+0x4a3>
     d0a:	00 c0       	rjmp	.+0      	; 0xd0c <__stack+0x4ad>
     d0c:	00 00       	nop
				_delay_ms(150);
				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS,LoginSystem_strAdmin.Password,MAX_NO_OF_LETTERS);
     d0e:	fe 01       	movw	r30, r28
     d10:	f2 96       	adiw	r30, 0x32	; 50
     d12:	2d 96       	adiw	r28, 0x0d	; 13
     d14:	ff af       	std	Y+63, r31	; 0x3f
     d16:	ee af       	std	Y+62, r30	; 0x3e
     d18:	2d 97       	sbiw	r28, 0x0d	; 13
     d1a:	44 e0       	ldi	r20, 0x04	; 4
     d1c:	50 e0       	ldi	r21, 0x00	; 0
     d1e:	bf 01       	movw	r22, r30
     d20:	85 e0       	ldi	r24, 0x05	; 5
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	0e 94 b6 07 	call	0xf6c	; 0xf6c <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     d28:	1e aa       	std	Y+54, r1	; 0x36
     d2a:	ff ef       	ldi	r31, 0xFF	; 255
     d2c:	22 e5       	ldi	r18, 0x52	; 82
     d2e:	87 e0       	ldi	r24, 0x07	; 7
     d30:	f1 50       	subi	r31, 0x01	; 1
     d32:	20 40       	sbci	r18, 0x00	; 0
     d34:	80 40       	sbci	r24, 0x00	; 0
     d36:	e1 f7       	brne	.-8      	; 0xd30 <__stack+0x4d1>
     d38:	00 c0       	rjmp	.+0      	; 0xd3a <__stack+0x4db>
     d3a:	00 00       	nop
				_delay_ms(150);
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	8f ab       	std	Y+55, r24	; 0x37
     d40:	9f ef       	ldi	r25, 0xFF	; 255
     d42:	e2 e5       	ldi	r30, 0x52	; 82
     d44:	f7 e0       	ldi	r31, 0x07	; 7
     d46:	91 50       	subi	r25, 0x01	; 1
     d48:	e0 40       	sbci	r30, 0x00	; 0
     d4a:	f0 40       	sbci	r31, 0x00	; 0
     d4c:	e1 f7       	brne	.-8      	; 0xd46 <__stack+0x4e7>
     d4e:	00 c0       	rjmp	.+0      	; 0xd50 <__stack+0x4f1>
     d50:	00 00       	nop
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     d52:	27 96       	adiw	r28, 0x07	; 7
     d54:	8f ad       	ldd	r24, Y+63	; 0x3f
     d56:	27 97       	sbiw	r28, 0x07	; 7
     d58:	88 23       	and	r24, r24
     d5a:	09 f4       	brne	.+2      	; 0xd5e <__stack+0x4ff>
     d5c:	fa c0       	rjmp	.+500    	; 0xf52 <__stack+0x6f3>
     d5e:	61 2c       	mov	r6, r1
     d60:	fe 01       	movw	r30, r28
     d62:	31 96       	adiw	r30, 0x01	; 1
     d64:	5f 01       	movw	r10, r30
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     d66:	bb e0       	ldi	r27, 0x0B	; 11
     d68:	fb 2e       	mov	r15, r27
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
     d6a:	f9 e0       	ldi	r31, 0x09	; 9
     d6c:	6f 9e       	mul	r6, r31
     d6e:	20 01       	movw	r4, r0
     d70:	11 24       	eor	r1, r1
     d72:	42 01       	movw	r8, r4
     d74:	22 e1       	ldi	r18, 0x12	; 18
     d76:	82 0e       	add	r8, r18
     d78:	91 1c       	adc	r9, r1
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     d7a:	f6 9c       	mul	r15, r6
     d7c:	80 01       	movw	r16, r0
     d7e:	11 24       	eor	r1, r1
     d80:	65 01       	movw	r12, r10
     d82:	c0 0e       	add	r12, r16
     d84:	d1 1e       	adc	r13, r17
     d86:	44 e0       	ldi	r20, 0x04	; 4
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	b6 01       	movw	r22, r12
     d8c:	c4 01       	movw	r24, r8
     d8e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <EEPROM_vReadBlockFromAddress>
     d92:	8f ef       	ldi	r24, 0xFF	; 255
     d94:	92 e5       	ldi	r25, 0x52	; 82
     d96:	e7 e0       	ldi	r30, 0x07	; 7
     d98:	81 50       	subi	r24, 0x01	; 1
     d9a:	90 40       	sbci	r25, 0x00	; 0
     d9c:	e0 40       	sbci	r30, 0x00	; 0
     d9e:	e1 f7       	brne	.-8      	; 0xd98 <__stack+0x539>
     da0:	00 c0       	rjmp	.+0      	; 0xda2 <__stack+0x543>
     da2:	00 00       	nop
					_delay_ms(150);

					EEPROM_vReadBlockFromAddress(Local_u16UserAddress + MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].Password,MAX_NO_OF_LETTERS);
     da4:	b8 01       	movw	r22, r16
     da6:	6b 5f       	subi	r22, 0xFB	; 251
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	6a 0d       	add	r22, r10
     dac:	7b 1d       	adc	r23, r11
     dae:	44 e0       	ldi	r20, 0x04	; 4
     db0:	50 e0       	ldi	r21, 0x00	; 0
     db2:	c2 01       	movw	r24, r4
     db4:	46 96       	adiw	r24, 0x16	; 22
     db6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <EEPROM_vReadBlockFromAddress>
     dba:	ff ef       	ldi	r31, 0xFF	; 255
     dbc:	22 e5       	ldi	r18, 0x52	; 82
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	f1 50       	subi	r31, 0x01	; 1
     dc2:	20 40       	sbci	r18, 0x00	; 0
     dc4:	80 40       	sbci	r24, 0x00	; 0
     dc6:	e1 f7       	brne	.-8      	; 0xdc0 <__stack+0x561>
     dc8:	00 c0       	rjmp	.+0      	; 0xdca <__stack+0x56b>
     dca:	00 00       	nop
					_delay_ms(150);
					EEPROM_ui8ReadByteFromAddress(Local_u16UserAddress + 2*MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].User_Priority);
     dcc:	b8 01       	movw	r22, r16
     dce:	66 5f       	subi	r22, 0xF6	; 246
     dd0:	7f 4f       	sbci	r23, 0xFF	; 255
     dd2:	6a 0d       	add	r22, r10
     dd4:	7b 1d       	adc	r23, r11
     dd6:	88 e0       	ldi	r24, 0x08	; 8
     dd8:	88 0d       	add	r24, r8
     dda:	0e 94 ad 07 	call	0xf5a	; 0xf5a <EEPROM_ui8ReadByteFromAddress>
     dde:	9f ef       	ldi	r25, 0xFF	; 255
     de0:	e2 e5       	ldi	r30, 0x52	; 82
     de2:	f7 e0       	ldi	r31, 0x07	; 7
     de4:	91 50       	subi	r25, 0x01	; 1
     de6:	e0 40       	sbci	r30, 0x00	; 0
     de8:	f0 40       	sbci	r31, 0x00	; 0
     dea:	e1 f7       	brne	.-8      	; 0xde4 <__stack+0x585>
     dec:	00 c0       	rjmp	.+0      	; 0xdee <__stack+0x58f>
     dee:	00 00       	nop
					_delay_ms(150);
					LoginSystem_AstrUsers[Local_u8Iterator].UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     df0:	f6 01       	movw	r30, r12
     df2:	14 82       	std	Z+4, r1	; 0x04
					LoginSystem_AstrUsers[Local_u8Iterator].Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     df4:	11 86       	std	Z+9, r1	; 0x09
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     df6:	63 94       	inc	r6
     df8:	27 96       	adiw	r28, 0x07	; 7
     dfa:	8f ad       	ldd	r24, Y+63	; 0x3f
     dfc:	27 97       	sbiw	r28, 0x07	; 7
     dfe:	68 16       	cp	r6, r24
     e00:	08 f4       	brcc	.+2      	; 0xe04 <__stack+0x5a5>
     e02:	b3 cf       	rjmp	.-154    	; 0xd6a <__stack+0x50b>
				}
				
				


				Program_Status_Flag = IDLE_STATUS;
     e04:	87 e0       	ldi	r24, 0x07	; 7
     e06:	28 96       	adiw	r28, 0x08	; 8
     e08:	8f af       	std	Y+63, r24	; 0x3f
     e0a:	28 97       	sbiw	r28, 0x08	; 8
     e0c:	9d cb       	rjmp	.-2246   	; 0x548 <main+0xd4>
	
	
			if (Program_Status_Flag == FIRST_TIME_USE_STATUS)
			{

				EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,LoginSystem_NumOfRegisteredUsers);
     e0e:	27 96       	adiw	r28, 0x07	; 7
     e10:	6f ad       	ldd	r22, Y+63	; 0x3f
     e12:	27 97       	sbiw	r28, 0x07	; 7
     e14:	81 e1       	ldi	r24, 0x11	; 17
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	0e 94 cd 07 	call	0xf9a	; 0xf9a <EEPROM_vWriteByteToAddress>
     e1c:	8f ef       	ldi	r24, 0xFF	; 255
     e1e:	92 e5       	ldi	r25, 0x52	; 82
     e20:	e7 e0       	ldi	r30, 0x07	; 7
     e22:	81 50       	subi	r24, 0x01	; 1
     e24:	90 40       	sbci	r25, 0x00	; 0
     e26:	e0 40       	sbci	r30, 0x00	; 0
     e28:	e1 f7       	brne	.-8      	; 0xe22 <__stack+0x5c3>
     e2a:	00 c0       	rjmp	.+0      	; 0xe2c <__stack+0x5cd>
     e2c:	00 00       	nop
				_delay_ms(150);
				LCD_enuDisplayString("For First Time");
     e2e:	81 ee       	ldi	r24, 0xE1	; 225
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Use");
     e3e:	80 ef       	ldi	r24, 0xF0	; 240
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
     e46:	ff ef       	ldi	r31, 0xFF	; 255
     e48:	27 ea       	ldi	r18, 0xA7	; 167
     e4a:	81 e6       	ldi	r24, 0x61	; 97
     e4c:	f1 50       	subi	r31, 0x01	; 1
     e4e:	20 40       	sbci	r18, 0x00	; 0
     e50:	80 40       	sbci	r24, 0x00	; 0
     e52:	e1 f7       	brne	.-8      	; 0xe4c <__stack+0x5ed>
     e54:	00 c0       	rjmp	.+0      	; 0xe56 <__stack+0x5f7>
     e56:	00 00       	nop
				_delay_ms(2000);
				LCD_enuClearDisplay();
     e58:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Register Admin");
     e5c:	84 ef       	ldi	r24, 0xF4	; 244
     e5e:	90 e0       	ldi	r25, 0x00	; 0
     e60:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("on Keypad");
     e6c:	83 e0       	ldi	r24, 0x03	; 3
     e6e:	91 e0       	ldi	r25, 0x01	; 1
     e70:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
     e74:	9f ef       	ldi	r25, 0xFF	; 255
     e76:	e7 ea       	ldi	r30, 0xA7	; 167
     e78:	f1 e6       	ldi	r31, 0x61	; 97
     e7a:	91 50       	subi	r25, 0x01	; 1
     e7c:	e0 40       	sbci	r30, 0x00	; 0
     e7e:	f0 40       	sbci	r31, 0x00	; 0
     e80:	e1 f7       	brne	.-8      	; 0xe7a <__stack+0x61b>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <__stack+0x625>
     e84:	00 00       	nop
				_delay_ms(2000);
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_strAdmin.UserName, LoginSystem_strAdmin.Password);
     e86:	ce 01       	movw	r24, r28
     e88:	8d 96       	adiw	r24, 0x2d	; 45
     e8a:	2a 96       	adiw	r28, 0x0a	; 10
     e8c:	9f af       	std	Y+63, r25	; 0x3f
     e8e:	8e af       	std	Y+62, r24	; 0x3e
     e90:	2a 97       	sbiw	r28, 0x0a	; 10
     e92:	fe 01       	movw	r30, r28
     e94:	f2 96       	adiw	r30, 0x32	; 50
     e96:	2d 96       	adiw	r28, 0x0d	; 13
     e98:	ff af       	std	Y+63, r31	; 0x3f
     e9a:	ee af       	std	Y+62, r30	; 0x3e
     e9c:	2d 97       	sbiw	r28, 0x0d	; 13
     e9e:	bf 01       	movw	r22, r30
     ea0:	0e 94 c5 00 	call	0x18a	; 0x18a <LoginSystem_enuGetDataFromUserByKeypad>
				LoginSystem_strAdmin.User_Priority = ADMIN_PRIORITY;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	8f ab       	std	Y+55, r24	; 0x37
				
				
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS ,LoginSystem_strAdmin.UserName , MAX_NO_OF_LETTERS);
     ea8:	44 e0       	ldi	r20, 0x04	; 4
     eaa:	50 e0       	ldi	r21, 0x00	; 0
     eac:	2a 96       	adiw	r28, 0x0a	; 10
     eae:	6e ad       	ldd	r22, Y+62	; 0x3e
     eb0:	7f ad       	ldd	r23, Y+63	; 0x3f
     eb2:	2a 97       	sbiw	r28, 0x0a	; 10
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <EEPROM_vWriteBlockToAddress>
     ebc:	ff ef       	ldi	r31, 0xFF	; 255
     ebe:	23 ec       	ldi	r18, 0xC3	; 195
     ec0:	89 e0       	ldi	r24, 0x09	; 9
     ec2:	f1 50       	subi	r31, 0x01	; 1
     ec4:	20 40       	sbci	r18, 0x00	; 0
     ec6:	80 40       	sbci	r24, 0x00	; 0
     ec8:	e1 f7       	brne	.-8      	; 0xec2 <__stack+0x663>
     eca:	00 c0       	rjmp	.+0      	; 0xecc <__stack+0x66d>
     ecc:	00 00       	nop
				_delay_ms(200);
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS ,LoginSystem_strAdmin.Password , MAX_NO_OF_LETTERS);
     ece:	44 e0       	ldi	r20, 0x04	; 4
     ed0:	50 e0       	ldi	r21, 0x00	; 0
     ed2:	2d 96       	adiw	r28, 0x0d	; 13
     ed4:	6e ad       	ldd	r22, Y+62	; 0x3e
     ed6:	7f ad       	ldd	r23, Y+63	; 0x3f
     ed8:	2d 97       	sbiw	r28, 0x0d	; 13
     eda:	85 e0       	ldi	r24, 0x05	; 5
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0e 94 d9 07 	call	0xfb2	; 0xfb2 <EEPROM_vWriteBlockToAddress>
     ee2:	9f ef       	ldi	r25, 0xFF	; 255
     ee4:	e3 ec       	ldi	r30, 0xC3	; 195
     ee6:	f9 e0       	ldi	r31, 0x09	; 9
     ee8:	91 50       	subi	r25, 0x01	; 1
     eea:	e0 40       	sbci	r30, 0x00	; 0
     eec:	f0 40       	sbci	r31, 0x00	; 0
     eee:	e1 f7       	brne	.-8      	; 0xee8 <__stack+0x689>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <__stack+0x693>
     ef2:	00 00       	nop
				_delay_ms(200);

				EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,LOAD_LOGIN_SYSTEM_DATABASE);
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 cd 07 	call	0xf9a	; 0xf9a <EEPROM_vWriteByteToAddress>
     efe:	2f ef       	ldi	r18, 0xFF	; 255
     f00:	82 e5       	ldi	r24, 0x52	; 82
     f02:	97 e0       	ldi	r25, 0x07	; 7
     f04:	21 50       	subi	r18, 0x01	; 1
     f06:	80 40       	sbci	r24, 0x00	; 0
     f08:	90 40       	sbci	r25, 0x00	; 0
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <__stack+0x6a5>
     f0c:	00 c0       	rjmp	.+0      	; 0xf0e <__stack+0x6af>
     f0e:	00 00       	nop
				_delay_ms(150);

				LCD_enuClearDisplay();
     f10:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Saved");
     f14:	8d e0       	ldi	r24, 0x0D	; 13
     f16:	91 e0       	ldi	r25, 0x01	; 1
     f18:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	0e 94 9a 0b 	call	0x1734	; 0x1734 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Successfully");
     f24:	8a e3       	ldi	r24, 0x3A	; 58
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	0e 94 7d 0b 	call	0x16fa	; 0x16fa <LCD_enuDisplayString>
     f2c:	ef ef       	ldi	r30, 0xFF	; 255
     f2e:	f3 ed       	ldi	r31, 0xD3	; 211
     f30:	20 e3       	ldi	r18, 0x30	; 48
     f32:	e1 50       	subi	r30, 0x01	; 1
     f34:	f0 40       	sbci	r31, 0x00	; 0
     f36:	20 40       	sbci	r18, 0x00	; 0
     f38:	e1 f7       	brne	.-8      	; 0xf32 <__stack+0x6d3>
     f3a:	00 c0       	rjmp	.+0      	; 0xf3c <__stack+0x6dd>
     f3c:	00 00       	nop
				_delay_ms(1000);
				LCD_enuClearDisplay();
     f3e:	0e 94 bc 0b 	call	0x1778	; 0x1778 <LCD_enuClearDisplay>
				
				Program_Status_Flag = IDLE_STATUS;
     f42:	87 e0       	ldi	r24, 0x07	; 7
     f44:	28 96       	adiw	r28, 0x08	; 8
     f46:	8f af       	std	Y+63, r24	; 0x3f
     f48:	28 97       	sbiw	r28, 0x08	; 8
     f4a:	ce 01       	movw	r24, r28
     f4c:	01 96       	adiw	r24, 0x01	; 1
     f4e:	5c 01       	movw	r10, r24
     f50:	fb ca       	rjmp	.-2570   	; 0x548 <main+0xd4>
     f52:	ce 01       	movw	r24, r28
     f54:	01 96       	adiw	r24, 0x01	; 1
     f56:	5c 01       	movw	r10, r24
     f58:	55 cf       	rjmp	.-342    	; 0xe04 <__stack+0x5a5>

00000f5a <EEPROM_ui8ReadByteFromAddress>:


void EEPROM_ui8ReadByteFromAddress( const u16 u16Address ,  u8 * data)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1);
     f5a:	e1 99       	sbic	0x1c, 1	; 28
     f5c:	fe cf       	rjmp	.-4      	; 0xf5a <EEPROM_ui8ReadByteFromAddress>
	/* Set up address register */
	EEAR = u16Address;
     f5e:	9f bb       	out	0x1f, r25	; 31
     f60:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
     f62:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	(*data) = EEDR;
     f64:	8d b3       	in	r24, 0x1d	; 29
     f66:	fb 01       	movw	r30, r22
     f68:	80 83       	st	Z, r24
     f6a:	08 95       	ret

00000f6c <EEPROM_vReadBlockFromAddress>:
}

void EEPROM_vReadBlockFromAddress(const u16 uAddress, u8* dist,const u16 size)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     f6c:	e1 99       	sbic	0x1c, 1	; 28
     f6e:	fe cf       	rjmp	.-4      	; 0xf6c <EEPROM_vReadBlockFromAddress>
	;

	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     f70:	41 15       	cp	r20, r1
     f72:	51 05       	cpc	r21, r1
     f74:	89 f0       	breq	.+34     	; 0xf98 <EEPROM_vReadBlockFromAddress+0x2c>
     f76:	46 0f       	add	r20, r22
     f78:	57 1f       	adc	r21, r23
     f7a:	fb 01       	movw	r30, r22
     f7c:	bc 01       	movw	r22, r24
     f7e:	6e 1b       	sub	r22, r30
     f80:	7f 0b       	sbc	r23, r31
     f82:	9b 01       	movw	r18, r22
     f84:	2e 0f       	add	r18, r30
     f86:	3f 1f       	adc	r19, r31
	{
		/* Set up address register */
		EEAR = uAddress + counter;
     f88:	3f bb       	out	0x1f, r19	; 31
     f8a:	2e bb       	out	0x1e, r18	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
     f8c:	e0 9a       	sbi	0x1c, 0	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
     f8e:	9d b3       	in	r25, 0x1d	; 29
     f90:	91 93       	st	Z+, r25
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     f92:	e4 17       	cp	r30, r20
     f94:	f5 07       	cpc	r31, r21
     f96:	a9 f7       	brne	.-22     	; 0xf82 <EEPROM_vReadBlockFromAddress+0x16>
     f98:	08 95       	ret

00000f9a <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16 uiAddress, const u8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     f9a:	e1 99       	sbic	0x1c, 1	; 28
     f9c:	fe cf       	rjmp	.-4      	; 0xf9a <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
     f9e:	9f bb       	out	0x1f, r25	; 31
     fa0:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
     fa2:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
     fa4:	8d b3       	in	r24, 0x1d	; 29
     fa6:	86 17       	cp	r24, r22
     fa8:	19 f0       	breq	.+6      	; 0xfb0 <EEPROM_vWriteByteToAddress+0x16>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
     faa:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
     fac:	e2 9a       	sbi	0x1c, 2	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
     fae:	e1 9a       	sbi	0x1c, 1	; 28
     fb0:	08 95       	ret

00000fb2 <EEPROM_vWriteBlockToAddress>:
}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
	u16 counter = 0;//Bytes write counter
	while (counter < size)
     fb2:	41 15       	cp	r20, r1
     fb4:	51 05       	cpc	r21, r1
     fb6:	c1 f0       	breq	.+48     	; 0xfe8 <EEPROM_vWriteBlockToAddress+0x36>
     fb8:	46 0f       	add	r20, r22
     fba:	57 1f       	adc	r21, r23
     fbc:	fb 01       	movw	r30, r22
     fbe:	bc 01       	movw	r22, r24
     fc0:	6e 1b       	sub	r22, r30
     fc2:	7f 0b       	sbc	r23, r31
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     fc4:	e1 99       	sbic	0x1c, 1	; 28
     fc6:	fe cf       	rjmp	.-4      	; 0xfc4 <EEPROM_vWriteBlockToAddress+0x12>
     fc8:	9b 01       	movw	r18, r22
     fca:	2e 0f       	add	r18, r30
     fcc:	3f 1f       	adc	r19, r31
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
     fce:	3f bb       	out	0x1f, r19	; 31
     fd0:	2e bb       	out	0x1e, r18	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
     fd2:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
     fd4:	2d b3       	in	r18, 0x1d	; 29
     fd6:	91 91       	ld	r25, Z+
     fd8:	29 17       	cp	r18, r25
     fda:	19 f0       	breq	.+6      	; 0xfe2 <EEPROM_vWriteBlockToAddress+0x30>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
     fdc:	9d bb       	out	0x1d, r25	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
     fde:	e2 9a       	sbi	0x1c, 2	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
     fe0:	e1 9a       	sbi	0x1c, 1	; 28
}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
	u16 counter = 0;//Bytes write counter
	while (counter < size)
     fe2:	e4 17       	cp	r30, r20
     fe4:	f5 07       	cpc	r31, r21
     fe6:	71 f7       	brne	.-36     	; 0xfc4 <EEPROM_vWriteBlockToAddress+0x12>
     fe8:	08 95       	ret

00000fea <Keypad_enuInit>:

ES_t Keypad_enuInit(void)
{
	ES_t Local_enuerrorStates = ES_NOK;

	DIO_enuSetPinDirection(C1_PORT , C1_PIN , DIO_u8OUTPUT);
     fea:	41 e0       	ldi	r20, 0x01	; 1
     fec:	63 e0       	ldi	r22, 0x03	; 3
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT , C2_PIN , DIO_u8OUTPUT);
     ff4:	41 e0       	ldi	r20, 0x01	; 1
     ff6:	64 e0       	ldi	r22, 0x04	; 4
     ff8:	83 e0       	ldi	r24, 0x03	; 3
     ffa:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT , C3_PIN , DIO_u8OUTPUT);
     ffe:	41 e0       	ldi	r20, 0x01	; 1
    1000:	65 e0       	ldi	r22, 0x05	; 5
    1002:	83 e0       	ldi	r24, 0x03	; 3
    1004:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT , C4_PIN , DIO_u8OUTPUT);
    1008:	41 e0       	ldi	r20, 0x01	; 1
    100a:	66 e0       	ldi	r22, 0x06	; 6
    100c:	83 e0       	ldi	r24, 0x03	; 3
    100e:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT , R1_PIN , DIO_u8INPUT);
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	62 e0       	ldi	r22, 0x02	; 2
    1016:	82 e0       	ldi	r24, 0x02	; 2
    1018:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT , R2_PIN , DIO_u8INPUT);
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	63 e0       	ldi	r22, 0x03	; 3
    1020:	82 e0       	ldi	r24, 0x02	; 2
    1022:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT , R3_PIN , DIO_u8INPUT);
    1026:	40 e0       	ldi	r20, 0x00	; 0
    1028:	64 e0       	ldi	r22, 0x04	; 4
    102a:	82 e0       	ldi	r24, 0x02	; 2
    102c:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT , R4_PIN , DIO_u8INPUT);
    1030:	40 e0       	ldi	r20, 0x00	; 0
    1032:	65 e0       	ldi	r22, 0x05	; 5
    1034:	82 e0       	ldi	r24, 0x02	; 2
    1036:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT , C1_PIN , DIO_u8HIGH);
    103a:	41 e0       	ldi	r20, 0x01	; 1
    103c:	63 e0       	ldi	r22, 0x03	; 3
    103e:	83 e0       	ldi	r24, 0x03	; 3
    1040:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT , C2_PIN , DIO_u8HIGH);
    1044:	41 e0       	ldi	r20, 0x01	; 1
    1046:	64 e0       	ldi	r22, 0x04	; 4
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT , C3_PIN , DIO_u8HIGH);
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	65 e0       	ldi	r22, 0x05	; 5
    1052:	83 e0       	ldi	r24, 0x03	; 3
    1054:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT , C4_PIN , DIO_u8HIGH);
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	66 e0       	ldi	r22, 0x06	; 6
    105c:	83 e0       	ldi	r24, 0x03	; 3
    105e:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT , R1_PIN , DIO_u8PULL_UP);
    1062:	41 e0       	ldi	r20, 0x01	; 1
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	82 e0       	ldi	r24, 0x02	; 2
    1068:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT , R2_PIN , DIO_u8PULL_UP);
    106c:	41 e0       	ldi	r20, 0x01	; 1
    106e:	63 e0       	ldi	r22, 0x03	; 3
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT , R3_PIN , DIO_u8PULL_UP);
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	64 e0       	ldi	r22, 0x04	; 4
    107a:	82 e0       	ldi	r24, 0x02	; 2
    107c:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT , R4_PIN , DIO_u8PULL_UP);
    1080:	41 e0       	ldi	r20, 0x01	; 1
    1082:	65 e0       	ldi	r22, 0x05	; 5
    1084:	82 e0       	ldi	r24, 0x02	; 2
    1086:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>

	return Local_enuerrorStates;
}
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	08 95       	ret

0000108e <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    108e:	2f 92       	push	r2
    1090:	3f 92       	push	r3
    1092:	4f 92       	push	r4
    1094:	5f 92       	push	r5
    1096:	6f 92       	push	r6
    1098:	7f 92       	push	r7
    109a:	8f 92       	push	r8
    109c:	9f 92       	push	r9
    109e:	af 92       	push	r10
    10a0:	bf 92       	push	r11
    10a2:	cf 92       	push	r12
    10a4:	df 92       	push	r13
    10a6:	ef 92       	push	r14
    10a8:	ff 92       	push	r15
    10aa:	0f 93       	push	r16
    10ac:	1f 93       	push	r17
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
    10b6:	a3 97       	sbiw	r28, 0x23	; 35
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	9b a3       	std	Y+35, r25	; 0x23
    10c4:	8a a3       	std	Y+34, r24	; 0x22
	ES_t Local_enuerrorStates = ES_NOK;

	u8 Local_Au8ColPorts [COL_NUM] = {C1_PORT,C2_PORT,C3_PORT,C4_PORT};
    10c6:	83 e0       	ldi	r24, 0x03	; 3
    10c8:	8d 8f       	std	Y+29, r24	; 0x1d
    10ca:	8e 8f       	std	Y+30, r24	; 0x1e
    10cc:	8f 8f       	std	Y+31, r24	; 0x1f
    10ce:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_Au8ColPins  [COL_NUM] = {C1_PIN, C2_PIN, C3_PIN, C4_PIN};
    10d0:	89 8f       	std	Y+25, r24	; 0x19
    10d2:	34 e0       	ldi	r19, 0x04	; 4
    10d4:	3a 8f       	std	Y+26, r19	; 0x1a
    10d6:	25 e0       	ldi	r18, 0x05	; 5
    10d8:	2b 8f       	std	Y+27, r18	; 0x1b
    10da:	96 e0       	ldi	r25, 0x06	; 6
    10dc:	9c 8f       	std	Y+28, r25	; 0x1c

	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
    10de:	92 e0       	ldi	r25, 0x02	; 2
    10e0:	9d 8b       	std	Y+21, r25	; 0x15
    10e2:	9e 8b       	std	Y+22, r25	; 0x16
    10e4:	9f 8b       	std	Y+23, r25	; 0x17
    10e6:	98 8f       	std	Y+24, r25	; 0x18
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};
    10e8:	99 8b       	std	Y+17, r25	; 0x11
    10ea:	8a 8b       	std	Y+18, r24	; 0x12
    10ec:	3b 8b       	std	Y+19, r19	; 0x13
    10ee:	2c 8b       	std	Y+20, r18	; 0x14

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	ea a1       	ldd	r30, Y+34	; 0x22
    10f4:	fb a1       	ldd	r31, Y+35	; 0x23
    10f6:	80 83       	st	Z, r24
    10f8:	ce 01       	movw	r24, r28
    10fa:	49 96       	adiw	r24, 0x19	; 25
    10fc:	4c 01       	movw	r8, r24
    10fe:	fe 01       	movw	r30, r28
    1100:	7d 96       	adiw	r30, 0x1d	; 29
    1102:	3f 01       	movw	r6, r30

	return Local_enuerrorStates;
}

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    1104:	a1 2c       	mov	r10, r1
    1106:	b1 2c       	mov	r11, r1
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
    1108:	f4 01       	movw	r30, r8
    110a:	21 90       	ld	r2, Z+
    110c:	4f 01       	movw	r8, r30
    110e:	f3 01       	movw	r30, r6
    1110:	31 90       	ld	r3, Z+
    1112:	3f 01       	movw	r6, r30
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	62 2d       	mov	r22, r2
    1118:	83 2d       	mov	r24, r3
    111a:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    111e:	ce 01       	movw	r24, r28
    1120:	41 96       	adiw	r24, 0x11	; 17
    1122:	6c 01       	movw	r12, r24
    1124:	fe 01       	movw	r30, r28
    1126:	75 96       	adiw	r30, 0x15	; 21
    1128:	7f 01       	movw	r14, r30
    112a:	00 e0       	ldi	r16, 0x00	; 0
    112c:	10 e0       	ldi	r17, 0x00	; 0
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    112e:	f6 01       	movw	r30, r12
    1130:	51 90       	ld	r5, Z+
    1132:	6f 01       	movw	r12, r30
    1134:	f7 01       	movw	r30, r14
    1136:	41 90       	ld	r4, Z+
    1138:	7f 01       	movw	r14, r30
    113a:	ae 01       	movw	r20, r28
    113c:	4f 5d       	subi	r20, 0xDF	; 223
    113e:	5f 4f       	sbci	r21, 0xFF	; 255
    1140:	65 2d       	mov	r22, r5
    1142:	84 2d       	mov	r24, r4
    1144:	0e 94 82 0c 	call	0x1904	; 0x1904 <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
    1148:	89 a1       	ldd	r24, Y+33	; 0x21
    114a:	88 23       	and	r24, r24
    114c:	c9 f0       	breq	.+50     	; 0x1180 <Keypad_enuGetPressedKey+0xf2>
    114e:	0f 5f       	subi	r16, 0xFF	; 255
    1150:	1f 4f       	sbci	r17, 0xFF	; 255
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    1152:	04 30       	cpi	r16, 0x04	; 4
    1154:	11 05       	cpc	r17, r1
    1156:	59 f7       	brne	.-42     	; 0x112e <Keypad_enuGetPressedKey+0xa0>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
					return ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
    1158:	41 e0       	ldi	r20, 0x01	; 1
    115a:	62 2d       	mov	r22, r2
    115c:	83 2d       	mov	r24, r3
    115e:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1162:	ff ef       	ldi	r31, 0xFF	; 255
    1164:	af 1a       	sub	r10, r31
    1166:	bf 0a       	sbc	r11, r31

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    1168:	84 e0       	ldi	r24, 0x04	; 4
    116a:	a8 16       	cp	r10, r24
    116c:	b1 04       	cpc	r11, r1
    116e:	61 f6       	brne	.-104    	; 0x1108 <Keypad_enuGetPressedKey+0x7a>
	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
    1170:	ea a1       	ldd	r30, Y+34	; 0x22
    1172:	fb a1       	ldd	r31, Y+35	; 0x23
    1174:	80 81       	ld	r24, Z
    1176:	8f 3f       	cpi	r24, 0xFF	; 255
    1178:	09 f4       	brne	.+2      	; 0x117c <Keypad_enuGetPressedKey+0xee>
    117a:	be cf       	rjmp	.-132    	; 0x10f8 <Keypad_enuGetPressedKey+0x6a>
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	}
	return Local_enuerrorStates;
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	35 c0       	rjmp	.+106    	; 0x11ea <Keypad_enuGetPressedKey+0x15c>
    1180:	83 ec       	ldi	r24, 0xC3	; 195
    1182:	99 e0       	ldi	r25, 0x09	; 9
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <Keypad_enuGetPressedKey+0xf6>
    1188:	00 c0       	rjmp	.+0      	; 0x118a <Keypad_enuGetPressedKey+0xfc>
    118a:	00 00       	nop
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
			if (! Local_u8PinValue)
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    118c:	ae 01       	movw	r20, r28
    118e:	4f 5d       	subi	r20, 0xDF	; 223
    1190:	5f 4f       	sbci	r21, 0xFF	; 255
    1192:	65 2d       	mov	r22, r5
    1194:	84 2d       	mov	r24, r4
    1196:	0e 94 82 0c 	call	0x1904	; 0x1904 <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
    119a:	89 a1       	ldd	r24, Y+33	; 0x21
    119c:	81 11       	cpse	r24, r1
    119e:	d7 cf       	rjmp	.-82     	; 0x114e <Keypad_enuGetPressedKey+0xc0>
				{
					while (! Local_u8PinValue)
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    11a0:	ae 01       	movw	r20, r28
    11a2:	4f 5d       	subi	r20, 0xDF	; 223
    11a4:	5f 4f       	sbci	r21, 0xFF	; 255
    11a6:	65 2d       	mov	r22, r5
    11a8:	84 2d       	mov	r24, r4
    11aa:	0e 94 82 0c 	call	0x1904	; 0x1904 <DIO_enuGetPinValue>
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
				if (! Local_u8PinValue)
				{
					while (! Local_u8PinValue)
    11ae:	89 a1       	ldd	r24, Y+33	; 0x21
    11b0:	88 23       	and	r24, r24
    11b2:	b1 f3       	breq	.-20     	; 0x11a0 <Keypad_enuGetPressedKey+0x112>
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);

					u8 Local_Au8Values[ROW_NUM][COL_NUM] = KEYPAD_VALUES;
    11b4:	80 e1       	ldi	r24, 0x10	; 16
    11b6:	e0 e6       	ldi	r30, 0x60	; 96
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	de 01       	movw	r26, r28
    11bc:	11 96       	adiw	r26, 0x01	; 1
    11be:	01 90       	ld	r0, Z+
    11c0:	0d 92       	st	X+, r0
    11c2:	8a 95       	dec	r24
    11c4:	e1 f7       	brne	.-8      	; 0x11be <Keypad_enuGetPressedKey+0x130>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
    11c6:	00 0f       	add	r16, r16
    11c8:	11 1f       	adc	r17, r17
    11ca:	00 0f       	add	r16, r16
    11cc:	11 1f       	adc	r17, r17
    11ce:	e1 e0       	ldi	r30, 0x01	; 1
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	ec 0f       	add	r30, r28
    11d4:	fd 1f       	adc	r31, r29
    11d6:	0e 0f       	add	r16, r30
    11d8:	1f 1f       	adc	r17, r31
    11da:	f8 01       	movw	r30, r16
    11dc:	ea 0d       	add	r30, r10
    11de:	fb 1d       	adc	r31, r11
    11e0:	80 81       	ld	r24, Z
    11e2:	ea a1       	ldd	r30, Y+34	; 0x22
    11e4:	fb a1       	ldd	r31, Y+35	; 0x23
    11e6:	80 83       	st	Z, r24
					return ES_OK;
    11e8:	81 e0       	ldi	r24, 0x01	; 1
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	}
	return Local_enuerrorStates;
}
    11ea:	a3 96       	adiw	r28, 0x23	; 35
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	0f 91       	pop	r16
    11fe:	ff 90       	pop	r15
    1200:	ef 90       	pop	r14
    1202:	df 90       	pop	r13
    1204:	cf 90       	pop	r12
    1206:	bf 90       	pop	r11
    1208:	af 90       	pop	r10
    120a:	9f 90       	pop	r9
    120c:	8f 90       	pop	r8
    120e:	7f 90       	pop	r7
    1210:	6f 90       	pop	r6
    1212:	5f 90       	pop	r5
    1214:	4f 90       	pop	r4
    1216:	3f 90       	pop	r3
    1218:	2f 90       	pop	r2
    121a:	08 95       	ret

0000121c <LCD_enuWriteNLatch>:

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch(Copy_u8Command);

	return Local_enuerrorStates;
}
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	1f 92       	push	r1
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	18 2f       	mov	r17, r24
    122a:	40 e0       	ldi	r20, 0x00	; 0
    122c:	63 e0       	ldi	r22, 0x03	; 3
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1234:	40 e0       	ldi	r20, 0x00	; 0
    1236:	62 e0       	ldi	r22, 0x02	; 2
    1238:	81 e0       	ldi	r24, 0x01	; 1
    123a:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    123e:	18 32       	cpi	r17, 0x28	; 40
    1240:	09 f4       	brne	.+2      	; 0x1244 <LCD_enuWriteNLatch+0x28>
    1242:	6a c0       	rjmp	.+212    	; 0x1318 <LCD_enuWriteNLatch+0xfc>
    1244:	41 2f       	mov	r20, r17
    1246:	44 1f       	adc	r20, r20
    1248:	44 27       	eor	r20, r20
    124a:	44 1f       	adc	r20, r20
    124c:	67 e0       	ldi	r22, 0x07	; 7
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1254:	16 fb       	bst	r17, 6
    1256:	44 27       	eor	r20, r20
    1258:	40 f9       	bld	r20, 0
    125a:	66 e0       	ldi	r22, 0x06	; 6
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1262:	15 fb       	bst	r17, 5
    1264:	44 27       	eor	r20, r20
    1266:	40 f9       	bld	r20, 0
    1268:	65 e0       	ldi	r22, 0x05	; 5
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1270:	14 fb       	bst	r17, 4
    1272:	44 27       	eor	r20, r20
    1274:	40 f9       	bld	r20, 0
    1276:	64 e0       	ldi	r22, 0x04	; 4
    1278:	80 e0       	ldi	r24, 0x00	; 0
    127a:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    127e:	41 e0       	ldi	r20, 0x01	; 1
    1280:	63 e0       	ldi	r22, 0x03	; 3
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1288:	81 ee       	ldi	r24, 0xE1	; 225
    128a:	94 e0       	ldi	r25, 0x04	; 4
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	f1 f7       	brne	.-4      	; 0x128c <LCD_enuWriteNLatch+0x70>
    1290:	00 c0       	rjmp	.+0      	; 0x1292 <LCD_enuWriteNLatch+0x76>
    1292:	00 00       	nop
    1294:	40 e0       	ldi	r20, 0x00	; 0
    1296:	63 e0       	ldi	r22, 0x03	; 3
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    129e:	83 ed       	ldi	r24, 0xD3	; 211
    12a0:	90 e3       	ldi	r25, 0x30	; 48
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <LCD_enuWriteNLatch+0x86>
    12a6:	00 c0       	rjmp	.+0      	; 0x12a8 <LCD_enuWriteNLatch+0x8c>
    12a8:	00 00       	nop
    12aa:	13 fb       	bst	r17, 3
    12ac:	44 27       	eor	r20, r20
    12ae:	40 f9       	bld	r20, 0
    12b0:	67 e0       	ldi	r22, 0x07	; 7
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    12b8:	12 fb       	bst	r17, 2
    12ba:	44 27       	eor	r20, r20
    12bc:	40 f9       	bld	r20, 0
    12be:	66 e0       	ldi	r22, 0x06	; 6
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    12c6:	11 fb       	bst	r17, 1
    12c8:	44 27       	eor	r20, r20
    12ca:	40 f9       	bld	r20, 0
    12cc:	65 e0       	ldi	r22, 0x05	; 5
    12ce:	80 e0       	ldi	r24, 0x00	; 0
    12d0:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    12d4:	41 2f       	mov	r20, r17
    12d6:	41 70       	andi	r20, 0x01	; 1
    12d8:	64 e0       	ldi	r22, 0x04	; 4
    12da:	80 e0       	ldi	r24, 0x00	; 0
    12dc:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	63 e0       	ldi	r22, 0x03	; 3
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    12ea:	81 ee       	ldi	r24, 0xE1	; 225
    12ec:	94 e0       	ldi	r25, 0x04	; 4
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <LCD_enuWriteNLatch+0xd2>
    12f2:	00 c0       	rjmp	.+0      	; 0x12f4 <LCD_enuWriteNLatch+0xd8>
    12f4:	00 00       	nop
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	63 e0       	ldi	r22, 0x03	; 3
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1300:	83 ed       	ldi	r24, 0xD3	; 211
    1302:	90 e3       	ldi	r25, 0x30	; 48
    1304:	01 97       	sbiw	r24, 0x01	; 1
    1306:	f1 f7       	brne	.-4      	; 0x1304 <LCD_enuWriteNLatch+0xe8>
    1308:	00 c0       	rjmp	.+0      	; 0x130a <LCD_enuWriteNLatch+0xee>
    130a:	00 00       	nop
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	0f 90       	pop	r0
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	08 95       	ret
    1318:	ae 01       	movw	r20, r28
    131a:	4f 5f       	subi	r20, 0xFF	; 255
    131c:	5f 4f       	sbci	r21, 0xFF	; 255
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	81 e0       	ldi	r24, 0x01	; 1
    1322:	0e 94 82 0c 	call	0x1904	; 0x1904 <DIO_enuGetPinValue>
    1326:	89 81       	ldd	r24, Y+1	; 0x01
    1328:	81 11       	cpse	r24, r1
    132a:	8c cf       	rjmp	.-232    	; 0x1244 <LCD_enuWriteNLatch+0x28>
    132c:	40 e0       	ldi	r20, 0x00	; 0
    132e:	67 e0       	ldi	r22, 0x07	; 7
    1330:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	66 e0       	ldi	r22, 0x06	; 6
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	65 e0       	ldi	r22, 0x05	; 5
    1342:	80 e0       	ldi	r24, 0x00	; 0
    1344:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	64 e0       	ldi	r22, 0x04	; 4
    134c:	80 e0       	ldi	r24, 0x00	; 0
    134e:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1352:	41 e0       	ldi	r20, 0x01	; 1
    1354:	63 e0       	ldi	r22, 0x03	; 3
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    135c:	81 ee       	ldi	r24, 0xE1	; 225
    135e:	94 e0       	ldi	r25, 0x04	; 4
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	f1 f7       	brne	.-4      	; 0x1360 <LCD_enuWriteNLatch+0x144>
    1364:	00 c0       	rjmp	.+0      	; 0x1366 <LCD_enuWriteNLatch+0x14a>
    1366:	00 00       	nop
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	63 e0       	ldi	r22, 0x03	; 3
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1372:	83 ed       	ldi	r24, 0xD3	; 211
    1374:	90 e3       	ldi	r25, 0x30	; 48
    1376:	01 97       	sbiw	r24, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <LCD_enuWriteNLatch+0x15a>
    137a:	00 c0       	rjmp	.+0      	; 0x137c <LCD_enuWriteNLatch+0x160>
    137c:	00 00       	nop
    137e:	62 cf       	rjmp	.-316    	; 0x1244 <LCD_enuWriteNLatch+0x28>

00001380 <LCD_enuWriteNLatch.constprop.0>:
    1380:	40 e0       	ldi	r20, 0x00	; 0
    1382:	63 e0       	ldi	r22, 0x03	; 3
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    138a:	40 e0       	ldi	r20, 0x00	; 0
    138c:	62 e0       	ldi	r22, 0x02	; 2
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1394:	40 e0       	ldi	r20, 0x00	; 0
    1396:	67 e0       	ldi	r22, 0x07	; 7
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	66 e0       	ldi	r22, 0x06	; 6
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    13a8:	41 e0       	ldi	r20, 0x01	; 1
    13aa:	65 e0       	ldi	r22, 0x05	; 5
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    13b2:	41 e0       	ldi	r20, 0x01	; 1
    13b4:	64 e0       	ldi	r22, 0x04	; 4
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    13bc:	41 e0       	ldi	r20, 0x01	; 1
    13be:	63 e0       	ldi	r22, 0x03	; 3
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    13c6:	81 ee       	ldi	r24, 0xE1	; 225
    13c8:	94 e0       	ldi	r25, 0x04	; 4
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <LCD_enuWriteNLatch.constprop.0+0x4a>
    13ce:	00 c0       	rjmp	.+0      	; 0x13d0 <LCD_enuWriteNLatch.constprop.0+0x50>
    13d0:	00 00       	nop
    13d2:	40 e0       	ldi	r20, 0x00	; 0
    13d4:	63 e0       	ldi	r22, 0x03	; 3
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    13dc:	83 ed       	ldi	r24, 0xD3	; 211
    13de:	90 e3       	ldi	r25, 0x30	; 48
    13e0:	01 97       	sbiw	r24, 0x01	; 1
    13e2:	f1 f7       	brne	.-4      	; 0x13e0 <LCD_enuWriteNLatch.constprop.0+0x60>
    13e4:	00 c0       	rjmp	.+0      	; 0x13e6 <LCD_enuWriteNLatch.constprop.0+0x66>
    13e6:	00 00       	nop
    13e8:	40 e0       	ldi	r20, 0x00	; 0
    13ea:	67 e0       	ldi	r22, 0x07	; 7
    13ec:	80 e0       	ldi	r24, 0x00	; 0
    13ee:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    13f2:	40 e0       	ldi	r20, 0x00	; 0
    13f4:	66 e0       	ldi	r22, 0x06	; 6
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    13fc:	40 e0       	ldi	r20, 0x00	; 0
    13fe:	65 e0       	ldi	r22, 0x05	; 5
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	64 e0       	ldi	r22, 0x04	; 4
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1410:	41 e0       	ldi	r20, 0x01	; 1
    1412:	63 e0       	ldi	r22, 0x03	; 3
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    141a:	81 ee       	ldi	r24, 0xE1	; 225
    141c:	94 e0       	ldi	r25, 0x04	; 4
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <LCD_enuWriteNLatch.constprop.0+0x9e>
    1422:	00 c0       	rjmp	.+0      	; 0x1424 <LCD_enuWriteNLatch.constprop.0+0xa4>
    1424:	00 00       	nop
    1426:	40 e0       	ldi	r20, 0x00	; 0
    1428:	63 e0       	ldi	r22, 0x03	; 3
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1430:	83 ed       	ldi	r24, 0xD3	; 211
    1432:	90 e3       	ldi	r25, 0x30	; 48
    1434:	01 97       	sbiw	r24, 0x01	; 1
    1436:	f1 f7       	brne	.-4      	; 0x1434 <LCD_enuWriteNLatch.constprop.0+0xb4>
    1438:	00 c0       	rjmp	.+0      	; 0x143a <LCD_enuWriteNLatch.constprop.0+0xba>
    143a:	00 00       	nop
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	08 95       	ret

00001440 <LCD_enuWriteNLatch.constprop.1>:
    1440:	40 e0       	ldi	r20, 0x00	; 0
    1442:	63 e0       	ldi	r22, 0x03	; 3
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    144a:	40 e0       	ldi	r20, 0x00	; 0
    144c:	62 e0       	ldi	r22, 0x02	; 2
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1454:	40 e0       	ldi	r20, 0x00	; 0
    1456:	67 e0       	ldi	r22, 0x07	; 7
    1458:	80 e0       	ldi	r24, 0x00	; 0
    145a:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    145e:	40 e0       	ldi	r20, 0x00	; 0
    1460:	66 e0       	ldi	r22, 0x06	; 6
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1468:	40 e0       	ldi	r20, 0x00	; 0
    146a:	65 e0       	ldi	r22, 0x05	; 5
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	64 e0       	ldi	r22, 0x04	; 4
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    147c:	41 e0       	ldi	r20, 0x01	; 1
    147e:	63 e0       	ldi	r22, 0x03	; 3
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1486:	81 ee       	ldi	r24, 0xE1	; 225
    1488:	94 e0       	ldi	r25, 0x04	; 4
    148a:	01 97       	sbiw	r24, 0x01	; 1
    148c:	f1 f7       	brne	.-4      	; 0x148a <LCD_enuWriteNLatch.constprop.1+0x4a>
    148e:	00 c0       	rjmp	.+0      	; 0x1490 <LCD_enuWriteNLatch.constprop.1+0x50>
    1490:	00 00       	nop
    1492:	40 e0       	ldi	r20, 0x00	; 0
    1494:	63 e0       	ldi	r22, 0x03	; 3
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    149c:	83 ed       	ldi	r24, 0xD3	; 211
    149e:	90 e3       	ldi	r25, 0x30	; 48
    14a0:	01 97       	sbiw	r24, 0x01	; 1
    14a2:	f1 f7       	brne	.-4      	; 0x14a0 <LCD_enuWriteNLatch.constprop.1+0x60>
    14a4:	00 c0       	rjmp	.+0      	; 0x14a6 <LCD_enuWriteNLatch.constprop.1+0x66>
    14a6:	00 00       	nop
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	67 e0       	ldi	r22, 0x07	; 7
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	66 e0       	ldi	r22, 0x06	; 6
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	65 e0       	ldi	r22, 0x05	; 5
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    14c6:	41 e0       	ldi	r20, 0x01	; 1
    14c8:	64 e0       	ldi	r22, 0x04	; 4
    14ca:	80 e0       	ldi	r24, 0x00	; 0
    14cc:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    14d0:	41 e0       	ldi	r20, 0x01	; 1
    14d2:	63 e0       	ldi	r22, 0x03	; 3
    14d4:	81 e0       	ldi	r24, 0x01	; 1
    14d6:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    14da:	81 ee       	ldi	r24, 0xE1	; 225
    14dc:	94 e0       	ldi	r25, 0x04	; 4
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <LCD_enuWriteNLatch.constprop.1+0x9e>
    14e2:	00 c0       	rjmp	.+0      	; 0x14e4 <LCD_enuWriteNLatch.constprop.1+0xa4>
    14e4:	00 00       	nop
    14e6:	40 e0       	ldi	r20, 0x00	; 0
    14e8:	63 e0       	ldi	r22, 0x03	; 3
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    14f0:	83 ed       	ldi	r24, 0xD3	; 211
    14f2:	90 e3       	ldi	r25, 0x30	; 48
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	f1 f7       	brne	.-4      	; 0x14f4 <LCD_enuWriteNLatch.constprop.1+0xb4>
    14f8:	00 c0       	rjmp	.+0      	; 0x14fa <LCD_enuWriteNLatch.constprop.1+0xba>
    14fa:	00 00       	nop
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	08 95       	ret

00001500 <LCD_enuInit>:
    1500:	41 e0       	ldi	r20, 0x01	; 1
    1502:	61 e0       	ldi	r22, 0x01	; 1
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
    150a:	41 e0       	ldi	r20, 0x01	; 1
    150c:	62 e0       	ldi	r22, 0x02	; 2
    150e:	81 e0       	ldi	r24, 0x01	; 1
    1510:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
    1514:	41 e0       	ldi	r20, 0x01	; 1
    1516:	63 e0       	ldi	r22, 0x03	; 3
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
    151e:	41 e0       	ldi	r20, 0x01	; 1
    1520:	67 e0       	ldi	r22, 0x07	; 7
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
    1528:	41 e0       	ldi	r20, 0x01	; 1
    152a:	66 e0       	ldi	r22, 0x06	; 6
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
    1532:	41 e0       	ldi	r20, 0x01	; 1
    1534:	65 e0       	ldi	r22, 0x05	; 5
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
    153c:	41 e0       	ldi	r20, 0x01	; 1
    153e:	64 e0       	ldi	r22, 0x04	; 4
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	0e 94 ce 0b 	call	0x179c	; 0x179c <DIO_enuSetPinDirection>
    1546:	8d e2       	ldi	r24, 0x2D	; 45
    1548:	92 e2       	ldi	r25, 0x22	; 34
    154a:	01 97       	sbiw	r24, 0x01	; 1
    154c:	f1 f7       	brne	.-4      	; 0x154a <LCD_enuInit+0x4a>
    154e:	00 c0       	rjmp	.+0      	; 0x1550 <LCD_enuInit+0x50>
    1550:	00 00       	nop
    1552:	40 e0       	ldi	r20, 0x00	; 0
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    155c:	88 e2       	ldi	r24, 0x28	; 40
    155e:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_enuWriteNLatch>
    1562:	89 ef       	ldi	r24, 0xF9	; 249
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	01 97       	sbiw	r24, 0x01	; 1
    1568:	f1 f7       	brne	.-4      	; 0x1566 <LCD_enuInit+0x66>
    156a:	00 c0       	rjmp	.+0      	; 0x156c <LCD_enuInit+0x6c>
    156c:	00 00       	nop
    156e:	40 e0       	ldi	r20, 0x00	; 0
    1570:	61 e0       	ldi	r22, 0x01	; 1
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1578:	8f e0       	ldi	r24, 0x0F	; 15
    157a:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_enuWriteNLatch>
    157e:	89 ef       	ldi	r24, 0xF9	; 249
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <LCD_enuInit+0x82>
    1586:	00 c0       	rjmp	.+0      	; 0x1588 <LCD_enuInit+0x88>
    1588:	00 00       	nop
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	61 e0       	ldi	r22, 0x01	; 1
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1594:	0e 94 20 0a 	call	0x1440	; 0x1440 <LCD_enuWriteNLatch.constprop.1>
    1598:	83 ef       	ldi	r24, 0xF3	; 243
    159a:	91 e0       	ldi	r25, 0x01	; 1
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	f1 f7       	brne	.-4      	; 0x159c <LCD_enuInit+0x9c>
    15a0:	00 c0       	rjmp	.+0      	; 0x15a2 <LCD_enuInit+0xa2>
    15a2:	00 00       	nop
    15a4:	40 e0       	ldi	r20, 0x00	; 0
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    15ae:	86 e0       	ldi	r24, 0x06	; 6
    15b0:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_enuWriteNLatch>
    15b4:	80 e0       	ldi	r24, 0x00	; 0
    15b6:	08 95       	ret

000015b8 <LCD_enuSendData>:
    15b8:	cf 93       	push	r28
    15ba:	c8 2f       	mov	r28, r24
    15bc:	41 e0       	ldi	r20, 0x01	; 1
    15be:	61 e0       	ldi	r22, 0x01	; 1
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    15c6:	8c 2f       	mov	r24, r28
    15c8:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_enuWriteNLatch>
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	cf 91       	pop	r28
    15d0:	08 95       	ret

000015d2 <LCD_enuDisplayUnsignedInteger>:
}

/****************************************************************************************************/

ES_t LCD_enuDisplayUnsignedInteger(u16 Copy_u32Data)
{
    15d2:	4f 92       	push	r4
    15d4:	5f 92       	push	r5
    15d6:	6f 92       	push	r6
    15d8:	7f 92       	push	r7
    15da:	af 92       	push	r10
    15dc:	bf 92       	push	r11
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	ac 01       	movw	r20, r24
	ES_t Local_enuerrorStates = ES_NOK;



	if (Copy_u32Data == 0)
    15f0:	89 2b       	or	r24, r25
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <LCD_enuDisplayUnsignedInteger+0x24>
    15f4:	77 c0       	rjmp	.+238    	; 0x16e4 <LCD_enuDisplayUnsignedInteger+0x112>
    15f6:	c0 e0       	ldi	r28, 0x00	; 0
    15f8:	c1 2c       	mov	r12, r1
    15fa:	d1 2c       	mov	r13, r1
    15fc:	76 01       	movw	r14, r12
		u32 Local_u32Reversed = 0;
		u8 Local_u8Counter=0;
		for (;Copy_u32Data>0;)
			{
				Local_u8Remainder = Copy_u32Data%10;
				Local_u32Reversed = Local_u32Reversed*10 + Local_u8Remainder;
    15fe:	cc 0c       	add	r12, r12
    1600:	dd 1c       	adc	r13, r13
    1602:	ee 1c       	adc	r14, r14
    1604:	ff 1c       	adc	r15, r15
    1606:	d7 01       	movw	r26, r14
    1608:	c6 01       	movw	r24, r12
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	aa 1f       	adc	r26, r26
    1610:	bb 1f       	adc	r27, r27
    1612:	88 0f       	add	r24, r24
    1614:	99 1f       	adc	r25, r25
    1616:	aa 1f       	adc	r26, r26
    1618:	bb 1f       	adc	r27, r27
    161a:	c8 0e       	add	r12, r24
    161c:	d9 1e       	adc	r13, r25
    161e:	ea 1e       	adc	r14, r26
    1620:	fb 1e       	adc	r15, r27
    1622:	9a 01       	movw	r18, r20
    1624:	ad ec       	ldi	r26, 0xCD	; 205
    1626:	bc ec       	ldi	r27, 0xCC	; 204
    1628:	0e 94 59 0d 	call	0x1ab2	; 0x1ab2 <__umulhisi3>
    162c:	96 95       	lsr	r25
    162e:	87 95       	ror	r24
    1630:	96 95       	lsr	r25
    1632:	87 95       	ror	r24
    1634:	96 95       	lsr	r25
    1636:	87 95       	ror	r24
    1638:	bc 01       	movw	r22, r24
    163a:	66 0f       	add	r22, r22
    163c:	77 1f       	adc	r23, r23
    163e:	9c 01       	movw	r18, r24
    1640:	22 0f       	add	r18, r18
    1642:	33 1f       	adc	r19, r19
    1644:	22 0f       	add	r18, r18
    1646:	33 1f       	adc	r19, r19
    1648:	22 0f       	add	r18, r18
    164a:	33 1f       	adc	r19, r19
    164c:	26 0f       	add	r18, r22
    164e:	37 1f       	adc	r19, r23
    1650:	42 1b       	sub	r20, r18
    1652:	53 0b       	sbc	r21, r19
    1654:	c4 0e       	add	r12, r20
    1656:	d5 1e       	adc	r13, r21
    1658:	e1 1c       	adc	r14, r1
    165a:	f1 1c       	adc	r15, r1
				Local_u8Counter++;
    165c:	cf 5f       	subi	r28, 0xFF	; 255
				Copy_u32Data/=10;
    165e:	ac 01       	movw	r20, r24
	else
	{
		u8 Local_u8Remainder;
		u32 Local_u32Reversed = 0;
		u8 Local_u8Counter=0;
		for (;Copy_u32Data>0;)
    1660:	89 2b       	or	r24, r25
    1662:	69 f6       	brne	.-102    	; 0x15fe <LCD_enuDisplayUnsignedInteger+0x2c>
				Local_u32Reversed = Local_u32Reversed*10 + Local_u8Remainder;
				Local_u8Counter++;
				Copy_u32Data/=10;
			}
			/*********in the previous step: 3malt reverse lel integer elly gayelly, 3ashan law ma3amaltelosh reverse hayetebe3 ma3koos**********/
			for (;Local_u32Reversed>0;)
    1664:	c1 14       	cp	r12, r1
    1666:	d1 04       	cpc	r13, r1
    1668:	e1 04       	cpc	r14, r1
    166a:	f1 04       	cpc	r15, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <LCD_enuDisplayUnsignedInteger+0x9e>
    166e:	43 c0       	rjmp	.+134    	; 0x16f6 <LCD_enuDisplayUnsignedInteger+0x124>
			{
				DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
				Local_enuerrorStates = LCD_enuWriteNLatch(Local_u32Reversed%10 + '0');
    1670:	8a e0       	ldi	r24, 0x0A	; 10
    1672:	48 2e       	mov	r4, r24
    1674:	51 2c       	mov	r5, r1
    1676:	61 2c       	mov	r6, r1
    1678:	71 2c       	mov	r7, r1
				Copy_u32Data/=10;
			}
			/*********in the previous step: 3malt reverse lel integer elly gayelly, 3ashan law ma3amaltelosh reverse hayetebe3 ma3koos**********/
			for (;Local_u32Reversed>0;)
			{
				DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    167a:	41 e0       	ldi	r20, 0x01	; 1
    167c:	61 e0       	ldi	r22, 0x01	; 1
    167e:	81 e0       	ldi	r24, 0x01	; 1
    1680:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
				Local_enuerrorStates = LCD_enuWriteNLatch(Local_u32Reversed%10 + '0');
    1684:	c7 01       	movw	r24, r14
    1686:	b6 01       	movw	r22, r12
    1688:	a3 01       	movw	r20, r6
    168a:	92 01       	movw	r18, r4
    168c:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__udivmodsi4>
    1690:	b2 2e       	mov	r11, r18
    1692:	03 2f       	mov	r16, r19
    1694:	14 2f       	mov	r17, r20
    1696:	d5 2f       	mov	r29, r21
    1698:	80 e3       	ldi	r24, 0x30	; 48
    169a:	86 0f       	add	r24, r22
    169c:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_enuWriteNLatch>
    16a0:	a8 2e       	mov	r10, r24
				Local_u32Reversed/=10;
    16a2:	cb 2c       	mov	r12, r11
    16a4:	d0 2e       	mov	r13, r16
    16a6:	e1 2e       	mov	r14, r17
    16a8:	fd 2e       	mov	r15, r29
				Local_u8Counter--;
    16aa:	c1 50       	subi	r28, 0x01	; 1
				Local_u32Reversed = Local_u32Reversed*10 + Local_u8Remainder;
				Local_u8Counter++;
				Copy_u32Data/=10;
			}
			/*********in the previous step: 3malt reverse lel integer elly gayelly, 3ashan law ma3amaltelosh reverse hayetebe3 ma3koos**********/
			for (;Local_u32Reversed>0;)
    16ac:	c1 14       	cp	r12, r1
    16ae:	d1 04       	cpc	r13, r1
    16b0:	e1 04       	cpc	r14, r1
    16b2:	f1 04       	cpc	r15, r1
    16b4:	11 f7       	brne	.-60     	; 0x167a <LCD_enuDisplayUnsignedInteger+0xa8>
				Local_enuerrorStates = LCD_enuWriteNLatch(Local_u32Reversed%10 + '0');
				Local_u32Reversed/=10;
				Local_u8Counter--;
				/*********el mafrood a3mel error status check hna bs 3ashan write and latch me7taga te3mel return ES_OK fa me7taga ta3deel**********/
			}
			while (Local_u8Counter != 0)
    16b6:	cc 23       	and	r28, r28
    16b8:	29 f0       	breq	.+10     	; 0x16c4 <LCD_enuDisplayUnsignedInteger+0xf2>
			{
				LCD_enuWriteNLatch('0');
    16ba:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCD_enuWriteNLatch.constprop.0>
				Local_u8Counter--;
    16be:	c1 50       	subi	r28, 0x01	; 1
				Local_enuerrorStates = LCD_enuWriteNLatch(Local_u32Reversed%10 + '0');
				Local_u32Reversed/=10;
				Local_u8Counter--;
				/*********el mafrood a3mel error status check hna bs 3ashan write and latch me7taga te3mel return ES_OK fa me7taga ta3deel**********/
			}
			while (Local_u8Counter != 0)
    16c0:	c1 11       	cpse	r28, r1
    16c2:	fb cf       	rjmp	.-10     	; 0x16ba <LCD_enuDisplayUnsignedInteger+0xe8>
	}


	return Local_enuerrorStates;

}
    16c4:	8a 2d       	mov	r24, r10
    16c6:	df 91       	pop	r29
    16c8:	cf 91       	pop	r28
    16ca:	1f 91       	pop	r17
    16cc:	0f 91       	pop	r16
    16ce:	ff 90       	pop	r15
    16d0:	ef 90       	pop	r14
    16d2:	df 90       	pop	r13
    16d4:	cf 90       	pop	r12
    16d6:	bf 90       	pop	r11
    16d8:	af 90       	pop	r10
    16da:	7f 90       	pop	r7
    16dc:	6f 90       	pop	r6
    16de:	5f 90       	pop	r5
    16e0:	4f 90       	pop	r4
    16e2:	08 95       	ret



	if (Copy_u32Data == 0)
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    16e4:	41 e0       	ldi	r20, 0x01	; 1
    16e6:	61 e0       	ldi	r22, 0x01	; 1
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch('0');
    16ee:	0e 94 c0 09 	call	0x1380	; 0x1380 <LCD_enuWriteNLatch.constprop.0>

/****************************************************************************************************/

ES_t LCD_enuDisplayUnsignedInteger(u16 Copy_u32Data)
{
	ES_t Local_enuerrorStates = ES_NOK;
    16f2:	a1 2c       	mov	r10, r1
    16f4:	e7 cf       	rjmp	.-50     	; 0x16c4 <LCD_enuDisplayUnsignedInteger+0xf2>
				Local_u32Reversed = Local_u32Reversed*10 + Local_u8Remainder;
				Local_u8Counter++;
				Copy_u32Data/=10;
			}
			/*********in the previous step: 3malt reverse lel integer elly gayelly, 3ashan law ma3amaltelosh reverse hayetebe3 ma3koos**********/
			for (;Local_u32Reversed>0;)
    16f6:	a1 2c       	mov	r10, r1
    16f8:	e3 cf       	rjmp	.-58     	; 0x16c0 <LCD_enuDisplayUnsignedInteger+0xee>

000016fa <LCD_enuDisplayString>:

	return Local_enuerrorStates;
}
*/
ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
    16fa:	cf 93       	push	r28
    16fc:	df 93       	push	r29
	ES_t Local_enuerrorStates = ES_NOK;
	if (Copy_pcString != NULL)
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	99 f0       	breq	.+38     	; 0x1728 <LCD_enuDisplayString+0x2e>
	{
		while (*Copy_pcString)
    1702:	fc 01       	movw	r30, r24
    1704:	20 81       	ld	r18, Z
    1706:	22 23       	and	r18, r18
    1708:	99 f0       	breq	.+38     	; 0x1730 <LCD_enuDisplayString+0x36>
    170a:	ec 01       	movw	r28, r24
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	61 e0       	ldi	r22, 0x01	; 1
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
			Local_enuerrorStates = LCD_enuWriteNLatch(*Copy_pcString++);
    1716:	89 91       	ld	r24, Y+
    1718:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_enuWriteNLatch>
ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
	ES_t Local_enuerrorStates = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
    171c:	98 81       	ld	r25, Y
    171e:	91 11       	cpse	r25, r1
    1720:	f5 cf       	rjmp	.-22     	; 0x170c <LCD_enuDisplayString+0x12>
		}

	}
	else Local_enuerrorStates = ES_NULL_POINTER;
	return Local_enuerrorStates;
}
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
			Local_enuerrorStates = LCD_enuWriteNLatch(*Copy_pcString++);
		}

	}
	else Local_enuerrorStates = ES_NULL_POINTER;
    1728:	82 e0       	ldi	r24, 0x02	; 2
	return Local_enuerrorStates;
}
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	08 95       	ret
ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
	ES_t Local_enuerrorStates = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	f7 cf       	rjmp	.-18     	; 0x1722 <LCD_enuDisplayString+0x28>

00001734 <LCD_enuSetCursorPosition>:
	return Local_enuerrorStates;
}


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{
    1734:	1f 93       	push	r17
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29

	ES_t Local_enuerrorStates = ES_NOK;
	if ((Copy_u8XDimension <= LCD_u8XDIM_1) && (Copy_u8YDimension <= LCD_u8YDIM_15))
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	30 f0       	brcs	.+12     	; 0x174a <LCD_enuSetCursorPosition+0x16>


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{

	ES_t Local_enuerrorStates = ES_NOK;
    173e:	10 e0       	ldi	r17, 0x00	; 0
		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
		}
	return Local_enuerrorStates;

}
    1740:	81 2f       	mov	r24, r17
    1742:	df 91       	pop	r29
    1744:	cf 91       	pop	r28
    1746:	1f 91       	pop	r17
    1748:	08 95       	ret

ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{

	ES_t Local_enuerrorStates = ES_NOK;
	if ((Copy_u8XDimension <= LCD_u8XDIM_1) && (Copy_u8YDimension <= LCD_u8YDIM_15))
    174a:	60 31       	cpi	r22, 0x10	; 16
    174c:	c0 f7       	brcc	.-16     	; 0x173e <LCD_enuSetCursorPosition+0xa>
    174e:	d6 2f       	mov	r29, r22
    1750:	c8 2f       	mov	r28, r24
		{
		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1752:	40 e0       	ldi	r20, 0x00	; 0
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    175c:	18 2f       	mov	r17, r24
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
    175e:	8d 2f       	mov	r24, r29
    1760:	90 e4       	ldi	r25, 0x40	; 64
    1762:	c9 9f       	mul	r28, r25
    1764:	80 0d       	add	r24, r0
    1766:	11 24       	eor	r1, r1
    1768:	80 58       	subi	r24, 0x80	; 128
    176a:	0e 94 0e 09 	call	0x121c	; 0x121c <LCD_enuWriteNLatch>
		}
	return Local_enuerrorStates;

}
    176e:	81 2f       	mov	r24, r17
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	1f 91       	pop	r17
    1776:	08 95       	ret

00001778 <LCD_enuClearDisplay>:

ES_t LCD_enuClearDisplay( void )
{
    1778:	cf 93       	push	r28

	ES_t Local_enuerrorStates = ES_NOK;

		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    177a:	40 e0       	ldi	r20, 0x00	; 0
    177c:	61 e0       	ldi	r22, 0x01	; 1
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	0e 94 28 0c 	call	0x1850	; 0x1850 <DIO_enuSetPinValue>
    1784:	c8 2f       	mov	r28, r24
		LCD_enuWriteNLatch(0x01);
    1786:	0e 94 20 0a 	call	0x1440	; 0x1440 <LCD_enuWriteNLatch.constprop.1>

	return Local_enuerrorStates;

}
    178a:	8c 2f       	mov	r24, r28
    178c:	cf 91       	pop	r28
    178e:	08 95       	ret

00001790 <DIO_enuInit>:
			break;
		case DIO_u8GROUP_C:

			PORTC ^= (DIO_MASK_BIT<<Copy_u8PinID);

			break;
    1790:	81 eb       	ldi	r24, 0xB1	; 177
    1792:	8a bb       	out	0x1a, r24	; 26
    1794:	86 e1       	ldi	r24, 0x16	; 22
    1796:	8b bb       	out	0x1b, r24	; 27
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	08 95       	ret

0000179c <DIO_enuSetPinDirection>:
    179c:	84 30       	cpi	r24, 0x04	; 4
    179e:	10 f0       	brcs	.+4      	; 0x17a4 <DIO_enuSetPinDirection+0x8>
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	08 95       	ret
    17a4:	68 30       	cpi	r22, 0x08	; 8
    17a6:	e0 f7       	brcc	.-8      	; 0x17a0 <DIO_enuSetPinDirection+0x4>
    17a8:	42 30       	cpi	r20, 0x02	; 2
    17aa:	d0 f7       	brcc	.-12     	; 0x17a0 <DIO_enuSetPinDirection+0x4>
    17ac:	82 30       	cpi	r24, 0x02	; 2
    17ae:	b9 f0       	breq	.+46     	; 0x17de <DIO_enuSetPinDirection+0x42>
    17b0:	83 30       	cpi	r24, 0x03	; 3
    17b2:	d9 f1       	breq	.+118    	; 0x182a <DIO_enuSetPinDirection+0x8e>
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	31 f1       	breq	.+76     	; 0x1804 <DIO_enuSetPinDirection+0x68>
    17b8:	21 e0       	ldi	r18, 0x01	; 1
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	06 2e       	mov	r0, r22
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <DIO_enuSetPinDirection+0x26>
    17c0:	22 0f       	add	r18, r18
    17c2:	0a 94       	dec	r0
    17c4:	ea f7       	brpl	.-6      	; 0x17c0 <DIO_enuSetPinDirection+0x24>
    17c6:	20 95       	com	r18
    17c8:	8a b3       	in	r24, 0x1a	; 26
    17ca:	28 23       	and	r18, r24
    17cc:	84 2f       	mov	r24, r20
    17ce:	01 c0       	rjmp	.+2      	; 0x17d2 <DIO_enuSetPinDirection+0x36>
    17d0:	88 0f       	add	r24, r24
    17d2:	6a 95       	dec	r22
    17d4:	ea f7       	brpl	.-6      	; 0x17d0 <DIO_enuSetPinDirection+0x34>
    17d6:	82 2b       	or	r24, r18
    17d8:	8a bb       	out	0x1a, r24	; 26
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	08 95       	ret
    17de:	21 e0       	ldi	r18, 0x01	; 1
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	06 2e       	mov	r0, r22
    17e4:	01 c0       	rjmp	.+2      	; 0x17e8 <DIO_enuSetPinDirection+0x4c>
    17e6:	22 0f       	add	r18, r18
    17e8:	0a 94       	dec	r0
    17ea:	ea f7       	brpl	.-6      	; 0x17e6 <DIO_enuSetPinDirection+0x4a>
    17ec:	20 95       	com	r18
    17ee:	84 b3       	in	r24, 0x14	; 20
    17f0:	28 23       	and	r18, r24
    17f2:	84 2f       	mov	r24, r20
    17f4:	01 c0       	rjmp	.+2      	; 0x17f8 <DIO_enuSetPinDirection+0x5c>
    17f6:	88 0f       	add	r24, r24
    17f8:	6a 95       	dec	r22
    17fa:	ea f7       	brpl	.-6      	; 0x17f6 <DIO_enuSetPinDirection+0x5a>
    17fc:	82 2b       	or	r24, r18
    17fe:	84 bb       	out	0x14, r24	; 20
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	08 95       	ret
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	06 2e       	mov	r0, r22
    180a:	01 c0       	rjmp	.+2      	; 0x180e <DIO_enuSetPinDirection+0x72>
    180c:	88 0f       	add	r24, r24
    180e:	0a 94       	dec	r0
    1810:	ea f7       	brpl	.-6      	; 0x180c <DIO_enuSetPinDirection+0x70>
    1812:	80 95       	com	r24
    1814:	27 b3       	in	r18, 0x17	; 23
    1816:	28 23       	and	r18, r24
    1818:	84 2f       	mov	r24, r20
    181a:	01 c0       	rjmp	.+2      	; 0x181e <DIO_enuSetPinDirection+0x82>
    181c:	88 0f       	add	r24, r24
    181e:	6a 95       	dec	r22
    1820:	ea f7       	brpl	.-6      	; 0x181c <DIO_enuSetPinDirection+0x80>
    1822:	82 2b       	or	r24, r18
    1824:	87 bb       	out	0x17, r24	; 23
    1826:	81 e0       	ldi	r24, 0x01	; 1
    1828:	08 95       	ret
    182a:	21 e0       	ldi	r18, 0x01	; 1
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	06 2e       	mov	r0, r22
    1830:	01 c0       	rjmp	.+2      	; 0x1834 <DIO_enuSetPinDirection+0x98>
    1832:	22 0f       	add	r18, r18
    1834:	0a 94       	dec	r0
    1836:	ea f7       	brpl	.-6      	; 0x1832 <DIO_enuSetPinDirection+0x96>
    1838:	20 95       	com	r18
    183a:	81 b3       	in	r24, 0x11	; 17
    183c:	28 23       	and	r18, r24
    183e:	84 2f       	mov	r24, r20
    1840:	01 c0       	rjmp	.+2      	; 0x1844 <DIO_enuSetPinDirection+0xa8>
    1842:	88 0f       	add	r24, r24
    1844:	6a 95       	dec	r22
    1846:	ea f7       	brpl	.-6      	; 0x1842 <DIO_enuSetPinDirection+0xa6>
    1848:	82 2b       	or	r24, r18
    184a:	81 bb       	out	0x11, r24	; 17
    184c:	81 e0       	ldi	r24, 0x01	; 1
    184e:	08 95       	ret

00001850 <DIO_enuSetPinValue>:
    1850:	84 30       	cpi	r24, 0x04	; 4
    1852:	10 f0       	brcs	.+4      	; 0x1858 <DIO_enuSetPinValue+0x8>
    1854:	83 e0       	ldi	r24, 0x03	; 3
    1856:	08 95       	ret
    1858:	68 30       	cpi	r22, 0x08	; 8
    185a:	e0 f7       	brcc	.-8      	; 0x1854 <DIO_enuSetPinValue+0x4>
    185c:	42 30       	cpi	r20, 0x02	; 2
    185e:	d0 f7       	brcc	.-12     	; 0x1854 <DIO_enuSetPinValue+0x4>
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	b9 f0       	breq	.+46     	; 0x1892 <DIO_enuSetPinValue+0x42>
    1864:	83 30       	cpi	r24, 0x03	; 3
    1866:	d9 f1       	breq	.+118    	; 0x18de <DIO_enuSetPinValue+0x8e>
    1868:	81 30       	cpi	r24, 0x01	; 1
    186a:	31 f1       	breq	.+76     	; 0x18b8 <DIO_enuSetPinValue+0x68>
    186c:	21 e0       	ldi	r18, 0x01	; 1
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	06 2e       	mov	r0, r22
    1872:	01 c0       	rjmp	.+2      	; 0x1876 <DIO_enuSetPinValue+0x26>
    1874:	22 0f       	add	r18, r18
    1876:	0a 94       	dec	r0
    1878:	ea f7       	brpl	.-6      	; 0x1874 <DIO_enuSetPinValue+0x24>
    187a:	20 95       	com	r18
    187c:	8b b3       	in	r24, 0x1b	; 27
    187e:	28 23       	and	r18, r24
    1880:	84 2f       	mov	r24, r20
    1882:	01 c0       	rjmp	.+2      	; 0x1886 <DIO_enuSetPinValue+0x36>
    1884:	88 0f       	add	r24, r24
    1886:	6a 95       	dec	r22
    1888:	ea f7       	brpl	.-6      	; 0x1884 <DIO_enuSetPinValue+0x34>
    188a:	82 2b       	or	r24, r18
    188c:	8b bb       	out	0x1b, r24	; 27
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	08 95       	ret
    1892:	21 e0       	ldi	r18, 0x01	; 1
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	06 2e       	mov	r0, r22
    1898:	01 c0       	rjmp	.+2      	; 0x189c <DIO_enuSetPinValue+0x4c>
    189a:	22 0f       	add	r18, r18
    189c:	0a 94       	dec	r0
    189e:	ea f7       	brpl	.-6      	; 0x189a <DIO_enuSetPinValue+0x4a>
    18a0:	20 95       	com	r18
    18a2:	85 b3       	in	r24, 0x15	; 21
    18a4:	28 23       	and	r18, r24
    18a6:	84 2f       	mov	r24, r20
    18a8:	01 c0       	rjmp	.+2      	; 0x18ac <DIO_enuSetPinValue+0x5c>
    18aa:	88 0f       	add	r24, r24
    18ac:	6a 95       	dec	r22
    18ae:	ea f7       	brpl	.-6      	; 0x18aa <DIO_enuSetPinValue+0x5a>
    18b0:	82 2b       	or	r24, r18
    18b2:	85 bb       	out	0x15, r24	; 21
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	08 95       	ret
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	06 2e       	mov	r0, r22
    18be:	01 c0       	rjmp	.+2      	; 0x18c2 <DIO_enuSetPinValue+0x72>
    18c0:	88 0f       	add	r24, r24
    18c2:	0a 94       	dec	r0
    18c4:	ea f7       	brpl	.-6      	; 0x18c0 <DIO_enuSetPinValue+0x70>
    18c6:	80 95       	com	r24
    18c8:	28 b3       	in	r18, 0x18	; 24
    18ca:	28 23       	and	r18, r24
    18cc:	84 2f       	mov	r24, r20
    18ce:	01 c0       	rjmp	.+2      	; 0x18d2 <DIO_enuSetPinValue+0x82>
    18d0:	88 0f       	add	r24, r24
    18d2:	6a 95       	dec	r22
    18d4:	ea f7       	brpl	.-6      	; 0x18d0 <DIO_enuSetPinValue+0x80>
    18d6:	82 2b       	or	r24, r18
    18d8:	88 bb       	out	0x18, r24	; 24
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	08 95       	ret
    18de:	21 e0       	ldi	r18, 0x01	; 1
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	06 2e       	mov	r0, r22
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <DIO_enuSetPinValue+0x98>
    18e6:	22 0f       	add	r18, r18
    18e8:	0a 94       	dec	r0
    18ea:	ea f7       	brpl	.-6      	; 0x18e6 <DIO_enuSetPinValue+0x96>
    18ec:	20 95       	com	r18
    18ee:	82 b3       	in	r24, 0x12	; 18
    18f0:	28 23       	and	r18, r24
    18f2:	84 2f       	mov	r24, r20
    18f4:	01 c0       	rjmp	.+2      	; 0x18f8 <DIO_enuSetPinValue+0xa8>
    18f6:	88 0f       	add	r24, r24
    18f8:	6a 95       	dec	r22
    18fa:	ea f7       	brpl	.-6      	; 0x18f6 <DIO_enuSetPinValue+0xa6>
    18fc:	82 2b       	or	r24, r18
    18fe:	82 bb       	out	0x12, r24	; 18
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	08 95       	ret

00001904 <DIO_enuGetPinValue>:
}
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
	ES_t Local_enuerrorStates = ES_NOK;

	if (Copy_pu8Value != NULL)
    1904:	41 15       	cp	r20, r1
    1906:	51 05       	cpc	r21, r1
    1908:	c1 f0       	breq	.+48     	; 0x193a <DIO_enuGetPinValue+0x36>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    190a:	84 30       	cpi	r24, 0x04	; 4
    190c:	10 f0       	brcs	.+4      	; 0x1912 <DIO_enuGetPinValue+0xe>
			}
			Local_enuerrorStates = ES_OK;
		}
		else
		{
			Local_enuerrorStates = ES_OUT_OF_RANGE;
    190e:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_enuerrorStates = ES_NULL_POINTER;
	}

	return Local_enuerrorStates;
}
    1910:	08 95       	ret
	ES_t Local_enuerrorStates = ES_NOK;

	if (Copy_pu8Value != NULL)
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
				&& Copy_u8PinID <= DIO_u8PIN7)
    1912:	68 30       	cpi	r22, 0x08	; 8
    1914:	e0 f7       	brcc	.-8      	; 0x190e <DIO_enuGetPinValue+0xa>
		{
			switch (Copy_u8PortID)
    1916:	82 30       	cpi	r24, 0x02	; 2
    1918:	a1 f0       	breq	.+40     	; 0x1942 <DIO_enuGetPinValue+0x3e>
    191a:	83 30       	cpi	r24, 0x03	; 3
    191c:	81 f0       	breq	.+32     	; 0x193e <DIO_enuGetPinValue+0x3a>
    191e:	81 30       	cpi	r24, 0x01	; 1
    1920:	91 f0       	breq	.+36     	; 0x1946 <DIO_enuGetPinValue+0x42>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    1922:	89 b3       	in	r24, 0x19	; 25
				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	02 c0       	rjmp	.+4      	; 0x192c <DIO_enuGetPinValue+0x28>
    1928:	95 95       	asr	r25
    192a:	87 95       	ror	r24
    192c:	6a 95       	dec	r22
    192e:	e2 f7       	brpl	.-8      	; 0x1928 <DIO_enuGetPinValue+0x24>
    1930:	81 70       	andi	r24, 0x01	; 1
    1932:	fa 01       	movw	r30, r20
    1934:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuerrorStates = ES_OK;
    1936:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    1938:	08 95       	ret
			Local_enuerrorStates = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuerrorStates = ES_NULL_POINTER;
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	08 95       	ret
				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    193e:	80 b3       	in	r24, 0x10	; 16
    1940:	f1 cf       	rjmp	.-30     	; 0x1924 <DIO_enuGetPinValue+0x20>
				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    1942:	83 b3       	in	r24, 0x13	; 19
    1944:	ef cf       	rjmp	.-34     	; 0x1924 <DIO_enuGetPinValue+0x20>
				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    1946:	86 b3       	in	r24, 0x16	; 22
    1948:	ed cf       	rjmp	.-38     	; 0x1924 <DIO_enuGetPinValue+0x20>

0000194a <EXTI_enuInit>:

		GICR &= ~(1<<6);
		Local_enuerrorStates = ES_OK;

return Local_enuerrorStates;
}
    194a:	8b b7       	in	r24, 0x3b	; 59
    194c:	80 64       	ori	r24, 0x40	; 64
    194e:	8b bf       	out	0x3b, r24	; 59
    1950:	85 b7       	in	r24, 0x35	; 53
    1952:	83 60       	ori	r24, 0x03	; 3
    1954:	85 bf       	out	0x35, r24	; 53
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	08 95       	ret

0000195a <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(volatile void  (* pfunAppFunction)(void))//,u8 Copy_u8InterruptNum)
{
ES_t Local_enuerrorStates = ES_NOK ;

	if(pfunAppFunction != NULL)
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	31 f0       	breq	.+12     	; 0x196a <EXTI_enuCallBack+0x10>
	{
		
		
			EXTI_pfunISR_fun = pfunAppFunction;
    195e:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <EXTI_pfunISR_fun+0x1>
    1962:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <EXTI_pfunISR_fun>

			Local_enuerrorStates = ES_OK;
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	08 95       	ret
		
	}
	else
	{
		Local_enuerrorStates = ES_NULL_POINTER;
    196a:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_enuerrorStates;
}
    196c:	08 95       	ret

0000196e <__vector_1>:

ISR(VECT_INT0)
{
    196e:	1f 92       	push	r1
    1970:	0f 92       	push	r0
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	0f 92       	push	r0
    1976:	11 24       	eor	r1, r1
    1978:	2f 93       	push	r18
    197a:	3f 93       	push	r19
    197c:	4f 93       	push	r20
    197e:	5f 93       	push	r21
    1980:	6f 93       	push	r22
    1982:	7f 93       	push	r23
    1984:	8f 93       	push	r24
    1986:	9f 93       	push	r25
    1988:	af 93       	push	r26
    198a:	bf 93       	push	r27
    198c:	ef 93       	push	r30
    198e:	ff 93       	push	r31
	if(EXTI_pfunISR_fun != NULL)
    1990:	e0 91 5e 04 	lds	r30, 0x045E	; 0x80045e <EXTI_pfunISR_fun>
    1994:	f0 91 5f 04 	lds	r31, 0x045F	; 0x80045f <EXTI_pfunISR_fun+0x1>
    1998:	30 97       	sbiw	r30, 0x00	; 0
    199a:	09 f0       	breq	.+2      	; 0x199e <__vector_1+0x30>
	{
		EXTI_pfunISR_fun ();
    199c:	09 95       	icall
	}
}
    199e:	ff 91       	pop	r31
    19a0:	ef 91       	pop	r30
    19a2:	bf 91       	pop	r27
    19a4:	af 91       	pop	r26
    19a6:	9f 91       	pop	r25
    19a8:	8f 91       	pop	r24
    19aa:	7f 91       	pop	r23
    19ac:	6f 91       	pop	r22
    19ae:	5f 91       	pop	r21
    19b0:	4f 91       	pop	r20
    19b2:	3f 91       	pop	r19
    19b4:	2f 91       	pop	r18
    19b6:	0f 90       	pop	r0
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	0f 90       	pop	r0
    19bc:	1f 90       	pop	r1
    19be:	18 95       	reti

000019c0 <SPI_vInitMaster>:
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
	SPCR |= (1<<SPE);//Enable the SPI
    19c0:	87 b3       	in	r24, 0x17	; 23
    19c2:	80 6b       	ori	r24, 0xB0	; 176
    19c4:	87 bb       	out	0x17, r24	; 23
    19c6:	8d b1       	in	r24, 0x0d	; 13
    19c8:	81 65       	ori	r24, 0x51	; 81
    19ca:	8d b9       	out	0x0d, r24	; 13
    19cc:	08 95       	ret

000019ce <SPI_ui8TransmitRecive>:
}

u8 SPI_ui8TransmitRecive (u8 data)
{
	SPDR = data;//move the given data to SPI Data register
    19ce:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    19d0:	77 9b       	sbis	0x0e, 7	; 14
    19d2:	fe cf       	rjmp	.-4      	; 0x19d0 <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    19d4:	8f b1       	in	r24, 0x0f	; 15
}
    19d6:	08 95       	ret

000019d8 <UART_enuUART_Init>:

ES_t UART_enuUART_Init(void)
{
	ES_t Local_ErorrState = ES_NOK;

	UCSRA = 0x00; // flags RXC,TXC,UDRE -> 0,, U2X -> 0(Synchronous)
    19d8:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18; // set to be a reciever and a transmiter
    19da:	88 e1       	ldi	r24, 0x18	; 24
    19dc:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86; // set frame format
    19de:	86 e8       	ldi	r24, 0x86	; 134
    19e0:	80 bd       	out	0x20, r24	; 32

	UBRRL = 103; // 0110 0111 (BAUD)
    19e2:	87 e6       	ldi	r24, 0x67	; 103
    19e4:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;   // BAUD>>8  -> 0
    19e6:	10 bc       	out	0x20, r1	; 32

	return Local_ErorrState;
}
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	08 95       	ret

000019ec <UART_enuSendChar>:
ES_t UART_enuSendChar( u8 Copy_u8CharData)
{
	ES_t Local_ErorrState = ES_NOK;
	// check if UDR ready(empty)for write or not using UDRE bit--> if ready..go else wait.

	while(! ((UCSRA >> 5) & 1)); // (UCSRA >> 5) -> UDRE
    19ec:	5d 9b       	sbis	0x0b, 5	; 11
    19ee:	fe cf       	rjmp	.-4      	; 0x19ec <UART_enuSendChar>
	UDR = Copy_u8CharData;
    19f0:	8c b9       	out	0x0c, r24	; 12
	  while(!((UCSRA >> 6) & 1));
	  UCSRA |= (1>>6);

*/
	return Local_ErorrState;
}
    19f2:	80 e0       	ldi	r24, 0x00	; 0
    19f4:	08 95       	ret

000019f6 <UART_enuRecieveChar>:
{
	ES_t Local_ErorrState = ES_NOK;

// As long the RXc is 0 so there is no recieved data at that moment --> recieve the new data

	while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7) -> RXc
    19f6:	5f 9b       	sbis	0x0b, 7	; 11
    19f8:	fe cf       	rjmp	.-4      	; 0x19f6 <UART_enuRecieveChar>
	*Copy_u8RxChar = UDR;
    19fa:	2c b1       	in	r18, 0x0c	; 12
    19fc:	fc 01       	movw	r30, r24
    19fe:	20 83       	st	Z, r18
	//UART_First_ConnectionFlag ++;
	return Local_ErorrState;
}
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	08 95       	ret

00001a04 <UART_enuSendString>:

ES_t UART_enuSendString(u8 * Copy_Au8StringData)
{
    1a04:	dc 01       	movw	r26, r24
	ES_t Local_ErorrState = ES_NOK;

	u8 Local_u8Iter = 0;

	while(Copy_Au8StringData[Local_u8Iter] != 0) // check if data not equal  NULL
    1a06:	9c 91       	ld	r25, X
    1a08:	99 23       	and	r25, r25
    1a0a:	59 f0       	breq	.+22     	; 0x1a22 <UART_enuSendString+0x1e>
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
	{
		while(! ((UCSRA>>5) & 1 )); // wait until the UDR is empty using (UCSRA>>5) -> UDRE
    1a0e:	5d 9b       	sbis	0x0b, 5	; 11
    1a10:	fe cf       	rjmp	.-4      	; 0x1a0e <UART_enuSendString+0xa>
		UDR = (Copy_Au8StringData[Local_u8Iter]);
    1a12:	9c b9       	out	0x0c, r25	; 12
		//UART_First_ConnectionFlag++;
		Local_u8Iter++;
    1a14:	2f 5f       	subi	r18, 0xFF	; 255
{
	ES_t Local_ErorrState = ES_NOK;

	u8 Local_u8Iter = 0;

	while(Copy_Au8StringData[Local_u8Iter] != 0) // check if data not equal  NULL
    1a16:	fd 01       	movw	r30, r26
    1a18:	e2 0f       	add	r30, r18
    1a1a:	f1 1d       	adc	r31, r1
    1a1c:	90 81       	ld	r25, Z
    1a1e:	91 11       	cpse	r25, r1
    1a20:	f6 cf       	rjmp	.-20     	; 0x1a0e <UART_enuSendString+0xa>
		//UART_First_ConnectionFlag++;
		Local_u8Iter++;
	}

	return Local_ErorrState;
}
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	08 95       	ret

00001a26 <UART_enuRecieveString>:

ES_t UART_enuRecieveString(u8 * Copy_Au8RxString)
{
    1a26:	ac 01       	movw	r20, r24

	(Copy_Au8RxString[Local_u8Iter++]) = Local_u8TempChar;

	}
#elif NEW_LINE == YES
	u8 Local_u8Iter = 0;
    1a28:	20 e0       	ldi	r18, 0x00	; 0

	while(1)
	{

		while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7)-> RXc
    1a2a:	5f 9b       	sbis	0x0b, 7	; 11
    1a2c:	fe cf       	rjmp	.-4      	; 0x1a2a <UART_enuRecieveString+0x4>
		(Copy_Au8RxString[Local_u8Iter]) = UDR ;
    1a2e:	fa 01       	movw	r30, r20
    1a30:	e2 0f       	add	r30, r18
    1a32:	f1 1d       	adc	r31, r1
    1a34:	9c b1       	in	r25, 0x0c	; 12
    1a36:	90 83       	st	Z, r25

//to display what is typed

		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
    1a38:	5d 9b       	sbis	0x0b, 5	; 11
    1a3a:	fe cf       	rjmp	.-4      	; 0x1a38 <UART_enuRecieveString+0x12>
		UDR = (Copy_Au8RxString[Local_u8Iter]);
    1a3c:	9c b9       	out	0x0c, r25	; 12

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
    1a3e:	90 81       	ld	r25, Z
    1a40:	9d 30       	cpi	r25, 0x0D	; 13
    1a42:	21 f0       	breq	.+8      	; 0x1a4c <UART_enuRecieveString+0x26>
    1a44:	9a 30       	cpi	r25, 0x0A	; 10
    1a46:	11 f0       	breq	.+4      	; 0x1a4c <UART_enuRecieveString+0x26>
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
			break;
		}

		Local_u8Iter++;
    1a48:	2f 5f       	subi	r18, 0xFF	; 255
	}
    1a4a:	ef cf       	rjmp	.-34     	; 0x1a2a <UART_enuRecieveString+0x4>
		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
		UDR = (Copy_Au8RxString[Local_u8Iter]);

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
    1a4c:	10 82       	st	Z, r1
		Local_u8Iter++;
	}

#endif
	return Local_ErorrState;
}
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	08 95       	ret

00001a52 <UART_enuCheck_Connection>:


u8 UART_enuCheck_Connection()
{	u8 readUDR;
	if(((UCSRA >> 7) & 1)!=0)
    1a52:	8b b1       	in	r24, 0x0b	; 11
    1a54:	88 1f       	adc	r24, r24
    1a56:	88 27       	eor	r24, r24
    1a58:	88 1f       	adc	r24, r24
    1a5a:	11 f0       	breq	.+4      	; 0x1a60 <UART_enuCheck_Connection+0xe>
	{
		readUDR = UDR;
    1a5c:	8c b1       	in	r24, 0x0c	; 12
		return 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
	}

	return 0;
}
    1a60:	08 95       	ret

00001a62 <__udivmodsi4>:
    1a62:	a1 e2       	ldi	r26, 0x21	; 33
    1a64:	1a 2e       	mov	r1, r26
    1a66:	aa 1b       	sub	r26, r26
    1a68:	bb 1b       	sub	r27, r27
    1a6a:	fd 01       	movw	r30, r26
    1a6c:	0d c0       	rjmp	.+26     	; 0x1a88 <__udivmodsi4_ep>

00001a6e <__udivmodsi4_loop>:
    1a6e:	aa 1f       	adc	r26, r26
    1a70:	bb 1f       	adc	r27, r27
    1a72:	ee 1f       	adc	r30, r30
    1a74:	ff 1f       	adc	r31, r31
    1a76:	a2 17       	cp	r26, r18
    1a78:	b3 07       	cpc	r27, r19
    1a7a:	e4 07       	cpc	r30, r20
    1a7c:	f5 07       	cpc	r31, r21
    1a7e:	20 f0       	brcs	.+8      	; 0x1a88 <__udivmodsi4_ep>
    1a80:	a2 1b       	sub	r26, r18
    1a82:	b3 0b       	sbc	r27, r19
    1a84:	e4 0b       	sbc	r30, r20
    1a86:	f5 0b       	sbc	r31, r21

00001a88 <__udivmodsi4_ep>:
    1a88:	66 1f       	adc	r22, r22
    1a8a:	77 1f       	adc	r23, r23
    1a8c:	88 1f       	adc	r24, r24
    1a8e:	99 1f       	adc	r25, r25
    1a90:	1a 94       	dec	r1
    1a92:	69 f7       	brne	.-38     	; 0x1a6e <__udivmodsi4_loop>
    1a94:	60 95       	com	r22
    1a96:	70 95       	com	r23
    1a98:	80 95       	com	r24
    1a9a:	90 95       	com	r25
    1a9c:	9b 01       	movw	r18, r22
    1a9e:	ac 01       	movw	r20, r24
    1aa0:	bd 01       	movw	r22, r26
    1aa2:	cf 01       	movw	r24, r30
    1aa4:	08 95       	ret

00001aa6 <__tablejump2__>:
    1aa6:	ee 0f       	add	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	05 90       	lpm	r0, Z+
    1aac:	f4 91       	lpm	r31, Z
    1aae:	e0 2d       	mov	r30, r0
    1ab0:	09 94       	ijmp

00001ab2 <__umulhisi3>:
    1ab2:	a2 9f       	mul	r26, r18
    1ab4:	b0 01       	movw	r22, r0
    1ab6:	b3 9f       	mul	r27, r19
    1ab8:	c0 01       	movw	r24, r0
    1aba:	a3 9f       	mul	r26, r19
    1abc:	70 0d       	add	r23, r0
    1abe:	81 1d       	adc	r24, r1
    1ac0:	11 24       	eor	r1, r1
    1ac2:	91 1d       	adc	r25, r1
    1ac4:	b2 9f       	mul	r27, r18
    1ac6:	70 0d       	add	r23, r0
    1ac8:	81 1d       	adc	r24, r1
    1aca:	11 24       	eor	r1, r1
    1acc:	91 1d       	adc	r25, r1
    1ace:	08 95       	ret

00001ad0 <_exit>:
    1ad0:	f8 94       	cli

00001ad2 <__stop_program>:
    1ad2:	ff cf       	rjmp	.-2      	; 0x1ad2 <__stop_program>
