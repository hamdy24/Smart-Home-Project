
AVRMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000018cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003f8  00800060  000018cc  00001960  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800458  00800458  00001d58  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d88  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000218  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003e4e  00000000  00000000  00001fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8a  00000000  00000000  00005e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cee  00000000  00000000  00006db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000054c  00000000  00000000  00008aa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000efc  00000000  00000000  00008ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000232f  00000000  00000000  00009eec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000228  00000000  00000000  0000c21b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 96 0b 	jmp	0x172c	; 0x172c <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	02 05       	cpc	r16, r2
      56:	04 05       	cpc	r16, r4
      58:	0a 05       	cpc	r16, r10
      5a:	0c 05       	cpc	r16, r12
      5c:	0e 05       	cpc	r16, r14
      5e:	14 05       	cpc	r17, r4
      60:	17 05       	cpc	r17, r7
      62:	45 05       	cpc	r20, r5

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	14 e0       	ldi	r17, 0x04	; 4
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec ec       	ldi	r30, 0xCC	; 204
      78:	f8 e1       	ldi	r31, 0x18	; 24
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	a8 35       	cpi	r26, 0x58	; 88
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	24 e0       	ldi	r18, 0x04	; 4
      88:	a8 e5       	ldi	r26, 0x58	; 88
      8a:	b4 e0       	ldi	r27, 0x04	; 4
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ae 35       	cpi	r26, 0x5E	; 94
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 2c 02 	call	0x458	; 0x458 <main>
      9a:	0c 94 64 0c 	jmp	0x18c8	; 0x18c8 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <LoginSystem_SaveNewUser>:

#include <util/delay.h>


	ES_t LoginSystem_SaveNewUser(User_t Copy_strNewUser,u8 *Copy_u8NumofRegisteredUsers)
	{
      a2:	cf 92       	push	r12
      a4:	df 92       	push	r13
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	2b 97       	sbiw	r28, 0x0b	; 11
      b8:	0f b6       	in	r0, 0x3f	; 63
      ba:	f8 94       	cli
      bc:	de bf       	out	0x3e, r29	; 62
      be:	0f be       	out	0x3f, r0	; 63
      c0:	cd bf       	out	0x3d, r28	; 61
      c2:	e9 82       	std	Y+1, r14	; 0x01
      c4:	fa 82       	std	Y+2, r15	; 0x02
      c6:	0b 83       	std	Y+3, r16	; 0x03
      c8:	1c 83       	std	Y+4, r17	; 0x04
      ca:	2d 83       	std	Y+5, r18	; 0x05
      cc:	3e 83       	std	Y+6, r19	; 0x06
      ce:	4f 83       	std	Y+7, r20	; 0x07
      d0:	58 87       	std	Y+8, r21	; 0x08
      d2:	69 87       	std	Y+9, r22	; 0x09
      d4:	7a 87       	std	Y+10, r23	; 0x0a
      d6:	8b 87       	std	Y+11, r24	; 0x0b
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1), Copy_strNewUser.UserName,MAX_NO_OF_LETTERS);
      d8:	f6 01       	movw	r30, r12
      da:	80 81       	ld	r24, Z
      dc:	f9 e0       	ldi	r31, 0x09	; 9
      de:	8f 9f       	mul	r24, r31
      e0:	c0 01       	movw	r24, r0
      e2:	11 24       	eor	r1, r1
      e4:	44 e0       	ldi	r20, 0x04	; 4
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	be 01       	movw	r22, r28
      ea:	6f 5f       	subi	r22, 0xFF	; 255
      ec:	7f 4f       	sbci	r23, 0xFF	; 255
      ee:	42 96       	adiw	r24, 0x12	; 18
      f0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <EEPROM_vWriteBlockToAddress>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f4:	2f ef       	ldi	r18, 0xFF	; 255
      f6:	80 e7       	ldi	r24, 0x70	; 112
      f8:	92 e0       	ldi	r25, 0x02	; 2
      fa:	21 50       	subi	r18, 0x01	; 1
      fc:	80 40       	sbci	r24, 0x00	; 0
      fe:	90 40       	sbci	r25, 0x00	; 0
     100:	e1 f7       	brne	.-8      	; 0xfa <LoginSystem_SaveNewUser+0x58>
     102:	00 c0       	rjmp	.+0      	; 0x104 <LoginSystem_SaveNewUser+0x62>
     104:	00 00       	nop
		_delay_ms(50);
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_strNewUser.Password,MAX_NO_OF_LETTERS);
     106:	f6 01       	movw	r30, r12
     108:	80 81       	ld	r24, Z
     10a:	f9 e0       	ldi	r31, 0x09	; 9
     10c:	8f 9f       	mul	r24, r31
     10e:	c0 01       	movw	r24, r0
     110:	11 24       	eor	r1, r1
     112:	44 e0       	ldi	r20, 0x04	; 4
     114:	50 e0       	ldi	r21, 0x00	; 0
     116:	be 01       	movw	r22, r28
     118:	6a 5f       	subi	r22, 0xFA	; 250
     11a:	7f 4f       	sbci	r23, 0xFF	; 255
     11c:	46 96       	adiw	r24, 0x16	; 22
     11e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <EEPROM_vWriteBlockToAddress>
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	80 e7       	ldi	r24, 0x70	; 112
     126:	92 e0       	ldi	r25, 0x02	; 2
     128:	21 50       	subi	r18, 0x01	; 1
     12a:	80 40       	sbci	r24, 0x00	; 0
     12c:	90 40       	sbci	r25, 0x00	; 0
     12e:	e1 f7       	brne	.-8      	; 0x128 <LoginSystem_SaveNewUser+0x86>
     130:	00 c0       	rjmp	.+0      	; 0x132 <LoginSystem_SaveNewUser+0x90>
     132:	00 00       	nop
		_delay_ms(50);
		

		EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_strNewUser.User_Priority);
     134:	f6 01       	movw	r30, r12
     136:	80 81       	ld	r24, Z
     138:	f9 e0       	ldi	r31, 0x09	; 9
     13a:	8f 9f       	mul	r24, r31
     13c:	c0 01       	movw	r24, r0
     13e:	11 24       	eor	r1, r1
     140:	6b 85       	ldd	r22, Y+11	; 0x0b
     142:	4a 96       	adiw	r24, 0x1a	; 26
     144:	0e 94 81 07 	call	0xf02	; 0xf02 <EEPROM_vWriteByteToAddress>
     148:	2f ef       	ldi	r18, 0xFF	; 255
     14a:	80 e7       	ldi	r24, 0x70	; 112
     14c:	92 e0       	ldi	r25, 0x02	; 2
     14e:	21 50       	subi	r18, 0x01	; 1
     150:	80 40       	sbci	r24, 0x00	; 0
     152:	90 40       	sbci	r25, 0x00	; 0
     154:	e1 f7       	brne	.-8      	; 0x14e <LoginSystem_SaveNewUser+0xac>
     156:	00 c0       	rjmp	.+0      	; 0x158 <LoginSystem_SaveNewUser+0xb6>
     158:	00 00       	nop
		_delay_ms(50);
		(*Copy_u8NumofRegisteredUsers)++;
     15a:	f6 01       	movw	r30, r12
     15c:	60 81       	ld	r22, Z
     15e:	6f 5f       	subi	r22, 0xFF	; 255
     160:	60 83       	st	Z, r22

		EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     162:	81 e1       	ldi	r24, 0x11	; 17
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	0e 94 81 07 	call	0xf02	; 0xf02 <EEPROM_vWriteByteToAddress>
	}
     16a:	2b 96       	adiw	r28, 0x0b	; 11
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	de bf       	out	0x3e, r29	; 62
     172:	0f be       	out	0x3f, r0	; 63
     174:	cd bf       	out	0x3d, r28	; 61
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	1f 91       	pop	r17
     17c:	0f 91       	pop	r16
     17e:	ff 90       	pop	r15
     180:	ef 90       	pop	r14
     182:	df 90       	pop	r13
     184:	cf 90       	pop	r12
     186:	08 95       	ret

00000188 <LoginSystem_enuGetDataFromUserByKeypad>:
	ES_t LoginSystem_enuGetDataFromUserByKeypad(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
	{
     188:	af 92       	push	r10
     18a:	bf 92       	push	r11
     18c:	cf 92       	push	r12
     18e:	df 92       	push	r13
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	1f 92       	push	r1
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	8c 01       	movw	r16, r24
     1a4:	6b 01       	movw	r12, r22
		ES_t Local_enuerrorStates = ES_NOK;
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
     1a6:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Username:");
     1aa:	80 e8       	ldi	r24, 0x80	; 128
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
     1ba:	78 01       	movw	r14, r16
     1bc:	58 01       	movw	r10, r16
     1be:	24 e0       	ldi	r18, 0x04	; 4
     1c0:	a2 0e       	add	r10, r18
     1c2:	b1 1c       	adc	r11, r1
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     1c4:	ce 01       	movw	r24, r28
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	0e 94 f9 07 	call	0xff2	; 0xff2 <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_enuSendData>
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	f7 01       	movw	r30, r14
     1d6:	81 93       	st	Z+, r24
     1d8:	7f 01       	movw	r14, r30
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
		LCD_enuDisplayString("Username:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1da:	ea 15       	cp	r30, r10
     1dc:	fb 05       	cpc	r31, r11
     1de:	91 f7       	brne	.-28     	; 0x1c4 <LoginSystem_enuGetDataFromUserByKeypad+0x3c>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
			LCD_enuSendData(Local_u8PressedKey);
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
		}
		Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     1e0:	f8 01       	movw	r30, r16
     1e2:	14 82       	std	Z+4, r1	; 0x04

		LCD_enuClearDisplay();
     1e4:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Password:");
     1e8:	8a e8       	ldi	r24, 0x8A	; 138
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
     1f8:	76 01       	movw	r14, r12

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1fa:	10 e0       	ldi	r17, 0x00	; 0
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     1fc:	ce 01       	movw	r24, r28
     1fe:	01 96       	adiw	r24, 0x01	; 1
     200:	0e 94 f9 07 	call	0xff2	; 0xff2 <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_enuSendData>
     20a:	ff ef       	ldi	r31, 0xFF	; 255
     20c:	29 e6       	ldi	r18, 0x69	; 105
     20e:	88 e1       	ldi	r24, 0x18	; 24
     210:	f1 50       	subi	r31, 0x01	; 1
     212:	20 40       	sbci	r18, 0x00	; 0
     214:	80 40       	sbci	r24, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <LoginSystem_enuGetDataFromUserByKeypad+0x88>
     218:	00 c0       	rjmp	.+0      	; 0x21a <LoginSystem_enuGetDataFromUserByKeypad+0x92>
     21a:	00 00       	nop
			_delay_ms(500);
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
     21c:	61 2f       	mov	r22, r17
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
			LCD_enuSendData('*');
     224:	8a e2       	ldi	r24, 0x2A	; 42
     226:	0e 94 ee 09 	call	0x13dc	; 0x13dc <LCD_enuSendData>
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	f7 01       	movw	r30, r14
     22e:	81 93       	st	Z+, r24
     230:	7f 01       	movw	r14, r30

		LCD_enuClearDisplay();
		LCD_enuDisplayString("Password:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     232:	1f 5f       	subi	r17, 0xFF	; 255
     234:	14 30       	cpi	r17, 0x04	; 4
     236:	11 f7       	brne	.-60     	; 0x1fc <LoginSystem_enuGetDataFromUserByKeypad+0x74>
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
			LCD_enuSendData('*');
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;

		}
		Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     238:	f6 01       	movw	r30, r12
     23a:	14 82       	std	Z+4, r1	; 0x04
		Local_enuerrorStates = ES_OK;
		return Local_enuerrorStates;
	}
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	0f 90       	pop	r0
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	df 90       	pop	r13
     24e:	cf 90       	pop	r12
     250:	bf 90       	pop	r11
     252:	af 90       	pop	r10
     254:	08 95       	ret

00000256 <LoginSystem_enuGetDataFromUserBY_UART>:
	
		ES_t LoginSystem_enuGetDataFromUserBY_UART(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
		{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	8c 01       	movw	r16, r24
     260:	eb 01       	movw	r28, r22
			ES_t Local_enuerrorStates = ES_NOK;
			UART_enuSendString("\r\n\r\nUsername: ");
     262:	84 e9       	ldi	r24, 0x94	; 148
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Username);
     26a:	c8 01       	movw	r24, r16
     26c:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <UART_enuRecieveString>
			Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     270:	f8 01       	movw	r30, r16
     272:	14 82       	std	Z+4, r1	; 0x04
			UART_enuSendString("Password: ");
     274:	83 ea       	ldi	r24, 0xA3	; 163
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Password);
     27c:	ce 01       	movw	r24, r28
     27e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <UART_enuRecieveString>
			Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     282:	1c 82       	std	Y+4, r1	; 0x04

			Local_enuerrorStates = ES_OK;
			return Local_enuerrorStates;
		}
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	08 95       	ret

00000290 <LoginSystem_u8Strcmp>:



	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
     290:	dc 01       	movw	r26, r24
		u8 Local_u8Iterator=0;
     292:	40 e0       	ldi	r20, 0x00	; 0
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     294:	24 2f       	mov	r18, r20
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	fd 01       	movw	r30, r26
     29a:	e2 0f       	add	r30, r18
     29c:	f3 1f       	adc	r31, r19
     29e:	90 81       	ld	r25, Z
     2a0:	fb 01       	movw	r30, r22
     2a2:	e2 0f       	add	r30, r18
     2a4:	f3 1f       	adc	r31, r19
     2a6:	20 81       	ld	r18, Z
     2a8:	92 13       	cpse	r25, r18
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <LoginSystem_u8Strcmp+0x24>
		{
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     2ac:	99 23       	and	r25, r25
     2ae:	41 f0       	breq	.+16     	; 0x2c0 <LoginSystem_u8Strcmp+0x30>
				break;
			Local_u8Iterator++;
     2b0:	4f 5f       	subi	r20, 0xFF	; 255
     2b2:	f0 cf       	rjmp	.-32     	; 0x294 <LoginSystem_u8Strcmp+0x4>
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     2b4:	91 11       	cpse	r25, r1
     2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <LoginSystem_u8Strcmp+0x34>
			return TRUE;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	22 23       	and	r18, r18
     2bc:	21 f0       	breq	.+8      	; 0x2c6 <LoginSystem_u8Strcmp+0x36>
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <LoginSystem_u8Strcmp+0x34>
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	08 95       	ret
		else
			return FALSE;
     2c4:	80 e0       	ldi	r24, 0x00	; 0
	}
     2c6:	08 95       	ret

000002c8 <LoginSystem_RemoveUser>:
	
	u8 LoginSystem_RemoveUser(User_t *Copy_AstrUsers,u8 *Copy_u8NumofRegisteredUsers)
		{
     2c8:	7f 92       	push	r7
     2ca:	8f 92       	push	r8
     2cc:	9f 92       	push	r9
     2ce:	af 92       	push	r10
     2d0:	bf 92       	push	r11
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <LoginSystem_RemoveUser+0x1c>
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <LoginSystem_RemoveUser+0x1e>
     2e6:	1f 92       	push	r1
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	8c 01       	movw	r16, r24
     2ee:	5b 01       	movw	r10, r22
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
     2f0:	8e ea       	ldi	r24, 0xAE	; 174
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
			UART_enuRecieveString(Local_Au8Username);
     2f8:	ce 01       	movw	r24, r28
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <UART_enuRecieveString>
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     300:	1d 82       	std	Y+5, r1	; 0x05
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     302:	f5 01       	movw	r30, r10
     304:	90 80       	ld	r9, Z
     306:	78 01       	movw	r14, r16
     308:	d1 2c       	mov	r13, r1
     30a:	d9 14       	cp	r13, r9
     30c:	09 f4       	brne	.+2      	; 0x310 <LoginSystem_RemoveUser+0x48>
     30e:	7e c0       	rjmp	.+252    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			{
				Copy_u8Flag = LoginSystem_u8Strcmp (Copy_AstrUsers[Local_u8Iterator].UserName,Local_Au8Username);
     310:	7e 2c       	mov	r7, r14
     312:	8f 2c       	mov	r8, r15
     314:	be 01       	movw	r22, r28
     316:	6f 5f       	subi	r22, 0xFF	; 255
     318:	7f 4f       	sbci	r23, 0xFF	; 255
     31a:	c7 01       	movw	r24, r14
     31c:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     320:	c8 2e       	mov	r12, r24
     322:	fb e0       	ldi	r31, 0x0B	; 11
     324:	ef 0e       	add	r14, r31
     326:	f1 1c       	adc	r15, r1
				if (Copy_u8Flag )
     328:	88 23       	and	r24, r24
     32a:	09 f4       	brne	.+2      	; 0x32e <LoginSystem_RemoveUser+0x66>
     32c:	6d c0       	rjmp	.+218    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
				{
					Copy_AstrUsers[Local_u8Iterator]=Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1];
     32e:	f8 01       	movw	r30, r16
     330:	2b e0       	ldi	r18, 0x0B	; 11
     332:	92 9e       	mul	r9, r18
     334:	e0 0d       	add	r30, r0
     336:	f1 1d       	adc	r31, r1
     338:	11 24       	eor	r1, r1
     33a:	3b 97       	sbiw	r30, 0x0b	; 11
     33c:	8b e0       	ldi	r24, 0x0B	; 11
     33e:	a7 2d       	mov	r26, r7
     340:	b8 2d       	mov	r27, r8
     342:	01 90       	ld	r0, Z+
     344:	0d 92       	st	X+, r0
     346:	8a 95       	dec	r24
     348:	e1 f7       	brne	.-8      	; 0x342 <LoginSystem_RemoveUser+0x7a>
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1), Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].UserName,MAX_NO_OF_LETTERS);
     34a:	f5 01       	movw	r30, r10
     34c:	80 81       	ld	r24, Z
     34e:	f9 e0       	ldi	r31, 0x09	; 9
     350:	df 9e       	mul	r13, r31
     352:	70 01       	movw	r14, r0
     354:	11 24       	eor	r1, r1
     356:	b8 01       	movw	r22, r16
     358:	2b e0       	ldi	r18, 0x0B	; 11
     35a:	82 9f       	mul	r24, r18
     35c:	60 0d       	add	r22, r0
     35e:	71 1d       	adc	r23, r1
     360:	11 24       	eor	r1, r1
     362:	6b 50       	subi	r22, 0x0B	; 11
     364:	71 09       	sbc	r23, r1
     366:	44 e0       	ldi	r20, 0x04	; 4
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	c7 01       	movw	r24, r14
     36c:	42 96       	adiw	r24, 0x12	; 18
     36e:	0e 94 8d 07 	call	0xf1a	; 0xf1a <EEPROM_vWriteBlockToAddress>
     372:	8f ef       	ldi	r24, 0xFF	; 255
     374:	90 e7       	ldi	r25, 0x70	; 112
     376:	e2 e0       	ldi	r30, 0x02	; 2
     378:	81 50       	subi	r24, 0x01	; 1
     37a:	90 40       	sbci	r25, 0x00	; 0
     37c:	e0 40       	sbci	r30, 0x00	; 0
     37e:	e1 f7       	brne	.-8      	; 0x378 <LoginSystem_RemoveUser+0xb0>
     380:	00 c0       	rjmp	.+0      	; 0x382 <LoginSystem_RemoveUser+0xba>
     382:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].Password,MAX_NO_OF_LETTERS);
     384:	f5 01       	movw	r30, r10
     386:	80 81       	ld	r24, Z
     388:	b8 01       	movw	r22, r16
     38a:	fb e0       	ldi	r31, 0x0B	; 11
     38c:	8f 9f       	mul	r24, r31
     38e:	60 0d       	add	r22, r0
     390:	71 1d       	adc	r23, r1
     392:	11 24       	eor	r1, r1
     394:	66 50       	subi	r22, 0x06	; 6
     396:	71 09       	sbc	r23, r1
     398:	44 e0       	ldi	r20, 0x04	; 4
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	c7 01       	movw	r24, r14
     39e:	46 96       	adiw	r24, 0x16	; 22
     3a0:	0e 94 8d 07 	call	0xf1a	; 0xf1a <EEPROM_vWriteBlockToAddress>
     3a4:	2f ef       	ldi	r18, 0xFF	; 255
     3a6:	80 e7       	ldi	r24, 0x70	; 112
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	21 50       	subi	r18, 0x01	; 1
     3ac:	80 40       	sbci	r24, 0x00	; 0
     3ae:	90 40       	sbci	r25, 0x00	; 0
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <LoginSystem_RemoveUser+0xe2>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LoginSystem_RemoveUser+0xec>
     3b4:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].User_Priority);
     3b6:	f5 01       	movw	r30, r10
     3b8:	80 81       	ld	r24, Z
     3ba:	fb e0       	ldi	r31, 0x0B	; 11
     3bc:	8f 9f       	mul	r24, r31
     3be:	00 0d       	add	r16, r0
     3c0:	11 1d       	adc	r17, r1
     3c2:	11 24       	eor	r1, r1
     3c4:	f8 01       	movw	r30, r16
     3c6:	3b 97       	sbiw	r30, 0x0b	; 11
     3c8:	62 85       	ldd	r22, Z+10	; 0x0a
     3ca:	c7 01       	movw	r24, r14
     3cc:	4a 96       	adiw	r24, 0x1a	; 26
     3ce:	0e 94 81 07 	call	0xf02	; 0xf02 <EEPROM_vWriteByteToAddress>
     3d2:	2f ef       	ldi	r18, 0xFF	; 255
     3d4:	80 e7       	ldi	r24, 0x70	; 112
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	21 50       	subi	r18, 0x01	; 1
     3da:	80 40       	sbci	r24, 0x00	; 0
     3dc:	90 40       	sbci	r25, 0x00	; 0
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <LoginSystem_RemoveUser+0x110>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LoginSystem_RemoveUser+0x11a>
     3e2:	00 00       	nop
					_delay_ms(50);
					(*Copy_u8NumofRegisteredUsers)--;
     3e4:	f5 01       	movw	r30, r10
     3e6:	60 81       	ld	r22, Z
     3e8:	61 50       	subi	r22, 0x01	; 1
     3ea:	60 83       	st	Z, r22
					EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     3ec:	81 e1       	ldi	r24, 0x11	; 17
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 81 07 	call	0xf02	; 0xf02 <EEPROM_vWriteByteToAddress>
     3f4:	ff ef       	ldi	r31, 0xFF	; 255
     3f6:	20 e7       	ldi	r18, 0x70	; 112
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	f1 50       	subi	r31, 0x01	; 1
     3fc:	20 40       	sbci	r18, 0x00	; 0
     3fe:	80 40       	sbci	r24, 0x00	; 0
     400:	e1 f7       	brne	.-8      	; 0x3fa <LoginSystem_RemoveUser+0x132>
     402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     404:	00 00       	nop
     406:	03 c0       	rjmp	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
			UART_enuRecieveString(Local_Au8Username);
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     408:	d3 94       	inc	r13
     40a:	7f cf       	rjmp	.-258    	; 0x30a <LoginSystem_RemoveUser+0x42>
     40c:	c1 2c       	mov	r12, r1
					_delay_ms(50);
					break;
				}
			}
			return Copy_u8Flag;
		}
     40e:	8c 2d       	mov	r24, r12
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	bf 90       	pop	r11
     42c:	af 90       	pop	r10
     42e:	9f 90       	pop	r9
     430:	8f 90       	pop	r8
     432:	7f 90       	pop	r7
     434:	08 95       	ret

00000436 <Button_Pressed_Interrupt>:
u8 ShowToUser = MAIN_MENU;
//u8 Program_Status_Flag = 0;
u8 LCD_KEYPAD_USER_FLAG = 0;
volatile void Button_Pressed_Interrupt()
{
	if (LoginSystem_u8AdminOnlineFlag)	//5od karar hna
     436:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <LoginSystem_u8AdminOnlineFlag>
     43a:	88 23       	and	r24, r24
     43c:	19 f0       	breq	.+6      	; 0x444 <Button_Pressed_Interrupt+0xe>
	{
		LCD_KEYPAD_USER_FLAG = 0;
     43e:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <__data_end>
     442:	08 95       	ret
	}
	else if	(LoginSystem_u8PromotedUserOnlineFlag)
     444:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <LoginSystem_u8PromotedUserOnlineFlag>
     448:	81 11       	cpse	r24, r1
     44a:	f9 cf       	rjmp	.-14     	; 0x43e <Button_Pressed_Interrupt+0x8>
	{
		LCD_KEYPAD_USER_FLAG = 0;
	}
	else
	{
		LCD_KEYPAD_USER_FLAG = 1;
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <__data_end>
		ShowToUser = MAIN_MENU;
     452:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <ShowToUser>
     456:	08 95       	ret

00000458 <main>:
	}
	
}
int main (void)
{
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	cd b7       	in	r28, 0x3d	; 61
     45e:	de b7       	in	r29, 0x3e	; 62
     460:	c7 54       	subi	r28, 0x47	; 71
     462:	d1 09       	sbc	r29, r1
     464:	0f b6       	in	r0, 0x3f	; 63
     466:	f8 94       	cli
     468:	de bf       	out	0x3e, r29	; 62
     46a:	0f be       	out	0x3f, r0	; 63
     46c:	cd bf       	out	0x3d, r28	; 61
/************************************************************************************************************/
/*******************************************INITIALIZATIONS***************************************************/
	DIO_enuInit();
     46e:	0e 94 b0 0a 	call	0x1560	; 0x1560 <DIO_enuInit>
	SPI_vInitMaster();
     472:	0e 94 bf 0b 	call	0x177e	; 0x177e <SPI_vInitMaster>
	UART_enuUART_Init();
     476:	0e 94 cb 0b 	call	0x1796	; 0x1796 <UART_enuUART_Init>
	
	LCD_enuInit();
     47a:	0e 94 91 09 	call	0x1322	; 0x1322 <LCD_enuInit>
	Keypad_enuInit();
     47e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <Keypad_enuInit>
	DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN1,DIO_u8OUTPUT);
     482:	41 e0       	ldi	r20, 0x01	; 1
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	83 e0       	ldi	r24, 0x03	; 3
     488:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
	EXTI_enuInit();
     48c:	0e 94 84 0b 	call	0x1708	; 0x1708 <EXTI_enuInit>
	__asm("sei");// GIE
     490:	78 94       	sei
	EXTI_enuCallBack((volatile void (*) (void))Button_Pressed_Interrupt);
     492:	8b e1       	ldi	r24, 0x1B	; 27
     494:	92 e0       	ldi	r25, 0x02	; 2
     496:	0e 94 8c 0b 	call	0x1718	; 0x1718 <EXTI_enuCallBack>
/***************************************************************************************************/
/* ***********************************************************************************************************/
/************************************************************************************************************/


	u8 Program_Status_Flag = 0;
     49a:	28 96       	adiw	r28, 0x08	; 8
     49c:	1f ae       	std	Y+63, r1	; 0x3f
     49e:	28 97       	sbiw	r28, 0x08	; 8
	User_t LoginSystem_strAdmin;
	User_t LoginSystem_AstrUsers[MAX_NO_OF_USERS];
	u8 LoginSystem_NumOfRegisteredUsers=0;
     4a0:	27 96       	adiw	r28, 0x07	; 7
     4a2:	1f ae       	std	Y+63, r1	; 0x3f
     4a4:	27 97       	sbiw	r28, 0x07	; 7
	u8 Dimmer_Percentage_Tens;
	u8 Dimmer_Percentage_Ones;
//	u8 ShowToUser = MAIN_MENU;
	u8 LoginSystem_u8TrialsLeft =3;
	
	LCD_enuDisplayString("Welcome To Smart");
     4a6:	88 ed       	ldi	r24, 0xD8	; 216
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
	LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     4ae:	60 e0       	ldi	r22, 0x00	; 0
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
	LCD_enuDisplayString("Home ! ");
     4b6:	89 ee       	ldi	r24, 0xE9	; 233
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
	EEPROM_ui8ReadByteFromAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,&Program_Status_Flag);
     4be:	be 01       	movw	r22, r28
     4c0:	69 5b       	subi	r22, 0xB9	; 185
     4c2:	7f 4f       	sbci	r23, 0xFF	; 255
     4c4:	80 e0       	ldi	r24, 0x00	; 0
     4c6:	0e 94 64 07 	call	0xec8	; 0xec8 <EEPROM_ui8ReadByteFromAddress>
     4ca:	2f ef       	ldi	r18, 0xFF	; 255
     4cc:	37 ea       	ldi	r19, 0xA7	; 167
     4ce:	81 e6       	ldi	r24, 0x61	; 97
     4d0:	21 50       	subi	r18, 0x01	; 1
     4d2:	30 40       	sbci	r19, 0x00	; 0
     4d4:	80 40       	sbci	r24, 0x00	; 0
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <main+0x78>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <main+0x82>
     4da:	00 00       	nop
	_delay_ms (2000);
	LCD_enuClearDisplay();
     4dc:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>

	
			if (Program_Status_Flag == FIRST_TIME_USE_STATUS)
     4e0:	28 96       	adiw	r28, 0x08	; 8
     4e2:	8f ad       	ldd	r24, Y+63	; 0x3f
     4e4:	28 97       	sbiw	r28, 0x08	; 8
     4e6:	8f 3f       	cpi	r24, 0xFF	; 255
     4e8:	09 f0       	breq	.+2      	; 0x4ec <main+0x94>
     4ea:	91 c0       	rjmp	.+290    	; 0x60e <main+0x1b6>
			{

				EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,LoginSystem_NumOfRegisteredUsers);
     4ec:	27 96       	adiw	r28, 0x07	; 7
     4ee:	6f ad       	ldd	r22, Y+63	; 0x3f
     4f0:	27 97       	sbiw	r28, 0x07	; 7
     4f2:	81 e1       	ldi	r24, 0x11	; 17
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	0e 94 81 07 	call	0xf02	; 0xf02 <EEPROM_vWriteByteToAddress>
     4fa:	9f ef       	ldi	r25, 0xFF	; 255
     4fc:	e2 e5       	ldi	r30, 0x52	; 82
     4fe:	f7 e0       	ldi	r31, 0x07	; 7
     500:	91 50       	subi	r25, 0x01	; 1
     502:	e0 40       	sbci	r30, 0x00	; 0
     504:	f0 40       	sbci	r31, 0x00	; 0
     506:	e1 f7       	brne	.-8      	; 0x500 <main+0xa8>
     508:	00 c0       	rjmp	.+0      	; 0x50a <main+0xb2>
     50a:	00 00       	nop
				_delay_ms(150);
				LCD_enuDisplayString("For First Time");
     50c:	81 ef       	ldi	r24, 0xF1	; 241
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Use");
     51c:	80 e0       	ldi	r24, 0x00	; 0
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
     524:	2f ef       	ldi	r18, 0xFF	; 255
     526:	37 ea       	ldi	r19, 0xA7	; 167
     528:	81 e6       	ldi	r24, 0x61	; 97
     52a:	21 50       	subi	r18, 0x01	; 1
     52c:	30 40       	sbci	r19, 0x00	; 0
     52e:	80 40       	sbci	r24, 0x00	; 0
     530:	e1 f7       	brne	.-8      	; 0x52a <main+0xd2>
     532:	00 c0       	rjmp	.+0      	; 0x534 <main+0xdc>
     534:	00 00       	nop
				_delay_ms(2000);
				LCD_enuClearDisplay();
     536:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Register Admin");
     53a:	84 e0       	ldi	r24, 0x04	; 4
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("on Keypad");
     54a:	83 e1       	ldi	r24, 0x13	; 19
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
     552:	9f ef       	ldi	r25, 0xFF	; 255
     554:	e7 ea       	ldi	r30, 0xA7	; 167
     556:	f1 e6       	ldi	r31, 0x61	; 97
     558:	91 50       	subi	r25, 0x01	; 1
     55a:	e0 40       	sbci	r30, 0x00	; 0
     55c:	f0 40       	sbci	r31, 0x00	; 0
     55e:	e1 f7       	brne	.-8      	; 0x558 <main+0x100>
     560:	00 c0       	rjmp	.+0      	; 0x562 <main+0x10a>
     562:	00 00       	nop
				_delay_ms(2000);
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_strAdmin.UserName, LoginSystem_strAdmin.Password);
     564:	be 01       	movw	r22, r28
     566:	6e 5c       	subi	r22, 0xCE	; 206
     568:	7f 4f       	sbci	r23, 0xFF	; 255
     56a:	ce 01       	movw	r24, r28
     56c:	8d 96       	adiw	r24, 0x2d	; 45
     56e:	0e 94 c4 00 	call	0x188	; 0x188 <LoginSystem_enuGetDataFromUserByKeypad>
				LoginSystem_strAdmin.User_Priority = ADMIN_PRIORITY;
     572:	81 e0       	ldi	r24, 0x01	; 1
     574:	8f ab       	std	Y+55, r24	; 0x37
				
				
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS ,LoginSystem_strAdmin.UserName , MAX_NO_OF_LETTERS);
     576:	44 e0       	ldi	r20, 0x04	; 4
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	be 01       	movw	r22, r28
     57c:	63 5d       	subi	r22, 0xD3	; 211
     57e:	7f 4f       	sbci	r23, 0xFF	; 255
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 8d 07 	call	0xf1a	; 0xf1a <EEPROM_vWriteBlockToAddress>
     588:	2f ef       	ldi	r18, 0xFF	; 255
     58a:	32 e5       	ldi	r19, 0x52	; 82
     58c:	87 e0       	ldi	r24, 0x07	; 7
     58e:	21 50       	subi	r18, 0x01	; 1
     590:	30 40       	sbci	r19, 0x00	; 0
     592:	80 40       	sbci	r24, 0x00	; 0
     594:	e1 f7       	brne	.-8      	; 0x58e <main+0x136>
     596:	00 c0       	rjmp	.+0      	; 0x598 <main+0x140>
     598:	00 00       	nop
				_delay_ms(150);
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS ,LoginSystem_strAdmin.Password , MAX_NO_OF_LETTERS);
     59a:	44 e0       	ldi	r20, 0x04	; 4
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	be 01       	movw	r22, r28
     5a0:	6e 5c       	subi	r22, 0xCE	; 206
     5a2:	7f 4f       	sbci	r23, 0xFF	; 255
     5a4:	85 e0       	ldi	r24, 0x05	; 5
     5a6:	90 e0       	ldi	r25, 0x00	; 0
     5a8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <EEPROM_vWriteBlockToAddress>
     5ac:	9f ef       	ldi	r25, 0xFF	; 255
     5ae:	e2 e5       	ldi	r30, 0x52	; 82
     5b0:	f7 e0       	ldi	r31, 0x07	; 7
     5b2:	91 50       	subi	r25, 0x01	; 1
     5b4:	e0 40       	sbci	r30, 0x00	; 0
     5b6:	f0 40       	sbci	r31, 0x00	; 0
     5b8:	e1 f7       	brne	.-8      	; 0x5b2 <main+0x15a>
     5ba:	00 c0       	rjmp	.+0      	; 0x5bc <main+0x164>
     5bc:	00 00       	nop
				_delay_ms(150);

				EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,LOAD_LOGIN_SYSTEM_DATABASE);
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	80 e0       	ldi	r24, 0x00	; 0
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 81 07 	call	0xf02	; 0xf02 <EEPROM_vWriteByteToAddress>
     5c8:	2f ef       	ldi	r18, 0xFF	; 255
     5ca:	32 e5       	ldi	r19, 0x52	; 82
     5cc:	87 e0       	ldi	r24, 0x07	; 7
     5ce:	21 50       	subi	r18, 0x01	; 1
     5d0:	30 40       	sbci	r19, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <main+0x176>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <main+0x180>
     5d8:	00 00       	nop
				_delay_ms(150);
	
				LCD_enuClearDisplay();
     5da:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Saved");
     5de:	8d e1       	ldi	r24, 0x1D	; 29
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Successfully");
     5ee:	8a e5       	ldi	r24, 0x5A	; 90
     5f0:	91 e0       	ldi	r25, 0x01	; 1
     5f2:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
     5f6:	9f ef       	ldi	r25, 0xFF	; 255
     5f8:	e3 ed       	ldi	r30, 0xD3	; 211
     5fa:	f0 e3       	ldi	r31, 0x30	; 48
     5fc:	91 50       	subi	r25, 0x01	; 1
     5fe:	e0 40       	sbci	r30, 0x00	; 0
     600:	f0 40       	sbci	r31, 0x00	; 0
     602:	e1 f7       	brne	.-8      	; 0x5fc <main+0x1a4>
     604:	00 c0       	rjmp	.+0      	; 0x606 <main+0x1ae>
     606:	00 00       	nop
				_delay_ms(1000);
				LCD_enuClearDisplay();
     608:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
     60c:	9f c0       	rjmp	.+318    	; 0x74c <main+0x2f4>
			}

			/************************************************************************************************************/
			/************************************************************************************************************/

			else if (Program_Status_Flag == LOAD_LOGIN_SYSTEM_DATABASE)
     60e:	81 11       	cpse	r24, r1
     610:	a1 c0       	rjmp	.+322    	; 0x754 <main+0x2fc>
			{
				/****************************************Load the Login System database from the EEPROM***************************************/
				EEPROM_ui8ReadByteFromAddress(NO_OF_REGISTERED_USERS_ADDRESS,&LoginSystem_NumOfRegisteredUsers);
     612:	be 01       	movw	r22, r28
     614:	6a 5b       	subi	r22, 0xBA	; 186
     616:	7f 4f       	sbci	r23, 0xFF	; 255
     618:	81 e1       	ldi	r24, 0x11	; 17
     61a:	0e 94 64 07 	call	0xec8	; 0xec8 <EEPROM_ui8ReadByteFromAddress>
     61e:	2f ef       	ldi	r18, 0xFF	; 255
     620:	32 e5       	ldi	r19, 0x52	; 82
     622:	87 e0       	ldi	r24, 0x07	; 7
     624:	21 50       	subi	r18, 0x01	; 1
     626:	30 40       	sbci	r19, 0x00	; 0
     628:	80 40       	sbci	r24, 0x00	; 0
     62a:	e1 f7       	brne	.-8      	; 0x624 <main+0x1cc>
     62c:	00 c0       	rjmp	.+0      	; 0x62e <main+0x1d6>
     62e:	00 00       	nop
				_delay_ms(150);
				

				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS,LoginSystem_strAdmin.UserName,MAX_NO_OF_LETTERS);
     630:	44 e0       	ldi	r20, 0x04	; 4
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	be 01       	movw	r22, r28
     636:	63 5d       	subi	r22, 0xD3	; 211
     638:	7f 4f       	sbci	r23, 0xFF	; 255
     63a:	81 e0       	ldi	r24, 0x01	; 1
     63c:	90 e0       	ldi	r25, 0x00	; 0
     63e:	0e 94 6d 07 	call	0xeda	; 0xeda <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     642:	19 aa       	std	Y+49, r1	; 0x31
     644:	9f ef       	ldi	r25, 0xFF	; 255
     646:	e2 e5       	ldi	r30, 0x52	; 82
     648:	f7 e0       	ldi	r31, 0x07	; 7
     64a:	91 50       	subi	r25, 0x01	; 1
     64c:	e0 40       	sbci	r30, 0x00	; 0
     64e:	f0 40       	sbci	r31, 0x00	; 0
     650:	e1 f7       	brne	.-8      	; 0x64a <main+0x1f2>
     652:	00 c0       	rjmp	.+0      	; 0x654 <main+0x1fc>
     654:	00 00       	nop
				_delay_ms(150);
				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS,LoginSystem_strAdmin.Password,MAX_NO_OF_LETTERS);
     656:	44 e0       	ldi	r20, 0x04	; 4
     658:	50 e0       	ldi	r21, 0x00	; 0
     65a:	be 01       	movw	r22, r28
     65c:	6e 5c       	subi	r22, 0xCE	; 206
     65e:	7f 4f       	sbci	r23, 0xFF	; 255
     660:	85 e0       	ldi	r24, 0x05	; 5
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	0e 94 6d 07 	call	0xeda	; 0xeda <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     668:	1e aa       	std	Y+54, r1	; 0x36
     66a:	2f ef       	ldi	r18, 0xFF	; 255
     66c:	32 e5       	ldi	r19, 0x52	; 82
     66e:	87 e0       	ldi	r24, 0x07	; 7
     670:	21 50       	subi	r18, 0x01	; 1
     672:	30 40       	sbci	r19, 0x00	; 0
     674:	80 40       	sbci	r24, 0x00	; 0
     676:	e1 f7       	brne	.-8      	; 0x670 <main+0x218>
     678:	00 c0       	rjmp	.+0      	; 0x67a <main+0x222>
     67a:	00 00       	nop
				_delay_ms(150);
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	8f ab       	std	Y+55, r24	; 0x37
     680:	9f ef       	ldi	r25, 0xFF	; 255
     682:	e2 e5       	ldi	r30, 0x52	; 82
     684:	f7 e0       	ldi	r31, 0x07	; 7
     686:	91 50       	subi	r25, 0x01	; 1
     688:	e0 40       	sbci	r30, 0x00	; 0
     68a:	f0 40       	sbci	r31, 0x00	; 0
     68c:	e1 f7       	brne	.-8      	; 0x686 <main+0x22e>
     68e:	00 c0       	rjmp	.+0      	; 0x690 <main+0x238>
     690:	00 00       	nop
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     692:	51 2c       	mov	r5, r1
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     694:	ab e0       	ldi	r26, 0x0B	; 11
     696:	da 2e       	mov	r13, r26
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     698:	27 96       	adiw	r28, 0x07	; 7
     69a:	8f ad       	ldd	r24, Y+63	; 0x3f
     69c:	27 97       	sbiw	r28, 0x07	; 7
     69e:	58 16       	cp	r5, r24
     6a0:	08 f0       	brcs	.+2      	; 0x6a4 <main+0x24c>
     6a2:	54 c0       	rjmp	.+168    	; 0x74c <main+0x2f4>
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
     6a4:	29 e0       	ldi	r18, 0x09	; 9
     6a6:	52 9e       	mul	r5, r18
     6a8:	30 01       	movw	r6, r0
     6aa:	11 24       	eor	r1, r1
     6ac:	43 01       	movw	r8, r6
     6ae:	32 e1       	ldi	r19, 0x12	; 18
     6b0:	83 0e       	add	r8, r19
     6b2:	91 1c       	adc	r9, r1
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     6b4:	d5 9c       	mul	r13, r5
     6b6:	80 01       	movw	r16, r0
     6b8:	11 24       	eor	r1, r1
     6ba:	ee 24       	eor	r14, r14
     6bc:	e3 94       	inc	r14
     6be:	f1 2c       	mov	r15, r1
     6c0:	ec 0e       	add	r14, r28
     6c2:	fd 1e       	adc	r15, r29
     6c4:	e0 0e       	add	r14, r16
     6c6:	f1 1e       	adc	r15, r17
     6c8:	44 e0       	ldi	r20, 0x04	; 4
     6ca:	50 e0       	ldi	r21, 0x00	; 0
     6cc:	b7 01       	movw	r22, r14
     6ce:	c4 01       	movw	r24, r8
     6d0:	0e 94 6d 07 	call	0xeda	; 0xeda <EEPROM_vReadBlockFromAddress>
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	92 e5       	ldi	r25, 0x52	; 82
     6d8:	e7 e0       	ldi	r30, 0x07	; 7
     6da:	81 50       	subi	r24, 0x01	; 1
     6dc:	90 40       	sbci	r25, 0x00	; 0
     6de:	e0 40       	sbci	r30, 0x00	; 0
     6e0:	e1 f7       	brne	.-8      	; 0x6da <main+0x282>
     6e2:	00 c0       	rjmp	.+0      	; 0x6e4 <main+0x28c>
     6e4:	00 00       	nop
					_delay_ms(150);

					EEPROM_vReadBlockFromAddress(Local_u16UserAddress + MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].Password,MAX_NO_OF_LETTERS);
     6e6:	b8 01       	movw	r22, r16
     6e8:	6b 5f       	subi	r22, 0xFB	; 251
     6ea:	7f 4f       	sbci	r23, 0xFF	; 255
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	2c 0f       	add	r18, r28
     6f2:	3d 1f       	adc	r19, r29
     6f4:	62 0f       	add	r22, r18
     6f6:	73 1f       	adc	r23, r19
     6f8:	44 e0       	ldi	r20, 0x04	; 4
     6fa:	50 e0       	ldi	r21, 0x00	; 0
     6fc:	c3 01       	movw	r24, r6
     6fe:	46 96       	adiw	r24, 0x16	; 22
     700:	0e 94 6d 07 	call	0xeda	; 0xeda <EEPROM_vReadBlockFromAddress>
     704:	3f ef       	ldi	r19, 0xFF	; 255
     706:	82 e5       	ldi	r24, 0x52	; 82
     708:	97 e0       	ldi	r25, 0x07	; 7
     70a:	31 50       	subi	r19, 0x01	; 1
     70c:	80 40       	sbci	r24, 0x00	; 0
     70e:	90 40       	sbci	r25, 0x00	; 0
     710:	e1 f7       	brne	.-8      	; 0x70a <main+0x2b2>
     712:	00 c0       	rjmp	.+0      	; 0x714 <main+0x2bc>
     714:	00 00       	nop
					_delay_ms(150);
					EEPROM_ui8ReadByteFromAddress(Local_u16UserAddress + 2*MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].User_Priority);
     716:	b8 01       	movw	r22, r16
     718:	66 5f       	subi	r22, 0xF6	; 246
     71a:	7f 4f       	sbci	r23, 0xFF	; 255
     71c:	e1 e0       	ldi	r30, 0x01	; 1
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	ec 0f       	add	r30, r28
     722:	fd 1f       	adc	r31, r29
     724:	6e 0f       	add	r22, r30
     726:	7f 1f       	adc	r23, r31
     728:	88 e0       	ldi	r24, 0x08	; 8
     72a:	88 0d       	add	r24, r8
     72c:	0e 94 64 07 	call	0xec8	; 0xec8 <EEPROM_ui8ReadByteFromAddress>
     730:	ff ef       	ldi	r31, 0xFF	; 255
     732:	22 e5       	ldi	r18, 0x52	; 82
     734:	37 e0       	ldi	r19, 0x07	; 7
     736:	f1 50       	subi	r31, 0x01	; 1
     738:	20 40       	sbci	r18, 0x00	; 0
     73a:	30 40       	sbci	r19, 0x00	; 0
     73c:	e1 f7       	brne	.-8      	; 0x736 <main+0x2de>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <main+0x2e8>
     740:	00 00       	nop
					_delay_ms(150);
					LoginSystem_AstrUsers[Local_u8Iterator].UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     742:	f7 01       	movw	r30, r14
     744:	14 82       	std	Z+4, r1	; 0x04
					LoginSystem_AstrUsers[Local_u8Iterator].Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     746:	11 86       	std	Z+9, r1	; 0x09
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     748:	53 94       	inc	r5
     74a:	a6 cf       	rjmp	.-180    	; 0x698 <main+0x240>
				}
				
				


				Program_Status_Flag = IDLE_STATUS;
     74c:	87 e0       	ldi	r24, 0x07	; 7
     74e:	28 96       	adiw	r28, 0x08	; 8
     750:	8f af       	std	Y+63, r24	; 0x3f
     752:	28 97       	sbiw	r28, 0x08	; 8
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     754:	e3 e0       	ldi	r30, 0x03	; 3
     756:	9e 2e       	mov	r9, r30
				Program_Status_Flag = IDLE_STATUS;
			}
		
	while (1)
	{
		UART_enuSendString("PRESS ENTER TO START\r\n");	
     758:	83 e2       	ldi	r24, 0x23	; 35
     75a:	91 e0       	ldi	r25, 0x01	; 1
     75c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>

		if (Program_Status_Flag == IDLE_STATUS)
     760:	28 96       	adiw	r28, 0x08	; 8
     762:	8f ad       	ldd	r24, Y+63	; 0x3f
     764:	28 97       	sbiw	r28, 0x08	; 8
     766:	87 30       	cpi	r24, 0x07	; 7
     768:	19 f0       	breq	.+6      	; 0x770 <main+0x318>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     76a:	7b e0       	ldi	r23, 0x0B	; 11
     76c:	87 2e       	mov	r8, r23
     76e:	96 c0       	rjmp	.+300    	; 0x89c <__stack+0x3d>
				break;
				case State_Dimmer:
				LCD_enuDisplayString("Dimmer controlled");
				break;
				default:
				LCD_enuClearDisplay();
     770:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
				LCD_enuDisplayString("All Devices");
     774:	8a e3       	ldi	r24, 0x3A	; 58
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	81 e0       	ldi	r24, 0x01	; 1
     780:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Are Off");
     784:	86 e4       	ldi	r24, 0x46	; 70
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
			{
				Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
			}
			else if(UART_enuCheck_Connection())
			{
				Program_Status_Flag = REMOTED_SYSTEM_LOGIN_PAGE_STATUS;
     78c:	12 e0       	ldi	r17, 0x02	; 2
				
			}
			while (Program_Status_Flag == IDLE_STATUS)
			if (LCD_KEYPAD_USER_FLAG == 1)
			{
				Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
     78e:	03 e0       	ldi	r16, 0x03	; 3
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
				LCD_enuDisplayString("Are Off");
				break;
				
			}
			while (Program_Status_Flag == IDLE_STATUS)
     790:	28 96       	adiw	r28, 0x08	; 8
     792:	8f ad       	ldd	r24, Y+63	; 0x3f
     794:	28 97       	sbiw	r28, 0x08	; 8
     796:	87 30       	cpi	r24, 0x07	; 7
     798:	41 f7       	brne	.-48     	; 0x76a <main+0x312>
			if (LCD_KEYPAD_USER_FLAG == 1)
     79a:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <__data_end>
     79e:	81 30       	cpi	r24, 0x01	; 1
     7a0:	21 f4       	brne	.+8      	; 0x7aa <main+0x352>
			{
				Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
     7a2:	28 96       	adiw	r28, 0x08	; 8
     7a4:	0f af       	std	Y+63, r16	; 0x3f
     7a6:	28 97       	sbiw	r28, 0x08	; 8
     7a8:	f3 cf       	rjmp	.-26     	; 0x790 <main+0x338>
			}
			else if(UART_enuCheck_Connection())
     7aa:	0e 94 06 0c 	call	0x180c	; 0x180c <UART_enuCheck_Connection>
     7ae:	88 23       	and	r24, r24
     7b0:	79 f3       	breq	.-34     	; 0x790 <main+0x338>
			{
				Program_Status_Flag = REMOTED_SYSTEM_LOGIN_PAGE_STATUS;
     7b2:	28 96       	adiw	r28, 0x08	; 8
     7b4:	1f af       	std	Y+63, r17	; 0x3f
     7b6:	28 97       	sbiw	r28, 0x08	; 8
     7b8:	eb cf       	rjmp	.-42     	; 0x790 <main+0x338>
	
		while (Program_Status_Flag == REMOTED_SYSTEM_LOGIN_PAGE_STATUS)
		{
			u8 LoginSystem_u8_AdminTrueFlag;
			u8 LoginSystem_u8_Remoted_USERTrueFlag;
			LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
     7ba:	be 01       	movw	r22, r28
     7bc:	68 5c       	subi	r22, 0xC8	; 200
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	cd 96       	adiw	r24, 0x3d	; 61
     7c4:	0e 94 2b 01 	call	0x256	; 0x256 <LoginSystem_enuGetDataFromUserBY_UART>
	
			LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     7c8:	be 01       	movw	r22, r28
     7ca:	63 5d       	subi	r22, 0xD3	; 211
     7cc:	7f 4f       	sbci	r23, 0xFF	; 255
     7ce:	ce 01       	movw	r24, r28
     7d0:	cd 96       	adiw	r24, 0x3d	; 61
     7d2:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     7d6:	81 11       	cpse	r24, r1
     7d8:	68 c0       	rjmp	.+208    	; 0x8aa <__stack+0x4b>
     7da:	10 e0       	ldi	r17, 0x00	; 0
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;	
			}
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     7dc:	27 96       	adiw	r28, 0x07	; 7
     7de:	8f ad       	ldd	r24, Y+63	; 0x3f
     7e0:	27 97       	sbiw	r28, 0x07	; 7
     7e2:	18 17       	cp	r17, r24
     7e4:	08 f0       	brcs	.+2      	; 0x7e8 <main+0x390>
     7e6:	69 c3       	rjmp	.+1746   	; 0xeba <__stack+0x65b>
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     7e8:	e1 2e       	mov	r14, r17
     7ea:	f1 2c       	mov	r15, r1
     7ec:	8e 9c       	mul	r8, r14
     7ee:	30 01       	movw	r6, r0
     7f0:	8f 9c       	mul	r8, r15
     7f2:	70 0c       	add	r7, r0
     7f4:	11 24       	eor	r1, r1
     7f6:	be 01       	movw	r22, r28
     7f8:	63 5c       	subi	r22, 0xC3	; 195
     7fa:	7f 4f       	sbci	r23, 0xFF	; 255
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	8c 0f       	add	r24, r28
     802:	9d 1f       	adc	r25, r29
     804:	86 0d       	add	r24, r6
     806:	97 1d       	adc	r25, r7
     808:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     80c:	88 23       	and	r24, r24
     80e:	09 f4       	brne	.+2      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     810:	7b c0       	rjmp	.+246    	; 0x908 <__stack+0xa9>
     812:	c3 01       	movw	r24, r6
     814:	05 96       	adiw	r24, 0x05	; 5
     816:	be 01       	movw	r22, r28
     818:	68 5c       	subi	r22, 0xC8	; 200
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	21 e0       	ldi	r18, 0x01	; 1
     81e:	30 e0       	ldi	r19, 0x00	; 0
     820:	2c 0f       	add	r18, r28
     822:	3d 1f       	adc	r19, r29
     824:	82 0f       	add	r24, r18
     826:	93 1f       	adc	r25, r19
     828:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	81 11       	cpse	r24, r1
     830:	01 c0       	rjmp	.+2      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	b9 2e       	mov	r11, r25
					if ( (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)  )
     836:	31 e0       	ldi	r19, 0x01	; 1
     838:	b3 12       	cpse	r11, r19
     83a:	81 c0       	rjmp	.+258    	; 0x93e <__stack+0xdf>
					{
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER) || (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER) )
     83c:	8e 9c       	mul	r8, r14
     83e:	80 01       	movw	r16, r0
     840:	8f 9c       	mul	r8, r15
     842:	10 0d       	add	r17, r0
     844:	11 24       	eor	r1, r1
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	8c 0f       	add	r24, r28
     84c:	9d 1f       	adc	r25, r29
     84e:	08 0f       	add	r16, r24
     850:	19 1f       	adc	r17, r25
     852:	f8 01       	movw	r30, r16
     854:	82 85       	ldd	r24, Z+10	; 0x0a
     856:	82 50       	subi	r24, 0x02	; 2
     858:	82 30       	cpi	r24, 0x02	; 2
     85a:	08 f4       	brcc	.+2      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     85c:	57 c0       	rjmp	.+174    	; 0x90c <__stack+0xad>
				}
			}
			
			if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
			{
				LoginSystem_u8TrialsLeft--;
     85e:	1f ef       	ldi	r17, 0xFF	; 255
     860:	19 0d       	add	r17, r9
				UART_enuSendString("\r\nWrong Username or Password");
     862:	84 e9       	ldi	r24, 0x94	; 148
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
     86a:	ff ef       	ldi	r31, 0xFF	; 255
     86c:	25 ea       	ldi	r18, 0xA5	; 165
     86e:	3e e0       	ldi	r19, 0x0E	; 14
     870:	f1 50       	subi	r31, 0x01	; 1
     872:	20 40       	sbci	r18, 0x00	; 0
     874:	30 40       	sbci	r19, 0x00	; 0
     876:	e1 f7       	brne	.-8      	; 0x870 <__stack+0x11>
     878:	00 c0       	rjmp	.+0      	; 0x87a <__stack+0x1b>
     87a:	00 00       	nop
				_delay_ms(300);
				UART_enuSendString("\r\nRemaining Trials: ");
     87c:	81 eb       	ldi	r24, 0xB1	; 177
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
				UART_enuSendChar('0'+LoginSystem_u8TrialsLeft);
     884:	8f e2       	ldi	r24, 0x2F	; 47
     886:	89 0d       	add	r24, r9
     888:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <UART_enuSendChar>
							//_delay_ms(1000);
				if (LoginSystem_u8TrialsLeft == 0)
     88c:	11 11       	cpse	r17, r1
     88e:	04 c0       	rjmp	.+8      	; 0x898 <__stack+0x39>
				{
					Program_Status_Flag = BLOCKING_STATUS;
     890:	86 e0       	ldi	r24, 0x06	; 6
     892:	28 96       	adiw	r28, 0x08	; 8
     894:	8f af       	std	Y+63, r24	; 0x3f
     896:	28 97       	sbiw	r28, 0x08	; 8
     898:	b1 2c       	mov	r11, r1
     89a:	91 2e       	mov	r9, r17
				Program_Status_Flag = REMOTED_SYSTEM_LOGIN_PAGE_STATUS;
			}
		}
	
	
		while (Program_Status_Flag == REMOTED_SYSTEM_LOGIN_PAGE_STATUS)
     89c:	28 96       	adiw	r28, 0x08	; 8
     89e:	8f ad       	ldd	r24, Y+63	; 0x3f
     8a0:	28 97       	sbiw	r28, 0x08	; 8
     8a2:	82 30       	cpi	r24, 0x02	; 2
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <__stack+0x49>
     8a6:	89 cf       	rjmp	.-238    	; 0x7ba <main+0x362>
     8a8:	4c c0       	rjmp	.+152    	; 0x942 <__stack+0xe3>
		{
			u8 LoginSystem_u8_AdminTrueFlag;
			u8 LoginSystem_u8_Remoted_USERTrueFlag;
			LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
	
			LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     8aa:	be 01       	movw	r22, r28
     8ac:	6e 5c       	subi	r22, 0xCE	; 206
     8ae:	7f 4f       	sbci	r23, 0xFF	; 255
     8b0:	ce 01       	movw	r24, r28
     8b2:	c8 96       	adiw	r24, 0x38	; 56
     8b4:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     8b8:	11 e0       	ldi	r17, 0x01	; 1
     8ba:	81 11       	cpse	r24, r1
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <__stack+0x61>
     8be:	10 e0       	ldi	r17, 0x00	; 0

			if(LoginSystem_u8_AdminTrueFlag == TRUE)
     8c0:	11 30       	cpi	r17, 0x01	; 1
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <__stack+0x67>
     8c4:	8a cf       	rjmp	.-236    	; 0x7da <main+0x382>
			{
				UART_enuSendString("\r\nLogged in Successfully");
     8c6:	8e e4       	ldi	r24, 0x4E	; 78
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
     8ce:	ff ef       	ldi	r31, 0xFF	; 255
     8d0:	29 e6       	ldi	r18, 0x69	; 105
     8d2:	38 e1       	ldi	r19, 0x18	; 24
     8d4:	f1 50       	subi	r31, 0x01	; 1
     8d6:	20 40       	sbci	r18, 0x00	; 0
     8d8:	30 40       	sbci	r19, 0x00	; 0
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <__stack+0x75>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <__stack+0x7f>
     8de:	00 00       	nop
				_delay_ms(500);
				UART_enuSendString("\r\nWelcome Admin\r\n");
     8e0:	87 e6       	ldi	r24, 0x67	; 103
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
     8e8:	8f ef       	ldi	r24, 0xFF	; 255
     8ea:	99 e6       	ldi	r25, 0x69	; 105
     8ec:	e8 e1       	ldi	r30, 0x18	; 24
     8ee:	81 50       	subi	r24, 0x01	; 1
     8f0:	90 40       	sbci	r25, 0x00	; 0
     8f2:	e0 40       	sbci	r30, 0x00	; 0
     8f4:	e1 f7       	brne	.-8      	; 0x8ee <__stack+0x8f>
     8f6:	00 c0       	rjmp	.+0      	; 0x8f8 <__stack+0x99>
     8f8:	00 00       	nop
				_delay_ms(500);
				LoginSystem_u8AdminOnlineFlag = TRUE;
     8fa:	10 93 5b 04 	sts	0x045B, r17	; 0x80045b <LoginSystem_u8AdminOnlineFlag>
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;	
     8fe:	84 e0       	ldi	r24, 0x04	; 4
     900:	28 96       	adiw	r28, 0x08	; 8
     902:	8f af       	std	Y+63, r24	; 0x3f
     904:	28 97       	sbiw	r28, 0x08	; 8
     906:	de c2       	rjmp	.+1468   	; 0xec4 <__stack+0x665>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     908:	b1 2c       	mov	r11, r1
     90a:	95 cf       	rjmp	.-214    	; 0x836 <__DATA_REGION_LENGTH__+0x36>
					if ( (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)  )
					{
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER) || (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER) )
						{
							UART_enuSendString("\r\nLogged in Successfully\r\n");
     90c:	89 e7       	ldi	r24, 0x79	; 121
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
     914:	ff ef       	ldi	r31, 0xFF	; 255
     916:	29 e6       	ldi	r18, 0x69	; 105
     918:	38 e1       	ldi	r19, 0x18	; 24
     91a:	f1 50       	subi	r31, 0x01	; 1
     91c:	20 40       	sbci	r18, 0x00	; 0
     91e:	30 40       	sbci	r19, 0x00	; 0
     920:	e1 f7       	brne	.-8      	; 0x91a <__stack+0xbb>
     922:	00 c0       	rjmp	.+0      	; 0x924 <__stack+0xc5>
     924:	00 00       	nop
							_delay_ms(500);
							LoginSystem_u8TrialsLeft =3;
							Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;
     926:	84 e0       	ldi	r24, 0x04	; 4
     928:	28 96       	adiw	r28, 0x08	; 8
     92a:	8f af       	std	Y+63, r24	; 0x3f
     92c:	28 97       	sbiw	r28, 0x08	; 8
							if (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER)
     92e:	f8 01       	movw	r30, r16
     930:	82 85       	ldd	r24, Z+10	; 0x0a
     932:	83 30       	cpi	r24, 0x03	; 3
     934:	09 f0       	breq	.+2      	; 0x938 <__stack+0xd9>
     936:	c6 c2       	rjmp	.+1420   	; 0xec4 <__stack+0x665>
							{
								LoginSystem_u8PromotedUserOnlineFlag = TRUE;
     938:	b0 92 5a 04 	sts	0x045A, r11	; 0x80045a <LoginSystem_u8PromotedUserOnlineFlag>
     93c:	c3 c2       	rjmp	.+1414   	; 0xec4 <__stack+0x665>
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;	
			}
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     93e:	1f 5f       	subi	r17, 0xFF	; 255
     940:	4d cf       	rjmp	.-358    	; 0x7dc <main+0x384>
					break;
					
					case '7':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     942:	3b e0       	ldi	r19, 0x0B	; 11
     944:	73 2e       	mov	r7, r19
     946:	4b e0       	ldi	r20, 0x0B	; 11
     948:	84 2e       	mov	r8, r20
								ShowToUser = PRIORITIES_MENU;
     94a:	5f e0       	ldi	r21, 0x0F	; 15
     94c:	55 2e       	mov	r5, r21
					break;
					
					case '7':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     94e:	6b e0       	ldi	r22, 0x0B	; 11
     950:	66 2e       	mov	r6, r22
				else
				{
					UART_enuSendString("\r\n");		//For the shape of menu
					UART_enuRecieveChar(&UART_CHOICE);
					if (UART_CHOICE > '5')
						UART_CHOICE =100;		//If the program enter this else, then a Remoted User is in control. So, We want him to go to default in the switch case if he entered by mistake a number that corresponds An admin option in the switch case
     952:	94 e6       	ldi	r25, 0x64	; 100
     954:	e9 2e       	mov	r14, r25
						SPI_ui8TransmitRecive(DIMMER);
						ShowToUser = DIMMER_MENU;
					break;
					
					case '6':
						ShowToUser = DOOR_MENU;  
     956:	0a e0       	ldi	r16, 0x0A	; 10
						ShowToUser = LOG_OUT_CHOICE;
					break;*/
					
					case '5':
						SPI_ui8TransmitRecive(DIMMER);
						ShowToUser = DIMMER_MENU;
     958:	28 e0       	ldi	r18, 0x08	; 8
     95a:	f2 2e       	mov	r15, r18
			}
					
		}
				
		
		while (Program_Status_Flag == REMOTED_SYSTEM_MENU_STATUS)
     95c:	28 96       	adiw	r28, 0x08	; 8
     95e:	8f ad       	ldd	r24, Y+63	; 0x3f
     960:	28 97       	sbiw	r28, 0x08	; 8
     962:	84 30       	cpi	r24, 0x04	; 4
     964:	09 f0       	breq	.+2      	; 0x968 <__stack+0x109>
     966:	be c1       	rjmp	.+892    	; 0xce4 <__stack+0x485>
		{
			
			while(ShowToUser == MAIN_MENU)
     968:	10 91 59 04 	lds	r17, 0x0459	; 0x800459 <ShowToUser>
     96c:	11 11       	cpse	r17, r1
     96e:	b9 c0       	rjmp	.+370    	; 0xae2 <__stack+0x283>
			{
				//The first five chioces will Appear for Admin or Remoted user 
				UART_enuSendString("\r\n1-Room1");
     970:	86 ec       	ldi	r24, 0xC6	; 198
     972:	91 e0       	ldi	r25, 0x01	; 1
     974:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
				UART_enuSendString("\r\n2-Room2");
     978:	80 ed       	ldi	r24, 0xD0	; 208
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
				UART_enuSendString("\r\n3-Room3");
     980:	8a ed       	ldi	r24, 0xDA	; 218
     982:	91 e0       	ldi	r25, 0x01	; 1
     984:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
				UART_enuSendString("\r\n4-Room4");
     988:	84 ee       	ldi	r24, 0xE4	; 228
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
			//	UART_enuSendString("\r\n5-Room5");
			//	UART_enuSendString("\r\n10-Air Conditioner\r\n");
				UART_enuSendString("\r\n5-Dimmer");
     990:	8e ee       	ldi	r24, 0xEE	; 238
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
				if (LoginSystem_u8AdminOnlineFlag ==TRUE) //The Last 3 options will Appear only to Admin
     998:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <LoginSystem_u8AdminOnlineFlag>
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	91 f4       	brne	.+36     	; 0x9c4 <__stack+0x165>
				{
					UART_enuSendString("\r\n6-Door");
     9a0:	89 ef       	ldi	r24, 0xF9	; 249
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
					UART_enuSendString("\r\n7-Add User");
     9a8:	82 e0       	ldi	r24, 0x02	; 2
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
					UART_enuSendString("\r\n8-Remove User\r\n");
     9b0:	8f e0       	ldi	r24, 0x0F	; 15
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
					//UART_enuSendString("\r\n9-Promote User");
					UART_enuRecieveChar(&UART_CHOICE);
     9b8:	ce 01       	movw	r24, r28
     9ba:	8c 5b       	subi	r24, 0xBC	; 188
     9bc:	9f 4f       	sbci	r25, 0xFF	; 255
     9be:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <UART_enuRecieveChar>
     9c2:	11 c0       	rjmp	.+34     	; 0x9e6 <__stack+0x187>
				}
				else
				{
					UART_enuSendString("\r\n");		//For the shape of menu
     9c4:	87 e3       	ldi	r24, 0x37	; 55
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     9cc:	ce 01       	movw	r24, r28
     9ce:	8c 5b       	subi	r24, 0xBC	; 188
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <UART_enuRecieveChar>
					if (UART_CHOICE > '5')
     9d6:	25 96       	adiw	r28, 0x05	; 5
     9d8:	8f ad       	ldd	r24, Y+63	; 0x3f
     9da:	25 97       	sbiw	r28, 0x05	; 5
     9dc:	86 33       	cpi	r24, 0x36	; 54
     9de:	18 f0       	brcs	.+6      	; 0x9e6 <__stack+0x187>
						UART_CHOICE =100;		//If the program enter this else, then a Remoted User is in control. So, We want him to go to default in the switch case if he entered by mistake a number that corresponds An admin option in the switch case
     9e0:	25 96       	adiw	r28, 0x05	; 5
     9e2:	ef ae       	std	Y+63, r14	; 0x3f
     9e4:	25 97       	sbiw	r28, 0x05	; 5
				}
				
				//UART_enuRecieveChar(&UART_CHOICE);
				switch(UART_CHOICE)
     9e6:	25 96       	adiw	r28, 0x05	; 5
     9e8:	ef ad       	ldd	r30, Y+63	; 0x3f
     9ea:	25 97       	sbiw	r28, 0x05	; 5
     9ec:	8e 2f       	mov	r24, r30
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	fc 01       	movw	r30, r24
     9f2:	f1 97       	sbiw	r30, 0x31	; 49
     9f4:	e8 30       	cpi	r30, 0x08	; 8
     9f6:	f1 05       	cpc	r31, r1
     9f8:	08 f0       	brcs	.+2      	; 0x9fc <__stack+0x19d>
     9fa:	63 c0       	rjmp	.+198    	; 0xac2 <__stack+0x263>
     9fc:	e6 5d       	subi	r30, 0xD6	; 214
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
     a00:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__tablejump2__>
				{
					case '1':
						SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
     a04:	81 e0       	ldi	r24, 0x01	; 1
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <__stack+0x1ab>
						ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
					break;
					
					case '2':
						SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	0e 94 c6 0b 	call	0x178c	; 0x178c <SPI_ui8TransmitRecive>
						ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
     a0e:	60 92 59 04 	sts	0x0459, r6	; 0x800459 <ShowToUser>
					break;
     a12:	aa cf       	rjmp	.-172    	; 0x968 <__stack+0x109>
					
					case '3':
						SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	f9 cf       	rjmp	.-14     	; 0xa0a <__stack+0x1ab>
						ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '4':
						SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
     a18:	84 e0       	ldi	r24, 0x04	; 4
     a1a:	f7 cf       	rjmp	.-18     	; 0xa0a <__stack+0x1ab>
						SPI_ui8TransmitRecive(ROOM5_LED_TOGGLE);
						ShowToUser = LOG_OUT_CHOICE;
					break;*/
					
					case '5':
						SPI_ui8TransmitRecive(DIMMER);
     a1c:	8c e0       	ldi	r24, 0x0C	; 12
     a1e:	0e 94 c6 0b 	call	0x178c	; 0x178c <SPI_ui8TransmitRecive>
						ShowToUser = DIMMER_MENU;
     a22:	f0 92 59 04 	sts	0x0459, r15	; 0x800459 <ShowToUser>
					break;
     a26:	a0 cf       	rjmp	.-192    	; 0x968 <__stack+0x109>
					
					case '6':
						ShowToUser = DOOR_MENU;  
     a28:	00 93 59 04 	sts	0x0459, r16	; 0x800459 <ShowToUser>
					break;
     a2c:	9d cf       	rjmp	.-198    	; 0x968 <__stack+0x109>
					
					case '7':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
     a2e:	27 96       	adiw	r28, 0x07	; 7
     a30:	8f ad       	ldd	r24, Y+63	; 0x3f
     a32:	27 97       	sbiw	r28, 0x07	; 7
     a34:	84 30       	cpi	r24, 0x04	; 4
     a36:	98 f4       	brcc	.+38     	; 0xa5e <__stack+0x1ff>
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     a38:	78 9e       	mul	r7, r24
     a3a:	c0 01       	movw	r24, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	bc 01       	movw	r22, r24
     a40:	6b 5f       	subi	r22, 0xFB	; 251
     a42:	7f 4f       	sbci	r23, 0xFF	; 255
     a44:	e1 e0       	ldi	r30, 0x01	; 1
     a46:	f0 e0       	ldi	r31, 0x00	; 0
     a48:	ec 0f       	add	r30, r28
     a4a:	fd 1f       	adc	r31, r29
     a4c:	6e 0f       	add	r22, r30
     a4e:	7f 1f       	adc	r23, r31
     a50:	8e 0f       	add	r24, r30
     a52:	9f 1f       	adc	r25, r31
     a54:	0e 94 2b 01 	call	0x256	; 0x256 <LoginSystem_enuGetDataFromUserBY_UART>
								ShowToUser = PRIORITIES_MENU;
     a58:	50 92 59 04 	sts	0x0459, r5	; 0x800459 <ShowToUser>
     a5c:	85 cf       	rjmp	.-246    	; 0x968 <__stack+0x109>
							}
						else
							{
								UART_enuSendString("\r\nReached The Max Number of Stored Users");
     a5e:	81 e2       	ldi	r24, 0x21	; 33
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
								UART_enuSendString("\r\nCouldn't Store A New User");
     a66:	8a e4       	ldi	r24, 0x4A	; 74
     a68:	92 e0       	ldi	r25, 0x02	; 2
     a6a:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
								UART_enuSendString("\r\nReturning to Main Menu\r\n");
     a6e:	84 e9       	ldi	r24, 0x94	; 148
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
								ShowToUser = MAIN_MENU;
     a76:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <ShowToUser>
     a7a:	ff ef       	ldi	r31, 0xFF	; 255
     a7c:	2d e2       	ldi	r18, 0x2D	; 45
     a7e:	32 e2       	ldi	r19, 0x22	; 34
     a80:	f1 50       	subi	r31, 0x01	; 1
     a82:	20 40       	sbci	r18, 0x00	; 0
     a84:	30 40       	sbci	r19, 0x00	; 0
     a86:	e1 f7       	brne	.-8      	; 0xa80 <__stack+0x221>
     a88:	19 c0       	rjmp	.+50     	; 0xabc <__stack+0x25d>
								_delay_ms(700);
							}
					break;
					case '8':
						if (LoginSystem_RemoveUser(LoginSystem_AstrUsers,&LoginSystem_NumOfRegisteredUsers) == TRUE)
     a8a:	be 01       	movw	r22, r28
     a8c:	6a 5b       	subi	r22, 0xBA	; 186
     a8e:	7f 4f       	sbci	r23, 0xFF	; 255
     a90:	ce 01       	movw	r24, r28
     a92:	01 96       	adiw	r24, 0x01	; 1
     a94:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LoginSystem_RemoveUser>
     a98:	81 30       	cpi	r24, 0x01	; 1
     a9a:	19 f4       	brne	.+6      	; 0xaa2 <__stack+0x243>
						{		UART_enuSendString("\r\nRemoved Successfully\r\n");
     a9c:	86 e6       	ldi	r24, 0x66	; 102
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <__stack+0x247>
								ShowToUser=LOG_OUT_CHOICE;
						}
						else	{UART_enuSendString("\r\nUsername not Found \r\nReturning to Main Menu\r\n");}
     aa2:	8f e7       	ldi	r24, 0x7F	; 127
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
						ShowToUser=MAIN_MENU;
     aaa:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <ShowToUser>
     aae:	8f ef       	ldi	r24, 0xFF	; 255
     ab0:	9d e2       	ldi	r25, 0x2D	; 45
     ab2:	e2 e2       	ldi	r30, 0x22	; 34
     ab4:	81 50       	subi	r24, 0x01	; 1
     ab6:	90 40       	sbci	r25, 0x00	; 0
     ab8:	e0 40       	sbci	r30, 0x00	; 0
     aba:	e1 f7       	brne	.-8      	; 0xab4 <__stack+0x255>
     abc:	00 c0       	rjmp	.+0      	; 0xabe <__stack+0x25f>
     abe:	00 00       	nop
     ac0:	53 cf       	rjmp	.-346    	; 0x968 <__stack+0x109>
					case '10':
						ShowToUser = AIR_COND_MENU;			//na5od karar
					break;
					*/
					default:
					UART_enuSendString("\r\nInvalid Choice\r\n");
     ac2:	8f ea       	ldi	r24, 0xAF	; 175
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
     aca:	ff ef       	ldi	r31, 0xFF	; 255
     acc:	23 ed       	ldi	r18, 0xD3	; 211
     ace:	30 e3       	ldi	r19, 0x30	; 48
     ad0:	f1 50       	subi	r31, 0x01	; 1
     ad2:	20 40       	sbci	r18, 0x00	; 0
     ad4:	30 40       	sbci	r19, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <__stack+0x271>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <__stack+0x27b>
     ada:	00 00       	nop
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
     adc:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <ShowToUser>
					break;
     ae0:	43 cf       	rjmp	.-378    	; 0x968 <__stack+0x109>
				}
			}
			switch (ShowToUser)
     ae2:	1a 30       	cpi	r17, 0x0A	; 10
     ae4:	09 f4       	brne	.+2      	; 0xae8 <__stack+0x289>
     ae6:	b1 c0       	rjmp	.+354    	; 0xc4a <__stack+0x3eb>
     ae8:	88 f5       	brcc	.+98     	; 0xb4c <__stack+0x2ed>
     aea:	18 30       	cpi	r17, 0x08	; 8
     aec:	09 f0       	breq	.+2      	; 0xaf0 <__stack+0x291>
     aee:	36 cf       	rjmp	.-404    	; 0x95c <__stack+0xfd>
						}
						
				break;
				
				case DIMMER_MENU:
					UART_enuSendString("\r\nEnter The Percentage of Brightness: ");
     af0:	8e e4       	ldi	r24, 0x4E	; 78
     af2:	93 e0       	ldi	r25, 0x03	; 3
     af4:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
					UART_enuRecieveChar(&Dimmer_Percentage_Tens);
     af8:	ce 01       	movw	r24, r28
     afa:	8d 5b       	subi	r24, 0xBD	; 189
     afc:	9f 4f       	sbci	r25, 0xFF	; 255
     afe:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Tens);
     b02:	24 96       	adiw	r28, 0x04	; 4
     b04:	8f ad       	ldd	r24, Y+63	; 0x3f
     b06:	24 97       	sbiw	r28, 0x04	; 4
     b08:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <UART_enuSendChar>
					Dimmer_Percentage_Tens = Dimmer_Percentage_Tens - '0';
     b0c:	24 96       	adiw	r28, 0x04	; 4
     b0e:	8f ad       	ldd	r24, Y+63	; 0x3f
     b10:	24 97       	sbiw	r28, 0x04	; 4
     b12:	80 53       	subi	r24, 0x30	; 48
     b14:	24 96       	adiw	r28, 0x04	; 4
     b16:	8f af       	std	Y+63, r24	; 0x3f
     b18:	24 97       	sbiw	r28, 0x04	; 4
					
					UART_enuRecieveChar(&Dimmer_Percentage_Ones);
     b1a:	ce 01       	movw	r24, r28
     b1c:	8e 5b       	subi	r24, 0xBE	; 190
     b1e:	9f 4f       	sbci	r25, 0xFF	; 255
     b20:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Ones);
     b24:	23 96       	adiw	r28, 0x03	; 3
     b26:	8f ad       	ldd	r24, Y+63	; 0x3f
     b28:	23 97       	sbiw	r28, 0x03	; 3
     b2a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <UART_enuSendChar>
					Dimmer_Percentage_Ones = Dimmer_Percentage_Ones -'0';
     b2e:	23 96       	adiw	r28, 0x03	; 3
     b30:	8f ad       	ldd	r24, Y+63	; 0x3f
     b32:	23 97       	sbiw	r28, 0x03	; 3
     b34:	80 53       	subi	r24, 0x30	; 48
     b36:	23 96       	adiw	r28, 0x03	; 3
     b38:	8f af       	std	Y+63, r24	; 0x3f
     b3a:	23 97       	sbiw	r28, 0x03	; 3
					
					Dimmer_Percentage =10*Dimmer_Percentage_Tens + Dimmer_Percentage_Ones;
					
					SPI_ui8TransmitRecive(Dimmer_Percentage);
     b3c:	24 96       	adiw	r28, 0x04	; 4
     b3e:	9f ad       	ldd	r25, Y+63	; 0x3f
     b40:	24 97       	sbiw	r28, 0x04	; 4
     b42:	2a e0       	ldi	r18, 0x0A	; 10
     b44:	92 9f       	mul	r25, r18
     b46:	80 0d       	add	r24, r0
     b48:	11 24       	eor	r1, r1
     b4a:	8e c0       	rjmp	.+284    	; 0xc68 <__stack+0x409>
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
					break;
				}
			}
			switch (ShowToUser)
     b4c:	1b 30       	cpi	r17, 0x0B	; 11
     b4e:	09 f4       	brne	.+2      	; 0xb52 <__stack+0x2f3>
     b50:	99 c0       	rjmp	.+306    	; 0xc84 <__stack+0x425>
     b52:	1f 30       	cpi	r17, 0x0F	; 15
     b54:	09 f0       	breq	.+2      	; 0xb58 <__stack+0x2f9>
     b56:	02 cf       	rjmp	.-508    	; 0x95c <__stack+0xfd>
			{
				case PRIORITIES_MENU:
						UART_enuSendString("\r\n1-Remoted");
     b58:	82 ec       	ldi	r24, 0xC2	; 194
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
						UART_enuSendString("\r\n2-Promoted");
     b60:	8e ec       	ldi	r24, 0xCE	; 206
     b62:	92 e0       	ldi	r25, 0x02	; 2
     b64:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
						UART_enuSendString("\r\n3-Nonremoted");
     b68:	8b ed       	ldi	r24, 0xDB	; 219
     b6a:	92 e0       	ldi	r25, 0x02	; 2
     b6c:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
						UART_enuSendString("\r\n\r\nPriority Arrangment: Promoted > Nonremoted (LCD+Keypad) > Remoted\r\n");
     b70:	8a ee       	ldi	r24, 0xEA	; 234
     b72:	92 e0       	ldi	r25, 0x02	; 2
     b74:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
						UART_enuRecieveChar(&UART_CHOICE);
     b78:	ce 01       	movw	r24, r28
     b7a:	8c 5b       	subi	r24, 0xBC	; 188
     b7c:	9f 4f       	sbci	r25, 0xFF	; 255
     b7e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <UART_enuRecieveChar>
						if (UART_CHOICE == '1')
     b82:	25 96       	adiw	r28, 0x05	; 5
     b84:	8f ad       	ldd	r24, Y+63	; 0x3f
     b86:	25 97       	sbiw	r28, 0x05	; 5
     b88:	81 33       	cpi	r24, 0x31	; 49
     b8a:	69 f4       	brne	.+26     	; 0xba6 <__stack+0x347>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = REMOTED_USER;
     b8c:	27 96       	adiw	r28, 0x07	; 7
     b8e:	8f ad       	ldd	r24, Y+63	; 0x3f
     b90:	27 97       	sbiw	r28, 0x07	; 7
     b92:	e1 e0       	ldi	r30, 0x01	; 1
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	ec 0f       	add	r30, r28
     b98:	fd 1f       	adc	r31, r29
     b9a:	78 9e       	mul	r7, r24
     b9c:	e0 0d       	add	r30, r0
     b9e:	f1 1d       	adc	r31, r1
     ba0:	11 24       	eor	r1, r1
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	0e c0       	rjmp	.+28     	; 0xbc2 <__stack+0x363>
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
							ShowToUser = LOG_OUT_CHOICE;
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
						else if (UART_CHOICE == '2')
     ba6:	82 33       	cpi	r24, 0x32	; 50
     ba8:	21 f5       	brne	.+72     	; 0xbf2 <__stack+0x393>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = PROMOTED_USER;
     baa:	27 96       	adiw	r28, 0x07	; 7
     bac:	8f ad       	ldd	r24, Y+63	; 0x3f
     bae:	27 97       	sbiw	r28, 0x07	; 7
     bb0:	e1 e0       	ldi	r30, 0x01	; 1
     bb2:	f0 e0       	ldi	r31, 0x00	; 0
     bb4:	ec 0f       	add	r30, r28
     bb6:	fd 1f       	adc	r31, r29
     bb8:	78 9e       	mul	r7, r24
     bba:	e0 0d       	add	r30, r0
     bbc:	f1 1d       	adc	r31, r1
     bbe:	11 24       	eor	r1, r1
     bc0:	83 e0       	ldi	r24, 0x03	; 3
     bc2:	82 87       	std	Z+10, r24	; 0x0a
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
     bc4:	9e 01       	movw	r18, r28
     bc6:	2a 5b       	subi	r18, 0xBA	; 186
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	69 01       	movw	r12, r18
     bcc:	e0 80       	ld	r14, Z
     bce:	f1 80       	ldd	r15, Z+1	; 0x01
     bd0:	02 81       	ldd	r16, Z+2	; 0x02
     bd2:	13 81       	ldd	r17, Z+3	; 0x03
     bd4:	24 81       	ldd	r18, Z+4	; 0x04
     bd6:	35 81       	ldd	r19, Z+5	; 0x05
     bd8:	46 81       	ldd	r20, Z+6	; 0x06
     bda:	57 81       	ldd	r21, Z+7	; 0x07
     bdc:	60 85       	ldd	r22, Z+8	; 0x08
     bde:	71 85       	ldd	r23, Z+9	; 0x09
     be0:	0e 94 51 00 	call	0xa2	; 0xa2 <LoginSystem_SaveNewUser>
							ShowToUser = LOG_OUT_CHOICE;
     be4:	80 92 59 04 	sts	0x0459, r8	; 0x800459 <ShowToUser>
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
     be8:	82 e3       	ldi	r24, 0x32	; 50
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
     bf0:	b0 ce       	rjmp	.-672    	; 0x952 <__stack+0xf3>
						else if (UART_CHOICE == '3')
     bf2:	83 33       	cpi	r24, 0x33	; 51
     bf4:	e1 f4       	brne	.+56     	; 0xc2e <__stack+0x3cf>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = LCD_KEYPAD_USER;
     bf6:	27 96       	adiw	r28, 0x07	; 7
     bf8:	8f ad       	ldd	r24, Y+63	; 0x3f
     bfa:	27 97       	sbiw	r28, 0x07	; 7
     bfc:	e1 e0       	ldi	r30, 0x01	; 1
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	ec 0f       	add	r30, r28
     c02:	fd 1f       	adc	r31, r29
     c04:	78 9e       	mul	r7, r24
     c06:	e0 0d       	add	r30, r0
     c08:	f1 1d       	adc	r31, r1
     c0a:	11 24       	eor	r1, r1
     c0c:	12 86       	std	Z+10, r1	; 0x0a
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
     c0e:	ce 01       	movw	r24, r28
     c10:	8a 5b       	subi	r24, 0xBA	; 186
     c12:	9f 4f       	sbci	r25, 0xFF	; 255
     c14:	6c 01       	movw	r12, r24
     c16:	e0 80       	ld	r14, Z
     c18:	f1 80       	ldd	r15, Z+1	; 0x01
     c1a:	02 81       	ldd	r16, Z+2	; 0x02
     c1c:	13 81       	ldd	r17, Z+3	; 0x03
     c1e:	24 81       	ldd	r18, Z+4	; 0x04
     c20:	35 81       	ldd	r19, Z+5	; 0x05
     c22:	46 81       	ldd	r20, Z+6	; 0x06
     c24:	57 81       	ldd	r21, Z+7	; 0x07
     c26:	60 85       	ldd	r22, Z+8	; 0x08
     c28:	71 85       	ldd	r23, Z+9	; 0x09
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	d9 cf       	rjmp	.-78     	; 0xbe0 <__stack+0x381>
							ShowToUser = LOG_OUT_CHOICE;
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
						else
						{
							UART_enuSendString("\r\nInvalid Choice\r\n");
     c2e:	8f ea       	ldi	r24, 0xAF	; 175
     c30:	92 e0       	ldi	r25, 0x02	; 2
     c32:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
     c36:	9f ef       	ldi	r25, 0xFF	; 255
     c38:	e3 ed       	ldi	r30, 0xD3	; 211
     c3a:	f0 e3       	ldi	r31, 0x30	; 48
     c3c:	91 50       	subi	r25, 0x01	; 1
     c3e:	e0 40       	sbci	r30, 0x00	; 0
     c40:	f0 40       	sbci	r31, 0x00	; 0
     c42:	e1 f7       	brne	.-8      	; 0xc3c <__stack+0x3dd>
     c44:	00 c0       	rjmp	.+0      	; 0xc46 <__stack+0x3e7>
     c46:	00 00       	nop
     c48:	84 ce       	rjmp	.-760    	; 0x952 <__stack+0xf3>
					SPI_ui8TransmitRecive(Dimmer_Percentage);
					ShowToUser=LOG_OUT_CHOICE;
				break;
				
				case DOOR_MENU:
					UART_enuSendString("\r\nDoor Options \r\n 1-Open Door\r\n 2-Close Door\r\n 0-Return to main menu\r\n ");
     c4a:	85 e7       	ldi	r24, 0x75	; 117
     c4c:	93 e0       	ldi	r25, 0x03	; 3
     c4e:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     c52:	ce 01       	movw	r24, r28
     c54:	8c 5b       	subi	r24, 0xBC	; 188
     c56:	9f 4f       	sbci	r25, 0xFF	; 255
     c58:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     c5c:	25 96       	adiw	r28, 0x05	; 5
     c5e:	8f ad       	ldd	r24, Y+63	; 0x3f
     c60:	25 97       	sbiw	r28, 0x05	; 5
     c62:	81 33       	cpi	r24, 0x31	; 49
     c64:	31 f4       	brne	.+12     	; 0xc72 <__stack+0x413>
					{
						SPI_ui8TransmitRecive(OPEN_DOOR_COMMAND);	
     c66:	8d e0       	ldi	r24, 0x0D	; 13
     c68:	0e 94 c6 0b 	call	0x178c	; 0x178c <SPI_ui8TransmitRecive>
						ShowToUser = LOG_OUT_CHOICE;
     c6c:	80 92 59 04 	sts	0x0459, r8	; 0x800459 <ShowToUser>
     c70:	70 ce       	rjmp	.-800    	; 0x952 <__stack+0xf3>
					}
					else if(UART_CHOICE == '2')
     c72:	82 33       	cpi	r24, 0x32	; 50
     c74:	11 f4       	brne	.+4      	; 0xc7a <__stack+0x41b>
					{
						SPI_ui8TransmitRecive(CLOSE_DOOR_COMMAND);
     c76:	8e e0       	ldi	r24, 0x0E	; 14
     c78:	f7 cf       	rjmp	.-18     	; 0xc68 <__stack+0x409>
						ShowToUser = LOG_OUT_CHOICE;
					}
					else if (UART_CHOICE == '0') 
     c7a:	80 33       	cpi	r24, 0x30	; 48
     c7c:	61 f5       	brne	.+88     	; 0xcd6 <__stack+0x477>
						{ShowToUser = MAIN_MENU;} 
     c7e:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <ShowToUser>
     c82:	67 ce       	rjmp	.-818    	; 0x952 <__stack+0xf3>
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = DOOR_MENU;}
				break;
				
				case LOG_OUT_CHOICE:
					UART_enuSendString("\r\n1-Log Out\r\n2-Return to main menu\r\n");
     c84:	81 ed       	ldi	r24, 0xD1	; 209
     c86:	93 e0       	ldi	r25, 0x03	; 3
     c88:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     c8c:	ce 01       	movw	r24, r28
     c8e:	8c 5b       	subi	r24, 0xBC	; 188
     c90:	9f 4f       	sbci	r25, 0xFF	; 255
     c92:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     c96:	25 96       	adiw	r28, 0x05	; 5
     c98:	8f ad       	ldd	r24, Y+63	; 0x3f
     c9a:	25 97       	sbiw	r28, 0x05	; 5
     c9c:	81 33       	cpi	r24, 0x31	; 49
     c9e:	c9 f4       	brne	.+50     	; 0xcd2 <__stack+0x473>
						{
							Program_Status_Flag = IDLE_STATUS;	
     ca0:	87 e0       	ldi	r24, 0x07	; 7
     ca2:	28 96       	adiw	r28, 0x08	; 8
     ca4:	8f af       	std	Y+63, r24	; 0x3f
     ca6:	28 97       	sbiw	r28, 0x08	; 8
							ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu 
     ca8:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <ShowToUser>
							UART_enuSendString("\r\nLogged Out\r\n");
     cac:	86 ef       	ldi	r24, 0xF6	; 246
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
							if (LoginSystem_u8AdminOnlineFlag == TRUE)	//If an Admin was online and wants to log out
     cb4:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <LoginSystem_u8AdminOnlineFlag>
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	19 f4       	brne	.+6      	; 0xcc2 <__stack+0x463>
								LoginSystem_u8AdminOnlineFlag = FALSE;	
     cbc:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <LoginSystem_u8AdminOnlineFlag>
     cc0:	48 ce       	rjmp	.-880    	; 0x952 <__stack+0xf3>
							else if (LoginSystem_u8PromotedUserOnlineFlag == TRUE)	//If a promoted user was online and wants to log out
     cc2:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <LoginSystem_u8PromotedUserOnlineFlag>
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	09 f0       	breq	.+2      	; 0xccc <__stack+0x46d>
     cca:	43 ce       	rjmp	.-890    	; 0x952 <__stack+0xf3>
								LoginSystem_u8PromotedUserOnlineFlag = FALSE;
     ccc:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <LoginSystem_u8PromotedUserOnlineFlag>
     cd0:	40 ce       	rjmp	.-896    	; 0x952 <__stack+0xf3>
						}
				
					else if(UART_CHOICE == '2')
     cd2:	82 33       	cpi	r24, 0x32	; 50
     cd4:	a1 f2       	breq	.-88     	; 0xc7e <__stack+0x41f>
						{ShowToUser = MAIN_MENU;}
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = LOG_OUT_CHOICE;}
     cd6:	8d eb       	ldi	r24, 0xBD	; 189
     cd8:	93 e0       	ldi	r25, 0x03	; 3
     cda:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <UART_enuSendString>
     cde:	10 93 59 04 	sts	0x0459, r17	; 0x800459 <ShowToUser>
     ce2:	37 ce       	rjmp	.-914    	; 0x952 <__stack+0xf3>

				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     ce4:	0b e0       	ldi	r16, 0x0B	; 11
				
			}
		}
		
		//if (Program_Status_Flag == USER_LOGIN_PAGE_STATUS);
		while (Program_Status_Flag == USER_LOGIN_PAGE_STATUS)///off line user should have interrupt
     ce6:	28 96       	adiw	r28, 0x08	; 8
     ce8:	8f ad       	ldd	r24, Y+63	; 0x3f
     cea:	28 97       	sbiw	r28, 0x08	; 8
     cec:	83 30       	cpi	r24, 0x03	; 3
     cee:	09 f0       	breq	.+2      	; 0xcf2 <__stack+0x493>
     cf0:	b4 c0       	rjmp	.+360    	; 0xe5a <__stack+0x5fb>
		{

				u8 LoginSystem_u8TrueFlag;
			//	u8 LoginSystem_u8TrialsLeft =3;

				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
     cf2:	be 01       	movw	r22, r28
     cf4:	68 5c       	subi	r22, 0xC8	; 200
     cf6:	7f 4f       	sbci	r23, 0xFF	; 255
     cf8:	ce 01       	movw	r24, r28
     cfa:	cd 96       	adiw	r24, 0x3d	; 61
     cfc:	0e 94 c4 00 	call	0x188	; 0x188 <LoginSystem_enuGetDataFromUserByKeypad>
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     d00:	10 e0       	ldi	r17, 0x00	; 0
     d02:	27 96       	adiw	r28, 0x07	; 7
     d04:	8f ad       	ldd	r24, Y+63	; 0x3f
     d06:	27 97       	sbiw	r28, 0x07	; 7
     d08:	18 17       	cp	r17, r24
     d0a:	08 f0       	brcs	.+2      	; 0xd0e <__stack+0x4af>
     d0c:	9e c0       	rjmp	.+316    	; 0xe4a <__stack+0x5eb>
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     d0e:	e1 2e       	mov	r14, r17
     d10:	f1 2c       	mov	r15, r1
     d12:	0e 9d       	mul	r16, r14
     d14:	30 01       	movw	r6, r0
     d16:	0f 9d       	mul	r16, r15
     d18:	70 0c       	add	r7, r0
     d1a:	11 24       	eor	r1, r1
     d1c:	be 01       	movw	r22, r28
     d1e:	63 5c       	subi	r22, 0xC3	; 195
     d20:	7f 4f       	sbci	r23, 0xFF	; 255
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	8c 0f       	add	r24, r28
     d28:	9d 1f       	adc	r25, r29
     d2a:	86 0d       	add	r24, r6
     d2c:	97 1d       	adc	r25, r7
     d2e:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     d32:	88 23       	and	r24, r24
     d34:	99 f0       	breq	.+38     	; 0xd5c <__stack+0x4fd>
     d36:	c3 01       	movw	r24, r6
     d38:	05 96       	adiw	r24, 0x05	; 5
     d3a:	be 01       	movw	r22, r28
     d3c:	68 5c       	subi	r22, 0xC8	; 200
     d3e:	7f 4f       	sbci	r23, 0xFF	; 255
     d40:	e1 e0       	ldi	r30, 0x01	; 1
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	ec 0f       	add	r30, r28
     d46:	fd 1f       	adc	r31, r29
     d48:	8e 0f       	add	r24, r30
     d4a:	9f 1f       	adc	r25, r31
     d4c:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     d50:	91 e0       	ldi	r25, 0x01	; 1
     d52:	81 11       	cpse	r24, r1
     d54:	01 c0       	rjmp	.+2      	; 0xd58 <__stack+0x4f9>
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a9 2e       	mov	r10, r25
     d5a:	01 c0       	rjmp	.+2      	; 0xd5e <__stack+0x4ff>
     d5c:	a1 2c       	mov	r10, r1
					if ( LoginSystem_u8TrueFlag == TRUE  )
     d5e:	f1 e0       	ldi	r31, 0x01	; 1
     d60:	af 12       	cpse	r10, r31
     d62:	71 c0       	rjmp	.+226    	; 0xe46 <__stack+0x5e7>
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
     d64:	0e 9d       	mul	r16, r14
     d66:	f0 01       	movw	r30, r0
     d68:	0f 9d       	mul	r16, r15
     d6a:	f0 0d       	add	r31, r0
     d6c:	11 24       	eor	r1, r1
     d6e:	21 e0       	ldi	r18, 0x01	; 1
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	2c 0f       	add	r18, r28
     d74:	3d 1f       	adc	r19, r29
     d76:	e2 0f       	add	r30, r18
     d78:	f3 1f       	adc	r31, r19
     d7a:	82 85       	ldd	r24, Z+10	; 0x0a
     d7c:	88 23       	and	r24, r24
     d7e:	b1 f1       	breq	.+108    	; 0xdec <__stack+0x58d>
					}
					
				}
				if (LoginSystem_u8TrueFlag == FALSE)
				{
					LoginSystem_u8TrialsLeft--;
     d80:	9a 94       	dec	r9
					LCD_enuClearDisplay();
     d82:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Wrong Username");
     d86:	85 e0       	ldi	r24, 0x05	; 5
     d88:	94 e0       	ldi	r25, 0x04	; 4
     d8a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     d8e:	60 e0       	ldi	r22, 0x00	; 0
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("or Password");
     d96:	85 ea       	ldi	r24, 0xA5	; 165
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
     d9e:	3f ef       	ldi	r19, 0xFF	; 255
     da0:	82 e5       	ldi	r24, 0x52	; 82
     da2:	97 e0       	ldi	r25, 0x07	; 7
     da4:	31 50       	subi	r19, 0x01	; 1
     da6:	80 40       	sbci	r24, 0x00	; 0
     da8:	90 40       	sbci	r25, 0x00	; 0
     daa:	e1 f7       	brne	.-8      	; 0xda4 <__stack+0x545>
     dac:	00 c0       	rjmp	.+0      	; 0xdae <__stack+0x54f>
     dae:	00 00       	nop
					_delay_ms(150);
					LCD_enuClearDisplay();
     db0:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Remaining Trials: ");
     db4:	83 eb       	ldi	r24, 0xB3	; 179
     db6:	91 e0       	ldi	r25, 0x01	; 1
     db8:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	81 e0       	ldi	r24, 0x01	; 1
     dc0:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
     dc4:	89 2d       	mov	r24, r9
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <LCD_enuDisplayUnsignedInteger>
     dcc:	ef ef       	ldi	r30, 0xFF	; 255
     dce:	f2 e5       	ldi	r31, 0x52	; 82
     dd0:	27 e0       	ldi	r18, 0x07	; 7
     dd2:	e1 50       	subi	r30, 0x01	; 1
     dd4:	f0 40       	sbci	r31, 0x00	; 0
     dd6:	20 40       	sbci	r18, 0x00	; 0
     dd8:	e1 f7       	brne	.-8      	; 0xdd2 <__stack+0x573>
     dda:	00 c0       	rjmp	.+0      	; 0xddc <__stack+0x57d>
     ddc:	00 00       	nop
					_delay_ms(150);
					if (LoginSystem_u8TrialsLeft == 0)
     dde:	91 10       	cpse	r9, r1
     de0:	3a c0       	rjmp	.+116    	; 0xe56 <__stack+0x5f7>
					{
						Program_Status_Flag = BLOCKING_STATUS;
     de2:	86 e0       	ldi	r24, 0x06	; 6
     de4:	28 96       	adiw	r28, 0x08	; 8
     de6:	8f af       	std	Y+63, r24	; 0x3f
     de8:	28 97       	sbiw	r28, 0x08	; 8
     dea:	35 c0       	rjmp	.+106    	; 0xe56 <__stack+0x5f7>
					if ( LoginSystem_u8TrueFlag == TRUE  )
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
						{
							LoginSystem_u8TrialsLeft =3;
							LCD_enuClearDisplay();
     dec:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
							LCD_enuDisplayString("Logged in");
     df0:	84 e1       	ldi	r24, 0x14	; 20
     df2:	94 e0       	ldi	r25, 0x04	; 4
     df4:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
							LCD_enuDisplayString("Successfully");
     e00:	8a e5       	ldi	r24, 0x5A	; 90
     e02:	91 e0       	ldi	r25, 0x01	; 1
     e04:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
     e08:	3f ef       	ldi	r19, 0xFF	; 255
     e0a:	8d e2       	ldi	r24, 0x2D	; 45
     e0c:	92 e2       	ldi	r25, 0x22	; 34
     e0e:	31 50       	subi	r19, 0x01	; 1
     e10:	80 40       	sbci	r24, 0x00	; 0
     e12:	90 40       	sbci	r25, 0x00	; 0
     e14:	e1 f7       	brne	.-8      	; 0xe0e <__stack+0x5af>
     e16:	00 c0       	rjmp	.+0      	; 0xe18 <__stack+0x5b9>
     e18:	00 00       	nop
							_delay_ms(700);
							LCD_enuClearDisplay();
     e1a:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
							LCD_enuDisplayString("Welcome User");
     e1e:	8e e1       	ldi	r24, 0x1E	; 30
     e20:	94 e0       	ldi	r25, 0x04	; 4
     e22:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
     e26:	ef ef       	ldi	r30, 0xFF	; 255
     e28:	fd e2       	ldi	r31, 0x2D	; 45
     e2a:	22 e2       	ldi	r18, 0x22	; 34
     e2c:	e1 50       	subi	r30, 0x01	; 1
     e2e:	f0 40       	sbci	r31, 0x00	; 0
     e30:	20 40       	sbci	r18, 0x00	; 0
     e32:	e1 f7       	brne	.-8      	; 0xe2c <__stack+0x5cd>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <__stack+0x5d7>
     e36:	00 00       	nop
							_delay_ms(700);
							Program_Status_Flag = USER_MENU_STATUS;
     e38:	85 e0       	ldi	r24, 0x05	; 5
     e3a:	28 96       	adiw	r28, 0x08	; 8
     e3c:	8f af       	std	Y+63, r24	; 0x3f
     e3e:	28 97       	sbiw	r28, 0x08	; 8
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
					if ( LoginSystem_u8TrueFlag == TRUE  )
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
						{
							LoginSystem_u8TrialsLeft =3;
     e40:	83 e0       	ldi	r24, 0x03	; 3
     e42:	98 2e       	mov	r9, r24
     e44:	50 cf       	rjmp	.-352    	; 0xce6 <__stack+0x487>
				u8 LoginSystem_u8TrueFlag;
			//	u8 LoginSystem_u8TrialsLeft =3;

				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     e46:	1f 5f       	subi	r17, 0xFF	; 255
     e48:	5c cf       	rjmp	.-328    	; 0xd02 <__stack+0x4a3>
							break;
						}
					}
					
				}
				if (LoginSystem_u8TrueFlag == FALSE)
     e4a:	aa 20       	and	r10, r10
     e4c:	09 f4       	brne	.+2      	; 0xe50 <__stack+0x5f1>
     e4e:	98 cf       	rjmp	.-208    	; 0xd80 <__stack+0x521>
     e50:	aa 24       	eor	r10, r10
     e52:	a3 94       	inc	r10
     e54:	48 cf       	rjmp	.-368    	; 0xce6 <__stack+0x487>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
					_delay_ms(150);
					if (LoginSystem_u8TrialsLeft == 0)
					{
						Program_Status_Flag = BLOCKING_STATUS;
     e56:	a1 2c       	mov	r10, r1
     e58:	46 cf       	rjmp	.-372    	; 0xce6 <__stack+0x487>


/************************************************************************************************************/
/************************************************************************************************************/

		if (Program_Status_Flag == USER_MENU_STATUS)//off line user menu
     e5a:	85 30       	cpi	r24, 0x05	; 5
     e5c:	09 f0       	breq	.+2      	; 0xe60 <__stack+0x601>
     e5e:	7c cc       	rjmp	.-1800   	; 0x758 <main+0x300>
		{
			LCD_enuClearDisplay();			
     e60:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
			LCD_enuDisplayString("1-Lights 2-Dimmer");
     e64:	8b e2       	ldi	r24, 0x2B	; 43
     e66:	94 e0       	ldi	r25, 0x04	; 4
     e68:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	81 e0       	ldi	r24, 0x01	; 1
     e70:	0e 94 85 0a 	call	0x150a	; 0x150a <LCD_enuSetCursorPosition>
			LCD_enuDisplayString("3-Air Cond");
     e74:	8d e3       	ldi	r24, 0x3D	; 61
     e76:	94 e0       	ldi	r25, 0x04	; 4
     e78:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
			Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
     e7c:	ce 01       	movw	r24, r28
     e7e:	8b 5b       	subi	r24, 0xBB	; 187
     e80:	9f 4f       	sbci	r25, 0xFF	; 255
     e82:	0e 94 f9 07 	call	0xff2	; 0xff2 <Keypad_enuGetPressedKey>
			switch (Keypad_Pressed_Key)
     e86:	26 96       	adiw	r28, 0x06	; 6
     e88:	8f ad       	ldd	r24, Y+63	; 0x3f
     e8a:	26 97       	sbiw	r28, 0x06	; 6
     e8c:	81 53       	subi	r24, 0x31	; 49
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	78 f0       	brcs	.+30     	; 0xeb0 <__stack+0x651>
			//////////////
			break;


			default:
			LCD_enuClearDisplay();
     e92:	0e 94 a3 0a 	call	0x1546	; 0x1546 <LCD_enuClearDisplay>
			LCD_enuDisplayString("Invalid Choice");
     e96:	88 e4       	ldi	r24, 0x48	; 72
     e98:	94 e0       	ldi	r25, 0x04	; 4
     e9a:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <LCD_enuDisplayString>
     e9e:	3f ef       	ldi	r19, 0xFF	; 255
     ea0:	83 ec       	ldi	r24, 0xC3	; 195
     ea2:	99 e0       	ldi	r25, 0x09	; 9
     ea4:	31 50       	subi	r19, 0x01	; 1
     ea6:	80 40       	sbci	r24, 0x00	; 0
     ea8:	90 40       	sbci	r25, 0x00	; 0
     eaa:	e1 f7       	brne	.-8      	; 0xea4 <__stack+0x645>
     eac:	00 c0       	rjmp	.+0      	; 0xeae <__stack+0x64f>
     eae:	00 00       	nop
			_delay_ms(200);
			break;
			}
		Program_Status_Flag = IDLE_STATUS;
     eb0:	87 e0       	ldi	r24, 0x07	; 7
     eb2:	28 96       	adiw	r28, 0x08	; 8
     eb4:	8f af       	std	Y+63, r24	; 0x3f
     eb6:	28 97       	sbiw	r28, 0x08	; 8
     eb8:	4f cc       	rjmp	.-1890   	; 0x758 <main+0x300>
					
						
				}
			}
			
			if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
     eba:	bb 20       	and	r11, r11
     ebc:	09 f4       	brne	.+2      	; 0xec0 <__stack+0x661>
     ebe:	cf cc       	rjmp	.-1634   	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     ec0:	19 2d       	mov	r17, r9
     ec2:	eb cc       	rjmp	.-1578   	; 0x89a <__stack+0x3b>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     ec4:	13 e0       	ldi	r17, 0x03	; 3
     ec6:	e9 cc       	rjmp	.-1582   	; 0x89a <__stack+0x3b>

00000ec8 <EEPROM_ui8ReadByteFromAddress>:


void EEPROM_ui8ReadByteFromAddress( const u16 u16Address ,  u8 * data)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1);
     ec8:	e1 99       	sbic	0x1c, 1	; 28
     eca:	fe cf       	rjmp	.-4      	; 0xec8 <EEPROM_ui8ReadByteFromAddress>
	/* Set up address register */
	EEAR = u16Address;
     ecc:	9f bb       	out	0x1f, r25	; 31
     ece:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
     ed0:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	(*data) = EEDR;
     ed2:	8d b3       	in	r24, 0x1d	; 29
     ed4:	fb 01       	movw	r30, r22
     ed6:	80 83       	st	Z, r24
     ed8:	08 95       	ret

00000eda <EEPROM_vReadBlockFromAddress>:
}

void EEPROM_vReadBlockFromAddress(const u16 uAddress, u8* dist,const u16 size)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     eda:	e1 99       	sbic	0x1c, 1	; 28
     edc:	fe cf       	rjmp	.-4      	; 0xeda <EEPROM_vReadBlockFromAddress>
     ede:	46 0f       	add	r20, r22
     ee0:	57 1f       	adc	r21, r23
     ee2:	fb 01       	movw	r30, r22
     ee4:	86 1b       	sub	r24, r22
     ee6:	97 0b       	sbc	r25, r23
	;

	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     ee8:	e4 17       	cp	r30, r20
     eea:	f5 07       	cpc	r31, r21
     eec:	49 f0       	breq	.+18     	; 0xf00 <EEPROM_vReadBlockFromAddress+0x26>
     eee:	9c 01       	movw	r18, r24
     ef0:	2e 0f       	add	r18, r30
     ef2:	3f 1f       	adc	r19, r31
	{
		/* Set up address register */
		EEAR = uAddress + counter;
     ef4:	3f bb       	out	0x1f, r19	; 31
     ef6:	2e bb       	out	0x1e, r18	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
     ef8:	e0 9a       	sbi	0x1c, 0	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
     efa:	2d b3       	in	r18, 0x1d	; 29
     efc:	21 93       	st	Z+, r18
     efe:	f4 cf       	rjmp	.-24     	; 0xee8 <EEPROM_vReadBlockFromAddress+0xe>

		counter++;//increase the bytes counter
	}
}
     f00:	08 95       	ret

00000f02 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16 uiAddress, const u8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     f02:	e1 99       	sbic	0x1c, 1	; 28
     f04:	fe cf       	rjmp	.-4      	; 0xf02 <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
     f06:	9f bb       	out	0x1f, r25	; 31
     f08:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
     f0a:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
     f0c:	8d b3       	in	r24, 0x1d	; 29
     f0e:	86 17       	cp	r24, r22
     f10:	19 f0       	breq	.+6      	; 0xf18 <EEPROM_vWriteByteToAddress+0x16>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
     f12:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
     f14:	e2 9a       	sbi	0x1c, 2	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
     f16:	e1 9a       	sbi	0x1c, 1	; 28
     f18:	08 95       	ret

00000f1a <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
     f1a:	46 0f       	add	r20, r22
     f1c:	57 1f       	adc	r21, r23
	u16 counter = 0;//Bytes write counter
	while (counter < size)
     f1e:	fb 01       	movw	r30, r22
     f20:	9c 01       	movw	r18, r24
     f22:	26 1b       	sub	r18, r22
     f24:	37 0b       	sbc	r19, r23
     f26:	e4 17       	cp	r30, r20
     f28:	f5 07       	cpc	r31, r21
     f2a:	81 f0       	breq	.+32     	; 0xf4c <EEPROM_vWriteBlockToAddress+0x32>
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     f2c:	e1 99       	sbic	0x1c, 1	; 28
     f2e:	fe cf       	rjmp	.-4      	; 0xf2c <EEPROM_vWriteBlockToAddress+0x12>
     f30:	c9 01       	movw	r24, r18
     f32:	8e 0f       	add	r24, r30
     f34:	9f 1f       	adc	r25, r31
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
     f36:	9f bb       	out	0x1f, r25	; 31
     f38:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
     f3a:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
     f3c:	8d b3       	in	r24, 0x1d	; 29
     f3e:	91 91       	ld	r25, Z+
     f40:	89 17       	cp	r24, r25
     f42:	89 f3       	breq	.-30     	; 0xf26 <EEPROM_vWriteBlockToAddress+0xc>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
     f44:	9d bb       	out	0x1d, r25	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
     f46:	e2 9a       	sbi	0x1c, 2	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
     f48:	e1 9a       	sbi	0x1c, 1	; 28
     f4a:	ed cf       	rjmp	.-38     	; 0xf26 <EEPROM_vWriteBlockToAddress+0xc>
		{

		}
		counter++;//increase bytes counter
	}
}
     f4c:	08 95       	ret

00000f4e <Keypad_enuInit>:

ES_t Keypad_enuInit(void)
{
	ES_t Local_enuerrorStates = ES_NOK;

	DIO_enuSetPinDirection(C1_PORT , C1_PIN , DIO_u8OUTPUT);
     f4e:	41 e0       	ldi	r20, 0x01	; 1
     f50:	63 e0       	ldi	r22, 0x03	; 3
     f52:	83 e0       	ldi	r24, 0x03	; 3
     f54:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT , C2_PIN , DIO_u8OUTPUT);
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	64 e0       	ldi	r22, 0x04	; 4
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT , C3_PIN , DIO_u8OUTPUT);
     f62:	41 e0       	ldi	r20, 0x01	; 1
     f64:	65 e0       	ldi	r22, 0x05	; 5
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT , C4_PIN , DIO_u8OUTPUT);
     f6c:	41 e0       	ldi	r20, 0x01	; 1
     f6e:	66 e0       	ldi	r22, 0x06	; 6
     f70:	83 e0       	ldi	r24, 0x03	; 3
     f72:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT , R1_PIN , DIO_u8INPUT);
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	62 e0       	ldi	r22, 0x02	; 2
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT , R2_PIN , DIO_u8INPUT);
     f80:	40 e0       	ldi	r20, 0x00	; 0
     f82:	63 e0       	ldi	r22, 0x03	; 3
     f84:	82 e0       	ldi	r24, 0x02	; 2
     f86:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT , R3_PIN , DIO_u8INPUT);
     f8a:	40 e0       	ldi	r20, 0x00	; 0
     f8c:	64 e0       	ldi	r22, 0x04	; 4
     f8e:	82 e0       	ldi	r24, 0x02	; 2
     f90:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT , R4_PIN , DIO_u8INPUT);
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	65 e0       	ldi	r22, 0x05	; 5
     f98:	82 e0       	ldi	r24, 0x02	; 2
     f9a:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT , C1_PIN , DIO_u8HIGH);
     f9e:	41 e0       	ldi	r20, 0x01	; 1
     fa0:	63 e0       	ldi	r22, 0x03	; 3
     fa2:	83 e0       	ldi	r24, 0x03	; 3
     fa4:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT , C2_PIN , DIO_u8HIGH);
     fa8:	41 e0       	ldi	r20, 0x01	; 1
     faa:	64 e0       	ldi	r22, 0x04	; 4
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT , C3_PIN , DIO_u8HIGH);
     fb2:	41 e0       	ldi	r20, 0x01	; 1
     fb4:	65 e0       	ldi	r22, 0x05	; 5
     fb6:	83 e0       	ldi	r24, 0x03	; 3
     fb8:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT , C4_PIN , DIO_u8HIGH);
     fbc:	41 e0       	ldi	r20, 0x01	; 1
     fbe:	66 e0       	ldi	r22, 0x06	; 6
     fc0:	83 e0       	ldi	r24, 0x03	; 3
     fc2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT , R1_PIN , DIO_u8PULL_UP);
     fc6:	41 e0       	ldi	r20, 0x01	; 1
     fc8:	62 e0       	ldi	r22, 0x02	; 2
     fca:	82 e0       	ldi	r24, 0x02	; 2
     fcc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT , R2_PIN , DIO_u8PULL_UP);
     fd0:	41 e0       	ldi	r20, 0x01	; 1
     fd2:	63 e0       	ldi	r22, 0x03	; 3
     fd4:	82 e0       	ldi	r24, 0x02	; 2
     fd6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT , R3_PIN , DIO_u8PULL_UP);
     fda:	41 e0       	ldi	r20, 0x01	; 1
     fdc:	64 e0       	ldi	r22, 0x04	; 4
     fde:	82 e0       	ldi	r24, 0x02	; 2
     fe0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT , R4_PIN , DIO_u8PULL_UP);
     fe4:	41 e0       	ldi	r20, 0x01	; 1
     fe6:	65 e0       	ldi	r22, 0x05	; 5
     fe8:	82 e0       	ldi	r24, 0x02	; 2
     fea:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>

	return Local_enuerrorStates;
}
     fee:	80 e0       	ldi	r24, 0x00	; 0
     ff0:	08 95       	ret

00000ff2 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
     ff2:	2f 92       	push	r2
     ff4:	3f 92       	push	r3
     ff6:	4f 92       	push	r4
     ff8:	5f 92       	push	r5
     ffa:	6f 92       	push	r6
     ffc:	7f 92       	push	r7
     ffe:	8f 92       	push	r8
    1000:	9f 92       	push	r9
    1002:	af 92       	push	r10
    1004:	bf 92       	push	r11
    1006:	cf 92       	push	r12
    1008:	df 92       	push	r13
    100a:	ef 92       	push	r14
    100c:	ff 92       	push	r15
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	cd b7       	in	r28, 0x3d	; 61
    1018:	de b7       	in	r29, 0x3e	; 62
    101a:	a3 97       	sbiw	r28, 0x23	; 35
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	6c 01       	movw	r12, r24
	ES_t Local_enuerrorStates = ES_NOK;

	u8 Local_Au8ColPorts [COL_NUM] = {C1_PORT,C2_PORT,C3_PORT,C4_PORT};
    1028:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    102c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1030:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    1034:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    1038:	8d 8f       	std	Y+29, r24	; 0x1d
    103a:	9e 8f       	std	Y+30, r25	; 0x1e
    103c:	af 8f       	std	Y+31, r26	; 0x1f
    103e:	b8 a3       	std	Y+32, r27	; 0x20
	u8 Local_Au8ColPins  [COL_NUM] = {C1_PIN, C2_PIN, C3_PIN, C4_PIN};
    1040:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
    1044:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
    1048:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    104c:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
    1050:	89 8f       	std	Y+25, r24	; 0x19
    1052:	9a 8f       	std	Y+26, r25	; 0x1a
    1054:	ab 8f       	std	Y+27, r26	; 0x1b
    1056:	bc 8f       	std	Y+28, r27	; 0x1c

	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
    1058:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    105c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    1060:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    1064:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
    1068:	8d 8b       	std	Y+21, r24	; 0x15
    106a:	9e 8b       	std	Y+22, r25	; 0x16
    106c:	af 8b       	std	Y+23, r26	; 0x17
    106e:	b8 8f       	std	Y+24, r27	; 0x18
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};
    1070:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
    1074:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
    1078:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    107c:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    1080:	89 8b       	std	Y+17, r24	; 0x11
    1082:	9a 8b       	std	Y+18, r25	; 0x12
    1084:	ab 8b       	std	Y+19, r26	; 0x13
    1086:	bc 8b       	std	Y+20, r27	; 0x14

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	f6 01       	movw	r30, r12
    108c:	80 83       	st	Z, r24
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
    108e:	f6 01       	movw	r30, r12
    1090:	80 81       	ld	r24, Z
    1092:	8f 3f       	cpi	r24, 0xFF	; 255
    1094:	09 f0       	breq	.+2      	; 0x1098 <Keypad_enuGetPressedKey+0xa6>
    1096:	7b c0       	rjmp	.+246    	; 0x118e <Keypad_enuGetPressedKey+0x19c>
    1098:	3e 01       	movw	r6, r28
    109a:	f9 e1       	ldi	r31, 0x19	; 25
    109c:	6f 0e       	add	r6, r31
    109e:	71 1c       	adc	r7, r1
    10a0:	ce 01       	movw	r24, r28
    10a2:	4d 96       	adiw	r24, 0x1d	; 29
    10a4:	9b a3       	std	Y+35, r25	; 0x23
    10a6:	8a a3       	std	Y+34, r24	; 0x22
    10a8:	e1 2c       	mov	r14, r1
    10aa:	f1 2c       	mov	r15, r1
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
    10ac:	f3 01       	movw	r30, r6
    10ae:	21 90       	ld	r2, Z+
    10b0:	3f 01       	movw	r6, r30
    10b2:	ea a1       	ldd	r30, Y+34	; 0x22
    10b4:	fb a1       	ldd	r31, Y+35	; 0x23
    10b6:	31 90       	ld	r3, Z+
    10b8:	fb a3       	std	Y+35, r31	; 0x23
    10ba:	ea a3       	std	Y+34, r30	; 0x22
    10bc:	40 e0       	ldi	r20, 0x00	; 0
    10be:	62 2d       	mov	r22, r2
    10c0:	83 2d       	mov	r24, r3
    10c2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    10c6:	4e 01       	movw	r8, r28
    10c8:	f1 e1       	ldi	r31, 0x11	; 17
    10ca:	8f 0e       	add	r8, r31
    10cc:	91 1c       	adc	r9, r1
    10ce:	5e 01       	movw	r10, r28
    10d0:	85 e1       	ldi	r24, 0x15	; 21
    10d2:	a8 0e       	add	r10, r24
    10d4:	b1 1c       	adc	r11, r1
    10d6:	00 e0       	ldi	r16, 0x00	; 0
    10d8:	10 e0       	ldi	r17, 0x00	; 0
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    10da:	f4 01       	movw	r30, r8
    10dc:	51 90       	ld	r5, Z+
    10de:	4f 01       	movw	r8, r30
    10e0:	f5 01       	movw	r30, r10
    10e2:	41 90       	ld	r4, Z+
    10e4:	5f 01       	movw	r10, r30
    10e6:	ae 01       	movw	r20, r28
    10e8:	4f 5d       	subi	r20, 0xDF	; 223
    10ea:	5f 4f       	sbci	r21, 0xFF	; 255
    10ec:	65 2d       	mov	r22, r5
    10ee:	84 2d       	mov	r24, r4
    10f0:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
    10f4:	89 a1       	ldd	r24, Y+33	; 0x21
    10f6:	81 11       	cpse	r24, r1
    10f8:	36 c0       	rjmp	.+108    	; 0x1166 <Keypad_enuGetPressedKey+0x174>
    10fa:	83 ec       	ldi	r24, 0xC3	; 195
    10fc:	99 e0       	ldi	r25, 0x09	; 9
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <Keypad_enuGetPressedKey+0x10c>
    1102:	00 c0       	rjmp	.+0      	; 0x1104 <Keypad_enuGetPressedKey+0x112>
    1104:	00 00       	nop
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    1106:	ae 01       	movw	r20, r28
    1108:	4f 5d       	subi	r20, 0xDF	; 223
    110a:	5f 4f       	sbci	r21, 0xFF	; 255
    110c:	65 2d       	mov	r22, r5
    110e:	84 2d       	mov	r24, r4
    1110:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
    1114:	89 a1       	ldd	r24, Y+33	; 0x21
    1116:	81 11       	cpse	r24, r1
    1118:	26 c0       	rjmp	.+76     	; 0x1166 <Keypad_enuGetPressedKey+0x174>
				{
					while (! Local_u8PinValue)
    111a:	89 a1       	ldd	r24, Y+33	; 0x21
    111c:	81 11       	cpse	r24, r1
    111e:	08 c0       	rjmp	.+16     	; 0x1130 <Keypad_enuGetPressedKey+0x13e>
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    1120:	ae 01       	movw	r20, r28
    1122:	4f 5d       	subi	r20, 0xDF	; 223
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	65 2d       	mov	r22, r5
    1128:	84 2d       	mov	r24, r4
    112a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <DIO_enuGetPinValue>
    112e:	f5 cf       	rjmp	.-22     	; 0x111a <Keypad_enuGetPressedKey+0x128>

					u8 Local_Au8Values[ROW_NUM][COL_NUM] = KEYPAD_VALUES;
    1130:	80 e1       	ldi	r24, 0x10	; 16
    1132:	e0 e7       	ldi	r30, 0x70	; 112
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	de 01       	movw	r26, r28
    1138:	11 96       	adiw	r26, 0x01	; 1
    113a:	01 90       	ld	r0, Z+
    113c:	0d 92       	st	X+, r0
    113e:	8a 95       	dec	r24
    1140:	e1 f7       	brne	.-8      	; 0x113a <Keypad_enuGetPressedKey+0x148>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
    1142:	00 0f       	add	r16, r16
    1144:	11 1f       	adc	r17, r17
    1146:	00 0f       	add	r16, r16
    1148:	11 1f       	adc	r17, r17
    114a:	e1 e0       	ldi	r30, 0x01	; 1
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	ec 0f       	add	r30, r28
    1150:	fd 1f       	adc	r31, r29
    1152:	0e 0f       	add	r16, r30
    1154:	1f 1f       	adc	r17, r31
    1156:	f8 01       	movw	r30, r16
    1158:	ee 0d       	add	r30, r14
    115a:	ff 1d       	adc	r31, r15
    115c:	80 81       	ld	r24, Z
    115e:	f6 01       	movw	r30, r12
    1160:	80 83       	st	Z, r24
					return ES_OK;
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	15 c0       	rjmp	.+42     	; 0x1190 <Keypad_enuGetPressedKey+0x19e>
    1166:	0f 5f       	subi	r16, 0xFF	; 255
    1168:	1f 4f       	sbci	r17, 0xFF	; 255
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    116a:	04 30       	cpi	r16, 0x04	; 4
    116c:	11 05       	cpc	r17, r1
    116e:	09 f0       	breq	.+2      	; 0x1172 <Keypad_enuGetPressedKey+0x180>
    1170:	b4 cf       	rjmp	.-152    	; 0x10da <Keypad_enuGetPressedKey+0xe8>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
					return ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
    1172:	41 e0       	ldi	r20, 0x01	; 1
    1174:	62 2d       	mov	r22, r2
    1176:	83 2d       	mov	r24, r3
    1178:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    117c:	ff ef       	ldi	r31, 0xFF	; 255
    117e:	ef 1a       	sub	r14, r31
    1180:	ff 0a       	sbc	r15, r31

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    1182:	84 e0       	ldi	r24, 0x04	; 4
    1184:	e8 16       	cp	r14, r24
    1186:	f1 04       	cpc	r15, r1
    1188:	09 f0       	breq	.+2      	; 0x118c <Keypad_enuGetPressedKey+0x19a>
    118a:	90 cf       	rjmp	.-224    	; 0x10ac <Keypad_enuGetPressedKey+0xba>
    118c:	80 cf       	rjmp	.-256    	; 0x108e <Keypad_enuGetPressedKey+0x9c>
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	}
	return Local_enuerrorStates;
    118e:	80 e0       	ldi	r24, 0x00	; 0
}
    1190:	a3 96       	adiw	r28, 0x23	; 35
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	bf 90       	pop	r11
    11ae:	af 90       	pop	r10
    11b0:	9f 90       	pop	r9
    11b2:	8f 90       	pop	r8
    11b4:	7f 90       	pop	r7
    11b6:	6f 90       	pop	r6
    11b8:	5f 90       	pop	r5
    11ba:	4f 90       	pop	r4
    11bc:	3f 90       	pop	r3
    11be:	2f 90       	pop	r2
    11c0:	08 95       	ret

000011c2 <LCD_enuWriteNLatch>:

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch(Copy_u8Command);

	return Local_enuerrorStates;
}
    11c2:	1f 93       	push	r17
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	1f 92       	push	r1
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	18 2f       	mov	r17, r24
    11d0:	40 e0       	ldi	r20, 0x00	; 0
    11d2:	63 e0       	ldi	r22, 0x03	; 3
    11d4:	81 e0       	ldi	r24, 0x01	; 1
    11d6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	62 e0       	ldi	r22, 0x02	; 2
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    11e4:	18 32       	cpi	r17, 0x28	; 40
    11e6:	99 f5       	brne	.+102    	; 0x124e <LCD_enuWriteNLatch+0x8c>
    11e8:	ae 01       	movw	r20, r28
    11ea:	4f 5f       	subi	r20, 0xFF	; 255
    11ec:	5f 4f       	sbci	r21, 0xFF	; 255
    11ee:	61 e0       	ldi	r22, 0x01	; 1
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <DIO_enuGetPinValue>
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	81 11       	cpse	r24, r1
    11fa:	29 c0       	rjmp	.+82     	; 0x124e <LCD_enuWriteNLatch+0x8c>
    11fc:	40 e0       	ldi	r20, 0x00	; 0
    11fe:	67 e0       	ldi	r22, 0x07	; 7
    1200:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	66 e0       	ldi	r22, 0x06	; 6
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    120e:	41 e0       	ldi	r20, 0x01	; 1
    1210:	65 e0       	ldi	r22, 0x05	; 5
    1212:	80 e0       	ldi	r24, 0x00	; 0
    1214:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	64 e0       	ldi	r22, 0x04	; 4
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	63 e0       	ldi	r22, 0x03	; 3
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    122c:	81 ee       	ldi	r24, 0xE1	; 225
    122e:	94 e0       	ldi	r25, 0x04	; 4
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	f1 f7       	brne	.-4      	; 0x1230 <LCD_enuWriteNLatch+0x6e>
    1234:	00 c0       	rjmp	.+0      	; 0x1236 <LCD_enuWriteNLatch+0x74>
    1236:	00 00       	nop
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	63 e0       	ldi	r22, 0x03	; 3
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    1242:	83 ed       	ldi	r24, 0xD3	; 211
    1244:	90 e3       	ldi	r25, 0x30	; 48
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <LCD_enuWriteNLatch+0x84>
    124a:	00 c0       	rjmp	.+0      	; 0x124c <LCD_enuWriteNLatch+0x8a>
    124c:	00 00       	nop
    124e:	41 2f       	mov	r20, r17
    1250:	44 1f       	adc	r20, r20
    1252:	44 27       	eor	r20, r20
    1254:	44 1f       	adc	r20, r20
    1256:	67 e0       	ldi	r22, 0x07	; 7
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    125e:	16 fb       	bst	r17, 6
    1260:	44 27       	eor	r20, r20
    1262:	40 f9       	bld	r20, 0
    1264:	66 e0       	ldi	r22, 0x06	; 6
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    126c:	15 fb       	bst	r17, 5
    126e:	44 27       	eor	r20, r20
    1270:	40 f9       	bld	r20, 0
    1272:	65 e0       	ldi	r22, 0x05	; 5
    1274:	80 e0       	ldi	r24, 0x00	; 0
    1276:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    127a:	14 fb       	bst	r17, 4
    127c:	44 27       	eor	r20, r20
    127e:	40 f9       	bld	r20, 0
    1280:	64 e0       	ldi	r22, 0x04	; 4
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    1288:	41 e0       	ldi	r20, 0x01	; 1
    128a:	63 e0       	ldi	r22, 0x03	; 3
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    1292:	81 ee       	ldi	r24, 0xE1	; 225
    1294:	94 e0       	ldi	r25, 0x04	; 4
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <LCD_enuWriteNLatch+0xd4>
    129a:	00 c0       	rjmp	.+0      	; 0x129c <LCD_enuWriteNLatch+0xda>
    129c:	00 00       	nop
    129e:	40 e0       	ldi	r20, 0x00	; 0
    12a0:	63 e0       	ldi	r22, 0x03	; 3
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    12a8:	83 ed       	ldi	r24, 0xD3	; 211
    12aa:	90 e3       	ldi	r25, 0x30	; 48
    12ac:	01 97       	sbiw	r24, 0x01	; 1
    12ae:	f1 f7       	brne	.-4      	; 0x12ac <LCD_enuWriteNLatch+0xea>
    12b0:	00 c0       	rjmp	.+0      	; 0x12b2 <LCD_enuWriteNLatch+0xf0>
    12b2:	00 00       	nop
    12b4:	13 fb       	bst	r17, 3
    12b6:	44 27       	eor	r20, r20
    12b8:	40 f9       	bld	r20, 0
    12ba:	67 e0       	ldi	r22, 0x07	; 7
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    12c2:	12 fb       	bst	r17, 2
    12c4:	44 27       	eor	r20, r20
    12c6:	40 f9       	bld	r20, 0
    12c8:	66 e0       	ldi	r22, 0x06	; 6
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    12d0:	11 fb       	bst	r17, 1
    12d2:	44 27       	eor	r20, r20
    12d4:	40 f9       	bld	r20, 0
    12d6:	65 e0       	ldi	r22, 0x05	; 5
    12d8:	80 e0       	ldi	r24, 0x00	; 0
    12da:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    12de:	41 2f       	mov	r20, r17
    12e0:	41 70       	andi	r20, 0x01	; 1
    12e2:	64 e0       	ldi	r22, 0x04	; 4
    12e4:	80 e0       	ldi	r24, 0x00	; 0
    12e6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    12ea:	41 e0       	ldi	r20, 0x01	; 1
    12ec:	63 e0       	ldi	r22, 0x03	; 3
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    12f4:	81 ee       	ldi	r24, 0xE1	; 225
    12f6:	94 e0       	ldi	r25, 0x04	; 4
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <LCD_enuWriteNLatch+0x136>
    12fc:	00 c0       	rjmp	.+0      	; 0x12fe <LCD_enuWriteNLatch+0x13c>
    12fe:	00 00       	nop
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	63 e0       	ldi	r22, 0x03	; 3
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    130a:	83 ed       	ldi	r24, 0xD3	; 211
    130c:	90 e3       	ldi	r25, 0x30	; 48
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <LCD_enuWriteNLatch+0x14c>
    1312:	00 c0       	rjmp	.+0      	; 0x1314 <LCD_enuWriteNLatch+0x152>
    1314:	00 00       	nop
    1316:	80 e0       	ldi	r24, 0x00	; 0
    1318:	0f 90       	pop	r0
    131a:	df 91       	pop	r29
    131c:	cf 91       	pop	r28
    131e:	1f 91       	pop	r17
    1320:	08 95       	ret

00001322 <LCD_enuInit>:
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	62 e0       	ldi	r22, 0x02	; 2
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	63 e0       	ldi	r22, 0x03	; 3
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
    1340:	41 e0       	ldi	r20, 0x01	; 1
    1342:	67 e0       	ldi	r22, 0x07	; 7
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
    134a:	41 e0       	ldi	r20, 0x01	; 1
    134c:	66 e0       	ldi	r22, 0x06	; 6
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
    1354:	41 e0       	ldi	r20, 0x01	; 1
    1356:	65 e0       	ldi	r22, 0x05	; 5
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
    135e:	41 e0       	ldi	r20, 0x01	; 1
    1360:	64 e0       	ldi	r22, 0x04	; 4
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	0e 94 b6 0a 	call	0x156c	; 0x156c <DIO_enuSetPinDirection>
    1368:	8d e2       	ldi	r24, 0x2D	; 45
    136a:	92 e2       	ldi	r25, 0x22	; 34
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <LCD_enuInit+0x4a>
    1370:	00 c0       	rjmp	.+0      	; 0x1372 <LCD_enuInit+0x50>
    1372:	00 00       	nop
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    137e:	88 e2       	ldi	r24, 0x28	; 40
    1380:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCD_enuWriteNLatch>
    1384:	89 ef       	ldi	r24, 0xF9	; 249
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <LCD_enuInit+0x66>
    138c:	00 c0       	rjmp	.+0      	; 0x138e <LCD_enuInit+0x6c>
    138e:	00 00       	nop
    1390:	40 e0       	ldi	r20, 0x00	; 0
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    139a:	8f e0       	ldi	r24, 0x0F	; 15
    139c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCD_enuWriteNLatch>
    13a0:	89 ef       	ldi	r24, 0xF9	; 249
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	f1 f7       	brne	.-4      	; 0x13a4 <LCD_enuInit+0x82>
    13a8:	00 c0       	rjmp	.+0      	; 0x13aa <LCD_enuInit+0x88>
    13aa:	00 00       	nop
    13ac:	40 e0       	ldi	r20, 0x00	; 0
    13ae:	61 e0       	ldi	r22, 0x01	; 1
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCD_enuWriteNLatch>
    13bc:	83 ef       	ldi	r24, 0xF3	; 243
    13be:	91 e0       	ldi	r25, 0x01	; 1
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	f1 f7       	brne	.-4      	; 0x13c0 <LCD_enuInit+0x9e>
    13c4:	00 c0       	rjmp	.+0      	; 0x13c6 <LCD_enuInit+0xa4>
    13c6:	00 00       	nop
    13c8:	40 e0       	ldi	r20, 0x00	; 0
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    13d2:	86 e0       	ldi	r24, 0x06	; 6
    13d4:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCD_enuWriteNLatch>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	08 95       	ret

000013dc <LCD_enuSendData>:
    13dc:	cf 93       	push	r28
    13de:	c8 2f       	mov	r28, r24
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    13ea:	8c 2f       	mov	r24, r28
    13ec:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCD_enuWriteNLatch>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	cf 91       	pop	r28
    13f4:	08 95       	ret

000013f6 <LCD_enuDisplayUnsignedInteger>:
}

/****************************************************************************************************/

ES_t LCD_enuDisplayUnsignedInteger(u16 Copy_u32Data)
{
    13f6:	6f 92       	push	r6
    13f8:	7f 92       	push	r7
    13fa:	8f 92       	push	r8
    13fc:	9f 92       	push	r9
    13fe:	af 92       	push	r10
    1400:	bf 92       	push	r11
    1402:	cf 92       	push	r12
    1404:	df 92       	push	r13
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	0f 93       	push	r16
    140c:	1f 93       	push	r17
    140e:	cf 93       	push	r28
    1410:	df 93       	push	r29
    1412:	fc 01       	movw	r30, r24
	ES_t Local_enuerrorStates = ES_NOK;



	if (Copy_u32Data == 0)
    1414:	89 2b       	or	r24, r25
    1416:	51 f4       	brne	.+20     	; 0x142c <LCD_enuDisplayUnsignedInteger+0x36>
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1418:	41 e0       	ldi	r20, 0x01	; 1
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch('0');
    1422:	80 e3       	ldi	r24, 0x30	; 48
    1424:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCD_enuWriteNLatch>

/****************************************************************************************************/

ES_t LCD_enuDisplayUnsignedInteger(u16 Copy_u32Data)
{
	ES_t Local_enuerrorStates = ES_NOK;
    1428:	d0 e0       	ldi	r29, 0x00	; 0
    142a:	42 c0       	rjmp	.+132    	; 0x14b0 <LCD_enuDisplayUnsignedInteger+0xba>
    142c:	c0 e0       	ldi	r28, 0x00	; 0
    142e:	c1 2c       	mov	r12, r1
    1430:	d1 2c       	mov	r13, r1
    1432:	76 01       	movw	r14, r12
		u32 Local_u32Reversed = 0;
		u8 Local_u8Counter=0;
		for (;Copy_u32Data>0;)
			{
				Local_u8Remainder = Copy_u32Data%10;
				Local_u32Reversed = Local_u32Reversed*10 + Local_u8Remainder;
    1434:	0a e0       	ldi	r16, 0x0A	; 10
    1436:	10 e0       	ldi	r17, 0x00	; 0
    1438:	aa e0       	ldi	r26, 0x0A	; 10
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	a7 01       	movw	r20, r14
    143e:	96 01       	movw	r18, r12
    1440:	0e 94 4a 0c 	call	0x1894	; 0x1894 <__muluhisi3>
    1444:	6b 01       	movw	r12, r22
    1446:	7c 01       	movw	r14, r24
    1448:	cf 01       	movw	r24, r30
    144a:	b8 01       	movw	r22, r16
    144c:	0e 94 0e 0c 	call	0x181c	; 0x181c <__udivmodhi4>
    1450:	c8 0e       	add	r12, r24
    1452:	d9 1e       	adc	r13, r25
    1454:	e1 1c       	adc	r14, r1
    1456:	f1 1c       	adc	r15, r1
				Local_u8Counter++;
    1458:	cf 5f       	subi	r28, 0xFF	; 255
				Copy_u32Data/=10;
    145a:	fb 01       	movw	r30, r22
	else
	{
		u8 Local_u8Remainder;
		u32 Local_u32Reversed = 0;
		u8 Local_u8Counter=0;
		for (;Copy_u32Data>0;)
    145c:	30 97       	sbiw	r30, 0x00	; 0
    145e:	61 f7       	brne	.-40     	; 0x1438 <LCD_enuDisplayUnsignedInteger+0x42>
    1460:	d0 e0       	ldi	r29, 0x00	; 0
			}
			/*********in the previous step: 3malt reverse lel integer elly gayelly, 3ashan law ma3amaltelosh reverse hayetebe3 ma3koos**********/
			for (;Local_u32Reversed>0;)
			{
				DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
				Local_enuerrorStates = LCD_enuWriteNLatch(Local_u32Reversed%10 + '0');
    1462:	8a e0       	ldi	r24, 0x0A	; 10
    1464:	88 2e       	mov	r8, r24
    1466:	91 2c       	mov	r9, r1
    1468:	a1 2c       	mov	r10, r1
    146a:	b1 2c       	mov	r11, r1
				Local_u32Reversed = Local_u32Reversed*10 + Local_u8Remainder;
				Local_u8Counter++;
				Copy_u32Data/=10;
			}
			/*********in the previous step: 3malt reverse lel integer elly gayelly, 3ashan law ma3amaltelosh reverse hayetebe3 ma3koos**********/
			for (;Local_u32Reversed>0;)
    146c:	c1 14       	cp	r12, r1
    146e:	d1 04       	cpc	r13, r1
    1470:	e1 04       	cpc	r14, r1
    1472:	f1 04       	cpc	r15, r1
    1474:	b1 f0       	breq	.+44     	; 0x14a2 <LCD_enuDisplayUnsignedInteger+0xac>
			{
				DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1476:	41 e0       	ldi	r20, 0x01	; 1
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	81 e0       	ldi	r24, 0x01	; 1
    147c:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
				Local_enuerrorStates = LCD_enuWriteNLatch(Local_u32Reversed%10 + '0');
    1480:	c7 01       	movw	r24, r14
    1482:	b6 01       	movw	r22, r12
    1484:	a5 01       	movw	r20, r10
    1486:	94 01       	movw	r18, r8
    1488:	0e 94 22 0c 	call	0x1844	; 0x1844 <__udivmodsi4>
    148c:	39 01       	movw	r6, r18
    148e:	8a 01       	movw	r16, r20
    1490:	80 e3       	ldi	r24, 0x30	; 48
    1492:	86 0f       	add	r24, r22
    1494:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCD_enuWriteNLatch>
    1498:	d8 2f       	mov	r29, r24
				Local_u32Reversed/=10;
    149a:	63 01       	movw	r12, r6
    149c:	78 01       	movw	r14, r16
				Local_u8Counter--;
    149e:	c1 50       	subi	r28, 0x01	; 1
    14a0:	e5 cf       	rjmp	.-54     	; 0x146c <LCD_enuDisplayUnsignedInteger+0x76>
				/*********el mafrood a3mel error status check hna bs 3ashan write and latch me7taga te3mel return ES_OK fa me7taga ta3deel**********/
			}
			while (Local_u8Counter != 0)
    14a2:	cc 23       	and	r28, r28
    14a4:	29 f0       	breq	.+10     	; 0x14b0 <LCD_enuDisplayUnsignedInteger+0xba>
			{
				LCD_enuWriteNLatch('0');
    14a6:	80 e3       	ldi	r24, 0x30	; 48
    14a8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCD_enuWriteNLatch>
				Local_u8Counter--;
    14ac:	c1 50       	subi	r28, 0x01	; 1
    14ae:	f9 cf       	rjmp	.-14     	; 0x14a2 <LCD_enuDisplayUnsignedInteger+0xac>
	}


	return Local_enuerrorStates;

}
    14b0:	8d 2f       	mov	r24, r29
    14b2:	df 91       	pop	r29
    14b4:	cf 91       	pop	r28
    14b6:	1f 91       	pop	r17
    14b8:	0f 91       	pop	r16
    14ba:	ff 90       	pop	r15
    14bc:	ef 90       	pop	r14
    14be:	df 90       	pop	r13
    14c0:	cf 90       	pop	r12
    14c2:	bf 90       	pop	r11
    14c4:	af 90       	pop	r10
    14c6:	9f 90       	pop	r9
    14c8:	8f 90       	pop	r8
    14ca:	7f 90       	pop	r7
    14cc:	6f 90       	pop	r6
    14ce:	08 95       	ret

000014d0 <LCD_enuDisplayString>:

	return Local_enuerrorStates;
}
*/
ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
    14d0:	0f 93       	push	r16
    14d2:	1f 93       	push	r17
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
	ES_t Local_enuerrorStates = ES_NOK;
	if (Copy_pcString != NULL)
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	89 f0       	breq	.+34     	; 0x14fe <LCD_enuDisplayString+0x2e>
    14dc:	ec 01       	movw	r28, r24
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	8e 01       	movw	r16, r28
	{
		while (*Copy_pcString)
    14e2:	98 81       	ld	r25, Y
    14e4:	99 23       	and	r25, r25
    14e6:	61 f0       	breq	.+24     	; 0x1500 <LCD_enuDisplayString+0x30>
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    14e8:	41 e0       	ldi	r20, 0x01	; 1
    14ea:	61 e0       	ldi	r22, 0x01	; 1
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    14f2:	21 96       	adiw	r28, 0x01	; 1
			Local_enuerrorStates = LCD_enuWriteNLatch(*Copy_pcString++);
    14f4:	f8 01       	movw	r30, r16
    14f6:	80 81       	ld	r24, Z
    14f8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCD_enuWriteNLatch>
    14fc:	f1 cf       	rjmp	.-30     	; 0x14e0 <LCD_enuDisplayString+0x10>
		}

	}
	else Local_enuerrorStates = ES_NULL_POINTER;
    14fe:	82 e0       	ldi	r24, 0x02	; 2
	return Local_enuerrorStates;
}
    1500:	df 91       	pop	r29
    1502:	cf 91       	pop	r28
    1504:	1f 91       	pop	r17
    1506:	0f 91       	pop	r16
    1508:	08 95       	ret

0000150a <LCD_enuSetCursorPosition>:


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29

	ES_t Local_enuerrorStates = ES_NOK;
	if ((Copy_u8XDimension <= LCD_u8XDIM_1) && (Copy_u8YDimension <= LCD_u8YDIM_15))
    1510:	82 30       	cpi	r24, 0x02	; 2
    1512:	98 f4       	brcc	.+38     	; 0x153a <LCD_enuSetCursorPosition+0x30>
    1514:	60 31       	cpi	r22, 0x10	; 16
    1516:	88 f4       	brcc	.+34     	; 0x153a <LCD_enuSetCursorPosition+0x30>
    1518:	c6 2f       	mov	r28, r22
    151a:	d8 2f       	mov	r29, r24
		{
		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    151c:	40 e0       	ldi	r20, 0x00	; 0
    151e:	61 e0       	ldi	r22, 0x01	; 1
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    1526:	18 2f       	mov	r17, r24
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
    1528:	8c 2f       	mov	r24, r28
    152a:	90 e4       	ldi	r25, 0x40	; 64
    152c:	d9 9f       	mul	r29, r25
    152e:	80 0d       	add	r24, r0
    1530:	11 24       	eor	r1, r1
    1532:	80 58       	subi	r24, 0x80	; 128
    1534:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCD_enuWriteNLatch>
    1538:	01 c0       	rjmp	.+2      	; 0x153c <LCD_enuSetCursorPosition+0x32>


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{

	ES_t Local_enuerrorStates = ES_NOK;
    153a:	10 e0       	ldi	r17, 0x00	; 0
		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
		}
	return Local_enuerrorStates;

}
    153c:	81 2f       	mov	r24, r17
    153e:	df 91       	pop	r29
    1540:	cf 91       	pop	r28
    1542:	1f 91       	pop	r17
    1544:	08 95       	ret

00001546 <LCD_enuClearDisplay>:

ES_t LCD_enuClearDisplay( void )
{
    1546:	cf 93       	push	r28

	ES_t Local_enuerrorStates = ES_NOK;

		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1548:	40 e0       	ldi	r20, 0x00	; 0
    154a:	61 e0       	ldi	r22, 0x01	; 1
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	0e 94 0c 0b 	call	0x1618	; 0x1618 <DIO_enuSetPinValue>
    1552:	c8 2f       	mov	r28, r24
		LCD_enuWriteNLatch(0x01);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <LCD_enuWriteNLatch>

	return Local_enuerrorStates;

}
    155a:	8c 2f       	mov	r24, r28
    155c:	cf 91       	pop	r28
    155e:	08 95       	ret

00001560 <DIO_enuInit>:
	{
		Local_enuerrorStates = ES_OUT_OF_RANGE;
	}

	return Local_enuerrorStates;
}
    1560:	81 eb       	ldi	r24, 0xB1	; 177
    1562:	8a bb       	out	0x1a, r24	; 26
    1564:	86 e1       	ldi	r24, 0x16	; 22
    1566:	8b bb       	out	0x1b, r24	; 27
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	08 95       	ret

0000156c <DIO_enuSetPinDirection>:
    156c:	84 30       	cpi	r24, 0x04	; 4
    156e:	08 f0       	brcs	.+2      	; 0x1572 <DIO_enuSetPinDirection+0x6>
    1570:	51 c0       	rjmp	.+162    	; 0x1614 <DIO_enuSetPinDirection+0xa8>
    1572:	68 30       	cpi	r22, 0x08	; 8
    1574:	08 f0       	brcs	.+2      	; 0x1578 <DIO_enuSetPinDirection+0xc>
    1576:	4e c0       	rjmp	.+156    	; 0x1614 <DIO_enuSetPinDirection+0xa8>
    1578:	42 30       	cpi	r20, 0x02	; 2
    157a:	08 f0       	brcs	.+2      	; 0x157e <DIO_enuSetPinDirection+0x12>
    157c:	4b c0       	rjmp	.+150    	; 0x1614 <DIO_enuSetPinDirection+0xa8>
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	39 f1       	breq	.+78     	; 0x15d0 <DIO_enuSetPinDirection+0x64>
    1582:	83 30       	cpi	r24, 0x03	; 3
    1584:	b1 f1       	breq	.+108    	; 0x15f2 <DIO_enuSetPinDirection+0x86>
    1586:	81 30       	cpi	r24, 0x01	; 1
    1588:	89 f0       	breq	.+34     	; 0x15ac <DIO_enuSetPinDirection+0x40>
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	06 2e       	mov	r0, r22
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <DIO_enuSetPinDirection+0x28>
    1592:	88 0f       	add	r24, r24
    1594:	0a 94       	dec	r0
    1596:	ea f7       	brpl	.-6      	; 0x1592 <DIO_enuSetPinDirection+0x26>
    1598:	80 95       	com	r24
    159a:	9a b3       	in	r25, 0x1a	; 26
    159c:	89 23       	and	r24, r25
    159e:	01 c0       	rjmp	.+2      	; 0x15a2 <DIO_enuSetPinDirection+0x36>
    15a0:	44 0f       	add	r20, r20
    15a2:	6a 95       	dec	r22
    15a4:	ea f7       	brpl	.-6      	; 0x15a0 <DIO_enuSetPinDirection+0x34>
    15a6:	48 2b       	or	r20, r24
    15a8:	4a bb       	out	0x1a, r20	; 26
    15aa:	10 c0       	rjmp	.+32     	; 0x15cc <DIO_enuSetPinDirection+0x60>
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	06 2e       	mov	r0, r22
    15b2:	01 c0       	rjmp	.+2      	; 0x15b6 <DIO_enuSetPinDirection+0x4a>
    15b4:	88 0f       	add	r24, r24
    15b6:	0a 94       	dec	r0
    15b8:	ea f7       	brpl	.-6      	; 0x15b4 <DIO_enuSetPinDirection+0x48>
    15ba:	80 95       	com	r24
    15bc:	97 b3       	in	r25, 0x17	; 23
    15be:	89 23       	and	r24, r25
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <DIO_enuSetPinDirection+0x58>
    15c2:	44 0f       	add	r20, r20
    15c4:	6a 95       	dec	r22
    15c6:	ea f7       	brpl	.-6      	; 0x15c2 <DIO_enuSetPinDirection+0x56>
    15c8:	48 2b       	or	r20, r24
    15ca:	47 bb       	out	0x17, r20	; 23
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	08 95       	ret
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	06 2e       	mov	r0, r22
    15d6:	01 c0       	rjmp	.+2      	; 0x15da <DIO_enuSetPinDirection+0x6e>
    15d8:	88 0f       	add	r24, r24
    15da:	0a 94       	dec	r0
    15dc:	ea f7       	brpl	.-6      	; 0x15d8 <DIO_enuSetPinDirection+0x6c>
    15de:	80 95       	com	r24
    15e0:	94 b3       	in	r25, 0x14	; 20
    15e2:	89 23       	and	r24, r25
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <DIO_enuSetPinDirection+0x7c>
    15e6:	44 0f       	add	r20, r20
    15e8:	6a 95       	dec	r22
    15ea:	ea f7       	brpl	.-6      	; 0x15e6 <DIO_enuSetPinDirection+0x7a>
    15ec:	48 2b       	or	r20, r24
    15ee:	44 bb       	out	0x14, r20	; 20
    15f0:	ed cf       	rjmp	.-38     	; 0x15cc <DIO_enuSetPinDirection+0x60>
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	06 2e       	mov	r0, r22
    15f8:	01 c0       	rjmp	.+2      	; 0x15fc <DIO_enuSetPinDirection+0x90>
    15fa:	88 0f       	add	r24, r24
    15fc:	0a 94       	dec	r0
    15fe:	ea f7       	brpl	.-6      	; 0x15fa <DIO_enuSetPinDirection+0x8e>
    1600:	80 95       	com	r24
    1602:	91 b3       	in	r25, 0x11	; 17
    1604:	89 23       	and	r24, r25
    1606:	01 c0       	rjmp	.+2      	; 0x160a <DIO_enuSetPinDirection+0x9e>
    1608:	44 0f       	add	r20, r20
    160a:	6a 95       	dec	r22
    160c:	ea f7       	brpl	.-6      	; 0x1608 <DIO_enuSetPinDirection+0x9c>
    160e:	48 2b       	or	r20, r24
    1610:	41 bb       	out	0x11, r20	; 17
    1612:	dc cf       	rjmp	.-72     	; 0x15cc <DIO_enuSetPinDirection+0x60>
    1614:	83 e0       	ldi	r24, 0x03	; 3
    1616:	08 95       	ret

00001618 <DIO_enuSetPinValue>:
    1618:	84 30       	cpi	r24, 0x04	; 4
    161a:	08 f0       	brcs	.+2      	; 0x161e <DIO_enuSetPinValue+0x6>
    161c:	51 c0       	rjmp	.+162    	; 0x16c0 <DIO_enuSetPinValue+0xa8>
    161e:	68 30       	cpi	r22, 0x08	; 8
    1620:	08 f0       	brcs	.+2      	; 0x1624 <DIO_enuSetPinValue+0xc>
    1622:	4e c0       	rjmp	.+156    	; 0x16c0 <DIO_enuSetPinValue+0xa8>
    1624:	42 30       	cpi	r20, 0x02	; 2
    1626:	08 f0       	brcs	.+2      	; 0x162a <DIO_enuSetPinValue+0x12>
    1628:	4b c0       	rjmp	.+150    	; 0x16c0 <DIO_enuSetPinValue+0xa8>
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	39 f1       	breq	.+78     	; 0x167c <DIO_enuSetPinValue+0x64>
    162e:	83 30       	cpi	r24, 0x03	; 3
    1630:	b1 f1       	breq	.+108    	; 0x169e <DIO_enuSetPinValue+0x86>
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	89 f0       	breq	.+34     	; 0x1658 <DIO_enuSetPinValue+0x40>
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	06 2e       	mov	r0, r22
    163c:	01 c0       	rjmp	.+2      	; 0x1640 <DIO_enuSetPinValue+0x28>
    163e:	88 0f       	add	r24, r24
    1640:	0a 94       	dec	r0
    1642:	ea f7       	brpl	.-6      	; 0x163e <DIO_enuSetPinValue+0x26>
    1644:	80 95       	com	r24
    1646:	9b b3       	in	r25, 0x1b	; 27
    1648:	89 23       	and	r24, r25
    164a:	01 c0       	rjmp	.+2      	; 0x164e <DIO_enuSetPinValue+0x36>
    164c:	44 0f       	add	r20, r20
    164e:	6a 95       	dec	r22
    1650:	ea f7       	brpl	.-6      	; 0x164c <DIO_enuSetPinValue+0x34>
    1652:	48 2b       	or	r20, r24
    1654:	4b bb       	out	0x1b, r20	; 27
    1656:	10 c0       	rjmp	.+32     	; 0x1678 <DIO_enuSetPinValue+0x60>
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	06 2e       	mov	r0, r22
    165e:	01 c0       	rjmp	.+2      	; 0x1662 <DIO_enuSetPinValue+0x4a>
    1660:	88 0f       	add	r24, r24
    1662:	0a 94       	dec	r0
    1664:	ea f7       	brpl	.-6      	; 0x1660 <DIO_enuSetPinValue+0x48>
    1666:	80 95       	com	r24
    1668:	98 b3       	in	r25, 0x18	; 24
    166a:	89 23       	and	r24, r25
    166c:	01 c0       	rjmp	.+2      	; 0x1670 <DIO_enuSetPinValue+0x58>
    166e:	44 0f       	add	r20, r20
    1670:	6a 95       	dec	r22
    1672:	ea f7       	brpl	.-6      	; 0x166e <DIO_enuSetPinValue+0x56>
    1674:	48 2b       	or	r20, r24
    1676:	48 bb       	out	0x18, r20	; 24
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	08 95       	ret
    167c:	81 e0       	ldi	r24, 0x01	; 1
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	06 2e       	mov	r0, r22
    1682:	01 c0       	rjmp	.+2      	; 0x1686 <DIO_enuSetPinValue+0x6e>
    1684:	88 0f       	add	r24, r24
    1686:	0a 94       	dec	r0
    1688:	ea f7       	brpl	.-6      	; 0x1684 <DIO_enuSetPinValue+0x6c>
    168a:	80 95       	com	r24
    168c:	95 b3       	in	r25, 0x15	; 21
    168e:	89 23       	and	r24, r25
    1690:	01 c0       	rjmp	.+2      	; 0x1694 <DIO_enuSetPinValue+0x7c>
    1692:	44 0f       	add	r20, r20
    1694:	6a 95       	dec	r22
    1696:	ea f7       	brpl	.-6      	; 0x1692 <DIO_enuSetPinValue+0x7a>
    1698:	48 2b       	or	r20, r24
    169a:	45 bb       	out	0x15, r20	; 21
    169c:	ed cf       	rjmp	.-38     	; 0x1678 <DIO_enuSetPinValue+0x60>
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	06 2e       	mov	r0, r22
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <DIO_enuSetPinValue+0x90>
    16a6:	88 0f       	add	r24, r24
    16a8:	0a 94       	dec	r0
    16aa:	ea f7       	brpl	.-6      	; 0x16a6 <DIO_enuSetPinValue+0x8e>
    16ac:	80 95       	com	r24
    16ae:	92 b3       	in	r25, 0x12	; 18
    16b0:	89 23       	and	r24, r25
    16b2:	01 c0       	rjmp	.+2      	; 0x16b6 <DIO_enuSetPinValue+0x9e>
    16b4:	44 0f       	add	r20, r20
    16b6:	6a 95       	dec	r22
    16b8:	ea f7       	brpl	.-6      	; 0x16b4 <DIO_enuSetPinValue+0x9c>
    16ba:	48 2b       	or	r20, r24
    16bc:	42 bb       	out	0x12, r20	; 18
    16be:	dc cf       	rjmp	.-72     	; 0x1678 <DIO_enuSetPinValue+0x60>
    16c0:	83 e0       	ldi	r24, 0x03	; 3
    16c2:	08 95       	ret

000016c4 <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    16c4:	fa 01       	movw	r30, r20
	ES_t Local_enuerrorStates = ES_NOK;

	if (Copy_pu8Value != NULL)
    16c6:	30 97       	sbiw	r30, 0x00	; 0
    16c8:	d9 f0       	breq	.+54     	; 0x1700 <DIO_enuGetPinValue+0x3c>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    16ca:	84 30       	cpi	r24, 0x04	; 4
    16cc:	d8 f4       	brcc	.+54     	; 0x1704 <DIO_enuGetPinValue+0x40>
				&& Copy_u8PinID <= DIO_u8PIN7)
    16ce:	68 30       	cpi	r22, 0x08	; 8
    16d0:	c8 f4       	brcc	.+50     	; 0x1704 <DIO_enuGetPinValue+0x40>
		{
			switch (Copy_u8PortID)
    16d2:	82 30       	cpi	r24, 0x02	; 2
    16d4:	41 f0       	breq	.+16     	; 0x16e6 <DIO_enuGetPinValue+0x22>
    16d6:	83 30       	cpi	r24, 0x03	; 3
    16d8:	89 f0       	breq	.+34     	; 0x16fc <DIO_enuGetPinValue+0x38>
    16da:	81 30       	cpi	r24, 0x01	; 1
    16dc:	11 f0       	breq	.+4      	; 0x16e2 <DIO_enuGetPinValue+0x1e>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    16de:	89 b3       	in	r24, 0x19	; 25
    16e0:	03 c0       	rjmp	.+6      	; 0x16e8 <DIO_enuGetPinValue+0x24>

				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    16e2:	86 b3       	in	r24, 0x16	; 22
    16e4:	01 c0       	rjmp	.+2      	; 0x16e8 <DIO_enuGetPinValue+0x24>

				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    16e6:	83 b3       	in	r24, 0x13	; 19
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 c0       	rjmp	.+4      	; 0x16f0 <DIO_enuGetPinValue+0x2c>
    16ec:	95 95       	asr	r25
    16ee:	87 95       	ror	r24
    16f0:	6a 95       	dec	r22
    16f2:	e2 f7       	brpl	.-8      	; 0x16ec <DIO_enuGetPinValue+0x28>
    16f4:	81 70       	andi	r24, 0x01	; 1
    16f6:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuerrorStates = ES_OK;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    16fa:	08 95       	ret
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    16fc:	80 b3       	in	r24, 0x10	; 16
    16fe:	f4 cf       	rjmp	.-24     	; 0x16e8 <DIO_enuGetPinValue+0x24>
			Local_enuerrorStates = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuerrorStates = ES_NULL_POINTER;
    1700:	82 e0       	ldi	r24, 0x02	; 2
    1702:	08 95       	ret
			}
			Local_enuerrorStates = ES_OK;
		}
		else
		{
			Local_enuerrorStates = ES_OUT_OF_RANGE;
    1704:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_enuerrorStates = ES_NULL_POINTER;
	}

	return Local_enuerrorStates;
}
    1706:	08 95       	ret

00001708 <EXTI_enuInit>:

		GICR &= ~(1<<6);
		Local_enuerrorStates = ES_OK;

return Local_enuerrorStates;
}
    1708:	8b b7       	in	r24, 0x3b	; 59
    170a:	80 64       	ori	r24, 0x40	; 64
    170c:	8b bf       	out	0x3b, r24	; 59
    170e:	85 b7       	in	r24, 0x35	; 53
    1710:	83 60       	ori	r24, 0x03	; 3
    1712:	85 bf       	out	0x35, r24	; 53
    1714:	80 e0       	ldi	r24, 0x00	; 0
    1716:	08 95       	ret

00001718 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(volatile void  (* pfunAppFunction)(void))//,u8 Copy_u8InterruptNum)
{
ES_t Local_enuerrorStates = ES_NOK ;

	if(pfunAppFunction != NULL)
    1718:	00 97       	sbiw	r24, 0x00	; 0
    171a:	31 f0       	breq	.+12     	; 0x1728 <EXTI_enuCallBack+0x10>
	{
		
		
			EXTI_pfunISR_fun = pfunAppFunction;
    171c:	90 93 5d 04 	sts	0x045D, r25	; 0x80045d <EXTI_pfunISR_fun+0x1>
    1720:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <EXTI_pfunISR_fun>

			Local_enuerrorStates = ES_OK;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	08 95       	ret
		
	}
	else
	{
		Local_enuerrorStates = ES_NULL_POINTER;
    1728:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_enuerrorStates;
}
    172a:	08 95       	ret

0000172c <__vector_1>:

ISR(VECT_INT0)
{
    172c:	1f 92       	push	r1
    172e:	0f 92       	push	r0
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	0f 92       	push	r0
    1734:	11 24       	eor	r1, r1
    1736:	2f 93       	push	r18
    1738:	3f 93       	push	r19
    173a:	4f 93       	push	r20
    173c:	5f 93       	push	r21
    173e:	6f 93       	push	r22
    1740:	7f 93       	push	r23
    1742:	8f 93       	push	r24
    1744:	9f 93       	push	r25
    1746:	af 93       	push	r26
    1748:	bf 93       	push	r27
    174a:	ef 93       	push	r30
    174c:	ff 93       	push	r31
	if(EXTI_pfunISR_fun != NULL)
    174e:	e0 91 5c 04 	lds	r30, 0x045C	; 0x80045c <EXTI_pfunISR_fun>
    1752:	f0 91 5d 04 	lds	r31, 0x045D	; 0x80045d <EXTI_pfunISR_fun+0x1>
    1756:	30 97       	sbiw	r30, 0x00	; 0
    1758:	09 f0       	breq	.+2      	; 0x175c <__vector_1+0x30>
	{
		EXTI_pfunISR_fun ();
    175a:	09 95       	icall
	}
}
    175c:	ff 91       	pop	r31
    175e:	ef 91       	pop	r30
    1760:	bf 91       	pop	r27
    1762:	af 91       	pop	r26
    1764:	9f 91       	pop	r25
    1766:	8f 91       	pop	r24
    1768:	7f 91       	pop	r23
    176a:	6f 91       	pop	r22
    176c:	5f 91       	pop	r21
    176e:	4f 91       	pop	r20
    1770:	3f 91       	pop	r19
    1772:	2f 91       	pop	r18
    1774:	0f 90       	pop	r0
    1776:	0f be       	out	0x3f, r0	; 63
    1778:	0f 90       	pop	r0
    177a:	1f 90       	pop	r1
    177c:	18 95       	reti

0000177e <SPI_vInitMaster>:
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
	SPCR |= (1<<SPE);//Enable the SPI
    177e:	87 b3       	in	r24, 0x17	; 23
    1780:	80 6b       	ori	r24, 0xB0	; 176
    1782:	87 bb       	out	0x17, r24	; 23
    1784:	8d b1       	in	r24, 0x0d	; 13
    1786:	81 65       	ori	r24, 0x51	; 81
    1788:	8d b9       	out	0x0d, r24	; 13
    178a:	08 95       	ret

0000178c <SPI_ui8TransmitRecive>:
}

u8 SPI_ui8TransmitRecive (u8 data)
{
	SPDR = data;//move the given data to SPI Data register
    178c:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    178e:	77 9b       	sbis	0x0e, 7	; 14
    1790:	fe cf       	rjmp	.-4      	; 0x178e <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    1792:	8f b1       	in	r24, 0x0f	; 15
}
    1794:	08 95       	ret

00001796 <UART_enuUART_Init>:

ES_t UART_enuUART_Init(void)
{
	ES_t Local_ErorrState = ES_NOK;

	UCSRA = 0x00; // flags RXC,TXC,UDRE -> 0,, U2X -> 0(Synchronous)
    1796:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18; // set to be a reciever and a transmiter
    1798:	88 e1       	ldi	r24, 0x18	; 24
    179a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86; // set frame format
    179c:	86 e8       	ldi	r24, 0x86	; 134
    179e:	80 bd       	out	0x20, r24	; 32

	UBRRL = 103; // 0110 0111 (BAUD)
    17a0:	87 e6       	ldi	r24, 0x67	; 103
    17a2:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;   // BAUD>>8  -> 0
    17a4:	10 bc       	out	0x20, r1	; 32

	return Local_ErorrState;
}
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	08 95       	ret

000017aa <UART_enuSendChar>:
ES_t UART_enuSendChar( u8 Copy_u8CharData)
{
	ES_t Local_ErorrState = ES_NOK;
	// check if UDR ready(empty)for write or not using UDRE bit--> if ready..go else wait.

	while(! ((UCSRA >> 5) & 1)); // (UCSRA >> 5) -> UDRE
    17aa:	5d 9b       	sbis	0x0b, 5	; 11
    17ac:	fe cf       	rjmp	.-4      	; 0x17aa <UART_enuSendChar>
	UDR = Copy_u8CharData;
    17ae:	8c b9       	out	0x0c, r24	; 12
	  while(!((UCSRA >> 6) & 1));
	  UCSRA |= (1>>6);

*/
	return Local_ErorrState;
}
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	08 95       	ret

000017b4 <UART_enuRecieveChar>:
{
	ES_t Local_ErorrState = ES_NOK;

// As long the RXc is 0 so there is no recieved data at that moment --> recieve the new data

	while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7) -> RXc
    17b4:	5f 9b       	sbis	0x0b, 7	; 11
    17b6:	fe cf       	rjmp	.-4      	; 0x17b4 <UART_enuRecieveChar>
	*Copy_u8RxChar = UDR;
    17b8:	2c b1       	in	r18, 0x0c	; 12
    17ba:	fc 01       	movw	r30, r24
    17bc:	20 83       	st	Z, r18
	//UART_First_ConnectionFlag ++;
	return Local_ErorrState;
}
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	08 95       	ret

000017c2 <UART_enuSendString>:

ES_t UART_enuSendString(u8 * Copy_Au8StringData)
{
    17c2:	ac 01       	movw	r20, r24
	ES_t Local_ErorrState = ES_NOK;

	u8 Local_u8Iter = 0;
    17c4:	90 e0       	ldi	r25, 0x00	; 0

	while(Copy_Au8StringData[Local_u8Iter] != 0) // check if data not equal  NULL
    17c6:	fa 01       	movw	r30, r20
    17c8:	e9 0f       	add	r30, r25
    17ca:	f1 1d       	adc	r31, r1
    17cc:	20 81       	ld	r18, Z
    17ce:	22 23       	and	r18, r18
    17d0:	29 f0       	breq	.+10     	; 0x17dc <UART_enuSendString+0x1a>
	{
		while(! ((UCSRA>>5) & 1 )); // wait until the UDR is empty using (UCSRA>>5) -> UDRE
    17d2:	5d 9b       	sbis	0x0b, 5	; 11
    17d4:	fe cf       	rjmp	.-4      	; 0x17d2 <UART_enuSendString+0x10>
		UDR = (Copy_Au8StringData[Local_u8Iter]);
    17d6:	2c b9       	out	0x0c, r18	; 12
		//UART_First_ConnectionFlag++;
		Local_u8Iter++;
    17d8:	9f 5f       	subi	r25, 0xFF	; 255
    17da:	f5 cf       	rjmp	.-22     	; 0x17c6 <UART_enuSendString+0x4>
	}

	return Local_ErorrState;
}
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	08 95       	ret

000017e0 <UART_enuRecieveString>:

ES_t UART_enuRecieveString(u8 * Copy_Au8RxString)
{
    17e0:	ac 01       	movw	r20, r24

	(Copy_Au8RxString[Local_u8Iter++]) = Local_u8TempChar;

	}
#elif NEW_LINE == YES
	u8 Local_u8Iter = 0;
    17e2:	90 e0       	ldi	r25, 0x00	; 0

	while(1)
	{

		while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7)-> RXc
    17e4:	5f 9b       	sbis	0x0b, 7	; 11
    17e6:	fe cf       	rjmp	.-4      	; 0x17e4 <UART_enuRecieveString+0x4>
		(Copy_Au8RxString[Local_u8Iter]) = UDR ;
    17e8:	fa 01       	movw	r30, r20
    17ea:	e9 0f       	add	r30, r25
    17ec:	f1 1d       	adc	r31, r1
    17ee:	2c b1       	in	r18, 0x0c	; 12
    17f0:	20 83       	st	Z, r18

//to display what is typed

		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
    17f2:	5d 9b       	sbis	0x0b, 5	; 11
    17f4:	fe cf       	rjmp	.-4      	; 0x17f2 <UART_enuRecieveString+0x12>
		UDR = (Copy_Au8RxString[Local_u8Iter]);
    17f6:	2c b9       	out	0x0c, r18	; 12

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
    17f8:	20 81       	ld	r18, Z
    17fa:	2d 30       	cpi	r18, 0x0D	; 13
    17fc:	21 f0       	breq	.+8      	; 0x1806 <UART_enuRecieveString+0x26>
    17fe:	2a 30       	cpi	r18, 0x0A	; 10
    1800:	11 f0       	breq	.+4      	; 0x1806 <UART_enuRecieveString+0x26>
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
			break;
		}

		Local_u8Iter++;
    1802:	9f 5f       	subi	r25, 0xFF	; 255
	}
    1804:	ef cf       	rjmp	.-34     	; 0x17e4 <UART_enuRecieveString+0x4>
		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
		UDR = (Copy_Au8RxString[Local_u8Iter]);

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
    1806:	10 82       	st	Z, r1
		Local_u8Iter++;
	}

#endif
	return Local_ErorrState;
}
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	08 95       	ret

0000180c <UART_enuCheck_Connection>:


u8 UART_enuCheck_Connection()
{	u8 readUDR;
	if(((UCSRA >> 7) & 1)!=0)
    180c:	8b b1       	in	r24, 0x0b	; 11
    180e:	88 1f       	adc	r24, r24
    1810:	88 27       	eor	r24, r24
    1812:	88 1f       	adc	r24, r24
    1814:	11 f0       	breq	.+4      	; 0x181a <UART_enuCheck_Connection+0xe>
	{
		readUDR = UDR;
    1816:	8c b1       	in	r24, 0x0c	; 12
		return 1;
    1818:	81 e0       	ldi	r24, 0x01	; 1
	}

	return 0;
}
    181a:	08 95       	ret

0000181c <__udivmodhi4>:
    181c:	aa 1b       	sub	r26, r26
    181e:	bb 1b       	sub	r27, r27
    1820:	51 e1       	ldi	r21, 0x11	; 17
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <__udivmodhi4_ep>

00001824 <__udivmodhi4_loop>:
    1824:	aa 1f       	adc	r26, r26
    1826:	bb 1f       	adc	r27, r27
    1828:	a6 17       	cp	r26, r22
    182a:	b7 07       	cpc	r27, r23
    182c:	10 f0       	brcs	.+4      	; 0x1832 <__udivmodhi4_ep>
    182e:	a6 1b       	sub	r26, r22
    1830:	b7 0b       	sbc	r27, r23

00001832 <__udivmodhi4_ep>:
    1832:	88 1f       	adc	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	5a 95       	dec	r21
    1838:	a9 f7       	brne	.-22     	; 0x1824 <__udivmodhi4_loop>
    183a:	80 95       	com	r24
    183c:	90 95       	com	r25
    183e:	bc 01       	movw	r22, r24
    1840:	cd 01       	movw	r24, r26
    1842:	08 95       	ret

00001844 <__udivmodsi4>:
    1844:	a1 e2       	ldi	r26, 0x21	; 33
    1846:	1a 2e       	mov	r1, r26
    1848:	aa 1b       	sub	r26, r26
    184a:	bb 1b       	sub	r27, r27
    184c:	fd 01       	movw	r30, r26
    184e:	0d c0       	rjmp	.+26     	; 0x186a <__udivmodsi4_ep>

00001850 <__udivmodsi4_loop>:
    1850:	aa 1f       	adc	r26, r26
    1852:	bb 1f       	adc	r27, r27
    1854:	ee 1f       	adc	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	a2 17       	cp	r26, r18
    185a:	b3 07       	cpc	r27, r19
    185c:	e4 07       	cpc	r30, r20
    185e:	f5 07       	cpc	r31, r21
    1860:	20 f0       	brcs	.+8      	; 0x186a <__udivmodsi4_ep>
    1862:	a2 1b       	sub	r26, r18
    1864:	b3 0b       	sbc	r27, r19
    1866:	e4 0b       	sbc	r30, r20
    1868:	f5 0b       	sbc	r31, r21

0000186a <__udivmodsi4_ep>:
    186a:	66 1f       	adc	r22, r22
    186c:	77 1f       	adc	r23, r23
    186e:	88 1f       	adc	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	1a 94       	dec	r1
    1874:	69 f7       	brne	.-38     	; 0x1850 <__udivmodsi4_loop>
    1876:	60 95       	com	r22
    1878:	70 95       	com	r23
    187a:	80 95       	com	r24
    187c:	90 95       	com	r25
    187e:	9b 01       	movw	r18, r22
    1880:	ac 01       	movw	r20, r24
    1882:	bd 01       	movw	r22, r26
    1884:	cf 01       	movw	r24, r30
    1886:	08 95       	ret

00001888 <__tablejump2__>:
    1888:	ee 0f       	add	r30, r30
    188a:	ff 1f       	adc	r31, r31
    188c:	05 90       	lpm	r0, Z+
    188e:	f4 91       	lpm	r31, Z
    1890:	e0 2d       	mov	r30, r0
    1892:	09 94       	ijmp

00001894 <__muluhisi3>:
    1894:	0e 94 55 0c 	call	0x18aa	; 0x18aa <__umulhisi3>
    1898:	a5 9f       	mul	r26, r21
    189a:	90 0d       	add	r25, r0
    189c:	b4 9f       	mul	r27, r20
    189e:	90 0d       	add	r25, r0
    18a0:	a4 9f       	mul	r26, r20
    18a2:	80 0d       	add	r24, r0
    18a4:	91 1d       	adc	r25, r1
    18a6:	11 24       	eor	r1, r1
    18a8:	08 95       	ret

000018aa <__umulhisi3>:
    18aa:	a2 9f       	mul	r26, r18
    18ac:	b0 01       	movw	r22, r0
    18ae:	b3 9f       	mul	r27, r19
    18b0:	c0 01       	movw	r24, r0
    18b2:	a3 9f       	mul	r26, r19
    18b4:	70 0d       	add	r23, r0
    18b6:	81 1d       	adc	r24, r1
    18b8:	11 24       	eor	r1, r1
    18ba:	91 1d       	adc	r25, r1
    18bc:	b2 9f       	mul	r27, r18
    18be:	70 0d       	add	r23, r0
    18c0:	81 1d       	adc	r24, r1
    18c2:	11 24       	eor	r1, r1
    18c4:	91 1d       	adc	r25, r1
    18c6:	08 95       	ret

000018c8 <_exit>:
    18c8:	f8 94       	cli

000018ca <__stop_program>:
    18ca:	ff cf       	rjmp	.-2      	; 0x18ca <__stop_program>
