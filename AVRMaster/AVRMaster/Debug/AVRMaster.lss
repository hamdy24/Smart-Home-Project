
AVRMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004bc  00800060  00001cac  00001d40  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080051c  0080051c  000021fc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000222c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00002268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000045b0  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000faa  00000000  00000000  00006a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002027  00000000  00000000  000079ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000056c  00000000  00000000  00009a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f26  00000000  00000000  00009f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002642  00000000  00000000  0000aea6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000d4e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	94 05       	cpc	r25, r4
      56:	99 05       	cpc	r25, r9
      58:	a5 05       	cpc	r26, r5
      5a:	aa 05       	cpc	r26, r10
      5c:	af 05       	cpc	r26, r15
      5e:	bb 05       	cpc	r27, r11
      60:	be 05       	cpc	r27, r14
      62:	ec 05       	cpc	r30, r12

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	15 e0       	ldi	r17, 0x05	; 5
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec ea       	ldi	r30, 0xAC	; 172
      78:	fc e1       	ldi	r31, 0x1C	; 28
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	ac 31       	cpi	r26, 0x1C	; 28
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	25 e0       	ldi	r18, 0x05	; 5
      88:	ac e1       	ldi	r26, 0x1C	; 28
      8a:	b5 e0       	ldi	r27, 0x05	; 5
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	a3 32       	cpi	r26, 0x23	; 35
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 46 02 	call	0x48c	; 0x48c <main>
      9a:	0c 94 54 0e 	jmp	0x1ca8	; 0x1ca8 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <LoginSystem_SaveNewUser>:

#include <util/delay.h>


	ES_t LoginSystem_SaveNewUser(User_t Copy_strNewUser,u8 *Copy_u8NumofRegisteredUsers)
	{
      a2:	cf 92       	push	r12
      a4:	df 92       	push	r13
      a6:	ef 92       	push	r14
      a8:	ff 92       	push	r15
      aa:	0f 93       	push	r16
      ac:	1f 93       	push	r17
      ae:	cf 93       	push	r28
      b0:	df 93       	push	r29
      b2:	cd b7       	in	r28, 0x3d	; 61
      b4:	de b7       	in	r29, 0x3e	; 62
      b6:	2b 97       	sbiw	r28, 0x0b	; 11
      b8:	0f b6       	in	r0, 0x3f	; 63
      ba:	f8 94       	cli
      bc:	de bf       	out	0x3e, r29	; 62
      be:	0f be       	out	0x3f, r0	; 63
      c0:	cd bf       	out	0x3d, r28	; 61
      c2:	e9 82       	std	Y+1, r14	; 0x01
      c4:	fa 82       	std	Y+2, r15	; 0x02
      c6:	0b 83       	std	Y+3, r16	; 0x03
      c8:	1c 83       	std	Y+4, r17	; 0x04
      ca:	2d 83       	std	Y+5, r18	; 0x05
      cc:	3e 83       	std	Y+6, r19	; 0x06
      ce:	4f 83       	std	Y+7, r20	; 0x07
      d0:	58 87       	std	Y+8, r21	; 0x08
      d2:	69 87       	std	Y+9, r22	; 0x09
      d4:	7a 87       	std	Y+10, r23	; 0x0a
      d6:	8b 87       	std	Y+11, r24	; 0x0b
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1), Copy_strNewUser.UserName,MAX_NO_OF_LETTERS);
      d8:	f6 01       	movw	r30, r12
      da:	80 81       	ld	r24, Z
      dc:	f9 e0       	ldi	r31, 0x09	; 9
      de:	8f 9f       	mul	r24, r31
      e0:	c0 01       	movw	r24, r0
      e2:	11 24       	eor	r1, r1
      e4:	44 e0       	ldi	r20, 0x04	; 4
      e6:	50 e0       	ldi	r21, 0x00	; 0
      e8:	be 01       	movw	r22, r28
      ea:	6f 5f       	subi	r22, 0xFF	; 255
      ec:	7f 4f       	sbci	r23, 0xFF	; 255
      ee:	42 96       	adiw	r24, 0x12	; 18
      f0:	0e 94 7d 09 	call	0x12fa	; 0x12fa <EEPROM_vWriteBlockToAddress>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      f4:	2f ef       	ldi	r18, 0xFF	; 255
      f6:	80 e7       	ldi	r24, 0x70	; 112
      f8:	92 e0       	ldi	r25, 0x02	; 2
      fa:	21 50       	subi	r18, 0x01	; 1
      fc:	80 40       	sbci	r24, 0x00	; 0
      fe:	90 40       	sbci	r25, 0x00	; 0
     100:	e1 f7       	brne	.-8      	; 0xfa <LoginSystem_SaveNewUser+0x58>
     102:	00 c0       	rjmp	.+0      	; 0x104 <LoginSystem_SaveNewUser+0x62>
     104:	00 00       	nop
		_delay_ms(50);
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_strNewUser.Password,MAX_NO_OF_LETTERS);
     106:	f6 01       	movw	r30, r12
     108:	80 81       	ld	r24, Z
     10a:	f9 e0       	ldi	r31, 0x09	; 9
     10c:	8f 9f       	mul	r24, r31
     10e:	c0 01       	movw	r24, r0
     110:	11 24       	eor	r1, r1
     112:	44 e0       	ldi	r20, 0x04	; 4
     114:	50 e0       	ldi	r21, 0x00	; 0
     116:	be 01       	movw	r22, r28
     118:	6a 5f       	subi	r22, 0xFA	; 250
     11a:	7f 4f       	sbci	r23, 0xFF	; 255
     11c:	46 96       	adiw	r24, 0x16	; 22
     11e:	0e 94 7d 09 	call	0x12fa	; 0x12fa <EEPROM_vWriteBlockToAddress>
     122:	2f ef       	ldi	r18, 0xFF	; 255
     124:	80 e7       	ldi	r24, 0x70	; 112
     126:	92 e0       	ldi	r25, 0x02	; 2
     128:	21 50       	subi	r18, 0x01	; 1
     12a:	80 40       	sbci	r24, 0x00	; 0
     12c:	90 40       	sbci	r25, 0x00	; 0
     12e:	e1 f7       	brne	.-8      	; 0x128 <LoginSystem_SaveNewUser+0x86>
     130:	00 c0       	rjmp	.+0      	; 0x132 <LoginSystem_SaveNewUser+0x90>
     132:	00 00       	nop
		_delay_ms(50);
		

		EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_strNewUser.User_Priority);
     134:	f6 01       	movw	r30, r12
     136:	80 81       	ld	r24, Z
     138:	f9 e0       	ldi	r31, 0x09	; 9
     13a:	8f 9f       	mul	r24, r31
     13c:	c0 01       	movw	r24, r0
     13e:	11 24       	eor	r1, r1
     140:	6b 85       	ldd	r22, Y+11	; 0x0b
     142:	4a 96       	adiw	r24, 0x1a	; 26
     144:	0e 94 71 09 	call	0x12e2	; 0x12e2 <EEPROM_vWriteByteToAddress>
     148:	2f ef       	ldi	r18, 0xFF	; 255
     14a:	80 e7       	ldi	r24, 0x70	; 112
     14c:	92 e0       	ldi	r25, 0x02	; 2
     14e:	21 50       	subi	r18, 0x01	; 1
     150:	80 40       	sbci	r24, 0x00	; 0
     152:	90 40       	sbci	r25, 0x00	; 0
     154:	e1 f7       	brne	.-8      	; 0x14e <LoginSystem_SaveNewUser+0xac>
     156:	00 c0       	rjmp	.+0      	; 0x158 <LoginSystem_SaveNewUser+0xb6>
     158:	00 00       	nop
		_delay_ms(50);
		(*Copy_u8NumofRegisteredUsers)++;
     15a:	f6 01       	movw	r30, r12
     15c:	60 81       	ld	r22, Z
     15e:	6f 5f       	subi	r22, 0xFF	; 255
     160:	60 83       	st	Z, r22

		EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     162:	81 e1       	ldi	r24, 0x11	; 17
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	0e 94 71 09 	call	0x12e2	; 0x12e2 <EEPROM_vWriteByteToAddress>
	}
     16a:	2b 96       	adiw	r28, 0x0b	; 11
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	de bf       	out	0x3e, r29	; 62
     172:	0f be       	out	0x3f, r0	; 63
     174:	cd bf       	out	0x3d, r28	; 61
     176:	df 91       	pop	r29
     178:	cf 91       	pop	r28
     17a:	1f 91       	pop	r17
     17c:	0f 91       	pop	r16
     17e:	ff 90       	pop	r15
     180:	ef 90       	pop	r14
     182:	df 90       	pop	r13
     184:	cf 90       	pop	r12
     186:	08 95       	ret

00000188 <LoginSystem_enuGetDataFromUserByKeypad>:
	ES_t LoginSystem_enuGetDataFromUserByKeypad(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
	{
     188:	af 92       	push	r10
     18a:	bf 92       	push	r11
     18c:	cf 92       	push	r12
     18e:	df 92       	push	r13
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
     19c:	1f 92       	push	r1
     19e:	cd b7       	in	r28, 0x3d	; 61
     1a0:	de b7       	in	r29, 0x3e	; 62
     1a2:	8c 01       	movw	r16, r24
     1a4:	6b 01       	movw	r12, r22
		ES_t Local_enuerrorStates = ES_NOK;
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
     1a6:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Username:");
     1aa:	80 e8       	ldi	r24, 0x80	; 128
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1b2:	60 e0       	ldi	r22, 0x00	; 0
     1b4:	81 e0       	ldi	r24, 0x01	; 1
     1b6:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
     1ba:	78 01       	movw	r14, r16
     1bc:	58 01       	movw	r10, r16
     1be:	24 e0       	ldi	r18, 0x04	; 4
     1c0:	a2 0e       	add	r10, r18
     1c2:	b1 1c       	adc	r11, r1
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     1c4:	ce 01       	movw	r24, r28
     1c6:	01 96       	adiw	r24, 0x01	; 1
     1c8:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuSendData>
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	f7 01       	movw	r30, r14
     1d6:	81 93       	st	Z+, r24
     1d8:	7f 01       	movw	r14, r30
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
		LCD_enuDisplayString("Username:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1da:	ea 15       	cp	r30, r10
     1dc:	fb 05       	cpc	r31, r11
     1de:	91 f7       	brne	.-28     	; 0x1c4 <LoginSystem_enuGetDataFromUserByKeypad+0x3c>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
			LCD_enuSendData(Local_u8PressedKey);
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
		}
		Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     1e0:	f8 01       	movw	r30, r16
     1e2:	14 82       	std	Z+4, r1	; 0x04

		LCD_enuClearDisplay();
     1e4:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Password:");
     1e8:	8a e8       	ldi	r24, 0x8A	; 138
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
     1f8:	76 01       	movw	r14, r12

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1fa:	10 e0       	ldi	r17, 0x00	; 0
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     1fc:	ce 01       	movw	r24, r28
     1fe:	01 96       	adiw	r24, 0x01	; 1
     200:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     204:	89 81       	ldd	r24, Y+1	; 0x01
     206:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuSendData>
     20a:	ff ef       	ldi	r31, 0xFF	; 255
     20c:	29 e6       	ldi	r18, 0x69	; 105
     20e:	88 e1       	ldi	r24, 0x18	; 24
     210:	f1 50       	subi	r31, 0x01	; 1
     212:	20 40       	sbci	r18, 0x00	; 0
     214:	80 40       	sbci	r24, 0x00	; 0
     216:	e1 f7       	brne	.-8      	; 0x210 <LoginSystem_enuGetDataFromUserByKeypad+0x88>
     218:	00 c0       	rjmp	.+0      	; 0x21a <LoginSystem_enuGetDataFromUserByKeypad+0x92>
     21a:	00 00       	nop
			_delay_ms(500);
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
     21c:	61 2f       	mov	r22, r17
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
			LCD_enuSendData('*');
     224:	8a e2       	ldi	r24, 0x2A	; 42
     226:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuSendData>
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	f7 01       	movw	r30, r14
     22e:	81 93       	st	Z+, r24
     230:	7f 01       	movw	r14, r30

		LCD_enuClearDisplay();
		LCD_enuDisplayString("Password:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     232:	1f 5f       	subi	r17, 0xFF	; 255
     234:	14 30       	cpi	r17, 0x04	; 4
     236:	11 f7       	brne	.-60     	; 0x1fc <LoginSystem_enuGetDataFromUserByKeypad+0x74>
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
			LCD_enuSendData('*');
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;

		}
		Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     238:	f6 01       	movw	r30, r12
     23a:	14 82       	std	Z+4, r1	; 0x04
		Local_enuerrorStates = ES_OK;
		return Local_enuerrorStates;
	}
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	0f 90       	pop	r0
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	1f 91       	pop	r17
     246:	0f 91       	pop	r16
     248:	ff 90       	pop	r15
     24a:	ef 90       	pop	r14
     24c:	df 90       	pop	r13
     24e:	cf 90       	pop	r12
     250:	bf 90       	pop	r11
     252:	af 90       	pop	r10
     254:	08 95       	ret

00000256 <LoginSystem_enuGetDataFromUserBY_UART>:
	
		ES_t LoginSystem_enuGetDataFromUserBY_UART(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
		{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	cf 93       	push	r28
     25c:	df 93       	push	r29
     25e:	8c 01       	movw	r16, r24
     260:	eb 01       	movw	r28, r22
			ES_t Local_enuerrorStates = ES_NOK;
			UART_enuSendString("\r\n\r\nUsername: ");
     262:	84 e9       	ldi	r24, 0x94	; 148
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Username);
     26a:	c8 01       	movw	r24, r16
     26c:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <UART_enuRecieveString>
			Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     270:	f8 01       	movw	r30, r16
     272:	14 82       	std	Z+4, r1	; 0x04
			UART_enuSendString("Password: ");
     274:	83 ea       	ldi	r24, 0xA3	; 163
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Password);
     27c:	ce 01       	movw	r24, r28
     27e:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <UART_enuRecieveString>
			Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     282:	1c 82       	std	Y+4, r1	; 0x04

			Local_enuerrorStates = ES_OK;
			return Local_enuerrorStates;
		}
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	1f 91       	pop	r17
     28c:	0f 91       	pop	r16
     28e:	08 95       	ret

00000290 <LoginSystem_u8Strcmp>:



	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
     290:	dc 01       	movw	r26, r24
		u8 Local_u8Iterator=0;
     292:	40 e0       	ldi	r20, 0x00	; 0
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     294:	24 2f       	mov	r18, r20
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	fd 01       	movw	r30, r26
     29a:	e2 0f       	add	r30, r18
     29c:	f3 1f       	adc	r31, r19
     29e:	90 81       	ld	r25, Z
     2a0:	fb 01       	movw	r30, r22
     2a2:	e2 0f       	add	r30, r18
     2a4:	f3 1f       	adc	r31, r19
     2a6:	20 81       	ld	r18, Z
     2a8:	92 13       	cpse	r25, r18
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <LoginSystem_u8Strcmp+0x24>
		{
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     2ac:	99 23       	and	r25, r25
     2ae:	41 f0       	breq	.+16     	; 0x2c0 <LoginSystem_u8Strcmp+0x30>
				break;
			Local_u8Iterator++;
     2b0:	4f 5f       	subi	r20, 0xFF	; 255
     2b2:	f0 cf       	rjmp	.-32     	; 0x294 <LoginSystem_u8Strcmp+0x4>
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     2b4:	91 11       	cpse	r25, r1
     2b6:	06 c0       	rjmp	.+12     	; 0x2c4 <LoginSystem_u8Strcmp+0x34>
			return TRUE;
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	22 23       	and	r18, r18
     2bc:	21 f0       	breq	.+8      	; 0x2c6 <LoginSystem_u8Strcmp+0x36>
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <LoginSystem_u8Strcmp+0x34>
     2c0:	81 e0       	ldi	r24, 0x01	; 1
     2c2:	08 95       	ret
		else
			return FALSE;
     2c4:	80 e0       	ldi	r24, 0x00	; 0
	}
     2c6:	08 95       	ret

000002c8 <LoginSystem_RemoveUser>:
	
	u8 LoginSystem_RemoveUser(User_t *Copy_AstrUsers,u8 *Copy_u8NumofRegisteredUsers)
		{
     2c8:	7f 92       	push	r7
     2ca:	8f 92       	push	r8
     2cc:	9f 92       	push	r9
     2ce:	af 92       	push	r10
     2d0:	bf 92       	push	r11
     2d2:	cf 92       	push	r12
     2d4:	df 92       	push	r13
     2d6:	ef 92       	push	r14
     2d8:	ff 92       	push	r15
     2da:	0f 93       	push	r16
     2dc:	1f 93       	push	r17
     2de:	cf 93       	push	r28
     2e0:	df 93       	push	r29
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <LoginSystem_RemoveUser+0x1c>
     2e4:	00 d0       	rcall	.+0      	; 0x2e6 <LoginSystem_RemoveUser+0x1e>
     2e6:	1f 92       	push	r1
     2e8:	cd b7       	in	r28, 0x3d	; 61
     2ea:	de b7       	in	r29, 0x3e	; 62
     2ec:	8c 01       	movw	r16, r24
     2ee:	5b 01       	movw	r10, r22
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
     2f0:	8e ea       	ldi	r24, 0xAE	; 174
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
			UART_enuRecieveString(Local_Au8Username);
     2f8:	ce 01       	movw	r24, r28
     2fa:	01 96       	adiw	r24, 0x01	; 1
     2fc:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <UART_enuRecieveString>
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     300:	1d 82       	std	Y+5, r1	; 0x05
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     302:	f5 01       	movw	r30, r10
     304:	90 80       	ld	r9, Z
     306:	78 01       	movw	r14, r16
     308:	d1 2c       	mov	r13, r1
     30a:	d9 14       	cp	r13, r9
     30c:	09 f4       	brne	.+2      	; 0x310 <LoginSystem_RemoveUser+0x48>
     30e:	7e c0       	rjmp	.+252    	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
			{
				Copy_u8Flag = LoginSystem_u8Strcmp (Copy_AstrUsers[Local_u8Iterator].UserName,Local_Au8Username);
     310:	7e 2c       	mov	r7, r14
     312:	8f 2c       	mov	r8, r15
     314:	be 01       	movw	r22, r28
     316:	6f 5f       	subi	r22, 0xFF	; 255
     318:	7f 4f       	sbci	r23, 0xFF	; 255
     31a:	c7 01       	movw	r24, r14
     31c:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     320:	c8 2e       	mov	r12, r24
     322:	fb e0       	ldi	r31, 0x0B	; 11
     324:	ef 0e       	add	r14, r31
     326:	f1 1c       	adc	r15, r1
				if (Copy_u8Flag )
     328:	88 23       	and	r24, r24
     32a:	09 f4       	brne	.+2      	; 0x32e <LoginSystem_RemoveUser+0x66>
     32c:	6d c0       	rjmp	.+218    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
				{
					Copy_AstrUsers[Local_u8Iterator]=Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1];
     32e:	f8 01       	movw	r30, r16
     330:	2b e0       	ldi	r18, 0x0B	; 11
     332:	92 9e       	mul	r9, r18
     334:	e0 0d       	add	r30, r0
     336:	f1 1d       	adc	r31, r1
     338:	11 24       	eor	r1, r1
     33a:	3b 97       	sbiw	r30, 0x0b	; 11
     33c:	8b e0       	ldi	r24, 0x0B	; 11
     33e:	a7 2d       	mov	r26, r7
     340:	b8 2d       	mov	r27, r8
     342:	01 90       	ld	r0, Z+
     344:	0d 92       	st	X+, r0
     346:	8a 95       	dec	r24
     348:	e1 f7       	brne	.-8      	; 0x342 <LoginSystem_RemoveUser+0x7a>
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1), Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].UserName,MAX_NO_OF_LETTERS);
     34a:	f5 01       	movw	r30, r10
     34c:	80 81       	ld	r24, Z
     34e:	f9 e0       	ldi	r31, 0x09	; 9
     350:	df 9e       	mul	r13, r31
     352:	70 01       	movw	r14, r0
     354:	11 24       	eor	r1, r1
     356:	b8 01       	movw	r22, r16
     358:	2b e0       	ldi	r18, 0x0B	; 11
     35a:	82 9f       	mul	r24, r18
     35c:	60 0d       	add	r22, r0
     35e:	71 1d       	adc	r23, r1
     360:	11 24       	eor	r1, r1
     362:	6b 50       	subi	r22, 0x0B	; 11
     364:	71 09       	sbc	r23, r1
     366:	44 e0       	ldi	r20, 0x04	; 4
     368:	50 e0       	ldi	r21, 0x00	; 0
     36a:	c7 01       	movw	r24, r14
     36c:	42 96       	adiw	r24, 0x12	; 18
     36e:	0e 94 7d 09 	call	0x12fa	; 0x12fa <EEPROM_vWriteBlockToAddress>
     372:	8f ef       	ldi	r24, 0xFF	; 255
     374:	90 e7       	ldi	r25, 0x70	; 112
     376:	e2 e0       	ldi	r30, 0x02	; 2
     378:	81 50       	subi	r24, 0x01	; 1
     37a:	90 40       	sbci	r25, 0x00	; 0
     37c:	e0 40       	sbci	r30, 0x00	; 0
     37e:	e1 f7       	brne	.-8      	; 0x378 <LoginSystem_RemoveUser+0xb0>
     380:	00 c0       	rjmp	.+0      	; 0x382 <LoginSystem_RemoveUser+0xba>
     382:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].Password,MAX_NO_OF_LETTERS);
     384:	f5 01       	movw	r30, r10
     386:	80 81       	ld	r24, Z
     388:	b8 01       	movw	r22, r16
     38a:	fb e0       	ldi	r31, 0x0B	; 11
     38c:	8f 9f       	mul	r24, r31
     38e:	60 0d       	add	r22, r0
     390:	71 1d       	adc	r23, r1
     392:	11 24       	eor	r1, r1
     394:	66 50       	subi	r22, 0x06	; 6
     396:	71 09       	sbc	r23, r1
     398:	44 e0       	ldi	r20, 0x04	; 4
     39a:	50 e0       	ldi	r21, 0x00	; 0
     39c:	c7 01       	movw	r24, r14
     39e:	46 96       	adiw	r24, 0x16	; 22
     3a0:	0e 94 7d 09 	call	0x12fa	; 0x12fa <EEPROM_vWriteBlockToAddress>
     3a4:	2f ef       	ldi	r18, 0xFF	; 255
     3a6:	80 e7       	ldi	r24, 0x70	; 112
     3a8:	92 e0       	ldi	r25, 0x02	; 2
     3aa:	21 50       	subi	r18, 0x01	; 1
     3ac:	80 40       	sbci	r24, 0x00	; 0
     3ae:	90 40       	sbci	r25, 0x00	; 0
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <LoginSystem_RemoveUser+0xe2>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <LoginSystem_RemoveUser+0xec>
     3b4:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].User_Priority);
     3b6:	f5 01       	movw	r30, r10
     3b8:	80 81       	ld	r24, Z
     3ba:	fb e0       	ldi	r31, 0x0B	; 11
     3bc:	8f 9f       	mul	r24, r31
     3be:	00 0d       	add	r16, r0
     3c0:	11 1d       	adc	r17, r1
     3c2:	11 24       	eor	r1, r1
     3c4:	f8 01       	movw	r30, r16
     3c6:	3b 97       	sbiw	r30, 0x0b	; 11
     3c8:	62 85       	ldd	r22, Z+10	; 0x0a
     3ca:	c7 01       	movw	r24, r14
     3cc:	4a 96       	adiw	r24, 0x1a	; 26
     3ce:	0e 94 71 09 	call	0x12e2	; 0x12e2 <EEPROM_vWriteByteToAddress>
     3d2:	2f ef       	ldi	r18, 0xFF	; 255
     3d4:	80 e7       	ldi	r24, 0x70	; 112
     3d6:	92 e0       	ldi	r25, 0x02	; 2
     3d8:	21 50       	subi	r18, 0x01	; 1
     3da:	80 40       	sbci	r24, 0x00	; 0
     3dc:	90 40       	sbci	r25, 0x00	; 0
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <LoginSystem_RemoveUser+0x110>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LoginSystem_RemoveUser+0x11a>
     3e2:	00 00       	nop
					_delay_ms(50);
					(*Copy_u8NumofRegisteredUsers)--;
     3e4:	f5 01       	movw	r30, r10
     3e6:	60 81       	ld	r22, Z
     3e8:	61 50       	subi	r22, 0x01	; 1
     3ea:	60 83       	st	Z, r22
					EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     3ec:	81 e1       	ldi	r24, 0x11	; 17
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	0e 94 71 09 	call	0x12e2	; 0x12e2 <EEPROM_vWriteByteToAddress>
     3f4:	ff ef       	ldi	r31, 0xFF	; 255
     3f6:	20 e7       	ldi	r18, 0x70	; 112
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	f1 50       	subi	r31, 0x01	; 1
     3fc:	20 40       	sbci	r18, 0x00	; 0
     3fe:	80 40       	sbci	r24, 0x00	; 0
     400:	e1 f7       	brne	.-8      	; 0x3fa <LoginSystem_RemoveUser+0x132>
     402:	00 c0       	rjmp	.+0      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
     404:	00 00       	nop
     406:	03 c0       	rjmp	.+6      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
			UART_enuRecieveString(Local_Au8Username);
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     408:	d3 94       	inc	r13
     40a:	7f cf       	rjmp	.-258    	; 0x30a <LoginSystem_RemoveUser+0x42>
     40c:	c1 2c       	mov	r12, r1
					_delay_ms(50);
					break;
				}
			}
			return Copy_u8Flag;
		}
     40e:	8c 2d       	mov	r24, r12
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	bf 90       	pop	r11
     42c:	af 90       	pop	r10
     42e:	9f 90       	pop	r9
     430:	8f 90       	pop	r8
     432:	7f 90       	pop	r7
     434:	08 95       	ret

00000436 <SetBit>:
	
	void SetBit(u8 *x,u8 n)
	{
		(*x) |= (1<<n);
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	01 c0       	rjmp	.+2      	; 0x43e <SetBit+0x8>
     43c:	22 0f       	add	r18, r18
     43e:	6a 95       	dec	r22
     440:	ea f7       	brpl	.-6      	; 0x43c <SetBit+0x6>
     442:	fc 01       	movw	r30, r24
     444:	30 81       	ld	r19, Z
     446:	23 2b       	or	r18, r19
     448:	20 83       	st	Z, r18
     44a:	08 95       	ret

0000044c <ToggleBit>:
	}
	ToggleBit(u8 *x,u8 n)
	{
		(*x) ^=(1<<n);
     44c:	21 e0       	ldi	r18, 0x01	; 1
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	01 c0       	rjmp	.+2      	; 0x454 <ToggleBit+0x8>
     452:	22 0f       	add	r18, r18
     454:	6a 95       	dec	r22
     456:	ea f7       	brpl	.-6      	; 0x452 <ToggleBit+0x6>
     458:	fc 01       	movw	r30, r24
     45a:	30 81       	ld	r19, Z
     45c:	23 27       	eor	r18, r19
     45e:	20 83       	st	Z, r18
	}
     460:	08 95       	ret

00000462 <Button_Pressed_Interrupt>:
//u8 Program_Status_Flag = 0;
u8 Blocking_Flag=FALSE;
u8 LCD_KEYPAD_USER_FLAG = 0;
volatile void Button_Pressed_Interrupt()
{
	if (LoginSystem_u8AdminOnlineFlag || LoginSystem_u8PromotedUserOnlineFlag || Blocking_Flag )	//5od karar hna
     462:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <LoginSystem_u8AdminOnlineFlag>
     466:	81 11       	cpse	r24, r1
     468:	08 c0       	rjmp	.+16     	; 0x47a <Button_Pressed_Interrupt+0x18>
     46a:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <LoginSystem_u8PromotedUserOnlineFlag>
     46e:	81 11       	cpse	r24, r1
     470:	04 c0       	rjmp	.+8      	; 0x47a <Button_Pressed_Interrupt+0x18>
     472:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <Blocking_Flag>
     476:	88 23       	and	r24, r24
     478:	19 f0       	breq	.+6      	; 0x480 <Button_Pressed_Interrupt+0x1e>
	{
		LCD_KEYPAD_USER_FLAG = 0;
     47a:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <__data_end>
     47e:	08 95       	ret
	}
	else
	{
		LCD_KEYPAD_USER_FLAG = 1;
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <__data_end>
		ShowToUser = MAIN_MENU;
     486:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <ShowToUser>
     48a:	08 95       	ret

0000048c <main>:
	}
	
}
int main (void)
{
     48c:	cf 93       	push	r28
     48e:	df 93       	push	r29
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	c8 54       	subi	r28, 0x48	; 72
     496:	d1 09       	sbc	r29, r1
     498:	0f b6       	in	r0, 0x3f	; 63
     49a:	f8 94       	cli
     49c:	de bf       	out	0x3e, r29	; 62
     49e:	0f be       	out	0x3f, r0	; 63
     4a0:	cd bf       	out	0x3d, r28	; 61
/************************************************************************************************************/
/*******************************************INITIALIZATIONS***************************************************/
	DIO_enuInit();
     4a2:	0e 94 a0 0c 	call	0x1940	; 0x1940 <DIO_enuInit>
	SPI_vInitMaster();
     4a6:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <SPI_vInitMaster>
	UART_enuUART_Init();
     4aa:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <UART_enuUART_Init>
	
	LCD_enuInit();
     4ae:	0e 94 81 0b 	call	0x1702	; 0x1702 <LCD_enuInit>
	Keypad_enuInit();
     4b2:	0e 94 97 09 	call	0x132e	; 0x132e <Keypad_enuInit>
	DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN1,DIO_u8OUTPUT);
     4b6:	41 e0       	ldi	r20, 0x01	; 1
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	83 e0       	ldi	r24, 0x03	; 3
     4bc:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(DIO_u8GROUP_C,DIO_u8PIN0,DIO_u8OUTPUT);
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	60 e0       	ldi	r22, 0x00	; 0
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
	EXTI_enuInit();
     4ca:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <EXTI_enuInit>
	__asm("sei");// GIE
     4ce:	78 94       	sei
	EXTI_enuCallBack((volatile void (*) (void))Button_Pressed_Interrupt);
     4d0:	81 e3       	ldi	r24, 0x31	; 49
     4d2:	92 e0       	ldi	r25, 0x02	; 2
     4d4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <EXTI_enuCallBack>
/***************************************************************************************************/
/* ***********************************************************************************************************/
/************************************************************************************************************/


	u8 Program_Status_Flag = 0;
     4d8:	29 96       	adiw	r28, 0x09	; 9
     4da:	1f ae       	std	Y+63, r1	; 0x3f
     4dc:	29 97       	sbiw	r28, 0x09	; 9
	User_t LoginSystem_strAdmin;
	User_t LoginSystem_AstrUsers[MAX_NO_OF_USERS];
	u8 LoginSystem_NumOfRegisteredUsers=0;
     4de:	28 96       	adiw	r28, 0x08	; 8
     4e0:	1f ae       	std	Y+63, r1	; 0x3f
     4e2:	28 97       	sbiw	r28, 0x08	; 8
	u8 Dimmer_Percentage;
	u8 Dimmer_Percentage_Tens;
	u8 Dimmer_Percentage_Ones;
//	u8 ShowToUser = MAIN_MENU;
	u8 LoginSystem_u8TrialsLeft =3;
	u8 Current_State=0;
     4e4:	23 96       	adiw	r28, 0x03	; 3
     4e6:	1f ae       	std	Y+63, r1	; 0x3f
     4e8:	23 97       	sbiw	r28, 0x03	; 3
	
	LCD_enuDisplayString("Welcome To Smart");
     4ea:	88 ed       	ldi	r24, 0xD8	; 216
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
	LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
	LCD_enuDisplayString("Home !");
     4fa:	89 ee       	ldi	r24, 0xE9	; 233
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
	EEPROM_ui8ReadByteFromAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,&Program_Status_Flag);
     502:	be 01       	movw	r22, r28
     504:	68 5b       	subi	r22, 0xB8	; 184
     506:	7f 4f       	sbci	r23, 0xFF	; 255
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	0e 94 54 09 	call	0x12a8	; 0x12a8 <EEPROM_ui8ReadByteFromAddress>
     50e:	2f ef       	ldi	r18, 0xFF	; 255
     510:	37 ea       	ldi	r19, 0xA7	; 167
     512:	81 e6       	ldi	r24, 0x61	; 97
     514:	21 50       	subi	r18, 0x01	; 1
     516:	30 40       	sbci	r19, 0x00	; 0
     518:	80 40       	sbci	r24, 0x00	; 0
     51a:	e1 f7       	brne	.-8      	; 0x514 <main+0x88>
     51c:	00 c0       	rjmp	.+0      	; 0x51e <main+0x92>
     51e:	00 00       	nop
	_delay_ms (2000);
	LCD_enuClearDisplay();
     520:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>

	
			if (Program_Status_Flag == FIRST_TIME_USE_STATUS)
     524:	29 96       	adiw	r28, 0x09	; 9
     526:	8f ad       	ldd	r24, Y+63	; 0x3f
     528:	29 97       	sbiw	r28, 0x09	; 9
     52a:	8f 3f       	cpi	r24, 0xFF	; 255
     52c:	09 f0       	breq	.+2      	; 0x530 <main+0xa4>
     52e:	91 c0       	rjmp	.+290    	; 0x652 <main+0x1c6>
			{

				EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,LoginSystem_NumOfRegisteredUsers);
     530:	28 96       	adiw	r28, 0x08	; 8
     532:	6f ad       	ldd	r22, Y+63	; 0x3f
     534:	28 97       	sbiw	r28, 0x08	; 8
     536:	81 e1       	ldi	r24, 0x11	; 17
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 71 09 	call	0x12e2	; 0x12e2 <EEPROM_vWriteByteToAddress>
     53e:	9f ef       	ldi	r25, 0xFF	; 255
     540:	e2 e5       	ldi	r30, 0x52	; 82
     542:	f7 e0       	ldi	r31, 0x07	; 7
     544:	91 50       	subi	r25, 0x01	; 1
     546:	e0 40       	sbci	r30, 0x00	; 0
     548:	f0 40       	sbci	r31, 0x00	; 0
     54a:	e1 f7       	brne	.-8      	; 0x544 <main+0xb8>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <main+0xc2>
     54e:	00 00       	nop
				_delay_ms(150);
				LCD_enuDisplayString("For First Time");
     550:	80 ef       	ldi	r24, 0xF0	; 240
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     558:	60 e0       	ldi	r22, 0x00	; 0
     55a:	81 e0       	ldi	r24, 0x01	; 1
     55c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Use");
     560:	8f ef       	ldi	r24, 0xFF	; 255
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
     568:	2f ef       	ldi	r18, 0xFF	; 255
     56a:	37 ea       	ldi	r19, 0xA7	; 167
     56c:	81 e6       	ldi	r24, 0x61	; 97
     56e:	21 50       	subi	r18, 0x01	; 1
     570:	30 40       	sbci	r19, 0x00	; 0
     572:	80 40       	sbci	r24, 0x00	; 0
     574:	e1 f7       	brne	.-8      	; 0x56e <main+0xe2>
     576:	00 c0       	rjmp	.+0      	; 0x578 <main+0xec>
     578:	00 00       	nop
				_delay_ms(2000);
				LCD_enuClearDisplay();
     57a:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Register Admin");
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     586:	60 e0       	ldi	r22, 0x00	; 0
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("on Keypad");
     58e:	82 e1       	ldi	r24, 0x12	; 18
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
     596:	9f ef       	ldi	r25, 0xFF	; 255
     598:	e7 ea       	ldi	r30, 0xA7	; 167
     59a:	f1 e6       	ldi	r31, 0x61	; 97
     59c:	91 50       	subi	r25, 0x01	; 1
     59e:	e0 40       	sbci	r30, 0x00	; 0
     5a0:	f0 40       	sbci	r31, 0x00	; 0
     5a2:	e1 f7       	brne	.-8      	; 0x59c <main+0x110>
     5a4:	00 c0       	rjmp	.+0      	; 0x5a6 <main+0x11a>
     5a6:	00 00       	nop
				_delay_ms(2000);
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_strAdmin.UserName, LoginSystem_strAdmin.Password);
     5a8:	be 01       	movw	r22, r28
     5aa:	6e 5c       	subi	r22, 0xCE	; 206
     5ac:	7f 4f       	sbci	r23, 0xFF	; 255
     5ae:	ce 01       	movw	r24, r28
     5b0:	8d 96       	adiw	r24, 0x2d	; 45
     5b2:	0e 94 c4 00 	call	0x188	; 0x188 <LoginSystem_enuGetDataFromUserByKeypad>
				LoginSystem_strAdmin.User_Priority = ADMIN_PRIORITY;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	8f ab       	std	Y+55, r24	; 0x37
				
				
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS ,LoginSystem_strAdmin.UserName , MAX_NO_OF_LETTERS);
     5ba:	44 e0       	ldi	r20, 0x04	; 4
     5bc:	50 e0       	ldi	r21, 0x00	; 0
     5be:	be 01       	movw	r22, r28
     5c0:	63 5d       	subi	r22, 0xD3	; 211
     5c2:	7f 4f       	sbci	r23, 0xFF	; 255
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 7d 09 	call	0x12fa	; 0x12fa <EEPROM_vWriteBlockToAddress>
     5cc:	2f ef       	ldi	r18, 0xFF	; 255
     5ce:	32 e5       	ldi	r19, 0x52	; 82
     5d0:	87 e0       	ldi	r24, 0x07	; 7
     5d2:	21 50       	subi	r18, 0x01	; 1
     5d4:	30 40       	sbci	r19, 0x00	; 0
     5d6:	80 40       	sbci	r24, 0x00	; 0
     5d8:	e1 f7       	brne	.-8      	; 0x5d2 <main+0x146>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <main+0x150>
     5dc:	00 00       	nop
				_delay_ms(150);
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS ,LoginSystem_strAdmin.Password , MAX_NO_OF_LETTERS);
     5de:	44 e0       	ldi	r20, 0x04	; 4
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	be 01       	movw	r22, r28
     5e4:	6e 5c       	subi	r22, 0xCE	; 206
     5e6:	7f 4f       	sbci	r23, 0xFF	; 255
     5e8:	85 e0       	ldi	r24, 0x05	; 5
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 7d 09 	call	0x12fa	; 0x12fa <EEPROM_vWriteBlockToAddress>
     5f0:	9f ef       	ldi	r25, 0xFF	; 255
     5f2:	e2 e5       	ldi	r30, 0x52	; 82
     5f4:	f7 e0       	ldi	r31, 0x07	; 7
     5f6:	91 50       	subi	r25, 0x01	; 1
     5f8:	e0 40       	sbci	r30, 0x00	; 0
     5fa:	f0 40       	sbci	r31, 0x00	; 0
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <main+0x16a>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <main+0x174>
     600:	00 00       	nop
				_delay_ms(150);

				EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,LOAD_LOGIN_SYSTEM_DATABASE);
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	80 e0       	ldi	r24, 0x00	; 0
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	0e 94 71 09 	call	0x12e2	; 0x12e2 <EEPROM_vWriteByteToAddress>
     60c:	2f ef       	ldi	r18, 0xFF	; 255
     60e:	32 e5       	ldi	r19, 0x52	; 82
     610:	87 e0       	ldi	r24, 0x07	; 7
     612:	21 50       	subi	r18, 0x01	; 1
     614:	30 40       	sbci	r19, 0x00	; 0
     616:	80 40       	sbci	r24, 0x00	; 0
     618:	e1 f7       	brne	.-8      	; 0x612 <main+0x186>
     61a:	00 c0       	rjmp	.+0      	; 0x61c <main+0x190>
     61c:	00 00       	nop
				_delay_ms(150);
	
				LCD_enuClearDisplay();
     61e:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Saved");
     622:	8c e1       	ldi	r24, 0x1C	; 28
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Successfully");
     632:	85 e9       	ldi	r24, 0x95	; 149
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
     63a:	9f ef       	ldi	r25, 0xFF	; 255
     63c:	e3 ed       	ldi	r30, 0xD3	; 211
     63e:	f0 e3       	ldi	r31, 0x30	; 48
     640:	91 50       	subi	r25, 0x01	; 1
     642:	e0 40       	sbci	r30, 0x00	; 0
     644:	f0 40       	sbci	r31, 0x00	; 0
     646:	e1 f7       	brne	.-8      	; 0x640 <main+0x1b4>
     648:	00 c0       	rjmp	.+0      	; 0x64a <main+0x1be>
     64a:	00 00       	nop
				_delay_ms(1000);
				LCD_enuClearDisplay();
     64c:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
     650:	9f c0       	rjmp	.+318    	; 0x790 <main+0x304>
			}

			/************************************************************************************************************/
			/************************************************************************************************************/

			else if (Program_Status_Flag == LOAD_LOGIN_SYSTEM_DATABASE)
     652:	81 11       	cpse	r24, r1
     654:	a1 c0       	rjmp	.+322    	; 0x798 <main+0x30c>
			{
				/****************************************Load the Login System database from the EEPROM***************************************/
				EEPROM_ui8ReadByteFromAddress(NO_OF_REGISTERED_USERS_ADDRESS,&LoginSystem_NumOfRegisteredUsers);
     656:	be 01       	movw	r22, r28
     658:	69 5b       	subi	r22, 0xB9	; 185
     65a:	7f 4f       	sbci	r23, 0xFF	; 255
     65c:	81 e1       	ldi	r24, 0x11	; 17
     65e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <EEPROM_ui8ReadByteFromAddress>
     662:	2f ef       	ldi	r18, 0xFF	; 255
     664:	32 e5       	ldi	r19, 0x52	; 82
     666:	87 e0       	ldi	r24, 0x07	; 7
     668:	21 50       	subi	r18, 0x01	; 1
     66a:	30 40       	sbci	r19, 0x00	; 0
     66c:	80 40       	sbci	r24, 0x00	; 0
     66e:	e1 f7       	brne	.-8      	; 0x668 <main+0x1dc>
     670:	00 c0       	rjmp	.+0      	; 0x672 <main+0x1e6>
     672:	00 00       	nop
				_delay_ms(150);
				

				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS,LoginSystem_strAdmin.UserName,MAX_NO_OF_LETTERS);
     674:	44 e0       	ldi	r20, 0x04	; 4
     676:	50 e0       	ldi	r21, 0x00	; 0
     678:	be 01       	movw	r22, r28
     67a:	63 5d       	subi	r22, 0xD3	; 211
     67c:	7f 4f       	sbci	r23, 0xFF	; 255
     67e:	81 e0       	ldi	r24, 0x01	; 1
     680:	90 e0       	ldi	r25, 0x00	; 0
     682:	0e 94 5d 09 	call	0x12ba	; 0x12ba <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     686:	19 aa       	std	Y+49, r1	; 0x31
     688:	9f ef       	ldi	r25, 0xFF	; 255
     68a:	e2 e5       	ldi	r30, 0x52	; 82
     68c:	f7 e0       	ldi	r31, 0x07	; 7
     68e:	91 50       	subi	r25, 0x01	; 1
     690:	e0 40       	sbci	r30, 0x00	; 0
     692:	f0 40       	sbci	r31, 0x00	; 0
     694:	e1 f7       	brne	.-8      	; 0x68e <main+0x202>
     696:	00 c0       	rjmp	.+0      	; 0x698 <main+0x20c>
     698:	00 00       	nop
				_delay_ms(150);
				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS,LoginSystem_strAdmin.Password,MAX_NO_OF_LETTERS);
     69a:	44 e0       	ldi	r20, 0x04	; 4
     69c:	50 e0       	ldi	r21, 0x00	; 0
     69e:	be 01       	movw	r22, r28
     6a0:	6e 5c       	subi	r22, 0xCE	; 206
     6a2:	7f 4f       	sbci	r23, 0xFF	; 255
     6a4:	85 e0       	ldi	r24, 0x05	; 5
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 5d 09 	call	0x12ba	; 0x12ba <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     6ac:	1e aa       	std	Y+54, r1	; 0x36
     6ae:	2f ef       	ldi	r18, 0xFF	; 255
     6b0:	32 e5       	ldi	r19, 0x52	; 82
     6b2:	87 e0       	ldi	r24, 0x07	; 7
     6b4:	21 50       	subi	r18, 0x01	; 1
     6b6:	30 40       	sbci	r19, 0x00	; 0
     6b8:	80 40       	sbci	r24, 0x00	; 0
     6ba:	e1 f7       	brne	.-8      	; 0x6b4 <main+0x228>
     6bc:	00 c0       	rjmp	.+0      	; 0x6be <main+0x232>
     6be:	00 00       	nop
				_delay_ms(150);
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	8f ab       	std	Y+55, r24	; 0x37
     6c4:	9f ef       	ldi	r25, 0xFF	; 255
     6c6:	e2 e5       	ldi	r30, 0x52	; 82
     6c8:	f7 e0       	ldi	r31, 0x07	; 7
     6ca:	91 50       	subi	r25, 0x01	; 1
     6cc:	e0 40       	sbci	r30, 0x00	; 0
     6ce:	f0 40       	sbci	r31, 0x00	; 0
     6d0:	e1 f7       	brne	.-8      	; 0x6ca <main+0x23e>
     6d2:	00 c0       	rjmp	.+0      	; 0x6d4 <main+0x248>
     6d4:	00 00       	nop
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     6d6:	61 2c       	mov	r6, r1
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     6d8:	5b e0       	ldi	r21, 0x0B	; 11
     6da:	55 2e       	mov	r5, r21
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     6dc:	28 96       	adiw	r28, 0x08	; 8
     6de:	8f ad       	ldd	r24, Y+63	; 0x3f
     6e0:	28 97       	sbiw	r28, 0x08	; 8
     6e2:	68 16       	cp	r6, r24
     6e4:	08 f0       	brcs	.+2      	; 0x6e8 <main+0x25c>
     6e6:	54 c0       	rjmp	.+168    	; 0x790 <main+0x304>
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
     6e8:	29 e0       	ldi	r18, 0x09	; 9
     6ea:	62 9e       	mul	r6, r18
     6ec:	40 01       	movw	r8, r0
     6ee:	11 24       	eor	r1, r1
     6f0:	64 01       	movw	r12, r8
     6f2:	32 e1       	ldi	r19, 0x12	; 18
     6f4:	c3 0e       	add	r12, r19
     6f6:	d1 1c       	adc	r13, r1
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     6f8:	56 9c       	mul	r5, r6
     6fa:	80 01       	movw	r16, r0
     6fc:	11 24       	eor	r1, r1
     6fe:	ee 24       	eor	r14, r14
     700:	e3 94       	inc	r14
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	e0 0e       	add	r14, r16
     70a:	f1 1e       	adc	r15, r17
     70c:	44 e0       	ldi	r20, 0x04	; 4
     70e:	50 e0       	ldi	r21, 0x00	; 0
     710:	b7 01       	movw	r22, r14
     712:	c6 01       	movw	r24, r12
     714:	0e 94 5d 09 	call	0x12ba	; 0x12ba <EEPROM_vReadBlockFromAddress>
     718:	8f ef       	ldi	r24, 0xFF	; 255
     71a:	92 e5       	ldi	r25, 0x52	; 82
     71c:	e7 e0       	ldi	r30, 0x07	; 7
     71e:	81 50       	subi	r24, 0x01	; 1
     720:	90 40       	sbci	r25, 0x00	; 0
     722:	e0 40       	sbci	r30, 0x00	; 0
     724:	e1 f7       	brne	.-8      	; 0x71e <main+0x292>
     726:	00 c0       	rjmp	.+0      	; 0x728 <main+0x29c>
     728:	00 00       	nop
					_delay_ms(150);

					EEPROM_vReadBlockFromAddress(Local_u16UserAddress + MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].Password,MAX_NO_OF_LETTERS);
     72a:	b8 01       	movw	r22, r16
     72c:	6b 5f       	subi	r22, 0xFB	; 251
     72e:	7f 4f       	sbci	r23, 0xFF	; 255
     730:	21 e0       	ldi	r18, 0x01	; 1
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	2c 0f       	add	r18, r28
     736:	3d 1f       	adc	r19, r29
     738:	62 0f       	add	r22, r18
     73a:	73 1f       	adc	r23, r19
     73c:	44 e0       	ldi	r20, 0x04	; 4
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	c4 01       	movw	r24, r8
     742:	46 96       	adiw	r24, 0x16	; 22
     744:	0e 94 5d 09 	call	0x12ba	; 0x12ba <EEPROM_vReadBlockFromAddress>
     748:	3f ef       	ldi	r19, 0xFF	; 255
     74a:	82 e5       	ldi	r24, 0x52	; 82
     74c:	97 e0       	ldi	r25, 0x07	; 7
     74e:	31 50       	subi	r19, 0x01	; 1
     750:	80 40       	sbci	r24, 0x00	; 0
     752:	90 40       	sbci	r25, 0x00	; 0
     754:	e1 f7       	brne	.-8      	; 0x74e <main+0x2c2>
     756:	00 c0       	rjmp	.+0      	; 0x758 <main+0x2cc>
     758:	00 00       	nop
					_delay_ms(150);
					EEPROM_ui8ReadByteFromAddress(Local_u16UserAddress + 2*MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].User_Priority);
     75a:	b8 01       	movw	r22, r16
     75c:	66 5f       	subi	r22, 0xF6	; 246
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	e1 e0       	ldi	r30, 0x01	; 1
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	ec 0f       	add	r30, r28
     766:	fd 1f       	adc	r31, r29
     768:	6e 0f       	add	r22, r30
     76a:	7f 1f       	adc	r23, r31
     76c:	88 e0       	ldi	r24, 0x08	; 8
     76e:	8c 0d       	add	r24, r12
     770:	0e 94 54 09 	call	0x12a8	; 0x12a8 <EEPROM_ui8ReadByteFromAddress>
     774:	ff ef       	ldi	r31, 0xFF	; 255
     776:	22 e5       	ldi	r18, 0x52	; 82
     778:	37 e0       	ldi	r19, 0x07	; 7
     77a:	f1 50       	subi	r31, 0x01	; 1
     77c:	20 40       	sbci	r18, 0x00	; 0
     77e:	30 40       	sbci	r19, 0x00	; 0
     780:	e1 f7       	brne	.-8      	; 0x77a <main+0x2ee>
     782:	00 c0       	rjmp	.+0      	; 0x784 <main+0x2f8>
     784:	00 00       	nop
					_delay_ms(150);
					LoginSystem_AstrUsers[Local_u8Iterator].UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     786:	f7 01       	movw	r30, r14
     788:	14 82       	std	Z+4, r1	; 0x04
					LoginSystem_AstrUsers[Local_u8Iterator].Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     78a:	11 86       	std	Z+9, r1	; 0x09
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     78c:	63 94       	inc	r6
     78e:	a6 cf       	rjmp	.-180    	; 0x6dc <main+0x250>
				}
				
				


				Program_Status_Flag = IDLE_STATUS;
     790:	87 e0       	ldi	r24, 0x07	; 7
     792:	29 96       	adiw	r28, 0x09	; 9
     794:	8f af       	std	Y+63, r24	; 0x3f
     796:	29 97       	sbiw	r28, 0x09	; 9
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     798:	33 e0       	ldi	r19, 0x03	; 3
     79a:	93 2e       	mov	r9, r19
				Program_Status_Flag = IDLE_STATUS;
			}
		
	while (1)
	{
		UART_enuSendString("PRESS ENTER TO START\r\n");	
     79c:	82 e2       	ldi	r24, 0x22	; 34
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>

		if (Program_Status_Flag == IDLE_STATUS)
     7a4:	29 96       	adiw	r28, 0x09	; 9
     7a6:	8f ad       	ldd	r24, Y+63	; 0x3f
     7a8:	29 97       	sbiw	r28, 0x09	; 9
     7aa:	87 30       	cpi	r24, 0x07	; 7
     7ac:	19 f0       	breq	.+6      	; 0x7b4 <main+0x328>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     7ae:	2b e0       	ldi	r18, 0x0B	; 11
     7b0:	e2 2e       	mov	r14, r18
     7b2:	06 c1       	rjmp	.+524    	; 0x9c0 <__stack+0x161>
		UART_enuSendString("PRESS ENTER TO START\r\n");	

		if (Program_Status_Flag == IDLE_STATUS)
		{
			u8 Local_u8Iterator = 1;
			if ((Current_State == -0))
     7b4:	23 96       	adiw	r28, 0x03	; 3
     7b6:	8f ad       	ldd	r24, Y+63	; 0x3f
     7b8:	23 97       	sbiw	r28, 0x03	; 3
     7ba:	81 11       	cpse	r24, r1
     7bc:	0e c0       	rjmp	.+28     	; 0x7da <main+0x34e>
			{LCD_enuClearDisplay();
     7be:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
				LCD_enuDisplayString("All Devices");
     7c2:	89 e3       	ldi	r24, 0x39	; 57
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     7ca:	60 e0       	ldi	r22, 0x00	; 0
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Are Off");
     7d2:	85 e4       	ldi	r24, 0x45	; 69
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
					_delay_ms(1000);
					break;
				}
					Local_u8Iterator++;
					if (Local_u8Iterator == 7)
						Local_u8Iterator =1;
     7da:	ff 24       	eor	r15, r15
     7dc:	f3 94       	inc	r15
					_delay_ms(1000);
					break;
					case State_Dimmer:
					LCD_enuClearDisplay();
					LCD_enuDisplayString("Dimmer: ");
					LCD_enuDisplayUnsignedInteger(Dimmer_Percentage);
     7de:	0b 2d       	mov	r16, r11
     7e0:	10 e0       	ldi	r17, 0x00	; 0
					{
						Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
					}
					else if(UART_enuCheck_Connection())
					{
						Program_Status_Flag = REMOTED_SYSTEM_LOGIN_PAGE_STATUS;
     7e2:	82 e0       	ldi	r24, 0x02	; 2
     7e4:	e8 2e       	mov	r14, r24
					Local_u8Iterator++;
					if (Local_u8Iterator == 7)
						Local_u8Iterator =1;
					if (LCD_KEYPAD_USER_FLAG == 1)
					{
						Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	d9 2e       	mov	r13, r25
			{LCD_enuClearDisplay();
				LCD_enuDisplayString("All Devices");
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
				LCD_enuDisplayString("Are Off");
			}
			while ( Program_Status_Flag == IDLE_STATUS)
     7ea:	29 96       	adiw	r28, 0x09	; 9
     7ec:	8f ad       	ldd	r24, Y+63	; 0x3f
     7ee:	29 97       	sbiw	r28, 0x09	; 9
     7f0:	87 30       	cpi	r24, 0x07	; 7
     7f2:	e9 f6       	brne	.-70     	; 0x7ae <main+0x322>
			{	
				On_Devices = ( GET_BIT( Current_State, Local_u8Iterator) )*Local_u8Iterator;
     7f4:	23 96       	adiw	r28, 0x03	; 3
     7f6:	2f ad       	ldd	r18, Y+63	; 0x3f
     7f8:	23 97       	sbiw	r28, 0x03	; 3
				switch (On_Devices)
     7fa:	82 2f       	mov	r24, r18
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0f 2c       	mov	r0, r15
     800:	02 c0       	rjmp	.+4      	; 0x806 <__DATA_REGION_LENGTH__+0x6>
     802:	95 95       	asr	r25
     804:	87 95       	ror	r24
     806:	0a 94       	dec	r0
     808:	e2 f7       	brpl	.-8      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     80a:	81 70       	andi	r24, 0x01	; 1
     80c:	8f 9d       	mul	r24, r15
     80e:	80 2d       	mov	r24, r0
     810:	11 24       	eor	r1, r1
     812:	83 30       	cpi	r24, 0x03	; 3
     814:	01 f1       	breq	.+64     	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     816:	28 f4       	brcc	.+10     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     818:	81 30       	cpi	r24, 0x01	; 1
     81a:	71 f0       	breq	.+28     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	89 f0       	breq	.+34     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     820:	47 c0       	rjmp	.+142    	; 0x8b0 <__stack+0x51>
     822:	85 30       	cpi	r24, 0x05	; 5
     824:	99 f1       	breq	.+102    	; 0x88c <__stack+0x2d>
     826:	e0 f0       	brcs	.+56     	; 0x860 <__stack+0x1>
     828:	86 30       	cpi	r24, 0x06	; 6
     82a:	09 f0       	breq	.+2      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     82c:	41 c0       	rjmp	.+130    	; 0x8b0 <__stack+0x51>
					break;
					case State_Air_Cond:
					LCD_enuDisplayString("Air Cond controlled");
					break; */
					case State_Door:
					LCD_enuClearDisplay();
     82e:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Door is Opened");
     832:	81 e7       	ldi	r24, 0x71	; 113
     834:	91 e0       	ldi	r25, 0x01	; 1
     836:	20 c0       	rjmp	.+64     	; 0x878 <__stack+0x19>
				On_Devices = ( GET_BIT( Current_State, Local_u8Iterator) )*Local_u8Iterator;
				switch (On_Devices)
				{
					
					case State_ROOM_1:
					LCD_enuClearDisplay();
     838:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Room1 On");
     83c:	8d e4       	ldi	r24, 0x4D	; 77
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	1b c0       	rjmp	.+54     	; 0x878 <__stack+0x19>
					_delay_ms(1000);
					break;
					case State_ROOM_2:
					if (!GET_BIT( Current_State, State_ROOM_1))
     842:	21 ff       	sbrs	r18, 1
					{
						LCD_enuClearDisplay();
     844:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
					}
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Room2 On");
     850:	86 e5       	ldi	r24, 0x56	; 86
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e c0       	rjmp	.+28     	; 0x872 <__stack+0x13>
					_delay_ms(1000);
					break;
					case State_ROOM_3:
					LCD_enuClearDisplay();
     856:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Room3 On");
     85a:	8f e5       	ldi	r24, 0x5F	; 95
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	0c c0       	rjmp	.+24     	; 0x878 <__stack+0x19>
					_delay_ms(1000);
					break;
					case State_ROOM_4:
					if (!GET_BIT( Current_State, State_ROOM_3))
     860:	23 ff       	sbrs	r18, 3
					{
						LCD_enuClearDisplay();
     862:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
					}
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     866:	60 e0       	ldi	r22, 0x00	; 0
     868:	81 e0       	ldi	r24, 0x01	; 1
     86a:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Room4 On");
     86e:	88 e6       	ldi	r24, 0x68	; 104
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
     876:	13 c0       	rjmp	.+38     	; 0x89e <__stack+0x3f>
					case State_Air_Cond:
					LCD_enuDisplayString("Air Cond controlled");
					break; */
					case State_Door:
					LCD_enuClearDisplay();
					LCD_enuDisplayString("Door is Opened");
     878:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
     87c:	ff ef       	ldi	r31, 0xFF	; 255
     87e:	23 ed       	ldi	r18, 0xD3	; 211
     880:	30 e3       	ldi	r19, 0x30	; 48
     882:	f1 50       	subi	r31, 0x01	; 1
     884:	20 40       	sbci	r18, 0x00	; 0
     886:	30 40       	sbci	r19, 0x00	; 0
     888:	e1 f7       	brne	.-8      	; 0x882 <__stack+0x23>
     88a:	10 c0       	rjmp	.+32     	; 0x8ac <__stack+0x4d>
					_delay_ms(1000);
					break;
					case State_Dimmer:
					LCD_enuClearDisplay();
     88c:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Dimmer: ");
     890:	80 e8       	ldi	r24, 0x80	; 128
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
					LCD_enuDisplayUnsignedInteger(Dimmer_Percentage);
     898:	c8 01       	movw	r24, r16
     89a:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_enuDisplayUnsignedInteger>
     89e:	8f ef       	ldi	r24, 0xFF	; 255
     8a0:	93 ed       	ldi	r25, 0xD3	; 211
     8a2:	e0 e3       	ldi	r30, 0x30	; 48
     8a4:	81 50       	subi	r24, 0x01	; 1
     8a6:	90 40       	sbci	r25, 0x00	; 0
     8a8:	e0 40       	sbci	r30, 0x00	; 0
     8aa:	e1 f7       	brne	.-8      	; 0x8a4 <__stack+0x45>
     8ac:	00 c0       	rjmp	.+0      	; 0x8ae <__stack+0x4f>
     8ae:	00 00       	nop
					_delay_ms(1000);
					break;
				}
					Local_u8Iterator++;
     8b0:	f3 94       	inc	r15
					if (Local_u8Iterator == 7)
     8b2:	f7 e0       	ldi	r31, 0x07	; 7
     8b4:	ff 12       	cpse	r15, r31
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <__stack+0x5d>
						Local_u8Iterator =1;
     8b8:	ff 24       	eor	r15, r15
     8ba:	f3 94       	inc	r15
					if (LCD_KEYPAD_USER_FLAG == 1)
     8bc:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <__data_end>
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	21 f4       	brne	.+8      	; 0x8cc <__stack+0x6d>
					{
						Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
     8c4:	29 96       	adiw	r28, 0x09	; 9
     8c6:	df ae       	std	Y+63, r13	; 0x3f
     8c8:	29 97       	sbiw	r28, 0x09	; 9
     8ca:	8f cf       	rjmp	.-226    	; 0x7ea <main+0x35e>
					}
					else if(UART_enuCheck_Connection())
     8cc:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <UART_enuCheck_Connection>
     8d0:	88 23       	and	r24, r24
     8d2:	09 f4       	brne	.+2      	; 0x8d6 <__stack+0x77>
     8d4:	8a cf       	rjmp	.-236    	; 0x7ea <main+0x35e>
					{
						Program_Status_Flag = REMOTED_SYSTEM_LOGIN_PAGE_STATUS;
     8d6:	29 96       	adiw	r28, 0x09	; 9
     8d8:	ef ae       	std	Y+63, r14	; 0x3f
     8da:	29 97       	sbiw	r28, 0x09	; 9
     8dc:	86 cf       	rjmp	.-244    	; 0x7ea <main+0x35e>
	
		while (Program_Status_Flag == REMOTED_SYSTEM_LOGIN_PAGE_STATUS)
		{
			u8 LoginSystem_u8_AdminTrueFlag;
			u8 LoginSystem_u8_Remoted_USERTrueFlag;
			LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
     8de:	be 01       	movw	r22, r28
     8e0:	68 5c       	subi	r22, 0xC8	; 200
     8e2:	7f 4f       	sbci	r23, 0xFF	; 255
     8e4:	ce 01       	movw	r24, r28
     8e6:	cd 96       	adiw	r24, 0x3d	; 61
     8e8:	0e 94 2b 01 	call	0x256	; 0x256 <LoginSystem_enuGetDataFromUserBY_UART>
	
			LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     8ec:	be 01       	movw	r22, r28
     8ee:	63 5d       	subi	r22, 0xD3	; 211
     8f0:	7f 4f       	sbci	r23, 0xFF	; 255
     8f2:	ce 01       	movw	r24, r28
     8f4:	cd 96       	adiw	r24, 0x3d	; 61
     8f6:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     8fa:	81 11       	cpse	r24, r1
     8fc:	68 c0       	rjmp	.+208    	; 0x9ce <__stack+0x16f>
     8fe:	f1 2c       	mov	r15, r1
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;	
			}
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     900:	28 96       	adiw	r28, 0x08	; 8
     902:	8f ad       	ldd	r24, Y+63	; 0x3f
     904:	28 97       	sbiw	r28, 0x08	; 8
     906:	f8 16       	cp	r15, r24
     908:	08 f0       	brcs	.+2      	; 0x90c <__stack+0xad>
     90a:	c9 c4       	rjmp	.+2450   	; 0x129e <__stack+0xa3f>
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     90c:	0f 2d       	mov	r16, r15
     90e:	10 e0       	ldi	r17, 0x00	; 0
     910:	e0 9e       	mul	r14, r16
     912:	60 01       	movw	r12, r0
     914:	e1 9e       	mul	r14, r17
     916:	d0 0c       	add	r13, r0
     918:	11 24       	eor	r1, r1
     91a:	be 01       	movw	r22, r28
     91c:	63 5c       	subi	r22, 0xC3	; 195
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	8c 0f       	add	r24, r28
     926:	9d 1f       	adc	r25, r29
     928:	8c 0d       	add	r24, r12
     92a:	9d 1d       	adc	r25, r13
     92c:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     930:	88 23       	and	r24, r24
     932:	09 f4       	brne	.+2      	; 0x936 <__stack+0xd7>
     934:	7b c0       	rjmp	.+246    	; 0xa2c <__stack+0x1cd>
     936:	c6 01       	movw	r24, r12
     938:	05 96       	adiw	r24, 0x05	; 5
     93a:	be 01       	movw	r22, r28
     93c:	68 5c       	subi	r22, 0xC8	; 200
     93e:	7f 4f       	sbci	r23, 0xFF	; 255
     940:	21 e0       	ldi	r18, 0x01	; 1
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	2c 0f       	add	r18, r28
     946:	3d 1f       	adc	r19, r29
     948:	82 0f       	add	r24, r18
     94a:	93 1f       	adc	r25, r19
     94c:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	81 11       	cpse	r24, r1
     954:	01 c0       	rjmp	.+2      	; 0x958 <__stack+0xf9>
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a9 2e       	mov	r10, r25
					if ( (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)  )
     95a:	31 e0       	ldi	r19, 0x01	; 1
     95c:	a3 12       	cpse	r10, r19
     95e:	81 c0       	rjmp	.+258    	; 0xa62 <__stack+0x203>
					{
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER) || (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER) )
     960:	e0 9e       	mul	r14, r16
     962:	c0 01       	movw	r24, r0
     964:	e1 9e       	mul	r14, r17
     966:	90 0d       	add	r25, r0
     968:	11 24       	eor	r1, r1
     96a:	01 e0       	ldi	r16, 0x01	; 1
     96c:	10 e0       	ldi	r17, 0x00	; 0
     96e:	0c 0f       	add	r16, r28
     970:	1d 1f       	adc	r17, r29
     972:	08 0f       	add	r16, r24
     974:	19 1f       	adc	r17, r25
     976:	f8 01       	movw	r30, r16
     978:	82 85       	ldd	r24, Z+10	; 0x0a
     97a:	82 50       	subi	r24, 0x02	; 2
     97c:	82 30       	cpi	r24, 0x02	; 2
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	57 c0       	rjmp	.+174    	; 0xa30 <__stack+0x1d1>
				}
			}
			
			if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
			{
				LoginSystem_u8TrialsLeft--;
     982:	1f ef       	ldi	r17, 0xFF	; 255
     984:	19 0d       	add	r17, r9
				UART_enuSendString("\r\nWrong Username or Password");
     986:	8f ec       	ldi	r24, 0xCF	; 207
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
     98e:	ff ef       	ldi	r31, 0xFF	; 255
     990:	25 ea       	ldi	r18, 0xA5	; 165
     992:	3e e0       	ldi	r19, 0x0E	; 14
     994:	f1 50       	subi	r31, 0x01	; 1
     996:	20 40       	sbci	r18, 0x00	; 0
     998:	30 40       	sbci	r19, 0x00	; 0
     99a:	e1 f7       	brne	.-8      	; 0x994 <__stack+0x135>
     99c:	00 c0       	rjmp	.+0      	; 0x99e <__stack+0x13f>
     99e:	00 00       	nop
				_delay_ms(300);
				UART_enuSendString("\r\nRemaining Trials: ");
     9a0:	8c ee       	ldi	r24, 0xEC	; 236
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
				UART_enuSendChar('0'+LoginSystem_u8TrialsLeft);
     9a8:	8f e2       	ldi	r24, 0x2F	; 47
     9aa:	89 0d       	add	r24, r9
     9ac:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <UART_enuSendChar>
							//_delay_ms(1000);
				if (LoginSystem_u8TrialsLeft == 0)
     9b0:	11 11       	cpse	r17, r1
     9b2:	04 c0       	rjmp	.+8      	; 0x9bc <__stack+0x15d>
				{
					Program_Status_Flag = BLOCKING_STATUS;
     9b4:	86 e0       	ldi	r24, 0x06	; 6
     9b6:	29 96       	adiw	r28, 0x09	; 9
     9b8:	8f af       	std	Y+63, r24	; 0x3f
     9ba:	29 97       	sbiw	r28, 0x09	; 9
     9bc:	a1 2c       	mov	r10, r1
     9be:	91 2e       	mov	r9, r17
				Program_Status_Flag = REMOTED_SYSTEM_LOGIN_PAGE_STATUS;
			}*/
		}
	
	
		while (Program_Status_Flag == REMOTED_SYSTEM_LOGIN_PAGE_STATUS)
     9c0:	29 96       	adiw	r28, 0x09	; 9
     9c2:	8f ad       	ldd	r24, Y+63	; 0x3f
     9c4:	29 97       	sbiw	r28, 0x09	; 9
     9c6:	82 30       	cpi	r24, 0x02	; 2
     9c8:	09 f4       	brne	.+2      	; 0x9cc <__stack+0x16d>
     9ca:	89 cf       	rjmp	.-238    	; 0x8de <__stack+0x7f>
     9cc:	4c c0       	rjmp	.+152    	; 0xa66 <__stack+0x207>
		{
			u8 LoginSystem_u8_AdminTrueFlag;
			u8 LoginSystem_u8_Remoted_USERTrueFlag;
			LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
	
			LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     9ce:	be 01       	movw	r22, r28
     9d0:	6e 5c       	subi	r22, 0xCE	; 206
     9d2:	7f 4f       	sbci	r23, 0xFF	; 255
     9d4:	ce 01       	movw	r24, r28
     9d6:	c8 96       	adiw	r24, 0x38	; 56
     9d8:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     9dc:	11 e0       	ldi	r17, 0x01	; 1
     9de:	81 11       	cpse	r24, r1
     9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <__stack+0x185>
     9e2:	10 e0       	ldi	r17, 0x00	; 0

			if(LoginSystem_u8_AdminTrueFlag == TRUE)
     9e4:	11 30       	cpi	r17, 0x01	; 1
     9e6:	09 f0       	breq	.+2      	; 0x9ea <__stack+0x18b>
     9e8:	8a cf       	rjmp	.-236    	; 0x8fe <__stack+0x9f>
			{
				UART_enuSendString("\r\nLogged in Successfully");
     9ea:	89 e8       	ldi	r24, 0x89	; 137
     9ec:	91 e0       	ldi	r25, 0x01	; 1
     9ee:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
     9f2:	2f ef       	ldi	r18, 0xFF	; 255
     9f4:	39 e6       	ldi	r19, 0x69	; 105
     9f6:	88 e1       	ldi	r24, 0x18	; 24
     9f8:	21 50       	subi	r18, 0x01	; 1
     9fa:	30 40       	sbci	r19, 0x00	; 0
     9fc:	80 40       	sbci	r24, 0x00	; 0
     9fe:	e1 f7       	brne	.-8      	; 0x9f8 <__stack+0x199>
     a00:	00 c0       	rjmp	.+0      	; 0xa02 <__stack+0x1a3>
     a02:	00 00       	nop
				_delay_ms(500);
				UART_enuSendString("\r\nWelcome Admin\r\n");
     a04:	82 ea       	ldi	r24, 0xA2	; 162
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
     a0c:	9f ef       	ldi	r25, 0xFF	; 255
     a0e:	e9 e6       	ldi	r30, 0x69	; 105
     a10:	f8 e1       	ldi	r31, 0x18	; 24
     a12:	91 50       	subi	r25, 0x01	; 1
     a14:	e0 40       	sbci	r30, 0x00	; 0
     a16:	f0 40       	sbci	r31, 0x00	; 0
     a18:	e1 f7       	brne	.-8      	; 0xa12 <__stack+0x1b3>
     a1a:	00 c0       	rjmp	.+0      	; 0xa1c <__stack+0x1bd>
     a1c:	00 00       	nop
				_delay_ms(500);
				LoginSystem_u8AdminOnlineFlag = TRUE;
     a1e:	10 93 20 05 	sts	0x0520, r17	; 0x800520 <LoginSystem_u8AdminOnlineFlag>
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;	
     a22:	84 e0       	ldi	r24, 0x04	; 4
     a24:	29 96       	adiw	r28, 0x09	; 9
     a26:	8f af       	std	Y+63, r24	; 0x3f
     a28:	29 97       	sbiw	r28, 0x09	; 9
     a2a:	37 c4       	rjmp	.+2158   	; 0x129a <__stack+0xa3b>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     a2c:	a1 2c       	mov	r10, r1
     a2e:	95 cf       	rjmp	.-214    	; 0x95a <__stack+0xfb>
					if ( (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)  )
					{
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER) || (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER) )
						{
							UART_enuSendString("\r\nLogged in Successfully\r\n");
     a30:	84 eb       	ldi	r24, 0xB4	; 180
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
     a38:	ff ef       	ldi	r31, 0xFF	; 255
     a3a:	29 e6       	ldi	r18, 0x69	; 105
     a3c:	38 e1       	ldi	r19, 0x18	; 24
     a3e:	f1 50       	subi	r31, 0x01	; 1
     a40:	20 40       	sbci	r18, 0x00	; 0
     a42:	30 40       	sbci	r19, 0x00	; 0
     a44:	e1 f7       	brne	.-8      	; 0xa3e <__stack+0x1df>
     a46:	00 c0       	rjmp	.+0      	; 0xa48 <__stack+0x1e9>
     a48:	00 00       	nop
							_delay_ms(500);
							LoginSystem_u8TrialsLeft =3;
							Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;
     a4a:	84 e0       	ldi	r24, 0x04	; 4
     a4c:	29 96       	adiw	r28, 0x09	; 9
     a4e:	8f af       	std	Y+63, r24	; 0x3f
     a50:	29 97       	sbiw	r28, 0x09	; 9
							if (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER)
     a52:	f8 01       	movw	r30, r16
     a54:	82 85       	ldd	r24, Z+10	; 0x0a
     a56:	83 30       	cpi	r24, 0x03	; 3
     a58:	09 f0       	breq	.+2      	; 0xa5c <__stack+0x1fd>
     a5a:	1f c4       	rjmp	.+2110   	; 0x129a <__stack+0xa3b>
							{
								LoginSystem_u8PromotedUserOnlineFlag = TRUE;
     a5c:	a0 92 1f 05 	sts	0x051F, r10	; 0x80051f <LoginSystem_u8PromotedUserOnlineFlag>
     a60:	1c c4       	rjmp	.+2104   	; 0x129a <__stack+0xa3b>
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;	
			}
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     a62:	f3 94       	inc	r15
     a64:	4d cf       	rjmp	.-358    	; 0x900 <__stack+0xa1>
					break;
					
					case '7':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     a66:	fb e0       	ldi	r31, 0x0B	; 11
     a68:	6f 2e       	mov	r6, r31
     a6a:	ab e0       	ldi	r26, 0x0B	; 11
     a6c:	8a 2e       	mov	r8, r26
								ShowToUser = PRIORITIES_MENU;
     a6e:	bf e0       	ldi	r27, 0x0F	; 15
     a70:	4b 2e       	mov	r4, r27
					break;
					
					case '7':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     a72:	1b e0       	ldi	r17, 0x0B	; 11
     a74:	51 2e       	mov	r5, r17
				else
				{
					UART_enuSendString("\r\n");		//For the shape of menu
					UART_enuRecieveChar(&UART_CHOICE);
					if (UART_CHOICE > '5')
						UART_CHOICE =100;		//If the program enter this else, then a Remoted User is in control. So, We want him to go to default in the switch case if he entered by mistake a number that corresponds An admin option in the switch case
     a76:	74 e6       	ldi	r23, 0x64	; 100
     a78:	e7 2e       	mov	r14, r23
						SetBit(&Current_State,5);
						ShowToUser = DIMMER_MENU;
					break;
					
					case '6':
						ShowToUser = DOOR_MENU;  
     a7a:	0a e0       	ldi	r16, 0x0A	; 10
					break;*/
					
					case '5':
						SPI_ui8TransmitRecive(DIMMER);
						SetBit(&Current_State,5);
						ShowToUser = DIMMER_MENU;
     a7c:	e8 e0       	ldi	r30, 0x08	; 8
     a7e:	fe 2e       	mov	r15, r30
			}
					
		}
				
		
		while (Program_Status_Flag == REMOTED_SYSTEM_MENU_STATUS)
     a80:	29 96       	adiw	r28, 0x09	; 9
     a82:	8f ad       	ldd	r24, Y+63	; 0x3f
     a84:	29 97       	sbiw	r28, 0x09	; 9
     a86:	84 30       	cpi	r24, 0x04	; 4
     a88:	09 f0       	breq	.+2      	; 0xa8c <__stack+0x22d>
     a8a:	df c1       	rjmp	.+958    	; 0xe4a <__stack+0x5eb>
		{
			
			while(ShowToUser == MAIN_MENU)
     a8c:	10 91 1e 05 	lds	r17, 0x051E	; 0x80051e <ShowToUser>
     a90:	11 11       	cpse	r17, r1
     a92:	ce c0       	rjmp	.+412    	; 0xc30 <__stack+0x3d1>
			{
				//The first five chioces will Appear for Admin or Remoted user 
				UART_enuSendString("\r\n1-Room1");
     a94:	81 e0       	ldi	r24, 0x01	; 1
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
				UART_enuSendString("\r\n2-Room2");
     a9c:	8b e0       	ldi	r24, 0x0B	; 11
     a9e:	92 e0       	ldi	r25, 0x02	; 2
     aa0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
				UART_enuSendString("\r\n3-Room3");
     aa4:	85 e1       	ldi	r24, 0x15	; 21
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
				UART_enuSendString("\r\n4-Room4");
     aac:	8f e1       	ldi	r24, 0x1F	; 31
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
			//	UART_enuSendString("\r\n5-Room5");
			//	UART_enuSendString("\r\n10-Air Conditioner\r\n");
				UART_enuSendString("\r\n5-Dimmer");
     ab4:	89 e2       	ldi	r24, 0x29	; 41
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
				if (LoginSystem_u8AdminOnlineFlag ==TRUE) //The Last 3 options will Appear only to Admin
     abc:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <LoginSystem_u8AdminOnlineFlag>
     ac0:	81 30       	cpi	r24, 0x01	; 1
     ac2:	91 f4       	brne	.+36     	; 0xae8 <__stack+0x289>
				{
					UART_enuSendString("\r\n6-Door");
     ac4:	84 e3       	ldi	r24, 0x34	; 52
     ac6:	92 e0       	ldi	r25, 0x02	; 2
     ac8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
					UART_enuSendString("\r\n7-Add User");
     acc:	8d e3       	ldi	r24, 0x3D	; 61
     ace:	92 e0       	ldi	r25, 0x02	; 2
     ad0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
					UART_enuSendString("\r\n8-Remove User\r\n");
     ad4:	8a e4       	ldi	r24, 0x4A	; 74
     ad6:	92 e0       	ldi	r25, 0x02	; 2
     ad8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
					//UART_enuSendString("\r\n9-Promote User");
					UART_enuRecieveChar(&UART_CHOICE);
     adc:	ce 01       	movw	r24, r28
     ade:	8b 5b       	subi	r24, 0xBB	; 187
     ae0:	9f 4f       	sbci	r25, 0xFF	; 255
     ae2:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <UART_enuRecieveChar>
     ae6:	11 c0       	rjmp	.+34     	; 0xb0a <__stack+0x2ab>
				}
				else
				{
					UART_enuSendString("\r\n");		//For the shape of menu
     ae8:	86 e3       	ldi	r24, 0x36	; 54
     aea:	91 e0       	ldi	r25, 0x01	; 1
     aec:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     af0:	ce 01       	movw	r24, r28
     af2:	8b 5b       	subi	r24, 0xBB	; 187
     af4:	9f 4f       	sbci	r25, 0xFF	; 255
     af6:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <UART_enuRecieveChar>
					if (UART_CHOICE > '5')
     afa:	26 96       	adiw	r28, 0x06	; 6
     afc:	8f ad       	ldd	r24, Y+63	; 0x3f
     afe:	26 97       	sbiw	r28, 0x06	; 6
     b00:	86 33       	cpi	r24, 0x36	; 54
     b02:	18 f0       	brcs	.+6      	; 0xb0a <__stack+0x2ab>
						UART_CHOICE =100;		//If the program enter this else, then a Remoted User is in control. So, We want him to go to default in the switch case if he entered by mistake a number that corresponds An admin option in the switch case
     b04:	26 96       	adiw	r28, 0x06	; 6
     b06:	ef ae       	std	Y+63, r14	; 0x3f
     b08:	26 97       	sbiw	r28, 0x06	; 6
				}
				
				//UART_enuRecieveChar(&UART_CHOICE);
				switch(UART_CHOICE)
     b0a:	26 96       	adiw	r28, 0x06	; 6
     b0c:	ef ad       	ldd	r30, Y+63	; 0x3f
     b0e:	26 97       	sbiw	r28, 0x06	; 6
     b10:	8e 2f       	mov	r24, r30
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	fc 01       	movw	r30, r24
     b16:	f1 97       	sbiw	r30, 0x31	; 49
     b18:	e8 30       	cpi	r30, 0x08	; 8
     b1a:	f1 05       	cpc	r31, r1
     b1c:	08 f0       	brcs	.+2      	; 0xb20 <__stack+0x2c1>
     b1e:	78 c0       	rjmp	.+240    	; 0xc10 <__stack+0x3b1>
     b20:	e6 5d       	subi	r30, 0xD6	; 214
     b22:	ff 4f       	sbci	r31, 0xFF	; 255
     b24:	0c 94 34 0e 	jmp	0x1c68	; 0x1c68 <__tablejump2__>
				{
					case '1':
						SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,1);
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__stack+0x2db>
						ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
					break;
					
					case '2':
						SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
     b32:	82 e0       	ldi	r24, 0x02	; 2
     b34:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,2);
     b38:	62 e0       	ldi	r22, 0x02	; 2
     b3a:	ce 01       	movw	r24, r28
     b3c:	8e 5b       	subi	r24, 0xBE	; 190
     b3e:	9f 4f       	sbci	r25, 0xFF	; 255
     b40:	0e 94 26 02 	call	0x44c	; 0x44c <ToggleBit>
						ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
     b44:	50 92 1e 05 	sts	0x051E, r5	; 0x80051e <ShowToUser>
					break;
     b48:	a1 cf       	rjmp	.-190    	; 0xa8c <__stack+0x22d>
					
					case '3':
						SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
     b4a:	83 e0       	ldi	r24, 0x03	; 3
     b4c:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,3);
     b50:	63 e0       	ldi	r22, 0x03	; 3
     b52:	f3 cf       	rjmp	.-26     	; 0xb3a <__stack+0x2db>
						ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '4':
						SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
     b54:	84 e0       	ldi	r24, 0x04	; 4
     b56:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,4);
     b5a:	64 e0       	ldi	r22, 0x04	; 4
     b5c:	ee cf       	rjmp	.-36     	; 0xb3a <__stack+0x2db>
						SPI_ui8TransmitRecive(ROOM5_LED_TOGGLE);
						ShowToUser = LOG_OUT_CHOICE;
					break;*/
					
					case '5':
						SPI_ui8TransmitRecive(DIMMER);
     b5e:	8c e0       	ldi	r24, 0x0C	; 12
     b60:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
						SetBit(&Current_State,5);
     b64:	65 e0       	ldi	r22, 0x05	; 5
     b66:	ce 01       	movw	r24, r28
     b68:	8e 5b       	subi	r24, 0xBE	; 190
     b6a:	9f 4f       	sbci	r25, 0xFF	; 255
     b6c:	0e 94 1b 02 	call	0x436	; 0x436 <SetBit>
						ShowToUser = DIMMER_MENU;
     b70:	f0 92 1e 05 	sts	0x051E, r15	; 0x80051e <ShowToUser>
					break;
     b74:	8b cf       	rjmp	.-234    	; 0xa8c <__stack+0x22d>
					
					case '6':
						ShowToUser = DOOR_MENU;  
     b76:	00 93 1e 05 	sts	0x051E, r16	; 0x80051e <ShowToUser>
					break;
     b7a:	88 cf       	rjmp	.-240    	; 0xa8c <__stack+0x22d>
					
					case '7':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
     b7c:	28 96       	adiw	r28, 0x08	; 8
     b7e:	8f ad       	ldd	r24, Y+63	; 0x3f
     b80:	28 97       	sbiw	r28, 0x08	; 8
     b82:	84 30       	cpi	r24, 0x04	; 4
     b84:	98 f4       	brcc	.+38     	; 0xbac <__stack+0x34d>
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     b86:	68 9e       	mul	r6, r24
     b88:	c0 01       	movw	r24, r0
     b8a:	11 24       	eor	r1, r1
     b8c:	bc 01       	movw	r22, r24
     b8e:	6b 5f       	subi	r22, 0xFB	; 251
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	e1 e0       	ldi	r30, 0x01	; 1
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	ec 0f       	add	r30, r28
     b98:	fd 1f       	adc	r31, r29
     b9a:	6e 0f       	add	r22, r30
     b9c:	7f 1f       	adc	r23, r31
     b9e:	8e 0f       	add	r24, r30
     ba0:	9f 1f       	adc	r25, r31
     ba2:	0e 94 2b 01 	call	0x256	; 0x256 <LoginSystem_enuGetDataFromUserBY_UART>
								ShowToUser = PRIORITIES_MENU;
     ba6:	40 92 1e 05 	sts	0x051E, r4	; 0x80051e <ShowToUser>
     baa:	70 cf       	rjmp	.-288    	; 0xa8c <__stack+0x22d>
							}
						else
							{
								UART_enuSendString("\r\nReached The Max Number of Stored Users");
     bac:	8c e5       	ldi	r24, 0x5C	; 92
     bae:	92 e0       	ldi	r25, 0x02	; 2
     bb0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
								UART_enuSendString("\r\nCouldn't Store A New User");
     bb4:	85 e8       	ldi	r24, 0x85	; 133
     bb6:	92 e0       	ldi	r25, 0x02	; 2
     bb8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
								UART_enuSendString("\r\nReturning to Main Menu\r\n");
     bbc:	8f ec       	ldi	r24, 0xCF	; 207
     bbe:	92 e0       	ldi	r25, 0x02	; 2
     bc0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
								ShowToUser = MAIN_MENU;
     bc4:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <ShowToUser>
     bc8:	ff ef       	ldi	r31, 0xFF	; 255
     bca:	2d e2       	ldi	r18, 0x2D	; 45
     bcc:	32 e2       	ldi	r19, 0x22	; 34
     bce:	f1 50       	subi	r31, 0x01	; 1
     bd0:	20 40       	sbci	r18, 0x00	; 0
     bd2:	30 40       	sbci	r19, 0x00	; 0
     bd4:	e1 f7       	brne	.-8      	; 0xbce <__stack+0x36f>
     bd6:	19 c0       	rjmp	.+50     	; 0xc0a <__stack+0x3ab>
								_delay_ms(700);
							}
					break;
					case '8':
						if (LoginSystem_RemoveUser(LoginSystem_AstrUsers,&LoginSystem_NumOfRegisteredUsers) == TRUE)
     bd8:	be 01       	movw	r22, r28
     bda:	69 5b       	subi	r22, 0xB9	; 185
     bdc:	7f 4f       	sbci	r23, 0xFF	; 255
     bde:	ce 01       	movw	r24, r28
     be0:	01 96       	adiw	r24, 0x01	; 1
     be2:	0e 94 64 01 	call	0x2c8	; 0x2c8 <LoginSystem_RemoveUser>
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	19 f4       	brne	.+6      	; 0xbf0 <__stack+0x391>
						{		UART_enuSendString("\r\nRemoved Successfully\r\n");
     bea:	81 ea       	ldi	r24, 0xA1	; 161
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <__stack+0x395>
								ShowToUser=LOG_OUT_CHOICE;
						}
						else	{UART_enuSendString("\r\nUsername not Found \r\nReturning to Main Menu\r\n");}
     bf0:	8a eb       	ldi	r24, 0xBA	; 186
     bf2:	92 e0       	ldi	r25, 0x02	; 2
     bf4:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
						ShowToUser=MAIN_MENU;
     bf8:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <ShowToUser>
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	9d e2       	ldi	r25, 0x2D	; 45
     c00:	e2 e2       	ldi	r30, 0x22	; 34
     c02:	81 50       	subi	r24, 0x01	; 1
     c04:	90 40       	sbci	r25, 0x00	; 0
     c06:	e0 40       	sbci	r30, 0x00	; 0
     c08:	e1 f7       	brne	.-8      	; 0xc02 <__stack+0x3a3>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <__stack+0x3ad>
     c0c:	00 00       	nop
     c0e:	3e cf       	rjmp	.-388    	; 0xa8c <__stack+0x22d>
					case '10':
						ShowToUser = AIR_COND_MENU;			//na5od karar
					break;
					*/
					default:
					UART_enuSendString("\r\nInvalid Choice\r\n");
     c10:	8a ee       	ldi	r24, 0xEA	; 234
     c12:	92 e0       	ldi	r25, 0x02	; 2
     c14:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
     c18:	ff ef       	ldi	r31, 0xFF	; 255
     c1a:	23 ed       	ldi	r18, 0xD3	; 211
     c1c:	30 e3       	ldi	r19, 0x30	; 48
     c1e:	f1 50       	subi	r31, 0x01	; 1
     c20:	20 40       	sbci	r18, 0x00	; 0
     c22:	30 40       	sbci	r19, 0x00	; 0
     c24:	e1 f7       	brne	.-8      	; 0xc1e <__stack+0x3bf>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <__stack+0x3c9>
     c28:	00 00       	nop
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
     c2a:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <ShowToUser>
					break;
     c2e:	2e cf       	rjmp	.-420    	; 0xa8c <__stack+0x22d>
				}
			}
			switch (ShowToUser)
     c30:	1a 30       	cpi	r17, 0x0A	; 10
     c32:	09 f4       	brne	.+2      	; 0xc36 <__stack+0x3d7>
     c34:	b4 c0       	rjmp	.+360    	; 0xd9e <__stack+0x53f>
     c36:	a0 f5       	brcc	.+104    	; 0xca0 <__stack+0x441>
     c38:	18 30       	cpi	r17, 0x08	; 8
     c3a:	09 f0       	breq	.+2      	; 0xc3e <__stack+0x3df>
     c3c:	21 cf       	rjmp	.-446    	; 0xa80 <__stack+0x221>
						}
						
				break;
				
				case DIMMER_MENU:
					UART_enuSendString("\r\nEnter The Percentage of Brightness: ");
     c3e:	89 e8       	ldi	r24, 0x89	; 137
     c40:	93 e0       	ldi	r25, 0x03	; 3
     c42:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
					UART_enuRecieveChar(&Dimmer_Percentage_Tens);
     c46:	ce 01       	movw	r24, r28
     c48:	8c 5b       	subi	r24, 0xBC	; 188
     c4a:	9f 4f       	sbci	r25, 0xFF	; 255
     c4c:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Tens);
     c50:	25 96       	adiw	r28, 0x05	; 5
     c52:	8f ad       	ldd	r24, Y+63	; 0x3f
     c54:	25 97       	sbiw	r28, 0x05	; 5
     c56:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <UART_enuSendChar>
					Dimmer_Percentage_Tens = Dimmer_Percentage_Tens - '0';
     c5a:	25 96       	adiw	r28, 0x05	; 5
     c5c:	8f ad       	ldd	r24, Y+63	; 0x3f
     c5e:	25 97       	sbiw	r28, 0x05	; 5
     c60:	80 53       	subi	r24, 0x30	; 48
     c62:	25 96       	adiw	r28, 0x05	; 5
     c64:	8f af       	std	Y+63, r24	; 0x3f
     c66:	25 97       	sbiw	r28, 0x05	; 5
					
					UART_enuRecieveChar(&Dimmer_Percentage_Ones);
     c68:	ce 01       	movw	r24, r28
     c6a:	8d 5b       	subi	r24, 0xBD	; 189
     c6c:	9f 4f       	sbci	r25, 0xFF	; 255
     c6e:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Ones);
     c72:	24 96       	adiw	r28, 0x04	; 4
     c74:	8f ad       	ldd	r24, Y+63	; 0x3f
     c76:	24 97       	sbiw	r28, 0x04	; 4
     c78:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <UART_enuSendChar>
					Dimmer_Percentage_Ones = Dimmer_Percentage_Ones -'0';
     c7c:	24 96       	adiw	r28, 0x04	; 4
     c7e:	8f ad       	ldd	r24, Y+63	; 0x3f
     c80:	24 97       	sbiw	r28, 0x04	; 4
     c82:	90 ed       	ldi	r25, 0xD0	; 208
     c84:	98 0f       	add	r25, r24
     c86:	24 96       	adiw	r28, 0x04	; 4
     c88:	9f af       	std	Y+63, r25	; 0x3f
     c8a:	24 97       	sbiw	r28, 0x04	; 4
					
					Dimmer_Percentage =10*Dimmer_Percentage_Tens + Dimmer_Percentage_Ones;
     c8c:	25 96       	adiw	r28, 0x05	; 5
     c8e:	8f ad       	ldd	r24, Y+63	; 0x3f
     c90:	25 97       	sbiw	r28, 0x05	; 5
     c92:	b9 2e       	mov	r11, r25
     c94:	2a e0       	ldi	r18, 0x0A	; 10
     c96:	82 9f       	mul	r24, r18
     c98:	b0 0c       	add	r11, r0
     c9a:	11 24       	eor	r1, r1
					
					SPI_ui8TransmitRecive(Dimmer_Percentage);
     c9c:	8b 2d       	mov	r24, r11
     c9e:	9c c0       	rjmp	.+312    	; 0xdd8 <__stack+0x579>
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
					break;
				}
			}
			switch (ShowToUser)
     ca0:	1b 30       	cpi	r17, 0x0B	; 11
     ca2:	09 f4       	brne	.+2      	; 0xca6 <__stack+0x447>
     ca4:	9f c0       	rjmp	.+318    	; 0xde4 <__stack+0x585>
     ca6:	1f 30       	cpi	r17, 0x0F	; 15
     ca8:	09 f0       	breq	.+2      	; 0xcac <__stack+0x44d>
     caa:	ea ce       	rjmp	.-556    	; 0xa80 <__stack+0x221>
			{
				case PRIORITIES_MENU:
						UART_enuSendString("\r\n1-Remoted");
     cac:	8d ef       	ldi	r24, 0xFD	; 253
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
						UART_enuSendString("\r\n2-Promoted");
     cb4:	89 e0       	ldi	r24, 0x09	; 9
     cb6:	93 e0       	ldi	r25, 0x03	; 3
     cb8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
						UART_enuSendString("\r\n3-Nonremoted");
     cbc:	86 e1       	ldi	r24, 0x16	; 22
     cbe:	93 e0       	ldi	r25, 0x03	; 3
     cc0:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
						UART_enuSendString("\r\n\r\nPriority Arrangment: Promoted > Nonremoted (LCD+Keypad) > Remoted\r\n");
     cc4:	85 e2       	ldi	r24, 0x25	; 37
     cc6:	93 e0       	ldi	r25, 0x03	; 3
     cc8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
						UART_enuRecieveChar(&UART_CHOICE);
     ccc:	ce 01       	movw	r24, r28
     cce:	8b 5b       	subi	r24, 0xBB	; 187
     cd0:	9f 4f       	sbci	r25, 0xFF	; 255
     cd2:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <UART_enuRecieveChar>
						if (UART_CHOICE == '1')
     cd6:	26 96       	adiw	r28, 0x06	; 6
     cd8:	8f ad       	ldd	r24, Y+63	; 0x3f
     cda:	26 97       	sbiw	r28, 0x06	; 6
     cdc:	81 33       	cpi	r24, 0x31	; 49
     cde:	69 f4       	brne	.+26     	; 0xcfa <__stack+0x49b>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = REMOTED_USER;
     ce0:	28 96       	adiw	r28, 0x08	; 8
     ce2:	8f ad       	ldd	r24, Y+63	; 0x3f
     ce4:	28 97       	sbiw	r28, 0x08	; 8
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	ec 0f       	add	r30, r28
     cec:	fd 1f       	adc	r31, r29
     cee:	68 9e       	mul	r6, r24
     cf0:	e0 0d       	add	r30, r0
     cf2:	f1 1d       	adc	r31, r1
     cf4:	11 24       	eor	r1, r1
     cf6:	82 e0       	ldi	r24, 0x02	; 2
     cf8:	0e c0       	rjmp	.+28     	; 0xd16 <__stack+0x4b7>
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
							ShowToUser = LOG_OUT_CHOICE;
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
						else if (UART_CHOICE == '2')
     cfa:	82 33       	cpi	r24, 0x32	; 50
     cfc:	21 f5       	brne	.+72     	; 0xd46 <__stack+0x4e7>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = PROMOTED_USER;
     cfe:	28 96       	adiw	r28, 0x08	; 8
     d00:	8f ad       	ldd	r24, Y+63	; 0x3f
     d02:	28 97       	sbiw	r28, 0x08	; 8
     d04:	e1 e0       	ldi	r30, 0x01	; 1
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	ec 0f       	add	r30, r28
     d0a:	fd 1f       	adc	r31, r29
     d0c:	68 9e       	mul	r6, r24
     d0e:	e0 0d       	add	r30, r0
     d10:	f1 1d       	adc	r31, r1
     d12:	11 24       	eor	r1, r1
     d14:	83 e0       	ldi	r24, 0x03	; 3
     d16:	82 87       	std	Z+10, r24	; 0x0a
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
     d18:	9e 01       	movw	r18, r28
     d1a:	29 5b       	subi	r18, 0xB9	; 185
     d1c:	3f 4f       	sbci	r19, 0xFF	; 255
     d1e:	69 01       	movw	r12, r18
     d20:	e0 80       	ld	r14, Z
     d22:	f1 80       	ldd	r15, Z+1	; 0x01
     d24:	02 81       	ldd	r16, Z+2	; 0x02
     d26:	13 81       	ldd	r17, Z+3	; 0x03
     d28:	24 81       	ldd	r18, Z+4	; 0x04
     d2a:	35 81       	ldd	r19, Z+5	; 0x05
     d2c:	46 81       	ldd	r20, Z+6	; 0x06
     d2e:	57 81       	ldd	r21, Z+7	; 0x07
     d30:	60 85       	ldd	r22, Z+8	; 0x08
     d32:	71 85       	ldd	r23, Z+9	; 0x09
     d34:	0e 94 51 00 	call	0xa2	; 0xa2 <LoginSystem_SaveNewUser>
							ShowToUser = LOG_OUT_CHOICE;
     d38:	80 92 1e 05 	sts	0x051E, r8	; 0x80051e <ShowToUser>
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
     d3c:	8d e6       	ldi	r24, 0x6D	; 109
     d3e:	93 e0       	ldi	r25, 0x03	; 3
     d40:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
     d44:	98 ce       	rjmp	.-720    	; 0xa76 <__stack+0x217>
						else if (UART_CHOICE == '3')
     d46:	83 33       	cpi	r24, 0x33	; 51
     d48:	e1 f4       	brne	.+56     	; 0xd82 <__stack+0x523>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = LCD_KEYPAD_USER;
     d4a:	28 96       	adiw	r28, 0x08	; 8
     d4c:	8f ad       	ldd	r24, Y+63	; 0x3f
     d4e:	28 97       	sbiw	r28, 0x08	; 8
     d50:	e1 e0       	ldi	r30, 0x01	; 1
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	ec 0f       	add	r30, r28
     d56:	fd 1f       	adc	r31, r29
     d58:	68 9e       	mul	r6, r24
     d5a:	e0 0d       	add	r30, r0
     d5c:	f1 1d       	adc	r31, r1
     d5e:	11 24       	eor	r1, r1
     d60:	12 86       	std	Z+10, r1	; 0x0a
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
     d62:	ce 01       	movw	r24, r28
     d64:	89 5b       	subi	r24, 0xB9	; 185
     d66:	9f 4f       	sbci	r25, 0xFF	; 255
     d68:	6c 01       	movw	r12, r24
     d6a:	e0 80       	ld	r14, Z
     d6c:	f1 80       	ldd	r15, Z+1	; 0x01
     d6e:	02 81       	ldd	r16, Z+2	; 0x02
     d70:	13 81       	ldd	r17, Z+3	; 0x03
     d72:	24 81       	ldd	r18, Z+4	; 0x04
     d74:	35 81       	ldd	r19, Z+5	; 0x05
     d76:	46 81       	ldd	r20, Z+6	; 0x06
     d78:	57 81       	ldd	r21, Z+7	; 0x07
     d7a:	60 85       	ldd	r22, Z+8	; 0x08
     d7c:	71 85       	ldd	r23, Z+9	; 0x09
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	d9 cf       	rjmp	.-78     	; 0xd34 <__stack+0x4d5>
							ShowToUser = LOG_OUT_CHOICE;
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
						else
						{
							UART_enuSendString("\r\nInvalid Choice\r\n");
     d82:	8a ee       	ldi	r24, 0xEA	; 234
     d84:	92 e0       	ldi	r25, 0x02	; 2
     d86:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
     d8a:	9f ef       	ldi	r25, 0xFF	; 255
     d8c:	e3 ed       	ldi	r30, 0xD3	; 211
     d8e:	f0 e3       	ldi	r31, 0x30	; 48
     d90:	91 50       	subi	r25, 0x01	; 1
     d92:	e0 40       	sbci	r30, 0x00	; 0
     d94:	f0 40       	sbci	r31, 0x00	; 0
     d96:	e1 f7       	brne	.-8      	; 0xd90 <__stack+0x531>
     d98:	00 c0       	rjmp	.+0      	; 0xd9a <__stack+0x53b>
     d9a:	00 00       	nop
     d9c:	6c ce       	rjmp	.-808    	; 0xa76 <__stack+0x217>
					SPI_ui8TransmitRecive(Dimmer_Percentage);
					ShowToUser=LOG_OUT_CHOICE;
				break;
				
				case DOOR_MENU:
					UART_enuSendString("\r\nDoor Options \r\n 1-Open Door\r\n 2-Close Door\r\n 0-Return to main menu\r\n ");
     d9e:	80 eb       	ldi	r24, 0xB0	; 176
     da0:	93 e0       	ldi	r25, 0x03	; 3
     da2:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     da6:	ce 01       	movw	r24, r28
     da8:	8b 5b       	subi	r24, 0xBB	; 187
     daa:	9f 4f       	sbci	r25, 0xFF	; 255
     dac:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     db0:	26 96       	adiw	r28, 0x06	; 6
     db2:	8f ad       	ldd	r24, Y+63	; 0x3f
     db4:	26 97       	sbiw	r28, 0x06	; 6
     db6:	81 33       	cpi	r24, 0x31	; 49
     db8:	61 f4       	brne	.+24     	; 0xdd2 <__stack+0x573>
					{
						SPI_ui8TransmitRecive(OPEN_DOOR_COMMAND);
     dba:	8d e0       	ldi	r24, 0x0D	; 13
     dbc:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
						SetBit(&Current_State,6);	
     dc0:	66 e0       	ldi	r22, 0x06	; 6
     dc2:	ce 01       	movw	r24, r28
     dc4:	8e 5b       	subi	r24, 0xBE	; 190
     dc6:	9f 4f       	sbci	r25, 0xFF	; 255
     dc8:	0e 94 1b 02 	call	0x436	; 0x436 <SetBit>
						ShowToUser = LOG_OUT_CHOICE;
     dcc:	80 92 1e 05 	sts	0x051E, r8	; 0x80051e <ShowToUser>
     dd0:	52 ce       	rjmp	.-860    	; 0xa76 <__stack+0x217>
					}
					else if(UART_CHOICE == '2')
     dd2:	82 33       	cpi	r24, 0x32	; 50
     dd4:	21 f4       	brne	.+8      	; 0xdde <__stack+0x57f>
					{
						SPI_ui8TransmitRecive(CLOSE_DOOR_COMMAND);
     dd6:	8e e0       	ldi	r24, 0x0E	; 14
     dd8:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
     ddc:	f7 cf       	rjmp	.-18     	; 0xdcc <__stack+0x56d>
						ShowToUser = LOG_OUT_CHOICE;
					}
					else if (UART_CHOICE == '0') 
     dde:	80 33       	cpi	r24, 0x30	; 48
     de0:	69 f5       	brne	.+90     	; 0xe3c <__stack+0x5dd>
     de2:	29 c0       	rjmp	.+82     	; 0xe36 <__stack+0x5d7>
						{ShowToUser = MAIN_MENU;} 
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = DOOR_MENU;}
				break;
				
				case LOG_OUT_CHOICE:
					UART_enuSendString("\r\n1-Log Out\r\n2-Return to main menu\r\n");
     de4:	8c e0       	ldi	r24, 0x0C	; 12
     de6:	94 e0       	ldi	r25, 0x04	; 4
     de8:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     dec:	ce 01       	movw	r24, r28
     dee:	8b 5b       	subi	r24, 0xBB	; 187
     df0:	9f 4f       	sbci	r25, 0xFF	; 255
     df2:	0e 94 ca 0d 	call	0x1b94	; 0x1b94 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     df6:	26 96       	adiw	r28, 0x06	; 6
     df8:	8f ad       	ldd	r24, Y+63	; 0x3f
     dfa:	26 97       	sbiw	r28, 0x06	; 6
     dfc:	81 33       	cpi	r24, 0x31	; 49
     dfe:	c9 f4       	brne	.+50     	; 0xe32 <__stack+0x5d3>
						{
							Program_Status_Flag = IDLE_STATUS;	
     e00:	87 e0       	ldi	r24, 0x07	; 7
     e02:	29 96       	adiw	r28, 0x09	; 9
     e04:	8f af       	std	Y+63, r24	; 0x3f
     e06:	29 97       	sbiw	r28, 0x09	; 9
							ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu 
     e08:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <ShowToUser>
							UART_enuSendString("\r\nLogged Out\r\n");
     e0c:	81 e3       	ldi	r24, 0x31	; 49
     e0e:	94 e0       	ldi	r25, 0x04	; 4
     e10:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
							if (LoginSystem_u8AdminOnlineFlag == TRUE)	//If an Admin was online and wants to log out
     e14:	80 91 20 05 	lds	r24, 0x0520	; 0x800520 <LoginSystem_u8AdminOnlineFlag>
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	19 f4       	brne	.+6      	; 0xe22 <__stack+0x5c3>
								LoginSystem_u8AdminOnlineFlag = FALSE;	
     e1c:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <LoginSystem_u8AdminOnlineFlag>
     e20:	2a ce       	rjmp	.-940    	; 0xa76 <__stack+0x217>
							else if (LoginSystem_u8PromotedUserOnlineFlag == TRUE)	//If a promoted user was online and wants to log out
     e22:	80 91 1f 05 	lds	r24, 0x051F	; 0x80051f <LoginSystem_u8PromotedUserOnlineFlag>
     e26:	81 30       	cpi	r24, 0x01	; 1
     e28:	09 f0       	breq	.+2      	; 0xe2c <__stack+0x5cd>
     e2a:	25 ce       	rjmp	.-950    	; 0xa76 <__stack+0x217>
								LoginSystem_u8PromotedUserOnlineFlag = FALSE;
     e2c:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <LoginSystem_u8PromotedUserOnlineFlag>
     e30:	22 ce       	rjmp	.-956    	; 0xa76 <__stack+0x217>
						}
				
					else if(UART_CHOICE == '2')
     e32:	82 33       	cpi	r24, 0x32	; 50
     e34:	19 f4       	brne	.+6      	; 0xe3c <__stack+0x5dd>
						{ShowToUser = MAIN_MENU;}
     e36:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <ShowToUser>
     e3a:	1d ce       	rjmp	.-966    	; 0xa76 <__stack+0x217>
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = LOG_OUT_CHOICE;}
     e3c:	88 ef       	ldi	r24, 0xF8	; 248
     e3e:	93 e0       	ldi	r25, 0x03	; 3
     e40:	0e 94 d1 0d 	call	0x1ba2	; 0x1ba2 <UART_enuSendString>
     e44:	10 93 1e 05 	sts	0x051E, r17	; 0x80051e <ShowToUser>
     e48:	16 ce       	rjmp	.-980    	; 0xa76 <__stack+0x217>
				u8 LoginSystem_u8TrueFlag;
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     e4a:	4b e0       	ldi	r20, 0x0B	; 11
     e4c:	e4 2e       	mov	r14, r20
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
					_delay_ms(700);
					if (LoginSystem_u8TrialsLeft == 0)
					{
						Program_Status_Flag = BLOCKING_STATUS;
     e4e:	56 e0       	ldi	r21, 0x06	; 6
     e50:	85 2e       	mov	r8, r21
							LCD_enuDisplayString("Successfully");
							_delay_ms(700);
							LCD_enuClearDisplay();
							LCD_enuDisplayString("Welcome User");
							_delay_ms(700);
							Program_Status_Flag = USER_MENU_STATUS;
     e52:	65 e0       	ldi	r22, 0x05	; 5
     e54:	66 2e       	mov	r6, r22
				
			}
		}
		
		//if (Program_Status_Flag == USER_LOGIN_PAGE_STATUS);
		while (Program_Status_Flag == USER_LOGIN_PAGE_STATUS)///off line user should have interrupt
     e56:	29 96       	adiw	r28, 0x09	; 9
     e58:	8f ad       	ldd	r24, Y+63	; 0x3f
     e5a:	29 97       	sbiw	r28, 0x09	; 9
     e5c:	83 30       	cpi	r24, 0x03	; 3
     e5e:	09 f0       	breq	.+2      	; 0xe62 <__stack+0x603>
     e60:	c6 c0       	rjmp	.+396    	; 0xfee <__stack+0x78f>
		{	
				LCD_enuClearDisplay();
     e62:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
				LCD_enuDisplayString("User Login");
     e66:	80 e4       	ldi	r24, 0x40	; 64
     e68:	94 e0       	ldi	r25, 0x04	; 4
     e6a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     e6e:	60 e0       	ldi	r22, 0x00	; 0
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Attempt Detected");
     e76:	8b e4       	ldi	r24, 0x4B	; 75
     e78:	94 e0       	ldi	r25, 0x04	; 4
     e7a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
     e7e:	3f ef       	ldi	r19, 0xFF	; 255
     e80:	8d e2       	ldi	r24, 0x2D	; 45
     e82:	92 e2       	ldi	r25, 0x22	; 34
     e84:	31 50       	subi	r19, 0x01	; 1
     e86:	80 40       	sbci	r24, 0x00	; 0
     e88:	90 40       	sbci	r25, 0x00	; 0
     e8a:	e1 f7       	brne	.-8      	; 0xe84 <__stack+0x625>
     e8c:	00 c0       	rjmp	.+0      	; 0xe8e <__stack+0x62f>
     e8e:	00 00       	nop
				_delay_ms(700);
				u8 LoginSystem_u8TrueFlag;
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
     e90:	be 01       	movw	r22, r28
     e92:	68 5c       	subi	r22, 0xC8	; 200
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	ce 01       	movw	r24, r28
     e98:	cd 96       	adiw	r24, 0x3d	; 61
     e9a:	0e 94 c4 00 	call	0x188	; 0x188 <LoginSystem_enuGetDataFromUserByKeypad>
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     e9e:	f1 2c       	mov	r15, r1
     ea0:	28 96       	adiw	r28, 0x08	; 8
     ea2:	8f ad       	ldd	r24, Y+63	; 0x3f
     ea4:	28 97       	sbiw	r28, 0x08	; 8
     ea6:	f8 16       	cp	r15, r24
     ea8:	08 f0       	brcs	.+2      	; 0xeac <__stack+0x64d>
     eaa:	9c c0       	rjmp	.+312    	; 0xfe4 <__stack+0x785>
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     eac:	0f 2d       	mov	r16, r15
     eae:	10 e0       	ldi	r17, 0x00	; 0
     eb0:	e0 9e       	mul	r14, r16
     eb2:	60 01       	movw	r12, r0
     eb4:	e1 9e       	mul	r14, r17
     eb6:	d0 0c       	add	r13, r0
     eb8:	11 24       	eor	r1, r1
     eba:	be 01       	movw	r22, r28
     ebc:	63 5c       	subi	r22, 0xC3	; 195
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	8c 0f       	add	r24, r28
     ec6:	9d 1f       	adc	r25, r29
     ec8:	8c 0d       	add	r24, r12
     eca:	9d 1d       	adc	r25, r13
     ecc:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     ed0:	88 23       	and	r24, r24
     ed2:	99 f0       	breq	.+38     	; 0xefa <__stack+0x69b>
     ed4:	c6 01       	movw	r24, r12
     ed6:	05 96       	adiw	r24, 0x05	; 5
     ed8:	be 01       	movw	r22, r28
     eda:	68 5c       	subi	r22, 0xC8	; 200
     edc:	7f 4f       	sbci	r23, 0xFF	; 255
     ede:	e1 e0       	ldi	r30, 0x01	; 1
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	ec 0f       	add	r30, r28
     ee4:	fd 1f       	adc	r31, r29
     ee6:	8e 0f       	add	r24, r30
     ee8:	9f 1f       	adc	r25, r31
     eea:	0e 94 48 01 	call	0x290	; 0x290 <LoginSystem_u8Strcmp>
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	81 11       	cpse	r24, r1
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <__stack+0x697>
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	79 2e       	mov	r7, r25
     ef8:	01 c0       	rjmp	.+2      	; 0xefc <__stack+0x69d>
     efa:	71 2c       	mov	r7, r1
					if ( LoginSystem_u8TrueFlag == TRUE  )
     efc:	f1 e0       	ldi	r31, 0x01	; 1
     efe:	7f 12       	cpse	r7, r31
     f00:	6f c0       	rjmp	.+222    	; 0xfe0 <__stack+0x781>
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
     f02:	e0 9e       	mul	r14, r16
     f04:	f0 01       	movw	r30, r0
     f06:	e1 9e       	mul	r14, r17
     f08:	f0 0d       	add	r31, r0
     f0a:	11 24       	eor	r1, r1
     f0c:	21 e0       	ldi	r18, 0x01	; 1
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	2c 0f       	add	r18, r28
     f12:	3d 1f       	adc	r19, r29
     f14:	e2 0f       	add	r30, r18
     f16:	f3 1f       	adc	r31, r19
     f18:	82 85       	ldd	r24, Z+10	; 0x0a
     f1a:	88 23       	and	r24, r24
     f1c:	a9 f1       	breq	.+106    	; 0xf88 <__stack+0x729>
					}
					
				}
				if (LoginSystem_u8TrueFlag == FALSE)
				{
					LoginSystem_u8TrialsLeft--;
     f1e:	9a 94       	dec	r9
					LCD_enuClearDisplay();
     f20:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Wrong Username");
     f24:	8c e5       	ldi	r24, 0x5C	; 92
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     f2c:	60 e0       	ldi	r22, 0x00	; 0
     f2e:	81 e0       	ldi	r24, 0x01	; 1
     f30:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("or Password");
     f34:	80 ee       	ldi	r24, 0xE0	; 224
     f36:	91 e0       	ldi	r25, 0x01	; 1
     f38:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
     f3c:	3f ef       	ldi	r19, 0xFF	; 255
     f3e:	8d e2       	ldi	r24, 0x2D	; 45
     f40:	92 e2       	ldi	r25, 0x22	; 34
     f42:	31 50       	subi	r19, 0x01	; 1
     f44:	80 40       	sbci	r24, 0x00	; 0
     f46:	90 40       	sbci	r25, 0x00	; 0
     f48:	e1 f7       	brne	.-8      	; 0xf42 <__stack+0x6e3>
     f4a:	00 c0       	rjmp	.+0      	; 0xf4c <__stack+0x6ed>
     f4c:	00 00       	nop
					_delay_ms(700);
					LCD_enuClearDisplay();
     f4e:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Remaining Trials: ");
     f52:	8e ee       	ldi	r24, 0xEE	; 238
     f54:	91 e0       	ldi	r25, 0x01	; 1
     f56:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
     f62:	89 2d       	mov	r24, r9
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 eb 0b 	call	0x17d6	; 0x17d6 <LCD_enuDisplayUnsignedInteger>
     f6a:	ef ef       	ldi	r30, 0xFF	; 255
     f6c:	fd e2       	ldi	r31, 0x2D	; 45
     f6e:	22 e2       	ldi	r18, 0x22	; 34
     f70:	e1 50       	subi	r30, 0x01	; 1
     f72:	f0 40       	sbci	r31, 0x00	; 0
     f74:	20 40       	sbci	r18, 0x00	; 0
     f76:	e1 f7       	brne	.-8      	; 0xf70 <__stack+0x711>
     f78:	00 c0       	rjmp	.+0      	; 0xf7a <__stack+0x71b>
     f7a:	00 00       	nop
					_delay_ms(700);
					if (LoginSystem_u8TrialsLeft == 0)
     f7c:	91 10       	cpse	r9, r1
     f7e:	35 c0       	rjmp	.+106    	; 0xfea <__stack+0x78b>
					{
						Program_Status_Flag = BLOCKING_STATUS;
     f80:	29 96       	adiw	r28, 0x09	; 9
     f82:	8f ae       	std	Y+63, r8	; 0x3f
     f84:	29 97       	sbiw	r28, 0x09	; 9
     f86:	31 c0       	rjmp	.+98     	; 0xfea <__stack+0x78b>
					if ( LoginSystem_u8TrueFlag == TRUE  )
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
						{
							LoginSystem_u8TrialsLeft =3;
							LCD_enuClearDisplay();
     f88:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
							LCD_enuDisplayString("Logged in");
     f8c:	8b e6       	ldi	r24, 0x6B	; 107
     f8e:	94 e0       	ldi	r25, 0x04	; 4
     f90:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
							LCD_enuDisplayString("Successfully");
     f9c:	85 e9       	ldi	r24, 0x95	; 149
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
     fa4:	3f ef       	ldi	r19, 0xFF	; 255
     fa6:	8d e2       	ldi	r24, 0x2D	; 45
     fa8:	92 e2       	ldi	r25, 0x22	; 34
     faa:	31 50       	subi	r19, 0x01	; 1
     fac:	80 40       	sbci	r24, 0x00	; 0
     fae:	90 40       	sbci	r25, 0x00	; 0
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <__stack+0x74b>
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <__stack+0x755>
     fb4:	00 00       	nop
							_delay_ms(700);
							LCD_enuClearDisplay();
     fb6:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
							LCD_enuDisplayString("Welcome User");
     fba:	85 e7       	ldi	r24, 0x75	; 117
     fbc:	94 e0       	ldi	r25, 0x04	; 4
     fbe:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
     fc2:	ef ef       	ldi	r30, 0xFF	; 255
     fc4:	fd e2       	ldi	r31, 0x2D	; 45
     fc6:	22 e2       	ldi	r18, 0x22	; 34
     fc8:	e1 50       	subi	r30, 0x01	; 1
     fca:	f0 40       	sbci	r31, 0x00	; 0
     fcc:	20 40       	sbci	r18, 0x00	; 0
     fce:	e1 f7       	brne	.-8      	; 0xfc8 <__stack+0x769>
     fd0:	00 c0       	rjmp	.+0      	; 0xfd2 <__stack+0x773>
     fd2:	00 00       	nop
							_delay_ms(700);
							Program_Status_Flag = USER_MENU_STATUS;
     fd4:	29 96       	adiw	r28, 0x09	; 9
     fd6:	6f ae       	std	Y+63, r6	; 0x3f
     fd8:	29 97       	sbiw	r28, 0x09	; 9
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
					if ( LoginSystem_u8TrueFlag == TRUE  )
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
						{
							LoginSystem_u8TrialsLeft =3;
     fda:	33 e0       	ldi	r19, 0x03	; 3
     fdc:	93 2e       	mov	r9, r19
     fde:	3b cf       	rjmp	.-394    	; 0xe56 <__stack+0x5f7>
				LCD_enuDisplayString("Attempt Detected");
				_delay_ms(700);
				u8 LoginSystem_u8TrueFlag;
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     fe0:	f3 94       	inc	r15
     fe2:	5e cf       	rjmp	.-324    	; 0xea0 <__stack+0x641>
							break;
						}
					}
					
				}
				if (LoginSystem_u8TrueFlag == FALSE)
     fe4:	71 10       	cpse	r7, r1
     fe6:	37 cf       	rjmp	.-402    	; 0xe56 <__stack+0x5f7>
     fe8:	9a cf       	rjmp	.-204    	; 0xf1e <__stack+0x6bf>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
					_delay_ms(700);
					if (LoginSystem_u8TrialsLeft == 0)
					{
						Program_Status_Flag = BLOCKING_STATUS;
     fea:	71 2c       	mov	r7, r1
     fec:	34 cf       	rjmp	.-408    	; 0xe56 <__stack+0x5f7>
				break;
				
				case '2':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
					ToggleBit(&Current_State,2);
					ShowToUser = LOG_OUT_CHOICE;
     fee:	8b e0       	ldi	r24, 0x0B	; 11
     ff0:	f8 2e       	mov	r15, r24
					break;
					
					case '2':
					SPI_ui8TransmitRecive(DIMMER);
					
					ShowToUser = DIMMER_MENU;
     ff2:	98 e0       	ldi	r25, 0x08	; 8
     ff4:	e9 2e       	mov	r14, r25
				break;
				
				case '2':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
					ToggleBit(&Current_State,2);
					ShowToUser = LOG_OUT_CHOICE;
     ff6:	1b e0       	ldi	r17, 0x0B	; 11
					ToggleBit(&Current_State,3);
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '4':
					ShowToUser = MORE_MENU;
     ff8:	20 e1       	ldi	r18, 0x10	; 16
     ffa:	d2 2e       	mov	r13, r18

		}
/************************************************************************************************************/
/************************************************************************************************************/

		while (Program_Status_Flag == USER_MENU_STATUS)//off line user menu
     ffc:	29 96       	adiw	r28, 0x09	; 9
     ffe:	8f ad       	ldd	r24, Y+63	; 0x3f
    1000:	29 97       	sbiw	r28, 0x09	; 9
    1002:	85 30       	cpi	r24, 0x05	; 5
    1004:	09 f0       	breq	.+2      	; 0x1008 <__stack+0x7a9>
    1006:	24 c1       	rjmp	.+584    	; 0x1250 <__stack+0x9f1>
		{
			while(ShowToUser == MAIN_MENU)
    1008:	80 91 1e 05 	lds	r24, 0x051E	; 0x80051e <ShowToUser>
    100c:	81 11       	cpse	r24, r1
    100e:	6b c0       	rjmp	.+214    	; 0x10e6 <__stack+0x887>
			{
				LCD_enuClearDisplay();			
    1010:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
				LCD_enuDisplayString("1:Room1 2:Room2");
    1014:	82 e8       	ldi	r24, 0x82	; 130
    1016:	94 e0       	ldi	r25, 0x04	; 4
    1018:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("3:Room3 4:More");
    1024:	82 e9       	ldi	r24, 0x92	; 146
    1026:	94 e0       	ldi	r25, 0x04	; 4
    1028:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
    102c:	ce 01       	movw	r24, r28
    102e:	8a 5b       	subi	r24, 0xBA	; 186
    1030:	9f 4f       	sbci	r25, 0xFF	; 255
    1032:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Keypad_enuGetPressedKey>
				switch (Keypad_Pressed_Key)
    1036:	27 96       	adiw	r28, 0x07	; 7
    1038:	8f ad       	ldd	r24, Y+63	; 0x3f
    103a:	27 97       	sbiw	r28, 0x07	; 7
    103c:	82 33       	cpi	r24, 0x32	; 50
    103e:	79 f0       	breq	.+30     	; 0x105e <__stack+0x7ff>
    1040:	38 f4       	brcc	.+14     	; 0x1050 <__stack+0x7f1>
    1042:	81 33       	cpi	r24, 0x31	; 49
    1044:	e9 f4       	brne	.+58     	; 0x1080 <__stack+0x821>
				{
				case '1':
					SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,1);
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	10 c0       	rjmp	.+32     	; 0x1070 <__stack+0x811>
				LCD_enuClearDisplay();			
				LCD_enuDisplayString("1:Room1 2:Room2");
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
				LCD_enuDisplayString("3:Room3 4:More");
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
				switch (Keypad_Pressed_Key)
    1050:	83 33       	cpi	r24, 0x33	; 51
    1052:	51 f0       	breq	.+20     	; 0x1068 <__stack+0x809>
    1054:	84 33       	cpi	r24, 0x34	; 52
    1056:	a1 f4       	brne	.+40     	; 0x1080 <__stack+0x821>
					ToggleBit(&Current_State,3);
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '4':
					ShowToUser = MORE_MENU;
    1058:	d0 92 1e 05 	sts	0x051E, r13	; 0x80051e <ShowToUser>
				break;
    105c:	d5 cf       	rjmp	.-86     	; 0x1008 <__stack+0x7a9>
					ToggleBit(&Current_State,1);
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '2':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,2);
    1064:	62 e0       	ldi	r22, 0x02	; 2
    1066:	04 c0       	rjmp	.+8      	; 0x1070 <__stack+0x811>
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '3':
					SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
    1068:	83 e0       	ldi	r24, 0x03	; 3
    106a:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,3);
    106e:	63 e0       	ldi	r22, 0x03	; 3
    1070:	ce 01       	movw	r24, r28
    1072:	8e 5b       	subi	r24, 0xBE	; 190
    1074:	9f 4f       	sbci	r25, 0xFF	; 255
    1076:	0e 94 26 02 	call	0x44c	; 0x44c <ToggleBit>
					ShowToUser = LOG_OUT_CHOICE;
    107a:	10 93 1e 05 	sts	0x051E, r17	; 0x80051e <ShowToUser>
				break;
    107e:	c4 cf       	rjmp	.-120    	; 0x1008 <__stack+0x7a9>
				case '4':
					ShowToUser = MORE_MENU;
				break;
				
				default:
				LCD_enuClearDisplay();
    1080:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Invalid Choice");
    1084:	81 ea       	ldi	r24, 0xA1	; 161
    1086:	94 e0       	ldi	r25, 0x04	; 4
    1088:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
    108c:	3f ef       	ldi	r19, 0xFF	; 255
    108e:	8d e2       	ldi	r24, 0x2D	; 45
    1090:	92 e2       	ldi	r25, 0x22	; 34
    1092:	31 50       	subi	r19, 0x01	; 1
    1094:	80 40       	sbci	r24, 0x00	; 0
    1096:	90 40       	sbci	r25, 0x00	; 0
    1098:	e1 f7       	brne	.-8      	; 0x1092 <__stack+0x833>
    109a:	00 c0       	rjmp	.+0      	; 0x109c <__stack+0x83d>
    109c:	00 00       	nop
    109e:	b4 cf       	rjmp	.-152    	; 0x1008 <__stack+0x7a9>
				}
			}
			
			while (ShowToUser == MORE_MENU)
			{
				LCD_enuClearDisplay();
    10a0:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
				LCD_enuDisplayString("1:Room4 2:Dimmer");
    10a4:	80 eb       	ldi	r24, 0xB0	; 176
    10a6:	94 e0       	ldi	r25, 0x04	; 4
    10a8:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    10ac:	60 e0       	ldi	r22, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("0:Return");
    10b4:	81 ec       	ldi	r24, 0xC1	; 193
    10b6:	94 e0       	ldi	r25, 0x04	; 4
    10b8:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
    10bc:	ce 01       	movw	r24, r28
    10be:	8a 5b       	subi	r24, 0xBA	; 186
    10c0:	9f 4f       	sbci	r25, 0xFF	; 255
    10c2:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Keypad_enuGetPressedKey>
				switch (Keypad_Pressed_Key)
    10c6:	27 96       	adiw	r28, 0x07	; 7
    10c8:	8f ad       	ldd	r24, Y+63	; 0x3f
    10ca:	27 97       	sbiw	r28, 0x07	; 7
    10cc:	81 33       	cpi	r24, 0x31	; 49
    10ce:	81 f4       	brne	.+32     	; 0x10f0 <__stack+0x891>
				{
					case '1':
					SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
    10d0:	84 e0       	ldi	r24, 0x04	; 4
    10d2:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,4);
    10d6:	64 e0       	ldi	r22, 0x04	; 4
    10d8:	ce 01       	movw	r24, r28
    10da:	8e 5b       	subi	r24, 0xBE	; 190
    10dc:	9f 4f       	sbci	r25, 0xFF	; 255
    10de:	0e 94 26 02 	call	0x44c	; 0x44c <ToggleBit>
					ShowToUser = LOG_OUT_CHOICE;
    10e2:	10 93 1e 05 	sts	0x051E, r17	; 0x80051e <ShowToUser>
				_delay_ms(700);
				break;
				}
			}
			
			while (ShowToUser == MORE_MENU)
    10e6:	00 91 1e 05 	lds	r16, 0x051E	; 0x80051e <ShowToUser>
    10ea:	00 31       	cpi	r16, 0x10	; 16
    10ec:	c9 f2       	breq	.-78     	; 0x10a0 <__stack+0x841>
    10ee:	1d c0       	rjmp	.+58     	; 0x112a <__stack+0x8cb>
				LCD_enuClearDisplay();
				LCD_enuDisplayString("1:Room4 2:Dimmer");
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
				LCD_enuDisplayString("0:Return");
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
				switch (Keypad_Pressed_Key)
    10f0:	82 33       	cpi	r24, 0x32	; 50
    10f2:	29 f0       	breq	.+10     	; 0x10fe <__stack+0x89f>
    10f4:	80 33       	cpi	r24, 0x30	; 48
    10f6:	49 f4       	brne	.+18     	; 0x110a <__stack+0x8ab>
					
					ShowToUser = DIMMER_MENU;
					break;
					
					case '0':
					ShowToUser = MAIN_MENU;
    10f8:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <ShowToUser>
					break;
    10fc:	f4 cf       	rjmp	.-24     	; 0x10e6 <__stack+0x887>
					ToggleBit(&Current_State,4);
					ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '2':
					SPI_ui8TransmitRecive(DIMMER);
    10fe:	8c e0       	ldi	r24, 0x0C	; 12
    1100:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
					
					ShowToUser = DIMMER_MENU;
    1104:	e0 92 1e 05 	sts	0x051E, r14	; 0x80051e <ShowToUser>
					break;
    1108:	ee cf       	rjmp	.-36     	; 0x10e6 <__stack+0x887>
					case '0':
					ShowToUser = MAIN_MENU;
					break;
					
					default:
					LCD_enuClearDisplay();
    110a:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Invalid Choice");
    110e:	81 ea       	ldi	r24, 0xA1	; 161
    1110:	94 e0       	ldi	r25, 0x04	; 4
    1112:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
    1116:	ef ef       	ldi	r30, 0xFF	; 255
    1118:	fd e2       	ldi	r31, 0x2D	; 45
    111a:	22 e2       	ldi	r18, 0x22	; 34
    111c:	e1 50       	subi	r30, 0x01	; 1
    111e:	f0 40       	sbci	r31, 0x00	; 0
    1120:	20 40       	sbci	r18, 0x00	; 0
    1122:	e1 f7       	brne	.-8      	; 0x111c <__stack+0x8bd>
    1124:	00 c0       	rjmp	.+0      	; 0x1126 <__stack+0x8c7>
    1126:	00 00       	nop
    1128:	de cf       	rjmp	.-68     	; 0x10e6 <__stack+0x887>
					_delay_ms(700);
					break;
				}
			}
			switch(ShowToUser)
    112a:	08 30       	cpi	r16, 0x08	; 8
    112c:	21 f0       	breq	.+8      	; 0x1136 <__stack+0x8d7>
    112e:	0b 30       	cpi	r16, 0x0B	; 11
    1130:	09 f4       	brne	.+2      	; 0x1134 <__stack+0x8d5>
    1132:	4f c0       	rjmp	.+158    	; 0x11d2 <__stack+0x973>
    1134:	63 cf       	rjmp	.-314    	; 0xffc <__stack+0x79d>
			{
				case DIMMER_MENU:
					LCD_enuClearDisplay();
    1136:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Brightness");
    113a:	8a ec       	ldi	r24, 0xCA	; 202
    113c:	94 e0       	ldi	r25, 0x04	; 4
    113e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Percentage:");
    114a:	85 ed       	ldi	r24, 0xD5	; 213
    114c:	94 e0       	ldi	r25, 0x04	; 4
    114e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
					Keypad_enuGetPressedKey(&Dimmer_Percentage_Tens);
    1152:	ce 01       	movw	r24, r28
    1154:	8c 5b       	subi	r24, 0xBC	; 188
    1156:	9f 4f       	sbci	r25, 0xFF	; 255
    1158:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Keypad_enuGetPressedKey>
					LCD_enuSendData(Dimmer_Percentage_Tens);
    115c:	25 96       	adiw	r28, 0x05	; 5
    115e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1160:	25 97       	sbiw	r28, 0x05	; 5
    1162:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuSendData>
					Dimmer_Percentage_Tens = Dimmer_Percentage_Tens - '0';
    1166:	25 96       	adiw	r28, 0x05	; 5
    1168:	8f ad       	ldd	r24, Y+63	; 0x3f
    116a:	25 97       	sbiw	r28, 0x05	; 5
    116c:	80 53       	subi	r24, 0x30	; 48
    116e:	25 96       	adiw	r28, 0x05	; 5
    1170:	8f af       	std	Y+63, r24	; 0x3f
    1172:	25 97       	sbiw	r28, 0x05	; 5
					Keypad_enuGetPressedKey(&Dimmer_Percentage_Ones);
    1174:	ce 01       	movw	r24, r28
    1176:	8d 5b       	subi	r24, 0xBD	; 189
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Keypad_enuGetPressedKey>
					LCD_enuSendData(Dimmer_Percentage_Ones);
    117e:	24 96       	adiw	r28, 0x04	; 4
    1180:	8f ad       	ldd	r24, Y+63	; 0x3f
    1182:	24 97       	sbiw	r28, 0x04	; 4
    1184:	0e 94 de 0b 	call	0x17bc	; 0x17bc <LCD_enuSendData>
					Dimmer_Percentage_Ones = Dimmer_Percentage_Ones -'0';
    1188:	24 96       	adiw	r28, 0x04	; 4
    118a:	8f ad       	ldd	r24, Y+63	; 0x3f
    118c:	24 97       	sbiw	r28, 0x04	; 4
    118e:	90 ed       	ldi	r25, 0xD0	; 208
    1190:	98 0f       	add	r25, r24
    1192:	24 96       	adiw	r28, 0x04	; 4
    1194:	9f af       	std	Y+63, r25	; 0x3f
    1196:	24 97       	sbiw	r28, 0x04	; 4
					Dimmer_Percentage =10*Dimmer_Percentage_Tens + Dimmer_Percentage_Ones;
    1198:	25 96       	adiw	r28, 0x05	; 5
    119a:	8f ad       	ldd	r24, Y+63	; 0x3f
    119c:	25 97       	sbiw	r28, 0x05	; 5
    119e:	b9 2e       	mov	r11, r25
    11a0:	3a e0       	ldi	r19, 0x0A	; 10
    11a2:	83 9f       	mul	r24, r19
    11a4:	b0 0c       	add	r11, r0
    11a6:	11 24       	eor	r1, r1
					SPI_ui8TransmitRecive(Dimmer_Percentage);
    11a8:	8b 2d       	mov	r24, r11
    11aa:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <SPI_ui8TransmitRecive>
    11ae:	8f ef       	ldi	r24, 0xFF	; 255
    11b0:	9d e2       	ldi	r25, 0x2D	; 45
    11b2:	e2 e2       	ldi	r30, 0x22	; 34
    11b4:	81 50       	subi	r24, 0x01	; 1
    11b6:	90 40       	sbci	r25, 0x00	; 0
    11b8:	e0 40       	sbci	r30, 0x00	; 0
    11ba:	e1 f7       	brne	.-8      	; 0x11b4 <__stack+0x955>
    11bc:	00 c0       	rjmp	.+0      	; 0x11be <__stack+0x95f>
    11be:	00 00       	nop
					_delay_ms(700);
					SetBit(&Current_State,5);
    11c0:	65 e0       	ldi	r22, 0x05	; 5
    11c2:	ce 01       	movw	r24, r28
    11c4:	8e 5b       	subi	r24, 0xBE	; 190
    11c6:	9f 4f       	sbci	r25, 0xFF	; 255
    11c8:	0e 94 1b 02 	call	0x436	; 0x436 <SetBit>
					ShowToUser=LOG_OUT_CHOICE;
    11cc:	f0 92 1e 05 	sts	0x051E, r15	; 0x80051e <ShowToUser>
				break;
    11d0:	15 cf       	rjmp	.-470    	; 0xffc <__stack+0x79d>
				
				case LOG_OUT_CHOICE:
					LCD_enuClearDisplay();
    11d2:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
					LCD_enuDisplayString("1:Log Out 2:Ret");
    11d6:	81 ee       	ldi	r24, 0xE1	; 225
    11d8:	94 e0       	ldi	r25, 0x04	; 4
    11da:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
					Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
    11de:	ce 01       	movw	r24, r28
    11e0:	8a 5b       	subi	r24, 0xBA	; 186
    11e2:	9f 4f       	sbci	r25, 0xFF	; 255
    11e4:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <Keypad_enuGetPressedKey>
					if (Keypad_Pressed_Key == '1')
    11e8:	27 96       	adiw	r28, 0x07	; 7
    11ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    11ec:	27 97       	sbiw	r28, 0x07	; 7
    11ee:	81 33       	cpi	r24, 0x31	; 49
    11f0:	c1 f4       	brne	.+48     	; 0x1222 <__stack+0x9c3>
					{
						Program_Status_Flag = IDLE_STATUS;
    11f2:	87 e0       	ldi	r24, 0x07	; 7
    11f4:	29 96       	adiw	r28, 0x09	; 9
    11f6:	8f af       	std	Y+63, r24	; 0x3f
    11f8:	29 97       	sbiw	r28, 0x09	; 9
						ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu
    11fa:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <ShowToUser>
						LCD_KEYPAD_USER_FLAG = 0;
    11fe:	10 92 1c 05 	sts	0x051C, r1	; 0x80051c <__data_end>
						LCD_enuClearDisplay();
    1202:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
						LCD_enuDisplayString("Logged Out");
    1206:	81 ef       	ldi	r24, 0xF1	; 241
    1208:	94 e0       	ldi	r25, 0x04	; 4
    120a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
    120e:	ff ef       	ldi	r31, 0xFF	; 255
    1210:	2d e2       	ldi	r18, 0x2D	; 45
    1212:	32 e2       	ldi	r19, 0x22	; 34
    1214:	f1 50       	subi	r31, 0x01	; 1
    1216:	20 40       	sbci	r18, 0x00	; 0
    1218:	30 40       	sbci	r19, 0x00	; 0
    121a:	e1 f7       	brne	.-8      	; 0x1214 <__stack+0x9b5>
    121c:	00 c0       	rjmp	.+0      	; 0x121e <__stack+0x9bf>
    121e:	00 00       	nop
    1220:	ed ce       	rjmp	.-550    	; 0xffc <__stack+0x79d>
						
						_delay_ms(700);
					}
					else if(Keypad_Pressed_Key == '2')
    1222:	82 33       	cpi	r24, 0x32	; 50
    1224:	19 f4       	brne	.+6      	; 0x122c <__stack+0x9cd>
						{ShowToUser = MAIN_MENU;}
    1226:	10 92 1e 05 	sts	0x051E, r1	; 0x80051e <ShowToUser>
    122a:	e8 ce       	rjmp	.-560    	; 0xffc <__stack+0x79d>
					else{LCD_enuClearDisplay();		LCD_enuDisplayString("Invalid Choice");	 _delay_ms(700);	ShowToUser = LOG_OUT_CHOICE;}
    122c:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
    1230:	81 ea       	ldi	r24, 0xA1	; 161
    1232:	94 e0       	ldi	r25, 0x04	; 4
    1234:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
    1238:	8f ef       	ldi	r24, 0xFF	; 255
    123a:	9d e2       	ldi	r25, 0x2D	; 45
    123c:	e2 e2       	ldi	r30, 0x22	; 34
    123e:	81 50       	subi	r24, 0x01	; 1
    1240:	90 40       	sbci	r25, 0x00	; 0
    1242:	e0 40       	sbci	r30, 0x00	; 0
    1244:	e1 f7       	brne	.-8      	; 0x123e <__stack+0x9df>
    1246:	00 c0       	rjmp	.+0      	; 0x1248 <__stack+0x9e9>
    1248:	00 00       	nop
    124a:	00 93 1e 05 	sts	0x051E, r16	; 0x80051e <ShowToUser>
    124e:	d6 ce       	rjmp	.-596    	; 0xffc <__stack+0x79d>
			}
		}//end of the LCD_KEYPAD_MENU_STATUS

	/************************************************************************************************************/
	/************************************************************************************************************/
		if(Program_Status_Flag == BLOCKING_STATUS)
    1250:	86 30       	cpi	r24, 0x06	; 6
    1252:	09 f0       	breq	.+2      	; 0x1256 <__stack+0x9f7>
    1254:	a3 ca       	rjmp	.-2746   	; 0x79c <main+0x310>
		{
			EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,BLOCKING_STATUS);
    1256:	66 e0       	ldi	r22, 0x06	; 6
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 71 09 	call	0x12e2	; 0x12e2 <EEPROM_vWriteByteToAddress>
			Blocking_Flag=TRUE;
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <Blocking_Flag>
			LCD_enuClearDisplay();
    1266:	0e 94 93 0c 	call	0x1926	; 0x1926 <LCD_enuClearDisplay>
			LCD_enuDisplayString("You are Blocked");
    126a:	8c ef       	ldi	r24, 0xFC	; 252
    126c:	94 e0       	ldi	r25, 0x04	; 4
    126e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	0e 94 75 0c 	call	0x18ea	; 0x18ea <LCD_enuSetCursorPosition>
			LCD_enuDisplayString("From The System");
    127a:	8c e0       	ldi	r24, 0x0C	; 12
    127c:	95 e0       	ldi	r25, 0x05	; 5
    127e:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <LCD_enuDisplayString>
			DIO_enuSetPinValue(DIO_u8GROUP_C,DIO_u8PIN0,DIO_u8HIGH);
    1282:	41 e0       	ldi	r20, 0x01	; 1
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	82 e0       	ldi	r24, 0x02	; 2
    1288:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
			while (Program_Status_Flag == BLOCKING_STATUS);
    128c:	29 96       	adiw	r28, 0x09	; 9
    128e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1290:	29 97       	sbiw	r28, 0x09	; 9
    1292:	86 30       	cpi	r24, 0x06	; 6
    1294:	09 f0       	breq	.+2      	; 0x1298 <__stack+0xa39>
    1296:	82 ca       	rjmp	.-2812   	; 0x79c <main+0x310>
    1298:	ff cf       	rjmp	.-2      	; 0x1298 <__stack+0xa39>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
    129a:	13 e0       	ldi	r17, 0x03	; 3
    129c:	90 cb       	rjmp	.-2272   	; 0x9be <__stack+0x15f>
					
						
				}
			}
			
			if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
    129e:	aa 20       	and	r10, r10
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <__stack+0xa45>
    12a2:	6f cb       	rjmp	.-2338   	; 0x982 <__stack+0x123>
    12a4:	19 2d       	mov	r17, r9
    12a6:	8b cb       	rjmp	.-2282   	; 0x9be <__stack+0x15f>

000012a8 <EEPROM_ui8ReadByteFromAddress>:


void EEPROM_ui8ReadByteFromAddress( const u16 u16Address ,  u8 * data)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1);
    12a8:	e1 99       	sbic	0x1c, 1	; 28
    12aa:	fe cf       	rjmp	.-4      	; 0x12a8 <EEPROM_ui8ReadByteFromAddress>
	/* Set up address register */
	EEAR = u16Address;
    12ac:	9f bb       	out	0x1f, r25	; 31
    12ae:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
    12b0:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	(*data) = EEDR;
    12b2:	8d b3       	in	r24, 0x1d	; 29
    12b4:	fb 01       	movw	r30, r22
    12b6:	80 83       	st	Z, r24
    12b8:	08 95       	ret

000012ba <EEPROM_vReadBlockFromAddress>:
}

void EEPROM_vReadBlockFromAddress(const u16 uAddress, u8* dist,const u16 size)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    12ba:	e1 99       	sbic	0x1c, 1	; 28
    12bc:	fe cf       	rjmp	.-4      	; 0x12ba <EEPROM_vReadBlockFromAddress>
    12be:	46 0f       	add	r20, r22
    12c0:	57 1f       	adc	r21, r23
    12c2:	fb 01       	movw	r30, r22
    12c4:	86 1b       	sub	r24, r22
    12c6:	97 0b       	sbc	r25, r23
	;

	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
    12c8:	e4 17       	cp	r30, r20
    12ca:	f5 07       	cpc	r31, r21
    12cc:	49 f0       	breq	.+18     	; 0x12e0 <EEPROM_vReadBlockFromAddress+0x26>
    12ce:	9c 01       	movw	r18, r24
    12d0:	2e 0f       	add	r18, r30
    12d2:	3f 1f       	adc	r19, r31
	{
		/* Set up address register */
		EEAR = uAddress + counter;
    12d4:	3f bb       	out	0x1f, r19	; 31
    12d6:	2e bb       	out	0x1e, r18	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
    12d8:	e0 9a       	sbi	0x1c, 0	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
    12da:	2d b3       	in	r18, 0x1d	; 29
    12dc:	21 93       	st	Z+, r18
    12de:	f4 cf       	rjmp	.-24     	; 0x12c8 <EEPROM_vReadBlockFromAddress+0xe>

		counter++;//increase the bytes counter
	}
}
    12e0:	08 95       	ret

000012e2 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16 uiAddress, const u8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    12e2:	e1 99       	sbic	0x1c, 1	; 28
    12e4:	fe cf       	rjmp	.-4      	; 0x12e2 <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
    12e6:	9f bb       	out	0x1f, r25	; 31
    12e8:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
    12ea:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
    12ec:	8d b3       	in	r24, 0x1d	; 29
    12ee:	86 17       	cp	r24, r22
    12f0:	19 f0       	breq	.+6      	; 0x12f8 <EEPROM_vWriteByteToAddress+0x16>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
    12f2:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
    12f4:	e2 9a       	sbi	0x1c, 2	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
    12f6:	e1 9a       	sbi	0x1c, 1	; 28
    12f8:	08 95       	ret

000012fa <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
    12fa:	46 0f       	add	r20, r22
    12fc:	57 1f       	adc	r21, r23
	u16 counter = 0;//Bytes write counter
	while (counter < size)
    12fe:	fb 01       	movw	r30, r22
    1300:	9c 01       	movw	r18, r24
    1302:	26 1b       	sub	r18, r22
    1304:	37 0b       	sbc	r19, r23
    1306:	e4 17       	cp	r30, r20
    1308:	f5 07       	cpc	r31, r21
    130a:	81 f0       	breq	.+32     	; 0x132c <EEPROM_vWriteBlockToAddress+0x32>
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    130c:	e1 99       	sbic	0x1c, 1	; 28
    130e:	fe cf       	rjmp	.-4      	; 0x130c <EEPROM_vWriteBlockToAddress+0x12>
    1310:	c9 01       	movw	r24, r18
    1312:	8e 0f       	add	r24, r30
    1314:	9f 1f       	adc	r25, r31
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
    1316:	9f bb       	out	0x1f, r25	; 31
    1318:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
    131a:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
    131c:	8d b3       	in	r24, 0x1d	; 29
    131e:	91 91       	ld	r25, Z+
    1320:	89 17       	cp	r24, r25
    1322:	89 f3       	breq	.-30     	; 0x1306 <EEPROM_vWriteBlockToAddress+0xc>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
    1324:	9d bb       	out	0x1d, r25	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
    1326:	e2 9a       	sbi	0x1c, 2	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
    1328:	e1 9a       	sbi	0x1c, 1	; 28
    132a:	ed cf       	rjmp	.-38     	; 0x1306 <EEPROM_vWriteBlockToAddress+0xc>
		{

		}
		counter++;//increase bytes counter
	}
}
    132c:	08 95       	ret

0000132e <Keypad_enuInit>:

ES_t Keypad_enuInit(void)
{
	ES_t Local_enuerrorStates = ES_NOK;

	DIO_enuSetPinDirection(C1_PORT , C1_PIN , DIO_u8OUTPUT);
    132e:	41 e0       	ldi	r20, 0x01	; 1
    1330:	63 e0       	ldi	r22, 0x03	; 3
    1332:	83 e0       	ldi	r24, 0x03	; 3
    1334:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT , C2_PIN , DIO_u8OUTPUT);
    1338:	41 e0       	ldi	r20, 0x01	; 1
    133a:	64 e0       	ldi	r22, 0x04	; 4
    133c:	83 e0       	ldi	r24, 0x03	; 3
    133e:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT , C3_PIN , DIO_u8OUTPUT);
    1342:	41 e0       	ldi	r20, 0x01	; 1
    1344:	65 e0       	ldi	r22, 0x05	; 5
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT , C4_PIN , DIO_u8OUTPUT);
    134c:	41 e0       	ldi	r20, 0x01	; 1
    134e:	66 e0       	ldi	r22, 0x06	; 6
    1350:	83 e0       	ldi	r24, 0x03	; 3
    1352:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT , R1_PIN , DIO_u8INPUT);
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	62 e0       	ldi	r22, 0x02	; 2
    135a:	82 e0       	ldi	r24, 0x02	; 2
    135c:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT , R2_PIN , DIO_u8INPUT);
    1360:	40 e0       	ldi	r20, 0x00	; 0
    1362:	63 e0       	ldi	r22, 0x03	; 3
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT , R3_PIN , DIO_u8INPUT);
    136a:	40 e0       	ldi	r20, 0x00	; 0
    136c:	64 e0       	ldi	r22, 0x04	; 4
    136e:	82 e0       	ldi	r24, 0x02	; 2
    1370:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT , R4_PIN , DIO_u8INPUT);
    1374:	40 e0       	ldi	r20, 0x00	; 0
    1376:	65 e0       	ldi	r22, 0x05	; 5
    1378:	82 e0       	ldi	r24, 0x02	; 2
    137a:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT , C1_PIN , DIO_u8HIGH);
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	63 e0       	ldi	r22, 0x03	; 3
    1382:	83 e0       	ldi	r24, 0x03	; 3
    1384:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT , C2_PIN , DIO_u8HIGH);
    1388:	41 e0       	ldi	r20, 0x01	; 1
    138a:	64 e0       	ldi	r22, 0x04	; 4
    138c:	83 e0       	ldi	r24, 0x03	; 3
    138e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT , C3_PIN , DIO_u8HIGH);
    1392:	41 e0       	ldi	r20, 0x01	; 1
    1394:	65 e0       	ldi	r22, 0x05	; 5
    1396:	83 e0       	ldi	r24, 0x03	; 3
    1398:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT , C4_PIN , DIO_u8HIGH);
    139c:	41 e0       	ldi	r20, 0x01	; 1
    139e:	66 e0       	ldi	r22, 0x06	; 6
    13a0:	83 e0       	ldi	r24, 0x03	; 3
    13a2:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT , R1_PIN , DIO_u8PULL_UP);
    13a6:	41 e0       	ldi	r20, 0x01	; 1
    13a8:	62 e0       	ldi	r22, 0x02	; 2
    13aa:	82 e0       	ldi	r24, 0x02	; 2
    13ac:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT , R2_PIN , DIO_u8PULL_UP);
    13b0:	41 e0       	ldi	r20, 0x01	; 1
    13b2:	63 e0       	ldi	r22, 0x03	; 3
    13b4:	82 e0       	ldi	r24, 0x02	; 2
    13b6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT , R3_PIN , DIO_u8PULL_UP);
    13ba:	41 e0       	ldi	r20, 0x01	; 1
    13bc:	64 e0       	ldi	r22, 0x04	; 4
    13be:	82 e0       	ldi	r24, 0x02	; 2
    13c0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT , R4_PIN , DIO_u8PULL_UP);
    13c4:	41 e0       	ldi	r20, 0x01	; 1
    13c6:	65 e0       	ldi	r22, 0x05	; 5
    13c8:	82 e0       	ldi	r24, 0x02	; 2
    13ca:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>

	return Local_enuerrorStates;
}
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	08 95       	ret

000013d2 <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
    13d2:	2f 92       	push	r2
    13d4:	3f 92       	push	r3
    13d6:	4f 92       	push	r4
    13d8:	5f 92       	push	r5
    13da:	6f 92       	push	r6
    13dc:	7f 92       	push	r7
    13de:	8f 92       	push	r8
    13e0:	9f 92       	push	r9
    13e2:	af 92       	push	r10
    13e4:	bf 92       	push	r11
    13e6:	cf 92       	push	r12
    13e8:	df 92       	push	r13
    13ea:	ef 92       	push	r14
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	cd b7       	in	r28, 0x3d	; 61
    13f8:	de b7       	in	r29, 0x3e	; 62
    13fa:	a3 97       	sbiw	r28, 0x23	; 35
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	6c 01       	movw	r12, r24
	ES_t Local_enuerrorStates = ES_NOK;

	u8 Local_Au8ColPorts [COL_NUM] = {C1_PORT,C2_PORT,C3_PORT,C4_PORT};
    1408:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
    140c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
    1410:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__data_start+0x2>
    1414:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__data_start+0x3>
    1418:	8d 8f       	std	Y+29, r24	; 0x1d
    141a:	9e 8f       	std	Y+30, r25	; 0x1e
    141c:	af 8f       	std	Y+31, r26	; 0x1f
    141e:	b8 a3       	std	Y+32, r27	; 0x20
	u8 Local_Au8ColPins  [COL_NUM] = {C1_PIN, C2_PIN, C3_PIN, C4_PIN};
    1420:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_start+0x4>
    1424:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_start+0x5>
    1428:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_start+0x6>
    142c:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_start+0x7>
    1430:	89 8f       	std	Y+25, r24	; 0x19
    1432:	9a 8f       	std	Y+26, r25	; 0x1a
    1434:	ab 8f       	std	Y+27, r26	; 0x1b
    1436:	bc 8f       	std	Y+28, r27	; 0x1c

	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
    1438:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_start+0x8>
    143c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_start+0x9>
    1440:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <__data_start+0xa>
    1444:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <__data_start+0xb>
    1448:	8d 8b       	std	Y+21, r24	; 0x15
    144a:	9e 8b       	std	Y+22, r25	; 0x16
    144c:	af 8b       	std	Y+23, r26	; 0x17
    144e:	b8 8f       	std	Y+24, r27	; 0x18
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};
    1450:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_start+0xc>
    1454:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__data_start+0xd>
    1458:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <__data_start+0xe>
    145c:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <__data_start+0xf>
    1460:	89 8b       	std	Y+17, r24	; 0x11
    1462:	9a 8b       	std	Y+18, r25	; 0x12
    1464:	ab 8b       	std	Y+19, r26	; 0x13
    1466:	bc 8b       	std	Y+20, r27	; 0x14

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	f6 01       	movw	r30, r12
    146c:	80 83       	st	Z, r24
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
    146e:	f6 01       	movw	r30, r12
    1470:	80 81       	ld	r24, Z
    1472:	8f 3f       	cpi	r24, 0xFF	; 255
    1474:	09 f0       	breq	.+2      	; 0x1478 <Keypad_enuGetPressedKey+0xa6>
    1476:	7b c0       	rjmp	.+246    	; 0x156e <Keypad_enuGetPressedKey+0x19c>
    1478:	3e 01       	movw	r6, r28
    147a:	f9 e1       	ldi	r31, 0x19	; 25
    147c:	6f 0e       	add	r6, r31
    147e:	71 1c       	adc	r7, r1
    1480:	ce 01       	movw	r24, r28
    1482:	4d 96       	adiw	r24, 0x1d	; 29
    1484:	9b a3       	std	Y+35, r25	; 0x23
    1486:	8a a3       	std	Y+34, r24	; 0x22
    1488:	e1 2c       	mov	r14, r1
    148a:	f1 2c       	mov	r15, r1
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
    148c:	f3 01       	movw	r30, r6
    148e:	21 90       	ld	r2, Z+
    1490:	3f 01       	movw	r6, r30
    1492:	ea a1       	ldd	r30, Y+34	; 0x22
    1494:	fb a1       	ldd	r31, Y+35	; 0x23
    1496:	31 90       	ld	r3, Z+
    1498:	fb a3       	std	Y+35, r31	; 0x23
    149a:	ea a3       	std	Y+34, r30	; 0x22
    149c:	40 e0       	ldi	r20, 0x00	; 0
    149e:	62 2d       	mov	r22, r2
    14a0:	83 2d       	mov	r24, r3
    14a2:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    14a6:	4e 01       	movw	r8, r28
    14a8:	f1 e1       	ldi	r31, 0x11	; 17
    14aa:	8f 0e       	add	r8, r31
    14ac:	91 1c       	adc	r9, r1
    14ae:	5e 01       	movw	r10, r28
    14b0:	85 e1       	ldi	r24, 0x15	; 21
    14b2:	a8 0e       	add	r10, r24
    14b4:	b1 1c       	adc	r11, r1
    14b6:	00 e0       	ldi	r16, 0x00	; 0
    14b8:	10 e0       	ldi	r17, 0x00	; 0
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    14ba:	f4 01       	movw	r30, r8
    14bc:	51 90       	ld	r5, Z+
    14be:	4f 01       	movw	r8, r30
    14c0:	f5 01       	movw	r30, r10
    14c2:	41 90       	ld	r4, Z+
    14c4:	5f 01       	movw	r10, r30
    14c6:	ae 01       	movw	r20, r28
    14c8:	4f 5d       	subi	r20, 0xDF	; 223
    14ca:	5f 4f       	sbci	r21, 0xFF	; 255
    14cc:	65 2d       	mov	r22, r5
    14ce:	84 2d       	mov	r24, r4
    14d0:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
    14d4:	89 a1       	ldd	r24, Y+33	; 0x21
    14d6:	81 11       	cpse	r24, r1
    14d8:	36 c0       	rjmp	.+108    	; 0x1546 <Keypad_enuGetPressedKey+0x174>
    14da:	83 ec       	ldi	r24, 0xC3	; 195
    14dc:	99 e0       	ldi	r25, 0x09	; 9
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	f1 f7       	brne	.-4      	; 0x14de <Keypad_enuGetPressedKey+0x10c>
    14e2:	00 c0       	rjmp	.+0      	; 0x14e4 <Keypad_enuGetPressedKey+0x112>
    14e4:	00 00       	nop
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    14e6:	ae 01       	movw	r20, r28
    14e8:	4f 5d       	subi	r20, 0xDF	; 223
    14ea:	5f 4f       	sbci	r21, 0xFF	; 255
    14ec:	65 2d       	mov	r22, r5
    14ee:	84 2d       	mov	r24, r4
    14f0:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
    14f4:	89 a1       	ldd	r24, Y+33	; 0x21
    14f6:	81 11       	cpse	r24, r1
    14f8:	26 c0       	rjmp	.+76     	; 0x1546 <Keypad_enuGetPressedKey+0x174>
				{
					while (! Local_u8PinValue)
    14fa:	89 a1       	ldd	r24, Y+33	; 0x21
    14fc:	81 11       	cpse	r24, r1
    14fe:	08 c0       	rjmp	.+16     	; 0x1510 <Keypad_enuGetPressedKey+0x13e>
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
    1500:	ae 01       	movw	r20, r28
    1502:	4f 5d       	subi	r20, 0xDF	; 223
    1504:	5f 4f       	sbci	r21, 0xFF	; 255
    1506:	65 2d       	mov	r22, r5
    1508:	84 2d       	mov	r24, r4
    150a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <DIO_enuGetPinValue>
    150e:	f5 cf       	rjmp	.-22     	; 0x14fa <Keypad_enuGetPressedKey+0x128>

					u8 Local_Au8Values[ROW_NUM][COL_NUM] = KEYPAD_VALUES;
    1510:	80 e1       	ldi	r24, 0x10	; 16
    1512:	e0 e7       	ldi	r30, 0x70	; 112
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	de 01       	movw	r26, r28
    1518:	11 96       	adiw	r26, 0x01	; 1
    151a:	01 90       	ld	r0, Z+
    151c:	0d 92       	st	X+, r0
    151e:	8a 95       	dec	r24
    1520:	e1 f7       	brne	.-8      	; 0x151a <Keypad_enuGetPressedKey+0x148>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
    1522:	00 0f       	add	r16, r16
    1524:	11 1f       	adc	r17, r17
    1526:	00 0f       	add	r16, r16
    1528:	11 1f       	adc	r17, r17
    152a:	e1 e0       	ldi	r30, 0x01	; 1
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	ec 0f       	add	r30, r28
    1530:	fd 1f       	adc	r31, r29
    1532:	0e 0f       	add	r16, r30
    1534:	1f 1f       	adc	r17, r31
    1536:	f8 01       	movw	r30, r16
    1538:	ee 0d       	add	r30, r14
    153a:	ff 1d       	adc	r31, r15
    153c:	80 81       	ld	r24, Z
    153e:	f6 01       	movw	r30, r12
    1540:	80 83       	st	Z, r24
					return ES_OK;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	15 c0       	rjmp	.+42     	; 0x1570 <Keypad_enuGetPressedKey+0x19e>
    1546:	0f 5f       	subi	r16, 0xFF	; 255
    1548:	1f 4f       	sbci	r17, 0xFF	; 255
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
    154a:	04 30       	cpi	r16, 0x04	; 4
    154c:	11 05       	cpc	r17, r1
    154e:	09 f0       	breq	.+2      	; 0x1552 <Keypad_enuGetPressedKey+0x180>
    1550:	b4 cf       	rjmp	.-152    	; 0x14ba <Keypad_enuGetPressedKey+0xe8>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
					return ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
    1552:	41 e0       	ldi	r20, 0x01	; 1
    1554:	62 2d       	mov	r22, r2
    1556:	83 2d       	mov	r24, r3
    1558:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    155c:	ff ef       	ldi	r31, 0xFF	; 255
    155e:	ef 1a       	sub	r14, r31
    1560:	ff 0a       	sbc	r15, r31

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
    1562:	84 e0       	ldi	r24, 0x04	; 4
    1564:	e8 16       	cp	r14, r24
    1566:	f1 04       	cpc	r15, r1
    1568:	09 f0       	breq	.+2      	; 0x156c <Keypad_enuGetPressedKey+0x19a>
    156a:	90 cf       	rjmp	.-224    	; 0x148c <Keypad_enuGetPressedKey+0xba>
    156c:	80 cf       	rjmp	.-256    	; 0x146e <Keypad_enuGetPressedKey+0x9c>
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	}
	return Local_enuerrorStates;
    156e:	80 e0       	ldi	r24, 0x00	; 0
}
    1570:	a3 96       	adiw	r28, 0x23	; 35
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	df 91       	pop	r29
    157e:	cf 91       	pop	r28
    1580:	1f 91       	pop	r17
    1582:	0f 91       	pop	r16
    1584:	ff 90       	pop	r15
    1586:	ef 90       	pop	r14
    1588:	df 90       	pop	r13
    158a:	cf 90       	pop	r12
    158c:	bf 90       	pop	r11
    158e:	af 90       	pop	r10
    1590:	9f 90       	pop	r9
    1592:	8f 90       	pop	r8
    1594:	7f 90       	pop	r7
    1596:	6f 90       	pop	r6
    1598:	5f 90       	pop	r5
    159a:	4f 90       	pop	r4
    159c:	3f 90       	pop	r3
    159e:	2f 90       	pop	r2
    15a0:	08 95       	ret

000015a2 <LCD_enuWriteNLatch>:

	DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
	LCD_enuWriteNLatch(Copy_u8Command);

	return Local_enuerrorStates;
}
    15a2:	1f 93       	push	r17
    15a4:	cf 93       	push	r28
    15a6:	df 93       	push	r29
    15a8:	1f 92       	push	r1
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	18 2f       	mov	r17, r24
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	63 e0       	ldi	r22, 0x03	; 3
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    15ba:	40 e0       	ldi	r20, 0x00	; 0
    15bc:	62 e0       	ldi	r22, 0x02	; 2
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    15c4:	18 32       	cpi	r17, 0x28	; 40
    15c6:	99 f5       	brne	.+102    	; 0x162e <LCD_enuWriteNLatch+0x8c>
    15c8:	ae 01       	movw	r20, r28
    15ca:	4f 5f       	subi	r20, 0xFF	; 255
    15cc:	5f 4f       	sbci	r21, 0xFF	; 255
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <DIO_enuGetPinValue>
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
    15d8:	81 11       	cpse	r24, r1
    15da:	29 c0       	rjmp	.+82     	; 0x162e <LCD_enuWriteNLatch+0x8c>
    15dc:	40 e0       	ldi	r20, 0x00	; 0
    15de:	67 e0       	ldi	r22, 0x07	; 7
    15e0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    15e4:	40 e0       	ldi	r20, 0x00	; 0
    15e6:	66 e0       	ldi	r22, 0x06	; 6
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	65 e0       	ldi	r22, 0x05	; 5
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	64 e0       	ldi	r22, 0x04	; 4
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    1602:	41 e0       	ldi	r20, 0x01	; 1
    1604:	63 e0       	ldi	r22, 0x03	; 3
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    160c:	81 ee       	ldi	r24, 0xE1	; 225
    160e:	94 e0       	ldi	r25, 0x04	; 4
    1610:	01 97       	sbiw	r24, 0x01	; 1
    1612:	f1 f7       	brne	.-4      	; 0x1610 <LCD_enuWriteNLatch+0x6e>
    1614:	00 c0       	rjmp	.+0      	; 0x1616 <LCD_enuWriteNLatch+0x74>
    1616:	00 00       	nop
    1618:	40 e0       	ldi	r20, 0x00	; 0
    161a:	63 e0       	ldi	r22, 0x03	; 3
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    1622:	83 ed       	ldi	r24, 0xD3	; 211
    1624:	90 e3       	ldi	r25, 0x30	; 48
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <LCD_enuWriteNLatch+0x84>
    162a:	00 c0       	rjmp	.+0      	; 0x162c <LCD_enuWriteNLatch+0x8a>
    162c:	00 00       	nop
    162e:	41 2f       	mov	r20, r17
    1630:	44 1f       	adc	r20, r20
    1632:	44 27       	eor	r20, r20
    1634:	44 1f       	adc	r20, r20
    1636:	67 e0       	ldi	r22, 0x07	; 7
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    163e:	16 fb       	bst	r17, 6
    1640:	44 27       	eor	r20, r20
    1642:	40 f9       	bld	r20, 0
    1644:	66 e0       	ldi	r22, 0x06	; 6
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    164c:	15 fb       	bst	r17, 5
    164e:	44 27       	eor	r20, r20
    1650:	40 f9       	bld	r20, 0
    1652:	65 e0       	ldi	r22, 0x05	; 5
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    165a:	14 fb       	bst	r17, 4
    165c:	44 27       	eor	r20, r20
    165e:	40 f9       	bld	r20, 0
    1660:	64 e0       	ldi	r22, 0x04	; 4
    1662:	80 e0       	ldi	r24, 0x00	; 0
    1664:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    1668:	41 e0       	ldi	r20, 0x01	; 1
    166a:	63 e0       	ldi	r22, 0x03	; 3
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    1672:	81 ee       	ldi	r24, 0xE1	; 225
    1674:	94 e0       	ldi	r25, 0x04	; 4
    1676:	01 97       	sbiw	r24, 0x01	; 1
    1678:	f1 f7       	brne	.-4      	; 0x1676 <LCD_enuWriteNLatch+0xd4>
    167a:	00 c0       	rjmp	.+0      	; 0x167c <LCD_enuWriteNLatch+0xda>
    167c:	00 00       	nop
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	63 e0       	ldi	r22, 0x03	; 3
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    1688:	83 ed       	ldi	r24, 0xD3	; 211
    168a:	90 e3       	ldi	r25, 0x30	; 48
    168c:	01 97       	sbiw	r24, 0x01	; 1
    168e:	f1 f7       	brne	.-4      	; 0x168c <LCD_enuWriteNLatch+0xea>
    1690:	00 c0       	rjmp	.+0      	; 0x1692 <LCD_enuWriteNLatch+0xf0>
    1692:	00 00       	nop
    1694:	13 fb       	bst	r17, 3
    1696:	44 27       	eor	r20, r20
    1698:	40 f9       	bld	r20, 0
    169a:	67 e0       	ldi	r22, 0x07	; 7
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    16a2:	12 fb       	bst	r17, 2
    16a4:	44 27       	eor	r20, r20
    16a6:	40 f9       	bld	r20, 0
    16a8:	66 e0       	ldi	r22, 0x06	; 6
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    16b0:	11 fb       	bst	r17, 1
    16b2:	44 27       	eor	r20, r20
    16b4:	40 f9       	bld	r20, 0
    16b6:	65 e0       	ldi	r22, 0x05	; 5
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    16be:	41 2f       	mov	r20, r17
    16c0:	41 70       	andi	r20, 0x01	; 1
    16c2:	64 e0       	ldi	r22, 0x04	; 4
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	63 e0       	ldi	r22, 0x03	; 3
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    16d4:	81 ee       	ldi	r24, 0xE1	; 225
    16d6:	94 e0       	ldi	r25, 0x04	; 4
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	f1 f7       	brne	.-4      	; 0x16d8 <LCD_enuWriteNLatch+0x136>
    16dc:	00 c0       	rjmp	.+0      	; 0x16de <LCD_enuWriteNLatch+0x13c>
    16de:	00 00       	nop
    16e0:	40 e0       	ldi	r20, 0x00	; 0
    16e2:	63 e0       	ldi	r22, 0x03	; 3
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    16ea:	83 ed       	ldi	r24, 0xD3	; 211
    16ec:	90 e3       	ldi	r25, 0x30	; 48
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <LCD_enuWriteNLatch+0x14c>
    16f2:	00 c0       	rjmp	.+0      	; 0x16f4 <LCD_enuWriteNLatch+0x152>
    16f4:	00 00       	nop
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	0f 90       	pop	r0
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	08 95       	ret

00001702 <LCD_enuInit>:
    1702:	41 e0       	ldi	r20, 0x01	; 1
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
    170c:	41 e0       	ldi	r20, 0x01	; 1
    170e:	62 e0       	ldi	r22, 0x02	; 2
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
    1716:	41 e0       	ldi	r20, 0x01	; 1
    1718:	63 e0       	ldi	r22, 0x03	; 3
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
    1720:	41 e0       	ldi	r20, 0x01	; 1
    1722:	67 e0       	ldi	r22, 0x07	; 7
    1724:	80 e0       	ldi	r24, 0x00	; 0
    1726:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
    172a:	41 e0       	ldi	r20, 0x01	; 1
    172c:	66 e0       	ldi	r22, 0x06	; 6
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
    1734:	41 e0       	ldi	r20, 0x01	; 1
    1736:	65 e0       	ldi	r22, 0x05	; 5
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
    173e:	41 e0       	ldi	r20, 0x01	; 1
    1740:	64 e0       	ldi	r22, 0x04	; 4
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	0e 94 a6 0c 	call	0x194c	; 0x194c <DIO_enuSetPinDirection>
    1748:	8d e2       	ldi	r24, 0x2D	; 45
    174a:	92 e2       	ldi	r25, 0x22	; 34
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <LCD_enuInit+0x4a>
    1750:	00 c0       	rjmp	.+0      	; 0x1752 <LCD_enuInit+0x50>
    1752:	00 00       	nop
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	61 e0       	ldi	r22, 0x01	; 1
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    175e:	88 e2       	ldi	r24, 0x28	; 40
    1760:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteNLatch>
    1764:	89 ef       	ldi	r24, 0xF9	; 249
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	01 97       	sbiw	r24, 0x01	; 1
    176a:	f1 f7       	brne	.-4      	; 0x1768 <LCD_enuInit+0x66>
    176c:	00 c0       	rjmp	.+0      	; 0x176e <LCD_enuInit+0x6c>
    176e:	00 00       	nop
    1770:	40 e0       	ldi	r20, 0x00	; 0
    1772:	61 e0       	ldi	r22, 0x01	; 1
    1774:	81 e0       	ldi	r24, 0x01	; 1
    1776:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    177a:	8f e0       	ldi	r24, 0x0F	; 15
    177c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteNLatch>
    1780:	89 ef       	ldi	r24, 0xF9	; 249
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <LCD_enuInit+0x82>
    1788:	00 c0       	rjmp	.+0      	; 0x178a <LCD_enuInit+0x88>
    178a:	00 00       	nop
    178c:	40 e0       	ldi	r20, 0x00	; 0
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteNLatch>
    179c:	83 ef       	ldi	r24, 0xF3	; 243
    179e:	91 e0       	ldi	r25, 0x01	; 1
    17a0:	01 97       	sbiw	r24, 0x01	; 1
    17a2:	f1 f7       	brne	.-4      	; 0x17a0 <LCD_enuInit+0x9e>
    17a4:	00 c0       	rjmp	.+0      	; 0x17a6 <LCD_enuInit+0xa4>
    17a6:	00 00       	nop
    17a8:	40 e0       	ldi	r20, 0x00	; 0
    17aa:	61 e0       	ldi	r22, 0x01	; 1
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    17b2:	86 e0       	ldi	r24, 0x06	; 6
    17b4:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteNLatch>
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	08 95       	ret

000017bc <LCD_enuSendData>:
    17bc:	cf 93       	push	r28
    17be:	c8 2f       	mov	r28, r24
    17c0:	41 e0       	ldi	r20, 0x01	; 1
    17c2:	61 e0       	ldi	r22, 0x01	; 1
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    17ca:	8c 2f       	mov	r24, r28
    17cc:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteNLatch>
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	cf 91       	pop	r28
    17d4:	08 95       	ret

000017d6 <LCD_enuDisplayUnsignedInteger>:
}

/****************************************************************************************************/

ES_t LCD_enuDisplayUnsignedInteger(u16 Copy_u32Data)
{
    17d6:	6f 92       	push	r6
    17d8:	7f 92       	push	r7
    17da:	8f 92       	push	r8
    17dc:	9f 92       	push	r9
    17de:	af 92       	push	r10
    17e0:	bf 92       	push	r11
    17e2:	cf 92       	push	r12
    17e4:	df 92       	push	r13
    17e6:	ef 92       	push	r14
    17e8:	ff 92       	push	r15
    17ea:	0f 93       	push	r16
    17ec:	1f 93       	push	r17
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	fc 01       	movw	r30, r24
	ES_t Local_enuerrorStates = ES_NOK;



	if (Copy_u32Data == 0)
    17f4:	89 2b       	or	r24, r25
    17f6:	51 f4       	brne	.+20     	; 0x180c <LCD_enuDisplayUnsignedInteger+0x36>
	{
		DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    17f8:	41 e0       	ldi	r20, 0x01	; 1
    17fa:	61 e0       	ldi	r22, 0x01	; 1
    17fc:	81 e0       	ldi	r24, 0x01	; 1
    17fe:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
		LCD_enuWriteNLatch('0');
    1802:	80 e3       	ldi	r24, 0x30	; 48
    1804:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteNLatch>

/****************************************************************************************************/

ES_t LCD_enuDisplayUnsignedInteger(u16 Copy_u32Data)
{
	ES_t Local_enuerrorStates = ES_NOK;
    1808:	d0 e0       	ldi	r29, 0x00	; 0
    180a:	42 c0       	rjmp	.+132    	; 0x1890 <LCD_enuDisplayUnsignedInteger+0xba>
    180c:	c0 e0       	ldi	r28, 0x00	; 0
    180e:	c1 2c       	mov	r12, r1
    1810:	d1 2c       	mov	r13, r1
    1812:	76 01       	movw	r14, r12
		u32 Local_u32Reversed = 0;
		u8 Local_u8Counter=0;
		for (;Copy_u32Data>0;)
			{
				Local_u8Remainder = Copy_u32Data%10;
				Local_u32Reversed = Local_u32Reversed*10 + Local_u8Remainder;
    1814:	0a e0       	ldi	r16, 0x0A	; 10
    1816:	10 e0       	ldi	r17, 0x00	; 0
    1818:	aa e0       	ldi	r26, 0x0A	; 10
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	a7 01       	movw	r20, r14
    181e:	96 01       	movw	r18, r12
    1820:	0e 94 3a 0e 	call	0x1c74	; 0x1c74 <__muluhisi3>
    1824:	6b 01       	movw	r12, r22
    1826:	7c 01       	movw	r14, r24
    1828:	cf 01       	movw	r24, r30
    182a:	b8 01       	movw	r22, r16
    182c:	0e 94 fe 0d 	call	0x1bfc	; 0x1bfc <__udivmodhi4>
    1830:	c8 0e       	add	r12, r24
    1832:	d9 1e       	adc	r13, r25
    1834:	e1 1c       	adc	r14, r1
    1836:	f1 1c       	adc	r15, r1
				Local_u8Counter++;
    1838:	cf 5f       	subi	r28, 0xFF	; 255
				Copy_u32Data/=10;
    183a:	fb 01       	movw	r30, r22
	else
	{
		u8 Local_u8Remainder;
		u32 Local_u32Reversed = 0;
		u8 Local_u8Counter=0;
		for (;Copy_u32Data>0;)
    183c:	30 97       	sbiw	r30, 0x00	; 0
    183e:	61 f7       	brne	.-40     	; 0x1818 <LCD_enuDisplayUnsignedInteger+0x42>
    1840:	d0 e0       	ldi	r29, 0x00	; 0
			}
			/*********in the previous step: 3malt reverse lel integer elly gayelly, 3ashan law ma3amaltelosh reverse hayetebe3 ma3koos**********/
			for (;Local_u32Reversed>0;)
			{
				DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
				Local_enuerrorStates = LCD_enuWriteNLatch(Local_u32Reversed%10 + '0');
    1842:	8a e0       	ldi	r24, 0x0A	; 10
    1844:	88 2e       	mov	r8, r24
    1846:	91 2c       	mov	r9, r1
    1848:	a1 2c       	mov	r10, r1
    184a:	b1 2c       	mov	r11, r1
				Local_u32Reversed = Local_u32Reversed*10 + Local_u8Remainder;
				Local_u8Counter++;
				Copy_u32Data/=10;
			}
			/*********in the previous step: 3malt reverse lel integer elly gayelly, 3ashan law ma3amaltelosh reverse hayetebe3 ma3koos**********/
			for (;Local_u32Reversed>0;)
    184c:	c1 14       	cp	r12, r1
    184e:	d1 04       	cpc	r13, r1
    1850:	e1 04       	cpc	r14, r1
    1852:	f1 04       	cpc	r15, r1
    1854:	b1 f0       	breq	.+44     	; 0x1882 <LCD_enuDisplayUnsignedInteger+0xac>
			{
				DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1856:	41 e0       	ldi	r20, 0x01	; 1
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
				Local_enuerrorStates = LCD_enuWriteNLatch(Local_u32Reversed%10 + '0');
    1860:	c7 01       	movw	r24, r14
    1862:	b6 01       	movw	r22, r12
    1864:	a5 01       	movw	r20, r10
    1866:	94 01       	movw	r18, r8
    1868:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__udivmodsi4>
    186c:	39 01       	movw	r6, r18
    186e:	8a 01       	movw	r16, r20
    1870:	80 e3       	ldi	r24, 0x30	; 48
    1872:	86 0f       	add	r24, r22
    1874:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteNLatch>
    1878:	d8 2f       	mov	r29, r24
				Local_u32Reversed/=10;
    187a:	63 01       	movw	r12, r6
    187c:	78 01       	movw	r14, r16
				Local_u8Counter--;
    187e:	c1 50       	subi	r28, 0x01	; 1
    1880:	e5 cf       	rjmp	.-54     	; 0x184c <LCD_enuDisplayUnsignedInteger+0x76>
				/*********el mafrood a3mel error status check hna bs 3ashan write and latch me7taga te3mel return ES_OK fa me7taga ta3deel**********/
			}
			while (Local_u8Counter != 0)
    1882:	cc 23       	and	r28, r28
    1884:	29 f0       	breq	.+10     	; 0x1890 <LCD_enuDisplayUnsignedInteger+0xba>
			{
				LCD_enuWriteNLatch('0');
    1886:	80 e3       	ldi	r24, 0x30	; 48
    1888:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteNLatch>
				Local_u8Counter--;
    188c:	c1 50       	subi	r28, 0x01	; 1
    188e:	f9 cf       	rjmp	.-14     	; 0x1882 <LCD_enuDisplayUnsignedInteger+0xac>
	}


	return Local_enuerrorStates;

}
    1890:	8d 2f       	mov	r24, r29
    1892:	df 91       	pop	r29
    1894:	cf 91       	pop	r28
    1896:	1f 91       	pop	r17
    1898:	0f 91       	pop	r16
    189a:	ff 90       	pop	r15
    189c:	ef 90       	pop	r14
    189e:	df 90       	pop	r13
    18a0:	cf 90       	pop	r12
    18a2:	bf 90       	pop	r11
    18a4:	af 90       	pop	r10
    18a6:	9f 90       	pop	r9
    18a8:	8f 90       	pop	r8
    18aa:	7f 90       	pop	r7
    18ac:	6f 90       	pop	r6
    18ae:	08 95       	ret

000018b0 <LCD_enuDisplayString>:

	return Local_enuerrorStates;
}
*/
ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
    18b0:	0f 93       	push	r16
    18b2:	1f 93       	push	r17
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
	ES_t Local_enuerrorStates = ES_NOK;
	if (Copy_pcString != NULL)
    18b8:	00 97       	sbiw	r24, 0x00	; 0
    18ba:	89 f0       	breq	.+34     	; 0x18de <LCD_enuDisplayString+0x2e>
    18bc:	ec 01       	movw	r28, r24
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	8e 01       	movw	r16, r28
	{
		while (*Copy_pcString)
    18c2:	98 81       	ld	r25, Y
    18c4:	99 23       	and	r25, r25
    18c6:	61 f0       	breq	.+24     	; 0x18e0 <LCD_enuDisplayString+0x30>
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    18c8:	41 e0       	ldi	r20, 0x01	; 1
    18ca:	61 e0       	ldi	r22, 0x01	; 1
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    18d2:	21 96       	adiw	r28, 0x01	; 1
			Local_enuerrorStates = LCD_enuWriteNLatch(*Copy_pcString++);
    18d4:	f8 01       	movw	r30, r16
    18d6:	80 81       	ld	r24, Z
    18d8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteNLatch>
    18dc:	f1 cf       	rjmp	.-30     	; 0x18c0 <LCD_enuDisplayString+0x10>
		}

	}
	else Local_enuerrorStates = ES_NULL_POINTER;
    18de:	82 e0       	ldi	r24, 0x02	; 2
	return Local_enuerrorStates;
}
    18e0:	df 91       	pop	r29
    18e2:	cf 91       	pop	r28
    18e4:	1f 91       	pop	r17
    18e6:	0f 91       	pop	r16
    18e8:	08 95       	ret

000018ea <LCD_enuSetCursorPosition>:


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{
    18ea:	1f 93       	push	r17
    18ec:	cf 93       	push	r28
    18ee:	df 93       	push	r29

	ES_t Local_enuerrorStates = ES_NOK;
	if ((Copy_u8XDimension <= LCD_u8XDIM_1) && (Copy_u8YDimension <= LCD_u8YDIM_15))
    18f0:	82 30       	cpi	r24, 0x02	; 2
    18f2:	98 f4       	brcc	.+38     	; 0x191a <LCD_enuSetCursorPosition+0x30>
    18f4:	60 31       	cpi	r22, 0x10	; 16
    18f6:	88 f4       	brcc	.+34     	; 0x191a <LCD_enuSetCursorPosition+0x30>
    18f8:	c6 2f       	mov	r28, r22
    18fa:	d8 2f       	mov	r29, r24
		{
		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    18fc:	40 e0       	ldi	r20, 0x00	; 0
    18fe:	61 e0       	ldi	r22, 0x01	; 1
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    1906:	18 2f       	mov	r17, r24
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
    1908:	8c 2f       	mov	r24, r28
    190a:	90 e4       	ldi	r25, 0x40	; 64
    190c:	d9 9f       	mul	r29, r25
    190e:	80 0d       	add	r24, r0
    1910:	11 24       	eor	r1, r1
    1912:	80 58       	subi	r24, 0x80	; 128
    1914:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteNLatch>
    1918:	01 c0       	rjmp	.+2      	; 0x191c <LCD_enuSetCursorPosition+0x32>


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{

	ES_t Local_enuerrorStates = ES_NOK;
    191a:	10 e0       	ldi	r17, 0x00	; 0
		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
		}
	return Local_enuerrorStates;

}
    191c:	81 2f       	mov	r24, r17
    191e:	df 91       	pop	r29
    1920:	cf 91       	pop	r28
    1922:	1f 91       	pop	r17
    1924:	08 95       	ret

00001926 <LCD_enuClearDisplay>:

ES_t LCD_enuClearDisplay( void )
{
    1926:	cf 93       	push	r28

	ES_t Local_enuerrorStates = ES_NOK;

		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1928:	40 e0       	ldi	r20, 0x00	; 0
    192a:	61 e0       	ldi	r22, 0x01	; 1
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 fc 0c 	call	0x19f8	; 0x19f8 <DIO_enuSetPinValue>
    1932:	c8 2f       	mov	r28, r24
		LCD_enuWriteNLatch(0x01);
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <LCD_enuWriteNLatch>

	return Local_enuerrorStates;

}
    193a:	8c 2f       	mov	r24, r28
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <DIO_enuInit>:
	{
		Local_enuerrorStates = ES_OUT_OF_RANGE;
	}

	return Local_enuerrorStates;
}
    1940:	81 eb       	ldi	r24, 0xB1	; 177
    1942:	8a bb       	out	0x1a, r24	; 26
    1944:	86 e1       	ldi	r24, 0x16	; 22
    1946:	8b bb       	out	0x1b, r24	; 27
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	08 95       	ret

0000194c <DIO_enuSetPinDirection>:
    194c:	84 30       	cpi	r24, 0x04	; 4
    194e:	08 f0       	brcs	.+2      	; 0x1952 <DIO_enuSetPinDirection+0x6>
    1950:	51 c0       	rjmp	.+162    	; 0x19f4 <DIO_enuSetPinDirection+0xa8>
    1952:	68 30       	cpi	r22, 0x08	; 8
    1954:	08 f0       	brcs	.+2      	; 0x1958 <DIO_enuSetPinDirection+0xc>
    1956:	4e c0       	rjmp	.+156    	; 0x19f4 <DIO_enuSetPinDirection+0xa8>
    1958:	42 30       	cpi	r20, 0x02	; 2
    195a:	08 f0       	brcs	.+2      	; 0x195e <DIO_enuSetPinDirection+0x12>
    195c:	4b c0       	rjmp	.+150    	; 0x19f4 <DIO_enuSetPinDirection+0xa8>
    195e:	82 30       	cpi	r24, 0x02	; 2
    1960:	39 f1       	breq	.+78     	; 0x19b0 <DIO_enuSetPinDirection+0x64>
    1962:	83 30       	cpi	r24, 0x03	; 3
    1964:	b1 f1       	breq	.+108    	; 0x19d2 <DIO_enuSetPinDirection+0x86>
    1966:	81 30       	cpi	r24, 0x01	; 1
    1968:	89 f0       	breq	.+34     	; 0x198c <DIO_enuSetPinDirection+0x40>
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	06 2e       	mov	r0, r22
    1970:	01 c0       	rjmp	.+2      	; 0x1974 <DIO_enuSetPinDirection+0x28>
    1972:	88 0f       	add	r24, r24
    1974:	0a 94       	dec	r0
    1976:	ea f7       	brpl	.-6      	; 0x1972 <DIO_enuSetPinDirection+0x26>
    1978:	80 95       	com	r24
    197a:	9a b3       	in	r25, 0x1a	; 26
    197c:	89 23       	and	r24, r25
    197e:	01 c0       	rjmp	.+2      	; 0x1982 <DIO_enuSetPinDirection+0x36>
    1980:	44 0f       	add	r20, r20
    1982:	6a 95       	dec	r22
    1984:	ea f7       	brpl	.-6      	; 0x1980 <DIO_enuSetPinDirection+0x34>
    1986:	48 2b       	or	r20, r24
    1988:	4a bb       	out	0x1a, r20	; 26
    198a:	10 c0       	rjmp	.+32     	; 0x19ac <DIO_enuSetPinDirection+0x60>
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	06 2e       	mov	r0, r22
    1992:	01 c0       	rjmp	.+2      	; 0x1996 <DIO_enuSetPinDirection+0x4a>
    1994:	88 0f       	add	r24, r24
    1996:	0a 94       	dec	r0
    1998:	ea f7       	brpl	.-6      	; 0x1994 <DIO_enuSetPinDirection+0x48>
    199a:	80 95       	com	r24
    199c:	97 b3       	in	r25, 0x17	; 23
    199e:	89 23       	and	r24, r25
    19a0:	01 c0       	rjmp	.+2      	; 0x19a4 <DIO_enuSetPinDirection+0x58>
    19a2:	44 0f       	add	r20, r20
    19a4:	6a 95       	dec	r22
    19a6:	ea f7       	brpl	.-6      	; 0x19a2 <DIO_enuSetPinDirection+0x56>
    19a8:	48 2b       	or	r20, r24
    19aa:	47 bb       	out	0x17, r20	; 23
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	08 95       	ret
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	06 2e       	mov	r0, r22
    19b6:	01 c0       	rjmp	.+2      	; 0x19ba <DIO_enuSetPinDirection+0x6e>
    19b8:	88 0f       	add	r24, r24
    19ba:	0a 94       	dec	r0
    19bc:	ea f7       	brpl	.-6      	; 0x19b8 <DIO_enuSetPinDirection+0x6c>
    19be:	80 95       	com	r24
    19c0:	94 b3       	in	r25, 0x14	; 20
    19c2:	89 23       	and	r24, r25
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <DIO_enuSetPinDirection+0x7c>
    19c6:	44 0f       	add	r20, r20
    19c8:	6a 95       	dec	r22
    19ca:	ea f7       	brpl	.-6      	; 0x19c6 <DIO_enuSetPinDirection+0x7a>
    19cc:	48 2b       	or	r20, r24
    19ce:	44 bb       	out	0x14, r20	; 20
    19d0:	ed cf       	rjmp	.-38     	; 0x19ac <DIO_enuSetPinDirection+0x60>
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	06 2e       	mov	r0, r22
    19d8:	01 c0       	rjmp	.+2      	; 0x19dc <DIO_enuSetPinDirection+0x90>
    19da:	88 0f       	add	r24, r24
    19dc:	0a 94       	dec	r0
    19de:	ea f7       	brpl	.-6      	; 0x19da <DIO_enuSetPinDirection+0x8e>
    19e0:	80 95       	com	r24
    19e2:	91 b3       	in	r25, 0x11	; 17
    19e4:	89 23       	and	r24, r25
    19e6:	01 c0       	rjmp	.+2      	; 0x19ea <DIO_enuSetPinDirection+0x9e>
    19e8:	44 0f       	add	r20, r20
    19ea:	6a 95       	dec	r22
    19ec:	ea f7       	brpl	.-6      	; 0x19e8 <DIO_enuSetPinDirection+0x9c>
    19ee:	48 2b       	or	r20, r24
    19f0:	41 bb       	out	0x11, r20	; 17
    19f2:	dc cf       	rjmp	.-72     	; 0x19ac <DIO_enuSetPinDirection+0x60>
    19f4:	83 e0       	ldi	r24, 0x03	; 3
    19f6:	08 95       	ret

000019f8 <DIO_enuSetPinValue>:
    19f8:	84 30       	cpi	r24, 0x04	; 4
    19fa:	08 f0       	brcs	.+2      	; 0x19fe <DIO_enuSetPinValue+0x6>
    19fc:	51 c0       	rjmp	.+162    	; 0x1aa0 <DIO_enuSetPinValue+0xa8>
    19fe:	68 30       	cpi	r22, 0x08	; 8
    1a00:	08 f0       	brcs	.+2      	; 0x1a04 <DIO_enuSetPinValue+0xc>
    1a02:	4e c0       	rjmp	.+156    	; 0x1aa0 <DIO_enuSetPinValue+0xa8>
    1a04:	42 30       	cpi	r20, 0x02	; 2
    1a06:	08 f0       	brcs	.+2      	; 0x1a0a <DIO_enuSetPinValue+0x12>
    1a08:	4b c0       	rjmp	.+150    	; 0x1aa0 <DIO_enuSetPinValue+0xa8>
    1a0a:	82 30       	cpi	r24, 0x02	; 2
    1a0c:	39 f1       	breq	.+78     	; 0x1a5c <DIO_enuSetPinValue+0x64>
    1a0e:	83 30       	cpi	r24, 0x03	; 3
    1a10:	b1 f1       	breq	.+108    	; 0x1a7e <DIO_enuSetPinValue+0x86>
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	89 f0       	breq	.+34     	; 0x1a38 <DIO_enuSetPinValue+0x40>
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	06 2e       	mov	r0, r22
    1a1c:	01 c0       	rjmp	.+2      	; 0x1a20 <DIO_enuSetPinValue+0x28>
    1a1e:	88 0f       	add	r24, r24
    1a20:	0a 94       	dec	r0
    1a22:	ea f7       	brpl	.-6      	; 0x1a1e <DIO_enuSetPinValue+0x26>
    1a24:	80 95       	com	r24
    1a26:	9b b3       	in	r25, 0x1b	; 27
    1a28:	89 23       	and	r24, r25
    1a2a:	01 c0       	rjmp	.+2      	; 0x1a2e <DIO_enuSetPinValue+0x36>
    1a2c:	44 0f       	add	r20, r20
    1a2e:	6a 95       	dec	r22
    1a30:	ea f7       	brpl	.-6      	; 0x1a2c <DIO_enuSetPinValue+0x34>
    1a32:	48 2b       	or	r20, r24
    1a34:	4b bb       	out	0x1b, r20	; 27
    1a36:	10 c0       	rjmp	.+32     	; 0x1a58 <DIO_enuSetPinValue+0x60>
    1a38:	81 e0       	ldi	r24, 0x01	; 1
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	06 2e       	mov	r0, r22
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <DIO_enuSetPinValue+0x4a>
    1a40:	88 0f       	add	r24, r24
    1a42:	0a 94       	dec	r0
    1a44:	ea f7       	brpl	.-6      	; 0x1a40 <DIO_enuSetPinValue+0x48>
    1a46:	80 95       	com	r24
    1a48:	98 b3       	in	r25, 0x18	; 24
    1a4a:	89 23       	and	r24, r25
    1a4c:	01 c0       	rjmp	.+2      	; 0x1a50 <DIO_enuSetPinValue+0x58>
    1a4e:	44 0f       	add	r20, r20
    1a50:	6a 95       	dec	r22
    1a52:	ea f7       	brpl	.-6      	; 0x1a4e <DIO_enuSetPinValue+0x56>
    1a54:	48 2b       	or	r20, r24
    1a56:	48 bb       	out	0x18, r20	; 24
    1a58:	81 e0       	ldi	r24, 0x01	; 1
    1a5a:	08 95       	ret
    1a5c:	81 e0       	ldi	r24, 0x01	; 1
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	06 2e       	mov	r0, r22
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <DIO_enuSetPinValue+0x6e>
    1a64:	88 0f       	add	r24, r24
    1a66:	0a 94       	dec	r0
    1a68:	ea f7       	brpl	.-6      	; 0x1a64 <DIO_enuSetPinValue+0x6c>
    1a6a:	80 95       	com	r24
    1a6c:	95 b3       	in	r25, 0x15	; 21
    1a6e:	89 23       	and	r24, r25
    1a70:	01 c0       	rjmp	.+2      	; 0x1a74 <DIO_enuSetPinValue+0x7c>
    1a72:	44 0f       	add	r20, r20
    1a74:	6a 95       	dec	r22
    1a76:	ea f7       	brpl	.-6      	; 0x1a72 <DIO_enuSetPinValue+0x7a>
    1a78:	48 2b       	or	r20, r24
    1a7a:	45 bb       	out	0x15, r20	; 21
    1a7c:	ed cf       	rjmp	.-38     	; 0x1a58 <DIO_enuSetPinValue+0x60>
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	06 2e       	mov	r0, r22
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <DIO_enuSetPinValue+0x90>
    1a86:	88 0f       	add	r24, r24
    1a88:	0a 94       	dec	r0
    1a8a:	ea f7       	brpl	.-6      	; 0x1a86 <DIO_enuSetPinValue+0x8e>
    1a8c:	80 95       	com	r24
    1a8e:	92 b3       	in	r25, 0x12	; 18
    1a90:	89 23       	and	r24, r25
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <DIO_enuSetPinValue+0x9e>
    1a94:	44 0f       	add	r20, r20
    1a96:	6a 95       	dec	r22
    1a98:	ea f7       	brpl	.-6      	; 0x1a94 <DIO_enuSetPinValue+0x9c>
    1a9a:	48 2b       	or	r20, r24
    1a9c:	42 bb       	out	0x12, r20	; 18
    1a9e:	dc cf       	rjmp	.-72     	; 0x1a58 <DIO_enuSetPinValue+0x60>
    1aa0:	83 e0       	ldi	r24, 0x03	; 3
    1aa2:	08 95       	ret

00001aa4 <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
    1aa4:	fa 01       	movw	r30, r20
	ES_t Local_enuerrorStates = ES_NOK;

	if (Copy_pu8Value != NULL)
    1aa6:	30 97       	sbiw	r30, 0x00	; 0
    1aa8:	d9 f0       	breq	.+54     	; 0x1ae0 <DIO_enuGetPinValue+0x3c>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    1aaa:	84 30       	cpi	r24, 0x04	; 4
    1aac:	d8 f4       	brcc	.+54     	; 0x1ae4 <DIO_enuGetPinValue+0x40>
				&& Copy_u8PinID <= DIO_u8PIN7)
    1aae:	68 30       	cpi	r22, 0x08	; 8
    1ab0:	c8 f4       	brcc	.+50     	; 0x1ae4 <DIO_enuGetPinValue+0x40>
		{
			switch (Copy_u8PortID)
    1ab2:	82 30       	cpi	r24, 0x02	; 2
    1ab4:	41 f0       	breq	.+16     	; 0x1ac6 <DIO_enuGetPinValue+0x22>
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	89 f0       	breq	.+34     	; 0x1adc <DIO_enuGetPinValue+0x38>
    1aba:	81 30       	cpi	r24, 0x01	; 1
    1abc:	11 f0       	breq	.+4      	; 0x1ac2 <DIO_enuGetPinValue+0x1e>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    1abe:	89 b3       	in	r24, 0x19	; 25
    1ac0:	03 c0       	rjmp	.+6      	; 0x1ac8 <DIO_enuGetPinValue+0x24>

				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    1ac2:	86 b3       	in	r24, 0x16	; 22
    1ac4:	01 c0       	rjmp	.+2      	; 0x1ac8 <DIO_enuGetPinValue+0x24>

				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    1ac6:	83 b3       	in	r24, 0x13	; 19
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 c0       	rjmp	.+4      	; 0x1ad0 <DIO_enuGetPinValue+0x2c>
    1acc:	95 95       	asr	r25
    1ace:	87 95       	ror	r24
    1ad0:	6a 95       	dec	r22
    1ad2:	e2 f7       	brpl	.-8      	; 0x1acc <DIO_enuGetPinValue+0x28>
    1ad4:	81 70       	andi	r24, 0x01	; 1
    1ad6:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuerrorStates = ES_OK;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    1ada:	08 95       	ret
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    1adc:	80 b3       	in	r24, 0x10	; 16
    1ade:	f4 cf       	rjmp	.-24     	; 0x1ac8 <DIO_enuGetPinValue+0x24>
			Local_enuerrorStates = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuerrorStates = ES_NULL_POINTER;
    1ae0:	82 e0       	ldi	r24, 0x02	; 2
    1ae2:	08 95       	ret
			}
			Local_enuerrorStates = ES_OK;
		}
		else
		{
			Local_enuerrorStates = ES_OUT_OF_RANGE;
    1ae4:	83 e0       	ldi	r24, 0x03	; 3
	{
		Local_enuerrorStates = ES_NULL_POINTER;
	}

	return Local_enuerrorStates;
}
    1ae6:	08 95       	ret

00001ae8 <EXTI_enuInit>:

		GICR &= ~(1<<6);
		Local_enuerrorStates = ES_OK;

return Local_enuerrorStates;
}
    1ae8:	8b b7       	in	r24, 0x3b	; 59
    1aea:	80 64       	ori	r24, 0x40	; 64
    1aec:	8b bf       	out	0x3b, r24	; 59
    1aee:	85 b7       	in	r24, 0x35	; 53
    1af0:	83 60       	ori	r24, 0x03	; 3
    1af2:	85 bf       	out	0x35, r24	; 53
    1af4:	80 e0       	ldi	r24, 0x00	; 0
    1af6:	08 95       	ret

00001af8 <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(volatile void  (* pfunAppFunction)(void))//,u8 Copy_u8InterruptNum)
{
ES_t Local_enuerrorStates = ES_NOK ;

	if(pfunAppFunction != NULL)
    1af8:	00 97       	sbiw	r24, 0x00	; 0
    1afa:	31 f0       	breq	.+12     	; 0x1b08 <EXTI_enuCallBack+0x10>
	{
		
		
			EXTI_pfunISR_fun = pfunAppFunction;
    1afc:	90 93 22 05 	sts	0x0522, r25	; 0x800522 <EXTI_pfunISR_fun+0x1>
    1b00:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <EXTI_pfunISR_fun>

			Local_enuerrorStates = ES_OK;
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	08 95       	ret
		
	}
	else
	{
		Local_enuerrorStates = ES_NULL_POINTER;
    1b08:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_enuerrorStates;
}
    1b0a:	08 95       	ret

00001b0c <__vector_1>:

ISR(VECT_INT0)
{
    1b0c:	1f 92       	push	r1
    1b0e:	0f 92       	push	r0
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	0f 92       	push	r0
    1b14:	11 24       	eor	r1, r1
    1b16:	2f 93       	push	r18
    1b18:	3f 93       	push	r19
    1b1a:	4f 93       	push	r20
    1b1c:	5f 93       	push	r21
    1b1e:	6f 93       	push	r22
    1b20:	7f 93       	push	r23
    1b22:	8f 93       	push	r24
    1b24:	9f 93       	push	r25
    1b26:	af 93       	push	r26
    1b28:	bf 93       	push	r27
    1b2a:	ef 93       	push	r30
    1b2c:	ff 93       	push	r31
	if(EXTI_pfunISR_fun != NULL)
    1b2e:	e0 91 21 05 	lds	r30, 0x0521	; 0x800521 <EXTI_pfunISR_fun>
    1b32:	f0 91 22 05 	lds	r31, 0x0522	; 0x800522 <EXTI_pfunISR_fun+0x1>
    1b36:	30 97       	sbiw	r30, 0x00	; 0
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <__vector_1+0x30>
	{
		EXTI_pfunISR_fun ();
    1b3a:	09 95       	icall
	}
}
    1b3c:	ff 91       	pop	r31
    1b3e:	ef 91       	pop	r30
    1b40:	bf 91       	pop	r27
    1b42:	af 91       	pop	r26
    1b44:	9f 91       	pop	r25
    1b46:	8f 91       	pop	r24
    1b48:	7f 91       	pop	r23
    1b4a:	6f 91       	pop	r22
    1b4c:	5f 91       	pop	r21
    1b4e:	4f 91       	pop	r20
    1b50:	3f 91       	pop	r19
    1b52:	2f 91       	pop	r18
    1b54:	0f 90       	pop	r0
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	0f 90       	pop	r0
    1b5a:	1f 90       	pop	r1
    1b5c:	18 95       	reti

00001b5e <SPI_vInitMaster>:
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
	SPCR |= (1<<SPE);//Enable the SPI
    1b5e:	87 b3       	in	r24, 0x17	; 23
    1b60:	80 6b       	ori	r24, 0xB0	; 176
    1b62:	87 bb       	out	0x17, r24	; 23
    1b64:	8d b1       	in	r24, 0x0d	; 13
    1b66:	81 65       	ori	r24, 0x51	; 81
    1b68:	8d b9       	out	0x0d, r24	; 13
    1b6a:	08 95       	ret

00001b6c <SPI_ui8TransmitRecive>:
}

u8 SPI_ui8TransmitRecive (u8 data)
{
	SPDR = data;//move the given data to SPI Data register
    1b6c:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    1b6e:	77 9b       	sbis	0x0e, 7	; 14
    1b70:	fe cf       	rjmp	.-4      	; 0x1b6e <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    1b72:	8f b1       	in	r24, 0x0f	; 15
}
    1b74:	08 95       	ret

00001b76 <UART_enuUART_Init>:

ES_t UART_enuUART_Init(void)
{
	ES_t Local_ErorrState = ES_NOK;

	UCSRA = 0x00; // flags RXC,TXC,UDRE -> 0,, U2X -> 0(Synchronous)
    1b76:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18; // set to be a reciever and a transmiter
    1b78:	88 e1       	ldi	r24, 0x18	; 24
    1b7a:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86; // set frame format
    1b7c:	86 e8       	ldi	r24, 0x86	; 134
    1b7e:	80 bd       	out	0x20, r24	; 32

	UBRRL = 103; // 0110 0111 (BAUD)
    1b80:	87 e6       	ldi	r24, 0x67	; 103
    1b82:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;   // BAUD>>8  -> 0
    1b84:	10 bc       	out	0x20, r1	; 32

	return Local_ErorrState;
}
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	08 95       	ret

00001b8a <UART_enuSendChar>:
ES_t UART_enuSendChar( u8 Copy_u8CharData)
{
	ES_t Local_ErorrState = ES_NOK;
	// check if UDR ready(empty)for write or not using UDRE bit--> if ready..go else wait.

	while(! ((UCSRA >> 5) & 1)); // (UCSRA >> 5) -> UDRE
    1b8a:	5d 9b       	sbis	0x0b, 5	; 11
    1b8c:	fe cf       	rjmp	.-4      	; 0x1b8a <UART_enuSendChar>
	UDR = Copy_u8CharData;
    1b8e:	8c b9       	out	0x0c, r24	; 12
	  while(!((UCSRA >> 6) & 1));
	  UCSRA |= (1>>6);

*/
	return Local_ErorrState;
}
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	08 95       	ret

00001b94 <UART_enuRecieveChar>:
{
	ES_t Local_ErorrState = ES_NOK;

// As long the RXc is 0 so there is no recieved data at that moment --> recieve the new data

	while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7) -> RXc
    1b94:	5f 9b       	sbis	0x0b, 7	; 11
    1b96:	fe cf       	rjmp	.-4      	; 0x1b94 <UART_enuRecieveChar>
	*Copy_u8RxChar = UDR;
    1b98:	2c b1       	in	r18, 0x0c	; 12
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	20 83       	st	Z, r18
	//UART_First_ConnectionFlag ++;
	return Local_ErorrState;
}
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	08 95       	ret

00001ba2 <UART_enuSendString>:

ES_t UART_enuSendString(u8 * Copy_Au8StringData)
{
    1ba2:	ac 01       	movw	r20, r24
	ES_t Local_ErorrState = ES_NOK;

	u8 Local_u8Iter = 0;
    1ba4:	90 e0       	ldi	r25, 0x00	; 0

	while(Copy_Au8StringData[Local_u8Iter] != 0) // check if data not equal  NULL
    1ba6:	fa 01       	movw	r30, r20
    1ba8:	e9 0f       	add	r30, r25
    1baa:	f1 1d       	adc	r31, r1
    1bac:	20 81       	ld	r18, Z
    1bae:	22 23       	and	r18, r18
    1bb0:	29 f0       	breq	.+10     	; 0x1bbc <UART_enuSendString+0x1a>
	{
		while(! ((UCSRA>>5) & 1 )); // wait until the UDR is empty using (UCSRA>>5) -> UDRE
    1bb2:	5d 9b       	sbis	0x0b, 5	; 11
    1bb4:	fe cf       	rjmp	.-4      	; 0x1bb2 <UART_enuSendString+0x10>
		UDR = (Copy_Au8StringData[Local_u8Iter]);
    1bb6:	2c b9       	out	0x0c, r18	; 12
		//UART_First_ConnectionFlag++;
		Local_u8Iter++;
    1bb8:	9f 5f       	subi	r25, 0xFF	; 255
    1bba:	f5 cf       	rjmp	.-22     	; 0x1ba6 <UART_enuSendString+0x4>
	}

	return Local_ErorrState;
}
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	08 95       	ret

00001bc0 <UART_enuRecieveString>:

ES_t UART_enuRecieveString(u8 * Copy_Au8RxString)
{
    1bc0:	ac 01       	movw	r20, r24

	(Copy_Au8RxString[Local_u8Iter++]) = Local_u8TempChar;

	}
#elif NEW_LINE == YES
	u8 Local_u8Iter = 0;
    1bc2:	90 e0       	ldi	r25, 0x00	; 0

	while(1)
	{

		while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7)-> RXc
    1bc4:	5f 9b       	sbis	0x0b, 7	; 11
    1bc6:	fe cf       	rjmp	.-4      	; 0x1bc4 <UART_enuRecieveString+0x4>
		(Copy_Au8RxString[Local_u8Iter]) = UDR ;
    1bc8:	fa 01       	movw	r30, r20
    1bca:	e9 0f       	add	r30, r25
    1bcc:	f1 1d       	adc	r31, r1
    1bce:	2c b1       	in	r18, 0x0c	; 12
    1bd0:	20 83       	st	Z, r18

//to display what is typed

		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
    1bd2:	5d 9b       	sbis	0x0b, 5	; 11
    1bd4:	fe cf       	rjmp	.-4      	; 0x1bd2 <UART_enuRecieveString+0x12>
		UDR = (Copy_Au8RxString[Local_u8Iter]);
    1bd6:	2c b9       	out	0x0c, r18	; 12

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
    1bd8:	20 81       	ld	r18, Z
    1bda:	2d 30       	cpi	r18, 0x0D	; 13
    1bdc:	21 f0       	breq	.+8      	; 0x1be6 <UART_enuRecieveString+0x26>
    1bde:	2a 30       	cpi	r18, 0x0A	; 10
    1be0:	11 f0       	breq	.+4      	; 0x1be6 <UART_enuRecieveString+0x26>
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
			break;
		}

		Local_u8Iter++;
    1be2:	9f 5f       	subi	r25, 0xFF	; 255
	}
    1be4:	ef cf       	rjmp	.-34     	; 0x1bc4 <UART_enuRecieveString+0x4>
		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
		UDR = (Copy_Au8RxString[Local_u8Iter]);

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
    1be6:	10 82       	st	Z, r1
		Local_u8Iter++;
	}

#endif
	return Local_ErorrState;
}
    1be8:	80 e0       	ldi	r24, 0x00	; 0
    1bea:	08 95       	ret

00001bec <UART_enuCheck_Connection>:


u8 UART_enuCheck_Connection()
{	u8 readUDR;
	if(((UCSRA >> 7) & 1)!=0)
    1bec:	8b b1       	in	r24, 0x0b	; 11
    1bee:	88 1f       	adc	r24, r24
    1bf0:	88 27       	eor	r24, r24
    1bf2:	88 1f       	adc	r24, r24
    1bf4:	11 f0       	breq	.+4      	; 0x1bfa <UART_enuCheck_Connection+0xe>
	{
		readUDR = UDR;
    1bf6:	8c b1       	in	r24, 0x0c	; 12
		return 1;
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
	}

	return 0;
}
    1bfa:	08 95       	ret

00001bfc <__udivmodhi4>:
    1bfc:	aa 1b       	sub	r26, r26
    1bfe:	bb 1b       	sub	r27, r27
    1c00:	51 e1       	ldi	r21, 0x11	; 17
    1c02:	07 c0       	rjmp	.+14     	; 0x1c12 <__udivmodhi4_ep>

00001c04 <__udivmodhi4_loop>:
    1c04:	aa 1f       	adc	r26, r26
    1c06:	bb 1f       	adc	r27, r27
    1c08:	a6 17       	cp	r26, r22
    1c0a:	b7 07       	cpc	r27, r23
    1c0c:	10 f0       	brcs	.+4      	; 0x1c12 <__udivmodhi4_ep>
    1c0e:	a6 1b       	sub	r26, r22
    1c10:	b7 0b       	sbc	r27, r23

00001c12 <__udivmodhi4_ep>:
    1c12:	88 1f       	adc	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	5a 95       	dec	r21
    1c18:	a9 f7       	brne	.-22     	; 0x1c04 <__udivmodhi4_loop>
    1c1a:	80 95       	com	r24
    1c1c:	90 95       	com	r25
    1c1e:	bc 01       	movw	r22, r24
    1c20:	cd 01       	movw	r24, r26
    1c22:	08 95       	ret

00001c24 <__udivmodsi4>:
    1c24:	a1 e2       	ldi	r26, 0x21	; 33
    1c26:	1a 2e       	mov	r1, r26
    1c28:	aa 1b       	sub	r26, r26
    1c2a:	bb 1b       	sub	r27, r27
    1c2c:	fd 01       	movw	r30, r26
    1c2e:	0d c0       	rjmp	.+26     	; 0x1c4a <__udivmodsi4_ep>

00001c30 <__udivmodsi4_loop>:
    1c30:	aa 1f       	adc	r26, r26
    1c32:	bb 1f       	adc	r27, r27
    1c34:	ee 1f       	adc	r30, r30
    1c36:	ff 1f       	adc	r31, r31
    1c38:	a2 17       	cp	r26, r18
    1c3a:	b3 07       	cpc	r27, r19
    1c3c:	e4 07       	cpc	r30, r20
    1c3e:	f5 07       	cpc	r31, r21
    1c40:	20 f0       	brcs	.+8      	; 0x1c4a <__udivmodsi4_ep>
    1c42:	a2 1b       	sub	r26, r18
    1c44:	b3 0b       	sbc	r27, r19
    1c46:	e4 0b       	sbc	r30, r20
    1c48:	f5 0b       	sbc	r31, r21

00001c4a <__udivmodsi4_ep>:
    1c4a:	66 1f       	adc	r22, r22
    1c4c:	77 1f       	adc	r23, r23
    1c4e:	88 1f       	adc	r24, r24
    1c50:	99 1f       	adc	r25, r25
    1c52:	1a 94       	dec	r1
    1c54:	69 f7       	brne	.-38     	; 0x1c30 <__udivmodsi4_loop>
    1c56:	60 95       	com	r22
    1c58:	70 95       	com	r23
    1c5a:	80 95       	com	r24
    1c5c:	90 95       	com	r25
    1c5e:	9b 01       	movw	r18, r22
    1c60:	ac 01       	movw	r20, r24
    1c62:	bd 01       	movw	r22, r26
    1c64:	cf 01       	movw	r24, r30
    1c66:	08 95       	ret

00001c68 <__tablejump2__>:
    1c68:	ee 0f       	add	r30, r30
    1c6a:	ff 1f       	adc	r31, r31
    1c6c:	05 90       	lpm	r0, Z+
    1c6e:	f4 91       	lpm	r31, Z
    1c70:	e0 2d       	mov	r30, r0
    1c72:	09 94       	ijmp

00001c74 <__muluhisi3>:
    1c74:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__umulhisi3>
    1c78:	a5 9f       	mul	r26, r21
    1c7a:	90 0d       	add	r25, r0
    1c7c:	b4 9f       	mul	r27, r20
    1c7e:	90 0d       	add	r25, r0
    1c80:	a4 9f       	mul	r26, r20
    1c82:	80 0d       	add	r24, r0
    1c84:	91 1d       	adc	r25, r1
    1c86:	11 24       	eor	r1, r1
    1c88:	08 95       	ret

00001c8a <__umulhisi3>:
    1c8a:	a2 9f       	mul	r26, r18
    1c8c:	b0 01       	movw	r22, r0
    1c8e:	b3 9f       	mul	r27, r19
    1c90:	c0 01       	movw	r24, r0
    1c92:	a3 9f       	mul	r26, r19
    1c94:	70 0d       	add	r23, r0
    1c96:	81 1d       	adc	r24, r1
    1c98:	11 24       	eor	r1, r1
    1c9a:	91 1d       	adc	r25, r1
    1c9c:	b2 9f       	mul	r27, r18
    1c9e:	70 0d       	add	r23, r0
    1ca0:	81 1d       	adc	r24, r1
    1ca2:	11 24       	eor	r1, r1
    1ca4:	91 1d       	adc	r25, r1
    1ca6:	08 95       	ret

00001ca8 <_exit>:
    1ca8:	f8 94       	cli

00001caa <__stop_program>:
    1caa:	ff cf       	rjmp	.-2      	; 0x1caa <__stop_program>
