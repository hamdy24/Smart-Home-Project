
AVRMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001cc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004f8  00800060  00001cc0  00001d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800558  00800558  0000224c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000224c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000227c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000220  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004590  00000000  00000000  000024d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f8c  00000000  00000000  00006a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001fe3  00000000  00000000  000079f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000055c  00000000  00000000  000099d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f83  00000000  00000000  00009f34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000260f  00000000  00000000  0000aeb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  0000d4c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
       4:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__vector_1>
       8:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
       c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      10:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      14:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      18:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      1c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      20:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      24:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      28:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      2c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      30:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      34:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      38:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      3c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      40:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      44:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      48:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      4c:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      50:	0c 94 57 00 	jmp	0xae	; 0xae <__bad_interrupt>
      54:	05 04       	cpc	r0, r5
      56:	0a 04       	cpc	r0, r10
      58:	14 04       	cpc	r1, r4
      5a:	19 04       	cpc	r1, r9
      5c:	38 04       	cpc	r3, r8
      5e:	2a 04       	cpc	r2, r10
      60:	25 04       	cpc	r2, r5
      62:	85 05       	cpc	r24, r5
      64:	8a 05       	cpc	r24, r10
      66:	96 05       	cpc	r25, r6
      68:	9b 05       	cpc	r25, r11
      6a:	a0 05       	cpc	r26, r0
      6c:	ac 05       	cpc	r26, r12
      6e:	af 05       	cpc	r26, r15
      70:	b2 05       	cpc	r27, r2
      72:	e0 05       	cpc	r30, r0

00000074 <__ctors_end>:
      74:	11 24       	eor	r1, r1
      76:	1f be       	out	0x3f, r1	; 63
      78:	cf e5       	ldi	r28, 0x5F	; 95
      7a:	d8 e0       	ldi	r29, 0x08	; 8
      7c:	de bf       	out	0x3e, r29	; 62
      7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
      80:	15 e0       	ldi	r17, 0x05	; 5
      82:	a0 e6       	ldi	r26, 0x60	; 96
      84:	b0 e0       	ldi	r27, 0x00	; 0
      86:	e0 ec       	ldi	r30, 0xC0	; 192
      88:	fc e1       	ldi	r31, 0x1C	; 28
      8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
      8c:	05 90       	lpm	r0, Z+
      8e:	0d 92       	st	X+, r0
      90:	a8 35       	cpi	r26, 0x58	; 88
      92:	b1 07       	cpc	r27, r17
      94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>

00000096 <__do_clear_bss>:
      96:	25 e0       	ldi	r18, 0x05	; 5
      98:	a8 e5       	ldi	r26, 0x58	; 88
      9a:	b5 e0       	ldi	r27, 0x05	; 5
      9c:	01 c0       	rjmp	.+2      	; 0xa0 <.do_clear_bss_start>

0000009e <.do_clear_bss_loop>:
      9e:	1d 92       	st	X+, r1

000000a0 <.do_clear_bss_start>:
      a0:	a0 36       	cpi	r26, 0x60	; 96
      a2:	b2 07       	cpc	r27, r18
      a4:	e1 f7       	brne	.-8      	; 0x9e <.do_clear_bss_loop>
      a6:	0e 94 3e 02 	call	0x47c	; 0x47c <main>
      aa:	0c 94 5e 0e 	jmp	0x1cbc	; 0x1cbc <_exit>

000000ae <__bad_interrupt>:
      ae:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b2 <LoginSystem_SaveNewUser>:

#include <util/delay.h>


	ES_t LoginSystem_SaveNewUser(User_t Copy_strNewUser,u8 *Copy_u8NumofRegisteredUsers)
	{
      b2:	cf 92       	push	r12
      b4:	df 92       	push	r13
      b6:	ef 92       	push	r14
      b8:	ff 92       	push	r15
      ba:	0f 93       	push	r16
      bc:	1f 93       	push	r17
      be:	cf 93       	push	r28
      c0:	df 93       	push	r29
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	2b 97       	sbiw	r28, 0x0b	; 11
      c8:	0f b6       	in	r0, 0x3f	; 63
      ca:	f8 94       	cli
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	0f be       	out	0x3f, r0	; 63
      d0:	cd bf       	out	0x3d, r28	; 61
      d2:	e9 82       	std	Y+1, r14	; 0x01
      d4:	fa 82       	std	Y+2, r15	; 0x02
      d6:	0b 83       	std	Y+3, r16	; 0x03
      d8:	1c 83       	std	Y+4, r17	; 0x04
      da:	2d 83       	std	Y+5, r18	; 0x05
      dc:	3e 83       	std	Y+6, r19	; 0x06
      de:	4f 83       	std	Y+7, r20	; 0x07
      e0:	58 87       	std	Y+8, r21	; 0x08
      e2:	69 87       	std	Y+9, r22	; 0x09
      e4:	7a 87       	std	Y+10, r23	; 0x0a
      e6:	8b 87       	std	Y+11, r24	; 0x0b
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1), Copy_strNewUser.UserName,MAX_NO_OF_LETTERS);
      e8:	f6 01       	movw	r30, r12
      ea:	80 81       	ld	r24, Z
      ec:	f9 e0       	ldi	r31, 0x09	; 9
      ee:	8f 9f       	mul	r24, r31
      f0:	c0 01       	movw	r24, r0
      f2:	11 24       	eor	r1, r1
      f4:	44 e0       	ldi	r20, 0x04	; 4
      f6:	50 e0       	ldi	r21, 0x00	; 0
      f8:	be 01       	movw	r22, r28
      fa:	6f 5f       	subi	r22, 0xFF	; 255
      fc:	7f 4f       	sbci	r23, 0xFF	; 255
      fe:	42 96       	adiw	r24, 0x12	; 18
     100:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <EEPROM_vWriteBlockToAddress>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     104:	2f ef       	ldi	r18, 0xFF	; 255
     106:	80 e7       	ldi	r24, 0x70	; 112
     108:	92 e0       	ldi	r25, 0x02	; 2
     10a:	21 50       	subi	r18, 0x01	; 1
     10c:	80 40       	sbci	r24, 0x00	; 0
     10e:	90 40       	sbci	r25, 0x00	; 0
     110:	e1 f7       	brne	.-8      	; 0x10a <LoginSystem_SaveNewUser+0x58>
     112:	00 c0       	rjmp	.+0      	; 0x114 <LoginSystem_SaveNewUser+0x62>
     114:	00 00       	nop
		_delay_ms(50);
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_strNewUser.Password,MAX_NO_OF_LETTERS);
     116:	f6 01       	movw	r30, r12
     118:	80 81       	ld	r24, Z
     11a:	f9 e0       	ldi	r31, 0x09	; 9
     11c:	8f 9f       	mul	r24, r31
     11e:	c0 01       	movw	r24, r0
     120:	11 24       	eor	r1, r1
     122:	44 e0       	ldi	r20, 0x04	; 4
     124:	50 e0       	ldi	r21, 0x00	; 0
     126:	be 01       	movw	r22, r28
     128:	6a 5f       	subi	r22, 0xFA	; 250
     12a:	7f 4f       	sbci	r23, 0xFF	; 255
     12c:	46 96       	adiw	r24, 0x16	; 22
     12e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <EEPROM_vWriteBlockToAddress>
     132:	2f ef       	ldi	r18, 0xFF	; 255
     134:	80 e7       	ldi	r24, 0x70	; 112
     136:	92 e0       	ldi	r25, 0x02	; 2
     138:	21 50       	subi	r18, 0x01	; 1
     13a:	80 40       	sbci	r24, 0x00	; 0
     13c:	90 40       	sbci	r25, 0x00	; 0
     13e:	e1 f7       	brne	.-8      	; 0x138 <LoginSystem_SaveNewUser+0x86>
     140:	00 c0       	rjmp	.+0      	; 0x142 <LoginSystem_SaveNewUser+0x90>
     142:	00 00       	nop
		_delay_ms(50);
		

		EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_strNewUser.User_Priority);
     144:	f6 01       	movw	r30, r12
     146:	80 81       	ld	r24, Z
     148:	f9 e0       	ldi	r31, 0x09	; 9
     14a:	8f 9f       	mul	r24, r31
     14c:	c0 01       	movw	r24, r0
     14e:	11 24       	eor	r1, r1
     150:	6b 85       	ldd	r22, Y+11	; 0x0b
     152:	4a 96       	adiw	r24, 0x1a	; 26
     154:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <EEPROM_vWriteByteToAddress>
     158:	2f ef       	ldi	r18, 0xFF	; 255
     15a:	80 e7       	ldi	r24, 0x70	; 112
     15c:	92 e0       	ldi	r25, 0x02	; 2
     15e:	21 50       	subi	r18, 0x01	; 1
     160:	80 40       	sbci	r24, 0x00	; 0
     162:	90 40       	sbci	r25, 0x00	; 0
     164:	e1 f7       	brne	.-8      	; 0x15e <LoginSystem_SaveNewUser+0xac>
     166:	00 c0       	rjmp	.+0      	; 0x168 <LoginSystem_SaveNewUser+0xb6>
     168:	00 00       	nop
		_delay_ms(50);
		(*Copy_u8NumofRegisteredUsers)++;
     16a:	f6 01       	movw	r30, r12
     16c:	60 81       	ld	r22, Z
     16e:	6f 5f       	subi	r22, 0xFF	; 255
     170:	60 83       	st	Z, r22

		EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     172:	81 e1       	ldi	r24, 0x11	; 17
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <EEPROM_vWriteByteToAddress>
	}
     17a:	2b 96       	adiw	r28, 0x0b	; 11
     17c:	0f b6       	in	r0, 0x3f	; 63
     17e:	f8 94       	cli
     180:	de bf       	out	0x3e, r29	; 62
     182:	0f be       	out	0x3f, r0	; 63
     184:	cd bf       	out	0x3d, r28	; 61
     186:	df 91       	pop	r29
     188:	cf 91       	pop	r28
     18a:	1f 91       	pop	r17
     18c:	0f 91       	pop	r16
     18e:	ff 90       	pop	r15
     190:	ef 90       	pop	r14
     192:	df 90       	pop	r13
     194:	cf 90       	pop	r12
     196:	08 95       	ret

00000198 <LoginSystem_enuGetDataFromUserByKeypad>:
	ES_t LoginSystem_enuGetDataFromUserByKeypad(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
	{
     198:	af 92       	push	r10
     19a:	bf 92       	push	r11
     19c:	cf 92       	push	r12
     19e:	df 92       	push	r13
     1a0:	ef 92       	push	r14
     1a2:	ff 92       	push	r15
     1a4:	0f 93       	push	r16
     1a6:	1f 93       	push	r17
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
     1ac:	1f 92       	push	r1
     1ae:	cd b7       	in	r28, 0x3d	; 61
     1b0:	de b7       	in	r29, 0x3e	; 62
     1b2:	7c 01       	movw	r14, r24
     1b4:	8b 01       	movw	r16, r22
		ES_t Local_enuerrorStates = ES_NOK;
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
     1b6:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
		LCD_enuDisplayString("Username:");
     1ba:	80 e8       	ldi	r24, 0x80	; 128
     1bc:	90 e0       	ldi	r25, 0x00	; 0
     1be:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	81 e0       	ldi	r24, 0x01	; 1
     1c6:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
     1ca:	67 01       	movw	r12, r14
     1cc:	57 01       	movw	r10, r14
     1ce:	84 e0       	ldi	r24, 0x04	; 4
     1d0:	a8 0e       	add	r10, r24
     1d2:	b1 1c       	adc	r11, r1
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     1d4:	ce 01       	movw	r24, r28
     1d6:	01 96       	adiw	r24, 0x01	; 1
     1d8:	0e 94 ac 09 	call	0x1358	; 0x1358 <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
     1de:	0e 94 a1 0b 	call	0x1742	; 0x1742 <LCD_enuSendData>
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	f6 01       	movw	r30, r12
     1e6:	81 93       	st	Z+, r24
     1e8:	6f 01       	movw	r12, r30
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
		LCD_enuDisplayString("Username:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1ea:	ae 16       	cp	r10, r30
     1ec:	bf 06       	cpc	r11, r31
     1ee:	91 f7       	brne	.-28     	; 0x1d4 <LoginSystem_enuGetDataFromUserByKeypad+0x3c>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
			LCD_enuSendData(Local_u8PressedKey);
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
		}
		Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     1f0:	f7 01       	movw	r30, r14
     1f2:	14 82       	std	Z+4, r1	; 0x04

		LCD_enuClearDisplay();
     1f4:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
		LCD_enuDisplayString("Password:");
     1f8:	8a e8       	ldi	r24, 0x8A	; 138
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     200:	60 e0       	ldi	r22, 0x00	; 0
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
     208:	78 01       	movw	r14, r16
     20a:	68 01       	movw	r12, r16
     20c:	f4 e0       	ldi	r31, 0x04	; 4
     20e:	cf 0e       	add	r12, r31
     210:	d1 1c       	adc	r13, r1

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     212:	ce 01       	movw	r24, r28
     214:	01 96       	adiw	r24, 0x01	; 1
     216:	0e 94 ac 09 	call	0x1358	; 0x1358 <Keypad_enuGetPressedKey>
			LCD_enuSendData('*');
     21a:	8a e2       	ldi	r24, 0x2A	; 42
     21c:	0e 94 a1 0b 	call	0x1742	; 0x1742 <LCD_enuSendData>
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;
     220:	89 81       	ldd	r24, Y+1	; 0x01
     222:	f7 01       	movw	r30, r14
     224:	81 93       	st	Z+, r24
     226:	7f 01       	movw	r14, r30

		LCD_enuClearDisplay();
		LCD_enuDisplayString("Password:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     228:	ec 15       	cp	r30, r12
     22a:	fd 05       	cpc	r31, r13
     22c:	91 f7       	brne	.-28     	; 0x212 <LoginSystem_enuGetDataFromUserByKeypad+0x7a>
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
			LCD_enuSendData('*');
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;

		}
		Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     22e:	f8 01       	movw	r30, r16
     230:	14 82       	std	Z+4, r1	; 0x04
		Local_enuerrorStates = ES_OK;
		return Local_enuerrorStates;
	}
     232:	81 e0       	ldi	r24, 0x01	; 1
     234:	0f 90       	pop	r0
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	1f 91       	pop	r17
     23c:	0f 91       	pop	r16
     23e:	ff 90       	pop	r15
     240:	ef 90       	pop	r14
     242:	df 90       	pop	r13
     244:	cf 90       	pop	r12
     246:	bf 90       	pop	r11
     248:	af 90       	pop	r10
     24a:	08 95       	ret

0000024c <LoginSystem_enuGetDataFromUserBY_UART>:
	
		ES_t LoginSystem_enuGetDataFromUserBY_UART(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
		{
     24c:	0f 93       	push	r16
     24e:	1f 93       	push	r17
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	8c 01       	movw	r16, r24
     256:	eb 01       	movw	r28, r22
			ES_t Local_enuerrorStates = ES_NOK;
			UART_enuSendString("\r\n\r\nUsername: ");
     258:	84 e9       	ldi	r24, 0x94	; 148
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Username);
     260:	c8 01       	movw	r24, r16
     262:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <UART_enuRecieveString>
			Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     266:	f8 01       	movw	r30, r16
     268:	14 82       	std	Z+4, r1	; 0x04
			UART_enuSendString("Password: ");
     26a:	83 ea       	ldi	r24, 0xA3	; 163
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Password);
     272:	ce 01       	movw	r24, r28
     274:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <UART_enuRecieveString>
			Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     278:	1c 82       	std	Y+4, r1	; 0x04

			Local_enuerrorStates = ES_OK;
			return Local_enuerrorStates;
		}
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	1f 91       	pop	r17
     282:	0f 91       	pop	r16
     284:	08 95       	ret

00000286 <LoginSystem_u8Strcmp>:



	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
     286:	dc 01       	movw	r26, r24
		u8 Local_u8Iterator=0;
     288:	40 e0       	ldi	r20, 0x00	; 0
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     28a:	24 2f       	mov	r18, r20
     28c:	30 e0       	ldi	r19, 0x00	; 0
     28e:	fd 01       	movw	r30, r26
     290:	e2 0f       	add	r30, r18
     292:	f3 1f       	adc	r31, r19
     294:	90 81       	ld	r25, Z
     296:	fb 01       	movw	r30, r22
     298:	e2 0f       	add	r30, r18
     29a:	f3 1f       	adc	r31, r19
     29c:	20 81       	ld	r18, Z
     29e:	92 13       	cpse	r25, r18
     2a0:	04 c0       	rjmp	.+8      	; 0x2aa <LoginSystem_u8Strcmp+0x24>
		{
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     2a2:	99 23       	and	r25, r25
     2a4:	41 f0       	breq	.+16     	; 0x2b6 <LoginSystem_u8Strcmp+0x30>
				break;
			Local_u8Iterator++;
     2a6:	4f 5f       	subi	r20, 0xFF	; 255
     2a8:	f0 cf       	rjmp	.-32     	; 0x28a <LoginSystem_u8Strcmp+0x4>
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     2aa:	91 11       	cpse	r25, r1
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <LoginSystem_u8Strcmp+0x34>
			return TRUE;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	22 23       	and	r18, r18
     2b2:	21 f0       	breq	.+8      	; 0x2bc <LoginSystem_u8Strcmp+0x36>
     2b4:	02 c0       	rjmp	.+4      	; 0x2ba <LoginSystem_u8Strcmp+0x34>
     2b6:	81 e0       	ldi	r24, 0x01	; 1
     2b8:	08 95       	ret
		else
			return FALSE;
     2ba:	80 e0       	ldi	r24, 0x00	; 0
	}
     2bc:	08 95       	ret

000002be <LoginSystem_RemoveUser>:
	
	u8 LoginSystem_RemoveUser(User_t *Copy_AstrUsers,u8 *Copy_u8NumofRegisteredUsers)
		{
     2be:	7f 92       	push	r7
     2c0:	8f 92       	push	r8
     2c2:	9f 92       	push	r9
     2c4:	af 92       	push	r10
     2c6:	bf 92       	push	r11
     2c8:	cf 92       	push	r12
     2ca:	df 92       	push	r13
     2cc:	ef 92       	push	r14
     2ce:	ff 92       	push	r15
     2d0:	0f 93       	push	r16
     2d2:	1f 93       	push	r17
     2d4:	cf 93       	push	r28
     2d6:	df 93       	push	r29
     2d8:	00 d0       	rcall	.+0      	; 0x2da <LoginSystem_RemoveUser+0x1c>
     2da:	00 d0       	rcall	.+0      	; 0x2dc <LoginSystem_RemoveUser+0x1e>
     2dc:	1f 92       	push	r1
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
     2e2:	8c 01       	movw	r16, r24
     2e4:	5b 01       	movw	r10, r22
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
     2e6:	8e ea       	ldi	r24, 0xAE	; 174
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
			UART_enuRecieveString(Local_Au8Username);
     2ee:	ce 01       	movw	r24, r28
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <UART_enuRecieveString>
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     2f6:	1d 82       	std	Y+5, r1	; 0x05
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     2f8:	f5 01       	movw	r30, r10
     2fa:	90 80       	ld	r9, Z
     2fc:	78 01       	movw	r14, r16
     2fe:	d1 2c       	mov	r13, r1
     300:	d9 14       	cp	r13, r9
     302:	09 f4       	brne	.+2      	; 0x306 <LoginSystem_RemoveUser+0x48>
     304:	7e c0       	rjmp	.+252    	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			{
				Copy_u8Flag = LoginSystem_u8Strcmp (Copy_AstrUsers[Local_u8Iterator].UserName,Local_Au8Username);
     306:	7e 2c       	mov	r7, r14
     308:	8f 2c       	mov	r8, r15
     30a:	be 01       	movw	r22, r28
     30c:	6f 5f       	subi	r22, 0xFF	; 255
     30e:	7f 4f       	sbci	r23, 0xFF	; 255
     310:	c7 01       	movw	r24, r14
     312:	0e 94 43 01 	call	0x286	; 0x286 <LoginSystem_u8Strcmp>
     316:	c8 2e       	mov	r12, r24
     318:	fb e0       	ldi	r31, 0x0B	; 11
     31a:	ef 0e       	add	r14, r31
     31c:	f1 1c       	adc	r15, r1
				if (Copy_u8Flag )
     31e:	88 23       	and	r24, r24
     320:	09 f4       	brne	.+2      	; 0x324 <LoginSystem_RemoveUser+0x66>
     322:	6d c0       	rjmp	.+218    	; 0x3fe <LoginSystem_RemoveUser+0x140>
				{
					Copy_AstrUsers[Local_u8Iterator]=Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1];
     324:	f8 01       	movw	r30, r16
     326:	2b e0       	ldi	r18, 0x0B	; 11
     328:	92 9e       	mul	r9, r18
     32a:	e0 0d       	add	r30, r0
     32c:	f1 1d       	adc	r31, r1
     32e:	11 24       	eor	r1, r1
     330:	3b 97       	sbiw	r30, 0x0b	; 11
     332:	8b e0       	ldi	r24, 0x0B	; 11
     334:	a7 2d       	mov	r26, r7
     336:	b8 2d       	mov	r27, r8
     338:	01 90       	ld	r0, Z+
     33a:	0d 92       	st	X+, r0
     33c:	8a 95       	dec	r24
     33e:	e1 f7       	brne	.-8      	; 0x338 <LoginSystem_RemoveUser+0x7a>
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1), Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].UserName,MAX_NO_OF_LETTERS);
     340:	f5 01       	movw	r30, r10
     342:	80 81       	ld	r24, Z
     344:	f9 e0       	ldi	r31, 0x09	; 9
     346:	df 9e       	mul	r13, r31
     348:	70 01       	movw	r14, r0
     34a:	11 24       	eor	r1, r1
     34c:	b8 01       	movw	r22, r16
     34e:	2b e0       	ldi	r18, 0x0B	; 11
     350:	82 9f       	mul	r24, r18
     352:	60 0d       	add	r22, r0
     354:	71 1d       	adc	r23, r1
     356:	11 24       	eor	r1, r1
     358:	6b 50       	subi	r22, 0x0B	; 11
     35a:	71 09       	sbc	r23, r1
     35c:	44 e0       	ldi	r20, 0x04	; 4
     35e:	50 e0       	ldi	r21, 0x00	; 0
     360:	c7 01       	movw	r24, r14
     362:	42 96       	adiw	r24, 0x12	; 18
     364:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <EEPROM_vWriteBlockToAddress>
     368:	8f ef       	ldi	r24, 0xFF	; 255
     36a:	90 e7       	ldi	r25, 0x70	; 112
     36c:	e2 e0       	ldi	r30, 0x02	; 2
     36e:	81 50       	subi	r24, 0x01	; 1
     370:	90 40       	sbci	r25, 0x00	; 0
     372:	e0 40       	sbci	r30, 0x00	; 0
     374:	e1 f7       	brne	.-8      	; 0x36e <LoginSystem_RemoveUser+0xb0>
     376:	00 c0       	rjmp	.+0      	; 0x378 <LoginSystem_RemoveUser+0xba>
     378:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].Password,MAX_NO_OF_LETTERS);
     37a:	f5 01       	movw	r30, r10
     37c:	80 81       	ld	r24, Z
     37e:	b8 01       	movw	r22, r16
     380:	fb e0       	ldi	r31, 0x0B	; 11
     382:	8f 9f       	mul	r24, r31
     384:	60 0d       	add	r22, r0
     386:	71 1d       	adc	r23, r1
     388:	11 24       	eor	r1, r1
     38a:	66 50       	subi	r22, 0x06	; 6
     38c:	71 09       	sbc	r23, r1
     38e:	44 e0       	ldi	r20, 0x04	; 4
     390:	50 e0       	ldi	r21, 0x00	; 0
     392:	c7 01       	movw	r24, r14
     394:	46 96       	adiw	r24, 0x16	; 22
     396:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <EEPROM_vWriteBlockToAddress>
     39a:	2f ef       	ldi	r18, 0xFF	; 255
     39c:	80 e7       	ldi	r24, 0x70	; 112
     39e:	92 e0       	ldi	r25, 0x02	; 2
     3a0:	21 50       	subi	r18, 0x01	; 1
     3a2:	80 40       	sbci	r24, 0x00	; 0
     3a4:	90 40       	sbci	r25, 0x00	; 0
     3a6:	e1 f7       	brne	.-8      	; 0x3a0 <LoginSystem_RemoveUser+0xe2>
     3a8:	00 c0       	rjmp	.+0      	; 0x3aa <LoginSystem_RemoveUser+0xec>
     3aa:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].User_Priority);
     3ac:	f5 01       	movw	r30, r10
     3ae:	80 81       	ld	r24, Z
     3b0:	fb e0       	ldi	r31, 0x0B	; 11
     3b2:	8f 9f       	mul	r24, r31
     3b4:	00 0d       	add	r16, r0
     3b6:	11 1d       	adc	r17, r1
     3b8:	11 24       	eor	r1, r1
     3ba:	f8 01       	movw	r30, r16
     3bc:	3b 97       	sbiw	r30, 0x0b	; 11
     3be:	62 85       	ldd	r22, Z+10	; 0x0a
     3c0:	c7 01       	movw	r24, r14
     3c2:	4a 96       	adiw	r24, 0x1a	; 26
     3c4:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <EEPROM_vWriteByteToAddress>
     3c8:	2f ef       	ldi	r18, 0xFF	; 255
     3ca:	80 e7       	ldi	r24, 0x70	; 112
     3cc:	92 e0       	ldi	r25, 0x02	; 2
     3ce:	21 50       	subi	r18, 0x01	; 1
     3d0:	80 40       	sbci	r24, 0x00	; 0
     3d2:	90 40       	sbci	r25, 0x00	; 0
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <LoginSystem_RemoveUser+0x110>
     3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <LoginSystem_RemoveUser+0x11a>
     3d8:	00 00       	nop
					_delay_ms(50);
					(*Copy_u8NumofRegisteredUsers)--;
     3da:	f5 01       	movw	r30, r10
     3dc:	60 81       	ld	r22, Z
     3de:	61 50       	subi	r22, 0x01	; 1
     3e0:	60 83       	st	Z, r22
					EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     3e2:	81 e1       	ldi	r24, 0x11	; 17
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <EEPROM_vWriteByteToAddress>
     3ea:	ff ef       	ldi	r31, 0xFF	; 255
     3ec:	20 e7       	ldi	r18, 0x70	; 112
     3ee:	82 e0       	ldi	r24, 0x02	; 2
     3f0:	f1 50       	subi	r31, 0x01	; 1
     3f2:	20 40       	sbci	r18, 0x00	; 0
     3f4:	80 40       	sbci	r24, 0x00	; 0
     3f6:	e1 f7       	brne	.-8      	; 0x3f0 <LoginSystem_RemoveUser+0x132>
     3f8:	00 c0       	rjmp	.+0      	; 0x3fa <LoginSystem_RemoveUser+0x13c>
     3fa:	00 00       	nop
     3fc:	03 c0       	rjmp	.+6      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
			UART_enuRecieveString(Local_Au8Username);
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     3fe:	d3 94       	inc	r13
     400:	7f cf       	rjmp	.-258    	; 0x300 <LoginSystem_RemoveUser+0x42>
     402:	c1 2c       	mov	r12, r1
					_delay_ms(50);
					break;
				}
			}
			return Copy_u8Flag;
		}
     404:	8c 2d       	mov	r24, r12
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	1f 91       	pop	r17
     416:	0f 91       	pop	r16
     418:	ff 90       	pop	r15
     41a:	ef 90       	pop	r14
     41c:	df 90       	pop	r13
     41e:	cf 90       	pop	r12
     420:	bf 90       	pop	r11
     422:	af 90       	pop	r10
     424:	9f 90       	pop	r9
     426:	8f 90       	pop	r8
     428:	7f 90       	pop	r7
     42a:	08 95       	ret

0000042c <SetBit>:
	

	
	void SetBit(u8 *x,u8 n)
	{
		(*x) |= (1<<n);
     42c:	21 e0       	ldi	r18, 0x01	; 1
     42e:	30 e0       	ldi	r19, 0x00	; 0
     430:	01 c0       	rjmp	.+2      	; 0x434 <SetBit+0x8>
     432:	22 0f       	add	r18, r18
     434:	6a 95       	dec	r22
     436:	ea f7       	brpl	.-6      	; 0x432 <SetBit+0x6>
     438:	fc 01       	movw	r30, r24
     43a:	30 81       	ld	r19, Z
     43c:	23 2b       	or	r18, r19
     43e:	20 83       	st	Z, r18
     440:	08 95       	ret

00000442 <ToggleBit>:
	}
	void ToggleBit(u8 *x,u8 n)
	{
		(*x) ^=(1<<n);
     442:	21 e0       	ldi	r18, 0x01	; 1
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	01 c0       	rjmp	.+2      	; 0x44a <ToggleBit+0x8>
     448:	22 0f       	add	r18, r18
     44a:	6a 95       	dec	r22
     44c:	ea f7       	brpl	.-6      	; 0x448 <ToggleBit+0x6>
     44e:	fc 01       	movw	r30, r24
     450:	30 81       	ld	r19, Z
     452:	23 27       	eor	r18, r19
     454:	20 83       	st	Z, r18
     456:	08 95       	ret

00000458 <Button_Pressed_Interrupt>:
u8 Program_Status_Flag = 0;
u8 Blocking_Flag=FALSE;
u8 LCD_KEYPAD_USER_FLAG = 0;
volatile void Button_Pressed_Interrupt()
{
	if (LoginSystem_u8AdminOnlineFlag || LoginSystem_u8PromotedUserOnlineFlag || Blocking_Flag )	//5od karar hna
     458:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <LoginSystem_u8AdminOnlineFlag>
     45c:	81 11       	cpse	r24, r1
     45e:	0d c0       	rjmp	.+26     	; 0x47a <Button_Pressed_Interrupt+0x22>
     460:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <LoginSystem_u8PromotedUserOnlineFlag>
     464:	81 11       	cpse	r24, r1
     466:	09 c0       	rjmp	.+18     	; 0x47a <Button_Pressed_Interrupt+0x22>
     468:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <Blocking_Flag>
     46c:	81 11       	cpse	r24, r1
     46e:	05 c0       	rjmp	.+10     	; 0x47a <Button_Pressed_Interrupt+0x22>
	{
	}
	else
	{
		Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
     470:	83 e0       	ldi	r24, 0x03	; 3
     472:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <Program_Status_Flag>
		ShowToUser = MAIN_MENU;
     476:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <ShowToUser>
     47a:	08 95       	ret

0000047c <main>:
	}
	
}
int main (void)
{
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
     484:	c7 54       	subi	r28, 0x47	; 71
     486:	d1 09       	sbc	r29, r1
     488:	0f b6       	in	r0, 0x3f	; 63
     48a:	f8 94       	cli
     48c:	de bf       	out	0x3e, r29	; 62
     48e:	0f be       	out	0x3f, r0	; 63
     490:	cd bf       	out	0x3d, r28	; 61
	
/*************************************************************************************************************/
/*******************************************INITIALIZATIONS***************************************************/
/*************************************************************************************************************/
DIO_enuInit();
     492:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <DIO_enuInit>
SPI_vidInit();
     496:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <SPI_vidInit>
UART_enuUART_Init();
     49a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <UART_enuUART_Init>

LCD_enuInit();
     49e:	0e 94 44 0b 	call	0x1688	; 0x1688 <LCD_enuInit>
Keypad_enuInit();
     4a2:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <Keypad_enuInit>
EXTI_enuInit();
     4a6:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <EXTI_enuInit>
	
EXTI_enuCallBack((volatile void (*) (void))Button_Pressed_Interrupt);
     4aa:	8c e2       	ldi	r24, 0x2C	; 44
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <EXTI_enuCallBack>

/************************************************************************************************************/
/***********************************DEVICE OUTPUT CONFIGURATION**********************************************/
/************************************************************************************************************/

DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN1,DIO_u8OUTPUT); //UART Transmit Enable Pin output
     4b2:	41 e0       	ldi	r20, 0x01	; 1
     4b4:	61 e0       	ldi	r22, 0x01	; 1
     4b6:	83 e0       	ldi	r24, 0x03	; 3
     4b8:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
DIO_enuSetPinDirection(DIO_u8GROUP_C,DIO_u8PIN0,DIO_u8OUTPUT); // Blocking mode pin
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	60 e0       	ldi	r22, 0x00	; 0
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
__asm("sei");	// GIE Enable
     4c6:	78 94       	sei
/**************************************VARIABLE DECLARATIONS*************************************************/
/************************************************************************************************************/

User_t LoginSystem_strAdmin;
User_t LoginSystem_AstrUsers[MAX_NO_OF_USERS];
u8 LoginSystem_NumOfRegisteredUsers=0;
     4c8:	28 96       	adiw	r28, 0x08	; 8
     4ca:	1f ae       	std	Y+63, r1	; 0x3f
     4cc:	28 97       	sbiw	r28, 0x08	; 8
u8 LoginSystem_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
u8 LoginSystem_Au8Password[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];

u8 Keypad_Pressed_Key;
u8 Current_State = 0;
     4ce:	26 96       	adiw	r28, 0x06	; 6
     4d0:	1f ae       	std	Y+63, r1	; 0x3f
     4d2:	26 97       	sbiw	r28, 0x06	; 6

/************************************************************************************************************/
/********************************************WELCOME PAGE****************************************************/
/************************************************************************************************************/
	
	LCD_enuDisplayString("Welcome To Smart");
     4d4:	88 ed       	ldi	r24, 0xD8	; 216
     4d6:	90 e0       	ldi	r25, 0x00	; 0
     4d8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
	LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     4dc:	60 e0       	ldi	r22, 0x00	; 0
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
	LCD_enuDisplayString("Home !");
     4e4:	89 ee       	ldi	r24, 0xE9	; 233
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
	EEPROM_ui8ReadByteFromAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,&Program_Status_Flag);
     4ec:	6a e5       	ldi	r22, 0x5A	; 90
     4ee:	75 e0       	ldi	r23, 0x05	; 5
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <EEPROM_ui8ReadByteFromAddress>
     4f6:	2f ef       	ldi	r18, 0xFF	; 255
     4f8:	3d e2       	ldi	r19, 0x2D	; 45
     4fa:	82 e2       	ldi	r24, 0x22	; 34
     4fc:	21 50       	subi	r18, 0x01	; 1
     4fe:	30 40       	sbci	r19, 0x00	; 0
     500:	80 40       	sbci	r24, 0x00	; 0
     502:	e1 f7       	brne	.-8      	; 0x4fc <main+0x80>
     504:	00 c0       	rjmp	.+0      	; 0x506 <main+0x8a>
     506:	00 00       	nop
	_delay_ms (700);
	LCD_enuClearDisplay();
     508:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>

	
			if (Program_Status_Flag == FIRST_TIME_USE_STATUS)
     50c:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <Program_Status_Flag>
     510:	8f 3f       	cpi	r24, 0xFF	; 255
     512:	09 f0       	breq	.+2      	; 0x516 <main+0x9a>
     514:	91 c0       	rjmp	.+290    	; 0x638 <main+0x1bc>
			{

				EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,LoginSystem_NumOfRegisteredUsers);
     516:	28 96       	adiw	r28, 0x08	; 8
     518:	6f ad       	ldd	r22, Y+63	; 0x3f
     51a:	28 97       	sbiw	r28, 0x08	; 8
     51c:	81 e1       	ldi	r24, 0x11	; 17
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <EEPROM_vWriteByteToAddress>
     524:	9f ef       	ldi	r25, 0xFF	; 255
     526:	e2 e5       	ldi	r30, 0x52	; 82
     528:	f7 e0       	ldi	r31, 0x07	; 7
     52a:	91 50       	subi	r25, 0x01	; 1
     52c:	e0 40       	sbci	r30, 0x00	; 0
     52e:	f0 40       	sbci	r31, 0x00	; 0
     530:	e1 f7       	brne	.-8      	; 0x52a <main+0xae>
     532:	00 c0       	rjmp	.+0      	; 0x534 <main+0xb8>
     534:	00 00       	nop
				_delay_ms(150);
				LCD_enuDisplayString("For First Time");
     536:	80 ef       	ldi	r24, 0xF0	; 240
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     53e:	60 e0       	ldi	r22, 0x00	; 0
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Use");
     546:	8f ef       	ldi	r24, 0xFF	; 255
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
     54e:	2f ef       	ldi	r18, 0xFF	; 255
     550:	3d e2       	ldi	r19, 0x2D	; 45
     552:	82 e2       	ldi	r24, 0x22	; 34
     554:	21 50       	subi	r18, 0x01	; 1
     556:	30 40       	sbci	r19, 0x00	; 0
     558:	80 40       	sbci	r24, 0x00	; 0
     55a:	e1 f7       	brne	.-8      	; 0x554 <main+0xd8>
     55c:	00 c0       	rjmp	.+0      	; 0x55e <main+0xe2>
     55e:	00 00       	nop
				_delay_ms(700);
				LCD_enuClearDisplay();
     560:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
				LCD_enuDisplayString("Register Admin");
     564:	83 e0       	ldi	r24, 0x03	; 3
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("on Keypad");
     574:	82 e1       	ldi	r24, 0x12	; 18
     576:	91 e0       	ldi	r25, 0x01	; 1
     578:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
     57c:	9f ef       	ldi	r25, 0xFF	; 255
     57e:	ed e2       	ldi	r30, 0x2D	; 45
     580:	f2 e2       	ldi	r31, 0x22	; 34
     582:	91 50       	subi	r25, 0x01	; 1
     584:	e0 40       	sbci	r30, 0x00	; 0
     586:	f0 40       	sbci	r31, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <main+0x106>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <main+0x110>
     58c:	00 00       	nop
				_delay_ms(700);
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_strAdmin.UserName, LoginSystem_strAdmin.Password);
     58e:	be 01       	movw	r22, r28
     590:	6e 5c       	subi	r22, 0xCE	; 206
     592:	7f 4f       	sbci	r23, 0xFF	; 255
     594:	ce 01       	movw	r24, r28
     596:	8d 96       	adiw	r24, 0x2d	; 45
     598:	0e 94 cc 00 	call	0x198	; 0x198 <LoginSystem_enuGetDataFromUserByKeypad>
				LoginSystem_strAdmin.User_Priority = ADMIN_PRIORITY;
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	8f ab       	std	Y+55, r24	; 0x37
				
				
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS ,LoginSystem_strAdmin.UserName , MAX_NO_OF_LETTERS);
     5a0:	44 e0       	ldi	r20, 0x04	; 4
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	be 01       	movw	r22, r28
     5a6:	63 5d       	subi	r22, 0xD3	; 211
     5a8:	7f 4f       	sbci	r23, 0xFF	; 255
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <EEPROM_vWriteBlockToAddress>
     5b2:	2f ef       	ldi	r18, 0xFF	; 255
     5b4:	32 e5       	ldi	r19, 0x52	; 82
     5b6:	87 e0       	ldi	r24, 0x07	; 7
     5b8:	21 50       	subi	r18, 0x01	; 1
     5ba:	30 40       	sbci	r19, 0x00	; 0
     5bc:	80 40       	sbci	r24, 0x00	; 0
     5be:	e1 f7       	brne	.-8      	; 0x5b8 <main+0x13c>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <main+0x146>
     5c2:	00 00       	nop
				_delay_ms(150);
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS ,LoginSystem_strAdmin.Password , MAX_NO_OF_LETTERS);
     5c4:	44 e0       	ldi	r20, 0x04	; 4
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	be 01       	movw	r22, r28
     5ca:	6e 5c       	subi	r22, 0xCE	; 206
     5cc:	7f 4f       	sbci	r23, 0xFF	; 255
     5ce:	85 e0       	ldi	r24, 0x05	; 5
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <EEPROM_vWriteBlockToAddress>
     5d6:	9f ef       	ldi	r25, 0xFF	; 255
     5d8:	e2 e5       	ldi	r30, 0x52	; 82
     5da:	f7 e0       	ldi	r31, 0x07	; 7
     5dc:	91 50       	subi	r25, 0x01	; 1
     5de:	e0 40       	sbci	r30, 0x00	; 0
     5e0:	f0 40       	sbci	r31, 0x00	; 0
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x160>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x16a>
     5e6:	00 00       	nop
				_delay_ms(150);

				EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,LOAD_LOGIN_SYSTEM_DATABASE);
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <EEPROM_vWriteByteToAddress>
     5f2:	2f ef       	ldi	r18, 0xFF	; 255
     5f4:	32 e5       	ldi	r19, 0x52	; 82
     5f6:	87 e0       	ldi	r24, 0x07	; 7
     5f8:	21 50       	subi	r18, 0x01	; 1
     5fa:	30 40       	sbci	r19, 0x00	; 0
     5fc:	80 40       	sbci	r24, 0x00	; 0
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <main+0x17c>
     600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x186>
     602:	00 00       	nop
				_delay_ms(150);
	
				LCD_enuClearDisplay();
     604:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
				LCD_enuDisplayString("Saved");
     608:	8c e1       	ldi	r24, 0x1C	; 28
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Successfully");
     618:	89 ea       	ldi	r24, 0xA9	; 169
     61a:	91 e0       	ldi	r25, 0x01	; 1
     61c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
     620:	9f ef       	ldi	r25, 0xFF	; 255
     622:	ed e2       	ldi	r30, 0x2D	; 45
     624:	f2 e2       	ldi	r31, 0x22	; 34
     626:	91 50       	subi	r25, 0x01	; 1
     628:	e0 40       	sbci	r30, 0x00	; 0
     62a:	f0 40       	sbci	r31, 0x00	; 0
     62c:	e1 f7       	brne	.-8      	; 0x626 <main+0x1aa>
     62e:	00 c0       	rjmp	.+0      	; 0x630 <main+0x1b4>
     630:	00 00       	nop
				_delay_ms(700);
				LCD_enuClearDisplay();
     632:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
     636:	9f c0       	rjmp	.+318    	; 0x776 <main+0x2fa>
			}

/*************************************************************************************************************************************************/
/*************************************************************************************************************************************************/

			else if (Program_Status_Flag == LOAD_LOGIN_SYSTEM_DATABASE)
     638:	81 11       	cpse	r24, r1
     63a:	a0 c0       	rjmp	.+320    	; 0x77c <main+0x300>
			{
				
/****************************************Load the Login System database from the EEPROM***************************************/

				EEPROM_ui8ReadByteFromAddress(NO_OF_REGISTERED_USERS_ADDRESS,&LoginSystem_NumOfRegisteredUsers);
     63c:	be 01       	movw	r22, r28
     63e:	69 5b       	subi	r22, 0xB9	; 185
     640:	7f 4f       	sbci	r23, 0xFF	; 255
     642:	81 e1       	ldi	r24, 0x11	; 17
     644:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <EEPROM_ui8ReadByteFromAddress>
     648:	2f ef       	ldi	r18, 0xFF	; 255
     64a:	32 e5       	ldi	r19, 0x52	; 82
     64c:	87 e0       	ldi	r24, 0x07	; 7
     64e:	21 50       	subi	r18, 0x01	; 1
     650:	30 40       	sbci	r19, 0x00	; 0
     652:	80 40       	sbci	r24, 0x00	; 0
     654:	e1 f7       	brne	.-8      	; 0x64e <main+0x1d2>
     656:	00 c0       	rjmp	.+0      	; 0x658 <main+0x1dc>
     658:	00 00       	nop
				_delay_ms(150);
				

				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS,LoginSystem_strAdmin.UserName,MAX_NO_OF_LETTERS);
     65a:	44 e0       	ldi	r20, 0x04	; 4
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	be 01       	movw	r22, r28
     660:	63 5d       	subi	r22, 0xD3	; 211
     662:	7f 4f       	sbci	r23, 0xFF	; 255
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     66c:	19 aa       	std	Y+49, r1	; 0x31
     66e:	9f ef       	ldi	r25, 0xFF	; 255
     670:	e2 e5       	ldi	r30, 0x52	; 82
     672:	f7 e0       	ldi	r31, 0x07	; 7
     674:	91 50       	subi	r25, 0x01	; 1
     676:	e0 40       	sbci	r30, 0x00	; 0
     678:	f0 40       	sbci	r31, 0x00	; 0
     67a:	e1 f7       	brne	.-8      	; 0x674 <main+0x1f8>
     67c:	00 c0       	rjmp	.+0      	; 0x67e <main+0x202>
     67e:	00 00       	nop
				_delay_ms(150);
				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS,LoginSystem_strAdmin.Password,MAX_NO_OF_LETTERS);
     680:	44 e0       	ldi	r20, 0x04	; 4
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	be 01       	movw	r22, r28
     686:	6e 5c       	subi	r22, 0xCE	; 206
     688:	7f 4f       	sbci	r23, 0xFF	; 255
     68a:	85 e0       	ldi	r24, 0x05	; 5
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     692:	1e aa       	std	Y+54, r1	; 0x36
     694:	2f ef       	ldi	r18, 0xFF	; 255
     696:	32 e5       	ldi	r19, 0x52	; 82
     698:	87 e0       	ldi	r24, 0x07	; 7
     69a:	21 50       	subi	r18, 0x01	; 1
     69c:	30 40       	sbci	r19, 0x00	; 0
     69e:	80 40       	sbci	r24, 0x00	; 0
     6a0:	e1 f7       	brne	.-8      	; 0x69a <main+0x21e>
     6a2:	00 c0       	rjmp	.+0      	; 0x6a4 <main+0x228>
     6a4:	00 00       	nop
				_delay_ms(150);
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	8f ab       	std	Y+55, r24	; 0x37
     6aa:	9f ef       	ldi	r25, 0xFF	; 255
     6ac:	e2 e5       	ldi	r30, 0x52	; 82
     6ae:	f7 e0       	ldi	r31, 0x07	; 7
     6b0:	91 50       	subi	r25, 0x01	; 1
     6b2:	e0 40       	sbci	r30, 0x00	; 0
     6b4:	f0 40       	sbci	r31, 0x00	; 0
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <main+0x234>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <main+0x23e>
     6ba:	00 00       	nop
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     6bc:	61 2c       	mov	r6, r1
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     6be:	5b e0       	ldi	r21, 0x0B	; 11
     6c0:	55 2e       	mov	r5, r21
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     6c2:	28 96       	adiw	r28, 0x08	; 8
     6c4:	8f ad       	ldd	r24, Y+63	; 0x3f
     6c6:	28 97       	sbiw	r28, 0x08	; 8
     6c8:	68 16       	cp	r6, r24
     6ca:	08 f0       	brcs	.+2      	; 0x6ce <main+0x252>
     6cc:	54 c0       	rjmp	.+168    	; 0x776 <main+0x2fa>
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
     6ce:	29 e0       	ldi	r18, 0x09	; 9
     6d0:	62 9e       	mul	r6, r18
     6d2:	40 01       	movw	r8, r0
     6d4:	11 24       	eor	r1, r1
     6d6:	64 01       	movw	r12, r8
     6d8:	32 e1       	ldi	r19, 0x12	; 18
     6da:	c3 0e       	add	r12, r19
     6dc:	d1 1c       	adc	r13, r1
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     6de:	56 9c       	mul	r5, r6
     6e0:	80 01       	movw	r16, r0
     6e2:	11 24       	eor	r1, r1
     6e4:	ee 24       	eor	r14, r14
     6e6:	e3 94       	inc	r14
     6e8:	f1 2c       	mov	r15, r1
     6ea:	ec 0e       	add	r14, r28
     6ec:	fd 1e       	adc	r15, r29
     6ee:	e0 0e       	add	r14, r16
     6f0:	f1 1e       	adc	r15, r17
     6f2:	44 e0       	ldi	r20, 0x04	; 4
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	b7 01       	movw	r22, r14
     6f8:	c6 01       	movw	r24, r12
     6fa:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <EEPROM_vReadBlockFromAddress>
     6fe:	8f ef       	ldi	r24, 0xFF	; 255
     700:	92 e5       	ldi	r25, 0x52	; 82
     702:	e7 e0       	ldi	r30, 0x07	; 7
     704:	81 50       	subi	r24, 0x01	; 1
     706:	90 40       	sbci	r25, 0x00	; 0
     708:	e0 40       	sbci	r30, 0x00	; 0
     70a:	e1 f7       	brne	.-8      	; 0x704 <main+0x288>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <main+0x292>
     70e:	00 00       	nop
					_delay_ms(150);

					EEPROM_vReadBlockFromAddress(Local_u16UserAddress + MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].Password,MAX_NO_OF_LETTERS);
     710:	b8 01       	movw	r22, r16
     712:	6b 5f       	subi	r22, 0xFB	; 251
     714:	7f 4f       	sbci	r23, 0xFF	; 255
     716:	21 e0       	ldi	r18, 0x01	; 1
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	2c 0f       	add	r18, r28
     71c:	3d 1f       	adc	r19, r29
     71e:	62 0f       	add	r22, r18
     720:	73 1f       	adc	r23, r19
     722:	44 e0       	ldi	r20, 0x04	; 4
     724:	50 e0       	ldi	r21, 0x00	; 0
     726:	c4 01       	movw	r24, r8
     728:	46 96       	adiw	r24, 0x16	; 22
     72a:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <EEPROM_vReadBlockFromAddress>
     72e:	3f ef       	ldi	r19, 0xFF	; 255
     730:	82 e5       	ldi	r24, 0x52	; 82
     732:	97 e0       	ldi	r25, 0x07	; 7
     734:	31 50       	subi	r19, 0x01	; 1
     736:	80 40       	sbci	r24, 0x00	; 0
     738:	90 40       	sbci	r25, 0x00	; 0
     73a:	e1 f7       	brne	.-8      	; 0x734 <main+0x2b8>
     73c:	00 c0       	rjmp	.+0      	; 0x73e <main+0x2c2>
     73e:	00 00       	nop
					_delay_ms(150);
					EEPROM_ui8ReadByteFromAddress(Local_u16UserAddress + 2*MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].User_Priority);
     740:	b8 01       	movw	r22, r16
     742:	66 5f       	subi	r22, 0xF6	; 246
     744:	7f 4f       	sbci	r23, 0xFF	; 255
     746:	e1 e0       	ldi	r30, 0x01	; 1
     748:	f0 e0       	ldi	r31, 0x00	; 0
     74a:	ec 0f       	add	r30, r28
     74c:	fd 1f       	adc	r31, r29
     74e:	6e 0f       	add	r22, r30
     750:	7f 1f       	adc	r23, r31
     752:	88 e0       	ldi	r24, 0x08	; 8
     754:	8c 0d       	add	r24, r12
     756:	0e 94 37 0d 	call	0x1a6e	; 0x1a6e <EEPROM_ui8ReadByteFromAddress>
     75a:	ff ef       	ldi	r31, 0xFF	; 255
     75c:	22 e5       	ldi	r18, 0x52	; 82
     75e:	37 e0       	ldi	r19, 0x07	; 7
     760:	f1 50       	subi	r31, 0x01	; 1
     762:	20 40       	sbci	r18, 0x00	; 0
     764:	30 40       	sbci	r19, 0x00	; 0
     766:	e1 f7       	brne	.-8      	; 0x760 <main+0x2e4>
     768:	00 c0       	rjmp	.+0      	; 0x76a <main+0x2ee>
     76a:	00 00       	nop
					_delay_ms(150);
					LoginSystem_AstrUsers[Local_u8Iterator].UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     76c:	f7 01       	movw	r30, r14
     76e:	14 82       	std	Z+4, r1	; 0x04
					LoginSystem_AstrUsers[Local_u8Iterator].Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     770:	11 86       	std	Z+9, r1	; 0x09
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     772:	63 94       	inc	r6
     774:	a6 cf       	rjmp	.-180    	; 0x6c2 <main+0x246>
				}
				
				


				Program_Status_Flag = IDLE_STATUS;
     776:	87 e0       	ldi	r24, 0x07	; 7
     778:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <Program_Status_Flag>
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     77c:	33 e0       	ldi	r19, 0x03	; 3
     77e:	93 2e       	mov	r9, r19
				Program_Status_Flag = IDLE_STATUS;
			}
		
	while (1)
	{
		UART_enuSendString("PRESS ENTER TO START\r\n");	
     780:	82 e2       	ldi	r24, 0x22	; 34
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>

		if (Program_Status_Flag == IDLE_STATUS)
     788:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <Program_Status_Flag>
     78c:	87 30       	cpi	r24, 0x07	; 7
     78e:	19 f0       	breq	.+6      	; 0x796 <main+0x31a>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     790:	2b e0       	ldi	r18, 0x0B	; 11
     792:	e2 2e       	mov	r14, r18
     794:	04 c1       	rjmp	.+520    	; 0x99e <__stack+0x13f>
		UART_enuSendString("PRESS ENTER TO START\r\n");	

		if (Program_Status_Flag == IDLE_STATUS)
		{
			u8 Local_u8Iterator = 1;
			if ((Current_State == 0))
     796:	26 96       	adiw	r28, 0x06	; 6
     798:	8f ad       	ldd	r24, Y+63	; 0x3f
     79a:	26 97       	sbiw	r28, 0x06	; 6
     79c:	81 11       	cpse	r24, r1
     79e:	0e c0       	rjmp	.+28     	; 0x7bc <main+0x340>
			{LCD_enuClearDisplay();
     7a0:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
				LCD_enuDisplayString("All Devices");
     7a4:	89 e3       	ldi	r24, 0x39	; 57
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     7ac:	60 e0       	ldi	r22, 0x00	; 0
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Are Off");
     7b4:	85 e4       	ldi	r24, 0x45	; 69
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
					_delay_ms(1000);
					break;
				}
					Local_u8Iterator++;
					if (Local_u8Iterator == 7)
						Local_u8Iterator =1;
     7bc:	ff 24       	eor	r15, r15
     7be:	f3 94       	inc	r15
					_delay_ms(1000);
					break;
					case State_Dimmer:
					LCD_enuClearDisplay();
					LCD_enuDisplayString("Dimmer: ");
					LCD_enuDisplayUnsignedInteger(Dimmer_Percentage);
     7c0:	0b 2d       	mov	r16, r11
     7c2:	10 e0       	ldi	r17, 0x00	; 0
					{
						Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
					}
					else if(UART_enuCheck_Connection())
					{
						Program_Status_Flag = REMOTED_SYSTEM_LOGIN_PAGE_STATUS;
     7c4:	82 e0       	ldi	r24, 0x02	; 2
     7c6:	e8 2e       	mov	r14, r24
					Local_u8Iterator++;
					if (Local_u8Iterator == 7)
						Local_u8Iterator =1;
					if (LCD_KEYPAD_USER_FLAG == 1)
					{
						Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
     7c8:	93 e0       	ldi	r25, 0x03	; 3
     7ca:	d9 2e       	mov	r13, r25
			{LCD_enuClearDisplay();
				LCD_enuDisplayString("All Devices");
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
				LCD_enuDisplayString("Are Off");
			}
			while ( Program_Status_Flag == IDLE_STATUS)
     7cc:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <Program_Status_Flag>
     7d0:	87 30       	cpi	r24, 0x07	; 7
     7d2:	f1 f6       	brne	.-68     	; 0x790 <main+0x314>
			{	
				On_Devices = ( GET_BIT( Current_State, Local_u8Iterator) )*Local_u8Iterator;
     7d4:	26 96       	adiw	r28, 0x06	; 6
     7d6:	2f ad       	ldd	r18, Y+63	; 0x3f
     7d8:	26 97       	sbiw	r28, 0x06	; 6
				switch (On_Devices)
     7da:	e2 2f       	mov	r30, r18
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	0f 2c       	mov	r0, r15
     7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <main+0x36a>
     7e2:	f5 95       	asr	r31
     7e4:	e7 95       	ror	r30
     7e6:	0a 94       	dec	r0
     7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <main+0x366>
     7ea:	e1 70       	andi	r30, 0x01	; 1
     7ec:	ef 9d       	mul	r30, r15
     7ee:	e0 2d       	mov	r30, r0
     7f0:	11 24       	eor	r1, r1
     7f2:	8e 2f       	mov	r24, r30
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	fc 01       	movw	r30, r24
     7f8:	31 97       	sbiw	r30, 0x01	; 1
     7fa:	e7 30       	cpi	r30, 0x07	; 7
     7fc:	f1 05       	cpc	r31, r1
     7fe:	08 f0       	brcs	.+2      	; 0x802 <__DATA_REGION_LENGTH__+0x2>
     800:	49 c0       	rjmp	.+146    	; 0x894 <__stack+0x35>
     802:	e6 5d       	subi	r30, 0xD6	; 214
     804:	ff 4f       	sbci	r31, 0xFF	; 255
     806:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__tablejump2__>
				{
					
					case State_ROOM_1:
					LCD_enuClearDisplay();
     80a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
					LCD_enuDisplayString("Room1 On");
     80e:	8d e4       	ldi	r24, 0x4D	; 77
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	24 c0       	rjmp	.+72     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
					_delay_ms(1000);
					break;
					case State_ROOM_2:
					if (!GET_BIT( Current_State, State_ROOM_1))
     814:	21 ff       	sbrs	r18, 1
					{
						LCD_enuClearDisplay();
     816:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
					}
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     81a:	60 e0       	ldi	r22, 0x00	; 0
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Room2 On");
     822:	86 e5       	ldi	r24, 0x56	; 86
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e c0       	rjmp	.+28     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
					_delay_ms(1000);
					break;
					case State_ROOM_3:
					LCD_enuClearDisplay();
     828:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
					LCD_enuDisplayString("Room3 On");
     82c:	8f e5       	ldi	r24, 0x5F	; 95
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	15 c0       	rjmp	.+42     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
					_delay_ms(1000);
					break;
					case State_ROOM_4:
					if (!GET_BIT( Current_State, State_ROOM_3))
     832:	23 ff       	sbrs	r18, 3
					{
						LCD_enuClearDisplay();
     834:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
					}
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     838:	60 e0       	ldi	r22, 0x00	; 0
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Room4 On");
     840:	88 e6       	ldi	r24, 0x68	; 104
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
     848:	1c c0       	rjmp	.+56     	; 0x882 <__stack+0x23>
					break;
					/*case State_ROOM_5:
					LCD_enuDisplayString("Room 5 controlled");
					break;*/
					case State_Air_Cond:
					LCD_enuDisplayString("Air Cond controlled");
     84a:	81 e7       	ldi	r24, 0x71	; 113
     84c:	91 e0       	ldi	r25, 0x01	; 1
     84e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
					break; 
     852:	20 c0       	rjmp	.+64     	; 0x894 <__stack+0x35>
					case State_Door:
					LCD_enuClearDisplay();
     854:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
					LCD_enuDisplayString("Door is Opened");
     858:	85 e8       	ldi	r24, 0x85	; 133
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
     860:	ff ef       	ldi	r31, 0xFF	; 255
     862:	23 ed       	ldi	r18, 0xD3	; 211
     864:	30 e3       	ldi	r19, 0x30	; 48
     866:	f1 50       	subi	r31, 0x01	; 1
     868:	20 40       	sbci	r18, 0x00	; 0
     86a:	30 40       	sbci	r19, 0x00	; 0
     86c:	e1 f7       	brne	.-8      	; 0x866 <__stack+0x7>
     86e:	10 c0       	rjmp	.+32     	; 0x890 <__stack+0x31>
					_delay_ms(1000);
					break;
					case State_Dimmer:
					LCD_enuClearDisplay();
     870:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
					LCD_enuDisplayString("Dimmer: ");
     874:	84 e9       	ldi	r24, 0x94	; 148
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
					LCD_enuDisplayUnsignedInteger(Dimmer_Percentage);
     87c:	c8 01       	movw	r24, r16
     87e:	0e 94 ae 0b 	call	0x175c	; 0x175c <LCD_enuDisplayUnsignedInteger>
     882:	8f ef       	ldi	r24, 0xFF	; 255
     884:	93 ed       	ldi	r25, 0xD3	; 211
     886:	e0 e3       	ldi	r30, 0x30	; 48
     888:	81 50       	subi	r24, 0x01	; 1
     88a:	90 40       	sbci	r25, 0x00	; 0
     88c:	e0 40       	sbci	r30, 0x00	; 0
     88e:	e1 f7       	brne	.-8      	; 0x888 <__stack+0x29>
     890:	00 c0       	rjmp	.+0      	; 0x892 <__stack+0x33>
     892:	00 00       	nop
					_delay_ms(1000);
					break;
				}
					Local_u8Iterator++;
     894:	f3 94       	inc	r15
					if (Local_u8Iterator == 7)
     896:	f7 e0       	ldi	r31, 0x07	; 7
     898:	ff 12       	cpse	r15, r31
     89a:	02 c0       	rjmp	.+4      	; 0x8a0 <__stack+0x41>
						Local_u8Iterator =1;
     89c:	ff 24       	eor	r15, r15
     89e:	f3 94       	inc	r15
					if (LCD_KEYPAD_USER_FLAG == 1)
     8a0:	80 91 58 05 	lds	r24, 0x0558	; 0x800558 <__data_end>
     8a4:	81 30       	cpi	r24, 0x01	; 1
     8a6:	19 f4       	brne	.+6      	; 0x8ae <__stack+0x4f>
					{
						Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
     8a8:	d0 92 5a 05 	sts	0x055A, r13	; 0x80055a <Program_Status_Flag>
     8ac:	8f cf       	rjmp	.-226    	; 0x7cc <main+0x350>
					}
					else if(UART_enuCheck_Connection())
     8ae:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <UART_enuCheck_Connection>
     8b2:	88 23       	and	r24, r24
     8b4:	09 f4       	brne	.+2      	; 0x8b8 <__stack+0x59>
     8b6:	8a cf       	rjmp	.-236    	; 0x7cc <main+0x350>
					{
						Program_Status_Flag = REMOTED_SYSTEM_LOGIN_PAGE_STATUS;
     8b8:	e0 92 5a 05 	sts	0x055A, r14	; 0x80055a <Program_Status_Flag>
     8bc:	87 cf       	rjmp	.-242    	; 0x7cc <main+0x350>
	
		while (Program_Status_Flag == REMOTED_SYSTEM_LOGIN_PAGE_STATUS)
		{
			u8 LoginSystem_u8_AdminTrueFlag;
			u8 LoginSystem_u8_Remoted_USERTrueFlag;
			LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
     8be:	be 01       	movw	r22, r28
     8c0:	68 5c       	subi	r22, 0xC8	; 200
     8c2:	7f 4f       	sbci	r23, 0xFF	; 255
     8c4:	ce 01       	movw	r24, r28
     8c6:	cd 96       	adiw	r24, 0x3d	; 61
     8c8:	0e 94 26 01 	call	0x24c	; 0x24c <LoginSystem_enuGetDataFromUserBY_UART>
	
			LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     8cc:	be 01       	movw	r22, r28
     8ce:	63 5d       	subi	r22, 0xD3	; 211
     8d0:	7f 4f       	sbci	r23, 0xFF	; 255
     8d2:	ce 01       	movw	r24, r28
     8d4:	cd 96       	adiw	r24, 0x3d	; 61
     8d6:	0e 94 43 01 	call	0x286	; 0x286 <LoginSystem_u8Strcmp>
     8da:	81 11       	cpse	r24, r1
     8dc:	66 c0       	rjmp	.+204    	; 0x9aa <__stack+0x14b>
     8de:	f1 2c       	mov	r15, r1
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;	
			}
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     8e0:	28 96       	adiw	r28, 0x08	; 8
     8e2:	8f ad       	ldd	r24, Y+63	; 0x3f
     8e4:	28 97       	sbiw	r28, 0x08	; 8
     8e6:	f8 16       	cp	r15, r24
     8e8:	08 f0       	brcs	.+2      	; 0x8ec <__stack+0x8d>
     8ea:	df c4       	rjmp	.+2494   	; 0x12aa <__stack+0xa4b>
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     8ec:	0f 2d       	mov	r16, r15
     8ee:	10 e0       	ldi	r17, 0x00	; 0
     8f0:	e0 9e       	mul	r14, r16
     8f2:	60 01       	movw	r12, r0
     8f4:	e1 9e       	mul	r14, r17
     8f6:	d0 0c       	add	r13, r0
     8f8:	11 24       	eor	r1, r1
     8fa:	be 01       	movw	r22, r28
     8fc:	63 5c       	subi	r22, 0xC3	; 195
     8fe:	7f 4f       	sbci	r23, 0xFF	; 255
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	8c 0f       	add	r24, r28
     906:	9d 1f       	adc	r25, r29
     908:	8c 0d       	add	r24, r12
     90a:	9d 1d       	adc	r25, r13
     90c:	0e 94 43 01 	call	0x286	; 0x286 <LoginSystem_u8Strcmp>
     910:	88 23       	and	r24, r24
     912:	09 f4       	brne	.+2      	; 0x916 <__stack+0xb7>
     914:	78 c0       	rjmp	.+240    	; 0xa06 <__stack+0x1a7>
     916:	c6 01       	movw	r24, r12
     918:	05 96       	adiw	r24, 0x05	; 5
     91a:	be 01       	movw	r22, r28
     91c:	68 5c       	subi	r22, 0xC8	; 200
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	21 e0       	ldi	r18, 0x01	; 1
     922:	30 e0       	ldi	r19, 0x00	; 0
     924:	2c 0f       	add	r18, r28
     926:	3d 1f       	adc	r19, r29
     928:	82 0f       	add	r24, r18
     92a:	93 1f       	adc	r25, r19
     92c:	0e 94 43 01 	call	0x286	; 0x286 <LoginSystem_u8Strcmp>
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	81 11       	cpse	r24, r1
     934:	01 c0       	rjmp	.+2      	; 0x938 <__stack+0xd9>
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a9 2e       	mov	r10, r25
					if ( (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)  )
     93a:	31 e0       	ldi	r19, 0x01	; 1
     93c:	a3 12       	cpse	r10, r19
     93e:	7d c0       	rjmp	.+250    	; 0xa3a <__stack+0x1db>
					{
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER) || (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER) )
     940:	e0 9e       	mul	r14, r16
     942:	c0 01       	movw	r24, r0
     944:	e1 9e       	mul	r14, r17
     946:	90 0d       	add	r25, r0
     948:	11 24       	eor	r1, r1
     94a:	01 e0       	ldi	r16, 0x01	; 1
     94c:	10 e0       	ldi	r17, 0x00	; 0
     94e:	0c 0f       	add	r16, r28
     950:	1d 1f       	adc	r17, r29
     952:	08 0f       	add	r16, r24
     954:	19 1f       	adc	r17, r25
     956:	f8 01       	movw	r30, r16
     958:	82 85       	ldd	r24, Z+10	; 0x0a
     95a:	82 50       	subi	r24, 0x02	; 2
     95c:	82 30       	cpi	r24, 0x02	; 2
     95e:	08 f4       	brcc	.+2      	; 0x962 <__stack+0x103>
     960:	54 c0       	rjmp	.+168    	; 0xa0a <__stack+0x1ab>
				}
			}
			
			if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
			{
				LoginSystem_u8TrialsLeft--;
     962:	1f ef       	ldi	r17, 0xFF	; 255
     964:	19 0d       	add	r17, r9
				UART_enuSendString("\r\nWrong Username or Password");
     966:	83 ee       	ldi	r24, 0xE3	; 227
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
     96e:	ff ef       	ldi	r31, 0xFF	; 255
     970:	25 ea       	ldi	r18, 0xA5	; 165
     972:	3e e0       	ldi	r19, 0x0E	; 14
     974:	f1 50       	subi	r31, 0x01	; 1
     976:	20 40       	sbci	r18, 0x00	; 0
     978:	30 40       	sbci	r19, 0x00	; 0
     97a:	e1 f7       	brne	.-8      	; 0x974 <__stack+0x115>
     97c:	00 c0       	rjmp	.+0      	; 0x97e <__stack+0x11f>
     97e:	00 00       	nop
				_delay_ms(300);
				UART_enuSendString("\r\nRemaining Trials: ");
     980:	80 e0       	ldi	r24, 0x00	; 0
     982:	92 e0       	ldi	r25, 0x02	; 2
     984:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
				UART_enuSendChar('0'+LoginSystem_u8TrialsLeft);
     988:	8f e2       	ldi	r24, 0x2F	; 47
     98a:	89 0d       	add	r24, r9
     98c:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <UART_enuSendChar>
							//_delay_ms(1000);
				if (LoginSystem_u8TrialsLeft == 0)
     990:	11 11       	cpse	r17, r1
     992:	03 c0       	rjmp	.+6      	; 0x99a <__stack+0x13b>
				{
					Program_Status_Flag = BLOCKING_STATUS;
     994:	86 e0       	ldi	r24, 0x06	; 6
     996:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <Program_Status_Flag>
     99a:	a1 2c       	mov	r10, r1
     99c:	91 2e       	mov	r9, r17
				Program_Status_Flag = REMOTED_SYSTEM_LOGIN_PAGE_STATUS;
			}*/
		}
	
	
		while (Program_Status_Flag == REMOTED_SYSTEM_LOGIN_PAGE_STATUS)
     99e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <Program_Status_Flag>
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <__stack+0x149>
     9a6:	8b cf       	rjmp	.-234    	; 0x8be <__stack+0x5f>
     9a8:	4a c0       	rjmp	.+148    	; 0xa3e <__stack+0x1df>
		{
			u8 LoginSystem_u8_AdminTrueFlag;
			u8 LoginSystem_u8_Remoted_USERTrueFlag;
			LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
	
			LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     9aa:	be 01       	movw	r22, r28
     9ac:	6e 5c       	subi	r22, 0xCE	; 206
     9ae:	7f 4f       	sbci	r23, 0xFF	; 255
     9b0:	ce 01       	movw	r24, r28
     9b2:	c8 96       	adiw	r24, 0x38	; 56
     9b4:	0e 94 43 01 	call	0x286	; 0x286 <LoginSystem_u8Strcmp>
     9b8:	11 e0       	ldi	r17, 0x01	; 1
     9ba:	81 11       	cpse	r24, r1
     9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <__stack+0x161>
     9be:	10 e0       	ldi	r17, 0x00	; 0

			if(LoginSystem_u8_AdminTrueFlag == TRUE)
     9c0:	11 30       	cpi	r17, 0x01	; 1
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <__stack+0x167>
     9c4:	8c cf       	rjmp	.-232    	; 0x8de <__stack+0x7f>
			{
				UART_enuSendString("\r\nLogged in Successfully");
     9c6:	8d e9       	ldi	r24, 0x9D	; 157
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
     9ce:	2f ef       	ldi	r18, 0xFF	; 255
     9d0:	39 e6       	ldi	r19, 0x69	; 105
     9d2:	88 e1       	ldi	r24, 0x18	; 24
     9d4:	21 50       	subi	r18, 0x01	; 1
     9d6:	30 40       	sbci	r19, 0x00	; 0
     9d8:	80 40       	sbci	r24, 0x00	; 0
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <__stack+0x175>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <__stack+0x17f>
     9de:	00 00       	nop
				_delay_ms(500);
				UART_enuSendString("\r\nWelcome Admin\r\n");
     9e0:	86 eb       	ldi	r24, 0xB6	; 182
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	e9 e6       	ldi	r30, 0x69	; 105
     9ec:	f8 e1       	ldi	r31, 0x18	; 24
     9ee:	91 50       	subi	r25, 0x01	; 1
     9f0:	e0 40       	sbci	r30, 0x00	; 0
     9f2:	f0 40       	sbci	r31, 0x00	; 0
     9f4:	e1 f7       	brne	.-8      	; 0x9ee <__stack+0x18f>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <__stack+0x199>
     9f8:	00 00       	nop
				_delay_ms(500);
				LoginSystem_u8AdminOnlineFlag = TRUE;
     9fa:	10 93 5d 05 	sts	0x055D, r17	; 0x80055d <LoginSystem_u8AdminOnlineFlag>
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;	
     9fe:	84 e0       	ldi	r24, 0x04	; 4
     a00:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <Program_Status_Flag>
     a04:	50 c4       	rjmp	.+2208   	; 0x12a6 <__stack+0xa47>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     a06:	a1 2c       	mov	r10, r1
     a08:	98 cf       	rjmp	.-208    	; 0x93a <__stack+0xdb>
					if ( (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)  )
					{
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER) || (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER) )
						{
							UART_enuSendString("\r\nLogged in Successfully\r\n");
     a0a:	88 ec       	ldi	r24, 0xC8	; 200
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
     a12:	ff ef       	ldi	r31, 0xFF	; 255
     a14:	29 e6       	ldi	r18, 0x69	; 105
     a16:	38 e1       	ldi	r19, 0x18	; 24
     a18:	f1 50       	subi	r31, 0x01	; 1
     a1a:	20 40       	sbci	r18, 0x00	; 0
     a1c:	30 40       	sbci	r19, 0x00	; 0
     a1e:	e1 f7       	brne	.-8      	; 0xa18 <__stack+0x1b9>
     a20:	00 c0       	rjmp	.+0      	; 0xa22 <__stack+0x1c3>
     a22:	00 00       	nop
							_delay_ms(500);
							LoginSystem_u8TrialsLeft =3;
							Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;
     a24:	84 e0       	ldi	r24, 0x04	; 4
     a26:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <Program_Status_Flag>
							if (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == PROMOTED_USER)
     a2a:	f8 01       	movw	r30, r16
     a2c:	82 85       	ldd	r24, Z+10	; 0x0a
     a2e:	83 30       	cpi	r24, 0x03	; 3
     a30:	09 f0       	breq	.+2      	; 0xa34 <__stack+0x1d5>
     a32:	39 c4       	rjmp	.+2162   	; 0x12a6 <__stack+0xa47>
							{
								LoginSystem_u8PromotedUserOnlineFlag = TRUE;
     a34:	a0 92 5c 05 	sts	0x055C, r10	; 0x80055c <LoginSystem_u8PromotedUserOnlineFlag>
     a38:	36 c4       	rjmp	.+2156   	; 0x12a6 <__stack+0xa47>
				LoginSystem_u8TrialsLeft =3;
				Program_Status_Flag = REMOTED_SYSTEM_MENU_STATUS;	
			}
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     a3a:	f3 94       	inc	r15
     a3c:	51 cf       	rjmp	.-350    	; 0x8e0 <__stack+0x81>
					
					
					case '8':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     a3e:	ab e0       	ldi	r26, 0x0B	; 11
     a40:	6a 2e       	mov	r6, r26
     a42:	bb e0       	ldi	r27, 0x0B	; 11
     a44:	8b 2e       	mov	r8, r27
								ShowToUser = PRIORITIES_MENU;
     a46:	1f e0       	ldi	r17, 0x0F	; 15
     a48:	41 2e       	mov	r4, r17
					
					
					case '8':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     a4a:	0b e0       	ldi	r16, 0x0B	; 11
     a4c:	50 2e       	mov	r5, r16
				else
				{
					UART_enuSendString("\r\n");		//For the shape of menu
					UART_enuRecieveChar(&UART_CHOICE);
					if (UART_CHOICE > '6')
						UART_CHOICE =100;		//If the program enter this else, then a Remoted User is in control. So, We want him to go to default in the switch case if he entered by mistake a number that corresponds An admin option in the switch case
     a4e:	74 e6       	ldi	r23, 0x64	; 100
     a50:	f7 2e       	mov	r15, r23
					
					case '6'://air
						ShowToUser = AIR_COND_MENU;  
					break;
					case '7':
					ShowToUser = DOOR_MENU;
     a52:	ea e0       	ldi	r30, 0x0A	; 10
     a54:	ee 2e       	mov	r14, r30
						SetBit(&Current_State,5);
						ShowToUser = DIMMER_MENU;
					break;
					
					case '6'://air
						ShowToUser = AIR_COND_MENU;  
     a56:	f9 e0       	ldi	r31, 0x09	; 9
     a58:	df 2e       	mov	r13, r31
			}
					
		}
				
		
		while (Program_Status_Flag == REMOTED_SYSTEM_MENU_STATUS)
     a5a:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <Program_Status_Flag>
     a5e:	84 30       	cpi	r24, 0x04	; 4
     a60:	09 f0       	breq	.+2      	; 0xa64 <__stack+0x205>
     a62:	ff c1       	rjmp	.+1022   	; 0xe62 <__stack+0x603>
					break;
					
					case '5':
						SPI_ui8TransmitRecive(DIMMER);
						SetBit(&Current_State,5);
						ShowToUser = DIMMER_MENU;
     a64:	08 e0       	ldi	r16, 0x08	; 8
				
		
		while (Program_Status_Flag == REMOTED_SYSTEM_MENU_STATUS)
		{
			
			while(ShowToUser == MAIN_MENU)
     a66:	10 91 5b 05 	lds	r17, 0x055B	; 0x80055b <ShowToUser>
     a6a:	11 11       	cpse	r17, r1
     a6c:	d5 c0       	rjmp	.+426    	; 0xc18 <__stack+0x3b9>
			{
				//The first five chioces will Appear for Admin or Remoted user 
			UART_enuSendString("\r\n1-Room1");
     a6e:	85 e1       	ldi	r24, 0x15	; 21
     a70:	92 e0       	ldi	r25, 0x02	; 2
     a72:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
			UART_enuSendString("\r\n2-Room2");
     a76:	8f e1       	ldi	r24, 0x1F	; 31
     a78:	92 e0       	ldi	r25, 0x02	; 2
     a7a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
			UART_enuSendString("\r\n3-Room3");
     a7e:	89 e2       	ldi	r24, 0x29	; 41
     a80:	92 e0       	ldi	r25, 0x02	; 2
     a82:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
			UART_enuSendString("\r\n4-Room4");
     a86:	83 e3       	ldi	r24, 0x33	; 51
     a88:	92 e0       	ldi	r25, 0x02	; 2
     a8a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
			UART_enuSendString("\r\n5-Dimmer");
     a8e:	8d e3       	ldi	r24, 0x3D	; 61
     a90:	92 e0       	ldi	r25, 0x02	; 2
     a92:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
			UART_enuSendString("\r\n6-Air Conditioner");
     a96:	88 e4       	ldi	r24, 0x48	; 72
     a98:	92 e0       	ldi	r25, 0x02	; 2
     a9a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>

			if (LoginSystem_u8AdminOnlineFlag ==TRUE) //The Last 3 options will Appear only to Admin
     a9e:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <LoginSystem_u8AdminOnlineFlag>
     aa2:	81 30       	cpi	r24, 0x01	; 1
     aa4:	91 f4       	brne	.+36     	; 0xaca <__stack+0x26b>
			{
				UART_enuSendString("\r\n7-Door");
     aa6:	8c e5       	ldi	r24, 0x5C	; 92
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
				UART_enuSendString("\r\n8-Add User");
     aae:	85 e6       	ldi	r24, 0x65	; 101
     ab0:	92 e0       	ldi	r25, 0x02	; 2
     ab2:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
				UART_enuSendString("\r\n9-Remove User\r\n");
     ab6:	82 e7       	ldi	r24, 0x72	; 114
     ab8:	92 e0       	ldi	r25, 0x02	; 2
     aba:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>

				UART_enuRecieveChar(&UART_CHOICE);
     abe:	ce 01       	movw	r24, r28
     ac0:	8c 5b       	subi	r24, 0xBC	; 188
     ac2:	9f 4f       	sbci	r25, 0xFF	; 255
     ac4:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <UART_enuRecieveChar>
     ac8:	11 c0       	rjmp	.+34     	; 0xaec <__stack+0x28d>
			}
				else
				{
					UART_enuSendString("\r\n");		//For the shape of menu
     aca:	86 e3       	ldi	r24, 0x36	; 54
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     ad2:	ce 01       	movw	r24, r28
     ad4:	8c 5b       	subi	r24, 0xBC	; 188
     ad6:	9f 4f       	sbci	r25, 0xFF	; 255
     ad8:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <UART_enuRecieveChar>
					if (UART_CHOICE > '6')
     adc:	25 96       	adiw	r28, 0x05	; 5
     ade:	8f ad       	ldd	r24, Y+63	; 0x3f
     ae0:	25 97       	sbiw	r28, 0x05	; 5
     ae2:	87 33       	cpi	r24, 0x37	; 55
     ae4:	18 f0       	brcs	.+6      	; 0xaec <__stack+0x28d>
						UART_CHOICE =100;		//If the program enter this else, then a Remoted User is in control. So, We want him to go to default in the switch case if he entered by mistake a number that corresponds An admin option in the switch case
     ae6:	25 96       	adiw	r28, 0x05	; 5
     ae8:	ff ae       	std	Y+63, r15	; 0x3f
     aea:	25 97       	sbiw	r28, 0x05	; 5
				}
				
				switch(UART_CHOICE)
     aec:	25 96       	adiw	r28, 0x05	; 5
     aee:	ef ad       	ldd	r30, Y+63	; 0x3f
     af0:	25 97       	sbiw	r28, 0x05	; 5
     af2:	8e 2f       	mov	r24, r30
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	fc 01       	movw	r30, r24
     af8:	f1 97       	sbiw	r30, 0x31	; 49
     afa:	e9 30       	cpi	r30, 0x09	; 9
     afc:	f1 05       	cpc	r31, r1
     afe:	08 f0       	brcs	.+2      	; 0xb02 <__stack+0x2a3>
     b00:	7b c0       	rjmp	.+246    	; 0xbf8 <__stack+0x399>
     b02:	ef 5c       	subi	r30, 0xCF	; 207
     b04:	ff 4f       	sbci	r31, 0xFF	; 255
     b06:	0c 94 3e 0e 	jmp	0x1c7c	; 0x1c7c <__tablejump2__>
				{
					case '1':
						SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,1);
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	04 c0       	rjmp	.+8      	; 0xb1c <__stack+0x2bd>
						ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '2':
						SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,2);
     b1a:	62 e0       	ldi	r22, 0x02	; 2
     b1c:	ce 01       	movw	r24, r28
     b1e:	8b 5b       	subi	r24, 0xBB	; 187
     b20:	9f 4f       	sbci	r25, 0xFF	; 255
     b22:	0e 94 21 02 	call	0x442	; 0x442 <ToggleBit>
						ShowToUser = LOG_OUT_CHOICE;
     b26:	50 92 5b 05 	sts	0x055B, r5	; 0x80055b <ShowToUser>
					break;
     b2a:	9d cf       	rjmp	.-198    	; 0xa66 <__stack+0x207>
					
					case '3':
						SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
     b2c:	83 e0       	ldi	r24, 0x03	; 3
     b2e:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,3);
     b32:	63 e0       	ldi	r22, 0x03	; 3
     b34:	f3 cf       	rjmp	.-26     	; 0xb1c <__stack+0x2bd>
						ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '4':
						SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
     b36:	84 e0       	ldi	r24, 0x04	; 4
     b38:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
						ToggleBit(&Current_State,4);
     b3c:	64 e0       	ldi	r22, 0x04	; 4
     b3e:	ee cf       	rjmp	.-36     	; 0xb1c <__stack+0x2bd>
						ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '5':
						SPI_ui8TransmitRecive(DIMMER);
     b40:	8c e0       	ldi	r24, 0x0C	; 12
     b42:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
						SetBit(&Current_State,5);
     b46:	65 e0       	ldi	r22, 0x05	; 5
     b48:	ce 01       	movw	r24, r28
     b4a:	8b 5b       	subi	r24, 0xBB	; 187
     b4c:	9f 4f       	sbci	r25, 0xFF	; 255
     b4e:	0e 94 16 02 	call	0x42c	; 0x42c <SetBit>
						ShowToUser = DIMMER_MENU;
     b52:	00 93 5b 05 	sts	0x055B, r16	; 0x80055b <ShowToUser>
					break;
     b56:	87 cf       	rjmp	.-242    	; 0xa66 <__stack+0x207>
					
					case '6'://air
						ShowToUser = AIR_COND_MENU;  
     b58:	d0 92 5b 05 	sts	0x055B, r13	; 0x80055b <ShowToUser>
					break;
     b5c:	84 cf       	rjmp	.-248    	; 0xa66 <__stack+0x207>
					case '7':
					ShowToUser = DOOR_MENU;
     b5e:	e0 92 5b 05 	sts	0x055B, r14	; 0x80055b <ShowToUser>
					break;
     b62:	81 cf       	rjmp	.-254    	; 0xa66 <__stack+0x207>
					
					
					case '8':
						if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
     b64:	28 96       	adiw	r28, 0x08	; 8
     b66:	8f ad       	ldd	r24, Y+63	; 0x3f
     b68:	28 97       	sbiw	r28, 0x08	; 8
     b6a:	84 30       	cpi	r24, 0x04	; 4
     b6c:	98 f4       	brcc	.+38     	; 0xb94 <__stack+0x335>
							{
								LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     b6e:	68 9e       	mul	r6, r24
     b70:	c0 01       	movw	r24, r0
     b72:	11 24       	eor	r1, r1
     b74:	bc 01       	movw	r22, r24
     b76:	6b 5f       	subi	r22, 0xFB	; 251
     b78:	7f 4f       	sbci	r23, 0xFF	; 255
     b7a:	e1 e0       	ldi	r30, 0x01	; 1
     b7c:	f0 e0       	ldi	r31, 0x00	; 0
     b7e:	ec 0f       	add	r30, r28
     b80:	fd 1f       	adc	r31, r29
     b82:	6e 0f       	add	r22, r30
     b84:	7f 1f       	adc	r23, r31
     b86:	8e 0f       	add	r24, r30
     b88:	9f 1f       	adc	r25, r31
     b8a:	0e 94 26 01 	call	0x24c	; 0x24c <LoginSystem_enuGetDataFromUserBY_UART>
								ShowToUser = PRIORITIES_MENU;
     b8e:	40 92 5b 05 	sts	0x055B, r4	; 0x80055b <ShowToUser>
     b92:	69 cf       	rjmp	.-302    	; 0xa66 <__stack+0x207>
							}
						else
							{
								UART_enuSendString("\r\nReached The Max Number of Stored Users");
     b94:	84 e8       	ldi	r24, 0x84	; 132
     b96:	92 e0       	ldi	r25, 0x02	; 2
     b98:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
								UART_enuSendString("\r\nCouldn't Store A New User");
     b9c:	8d ea       	ldi	r24, 0xAD	; 173
     b9e:	92 e0       	ldi	r25, 0x02	; 2
     ba0:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
								UART_enuSendString("\r\nReturning to Main Menu\r\n");
     ba4:	87 ef       	ldi	r24, 0xF7	; 247
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
								ShowToUser = MAIN_MENU;
     bac:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <ShowToUser>
     bb0:	ff ef       	ldi	r31, 0xFF	; 255
     bb2:	2d e2       	ldi	r18, 0x2D	; 45
     bb4:	32 e2       	ldi	r19, 0x22	; 34
     bb6:	f1 50       	subi	r31, 0x01	; 1
     bb8:	20 40       	sbci	r18, 0x00	; 0
     bba:	30 40       	sbci	r19, 0x00	; 0
     bbc:	e1 f7       	brne	.-8      	; 0xbb6 <__stack+0x357>
     bbe:	19 c0       	rjmp	.+50     	; 0xbf2 <__stack+0x393>
								_delay_ms(700);
							}
					break;
					case '9':
						if (LoginSystem_RemoveUser(LoginSystem_AstrUsers,&LoginSystem_NumOfRegisteredUsers) == TRUE)
     bc0:	be 01       	movw	r22, r28
     bc2:	69 5b       	subi	r22, 0xB9	; 185
     bc4:	7f 4f       	sbci	r23, 0xFF	; 255
     bc6:	ce 01       	movw	r24, r28
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	0e 94 5f 01 	call	0x2be	; 0x2be <LoginSystem_RemoveUser>
     bce:	81 30       	cpi	r24, 0x01	; 1
     bd0:	19 f4       	brne	.+6      	; 0xbd8 <__stack+0x379>
						{		UART_enuSendString("\r\nRemoved Successfully\r\n");
     bd2:	89 ec       	ldi	r24, 0xC9	; 201
     bd4:	92 e0       	ldi	r25, 0x02	; 2
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <__stack+0x37d>
								ShowToUser=LOG_OUT_CHOICE;
						}
						else	{UART_enuSendString("\r\nUsername not Found \r\nReturning to Main Menu\r\n");}
     bd8:	82 ee       	ldi	r24, 0xE2	; 226
     bda:	92 e0       	ldi	r25, 0x02	; 2
     bdc:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
						ShowToUser=MAIN_MENU;
     be0:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <ShowToUser>
     be4:	8f ef       	ldi	r24, 0xFF	; 255
     be6:	9d e2       	ldi	r25, 0x2D	; 45
     be8:	e2 e2       	ldi	r30, 0x22	; 34
     bea:	81 50       	subi	r24, 0x01	; 1
     bec:	90 40       	sbci	r25, 0x00	; 0
     bee:	e0 40       	sbci	r30, 0x00	; 0
     bf0:	e1 f7       	brne	.-8      	; 0xbea <__stack+0x38b>
     bf2:	00 c0       	rjmp	.+0      	; 0xbf4 <__stack+0x395>
     bf4:	00 00       	nop
     bf6:	37 cf       	rjmp	.-402    	; 0xa66 <__stack+0x207>
						_delay_ms(700);
					break;

					default:
					UART_enuSendString("\r\nInvalid Choice\r\n");
     bf8:	82 e1       	ldi	r24, 0x12	; 18
     bfa:	93 e0       	ldi	r25, 0x03	; 3
     bfc:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
     c00:	ff ef       	ldi	r31, 0xFF	; 255
     c02:	23 ed       	ldi	r18, 0xD3	; 211
     c04:	30 e3       	ldi	r19, 0x30	; 48
     c06:	f1 50       	subi	r31, 0x01	; 1
     c08:	20 40       	sbci	r18, 0x00	; 0
     c0a:	30 40       	sbci	r19, 0x00	; 0
     c0c:	e1 f7       	brne	.-8      	; 0xc06 <__stack+0x3a7>
     c0e:	00 c0       	rjmp	.+0      	; 0xc10 <__stack+0x3b1>
     c10:	00 00       	nop
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
     c12:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <ShowToUser>
					break;
     c16:	27 cf       	rjmp	.-434    	; 0xa66 <__stack+0x207>
				}
			}
			switch (ShowToUser)
     c18:	1a 30       	cpi	r17, 0x0A	; 10
     c1a:	09 f4       	brne	.+2      	; 0xc1e <__stack+0x3bf>
     c1c:	b8 c0       	rjmp	.+368    	; 0xd8e <__stack+0x52f>
     c1e:	38 f4       	brcc	.+14     	; 0xc2e <__stack+0x3cf>
     c20:	18 30       	cpi	r17, 0x08	; 8
     c22:	09 f4       	brne	.+2      	; 0xc26 <__stack+0x3c7>
     c24:	83 c0       	rjmp	.+262    	; 0xd2c <__stack+0x4cd>
     c26:	19 30       	cpi	r17, 0x09	; 9
     c28:	09 f4       	brne	.+2      	; 0xc2c <__stack+0x3cd>
     c2a:	d3 c0       	rjmp	.+422    	; 0xdd2 <__stack+0x573>
     c2c:	16 cf       	rjmp	.-468    	; 0xa5a <__stack+0x1fb>
     c2e:	1b 30       	cpi	r17, 0x0B	; 11
     c30:	09 f4       	brne	.+2      	; 0xc34 <__stack+0x3d5>
     c32:	e5 c0       	rjmp	.+458    	; 0xdfe <__stack+0x59f>
     c34:	1f 30       	cpi	r17, 0x0F	; 15
     c36:	09 f0       	breq	.+2      	; 0xc3a <__stack+0x3db>
     c38:	10 cf       	rjmp	.-480    	; 0xa5a <__stack+0x1fb>
			{
				case PRIORITIES_MENU:
						UART_enuSendString("\r\n1-Remoted");
     c3a:	85 e2       	ldi	r24, 0x25	; 37
     c3c:	93 e0       	ldi	r25, 0x03	; 3
     c3e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
						UART_enuSendString("\r\n2-Promoted");
     c42:	81 e3       	ldi	r24, 0x31	; 49
     c44:	93 e0       	ldi	r25, 0x03	; 3
     c46:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
						UART_enuSendString("\r\n3-Nonremoted");
     c4a:	8e e3       	ldi	r24, 0x3E	; 62
     c4c:	93 e0       	ldi	r25, 0x03	; 3
     c4e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
						UART_enuSendString("\r\n\r\nPriority Arrangment: Promoted > Nonremoted (LCD+Keypad) > Remoted\r\n");
     c52:	8d e4       	ldi	r24, 0x4D	; 77
     c54:	93 e0       	ldi	r25, 0x03	; 3
     c56:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
						UART_enuRecieveChar(&UART_CHOICE);
     c5a:	ce 01       	movw	r24, r28
     c5c:	8c 5b       	subi	r24, 0xBC	; 188
     c5e:	9f 4f       	sbci	r25, 0xFF	; 255
     c60:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <UART_enuRecieveChar>
						if (UART_CHOICE == '1')
     c64:	25 96       	adiw	r28, 0x05	; 5
     c66:	8f ad       	ldd	r24, Y+63	; 0x3f
     c68:	25 97       	sbiw	r28, 0x05	; 5
     c6a:	81 33       	cpi	r24, 0x31	; 49
     c6c:	69 f4       	brne	.+26     	; 0xc88 <__stack+0x429>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = REMOTED_USER;
     c6e:	28 96       	adiw	r28, 0x08	; 8
     c70:	8f ad       	ldd	r24, Y+63	; 0x3f
     c72:	28 97       	sbiw	r28, 0x08	; 8
     c74:	e1 e0       	ldi	r30, 0x01	; 1
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	ec 0f       	add	r30, r28
     c7a:	fd 1f       	adc	r31, r29
     c7c:	68 9e       	mul	r6, r24
     c7e:	e0 0d       	add	r30, r0
     c80:	f1 1d       	adc	r31, r1
     c82:	11 24       	eor	r1, r1
     c84:	82 e0       	ldi	r24, 0x02	; 2
     c86:	0e c0       	rjmp	.+28     	; 0xca4 <__stack+0x445>
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
							ShowToUser = LOG_OUT_CHOICE;
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
						else if (UART_CHOICE == '2')
     c88:	82 33       	cpi	r24, 0x32	; 50
     c8a:	21 f5       	brne	.+72     	; 0xcd4 <__stack+0x475>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = PROMOTED_USER;
     c8c:	28 96       	adiw	r28, 0x08	; 8
     c8e:	8f ad       	ldd	r24, Y+63	; 0x3f
     c90:	28 97       	sbiw	r28, 0x08	; 8
     c92:	e1 e0       	ldi	r30, 0x01	; 1
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	ec 0f       	add	r30, r28
     c98:	fd 1f       	adc	r31, r29
     c9a:	68 9e       	mul	r6, r24
     c9c:	e0 0d       	add	r30, r0
     c9e:	f1 1d       	adc	r31, r1
     ca0:	11 24       	eor	r1, r1
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	82 87       	std	Z+10, r24	; 0x0a
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
     ca6:	9e 01       	movw	r18, r28
     ca8:	29 5b       	subi	r18, 0xB9	; 185
     caa:	3f 4f       	sbci	r19, 0xFF	; 255
     cac:	69 01       	movw	r12, r18
     cae:	e0 80       	ld	r14, Z
     cb0:	f1 80       	ldd	r15, Z+1	; 0x01
     cb2:	02 81       	ldd	r16, Z+2	; 0x02
     cb4:	13 81       	ldd	r17, Z+3	; 0x03
     cb6:	24 81       	ldd	r18, Z+4	; 0x04
     cb8:	35 81       	ldd	r19, Z+5	; 0x05
     cba:	46 81       	ldd	r20, Z+6	; 0x06
     cbc:	57 81       	ldd	r21, Z+7	; 0x07
     cbe:	60 85       	ldd	r22, Z+8	; 0x08
     cc0:	71 85       	ldd	r23, Z+9	; 0x09
     cc2:	0e 94 59 00 	call	0xb2	; 0xb2 <LoginSystem_SaveNewUser>
							ShowToUser = LOG_OUT_CHOICE;
     cc6:	80 92 5b 05 	sts	0x055B, r8	; 0x80055b <ShowToUser>
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
     cca:	85 e9       	ldi	r24, 0x95	; 149
     ccc:	93 e0       	ldi	r25, 0x03	; 3
     cce:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
     cd2:	bd ce       	rjmp	.-646    	; 0xa4e <__stack+0x1ef>
						else if (UART_CHOICE == '3')
     cd4:	83 33       	cpi	r24, 0x33	; 51
     cd6:	e1 f4       	brne	.+56     	; 0xd10 <__stack+0x4b1>
							{LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = LCD_KEYPAD_USER;
     cd8:	28 96       	adiw	r28, 0x08	; 8
     cda:	8f ad       	ldd	r24, Y+63	; 0x3f
     cdc:	28 97       	sbiw	r28, 0x08	; 8
     cde:	e1 e0       	ldi	r30, 0x01	; 1
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	ec 0f       	add	r30, r28
     ce4:	fd 1f       	adc	r31, r29
     ce6:	68 9e       	mul	r6, r24
     ce8:	e0 0d       	add	r30, r0
     cea:	f1 1d       	adc	r31, r1
     cec:	11 24       	eor	r1, r1
     cee:	12 86       	std	Z+10, r1	; 0x0a
							LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
     cf0:	ce 01       	movw	r24, r28
     cf2:	89 5b       	subi	r24, 0xB9	; 185
     cf4:	9f 4f       	sbci	r25, 0xFF	; 255
     cf6:	6c 01       	movw	r12, r24
     cf8:	e0 80       	ld	r14, Z
     cfa:	f1 80       	ldd	r15, Z+1	; 0x01
     cfc:	02 81       	ldd	r16, Z+2	; 0x02
     cfe:	13 81       	ldd	r17, Z+3	; 0x03
     d00:	24 81       	ldd	r18, Z+4	; 0x04
     d02:	35 81       	ldd	r19, Z+5	; 0x05
     d04:	46 81       	ldd	r20, Z+6	; 0x06
     d06:	57 81       	ldd	r21, Z+7	; 0x07
     d08:	60 85       	ldd	r22, Z+8	; 0x08
     d0a:	71 85       	ldd	r23, Z+9	; 0x09
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	d9 cf       	rjmp	.-78     	; 0xcc2 <__stack+0x463>
							ShowToUser = LOG_OUT_CHOICE;
							UART_enuSendString("\r\nRegistered Successfully\r\n");}
						else
						{
							UART_enuSendString("\r\nInvalid Choice\r\n");
     d10:	82 e1       	ldi	r24, 0x12	; 18
     d12:	93 e0       	ldi	r25, 0x03	; 3
     d14:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
     d18:	9f ef       	ldi	r25, 0xFF	; 255
     d1a:	e3 ed       	ldi	r30, 0xD3	; 211
     d1c:	f0 e3       	ldi	r31, 0x30	; 48
     d1e:	91 50       	subi	r25, 0x01	; 1
     d20:	e0 40       	sbci	r30, 0x00	; 0
     d22:	f0 40       	sbci	r31, 0x00	; 0
     d24:	e1 f7       	brne	.-8      	; 0xd1e <__stack+0x4bf>
     d26:	00 c0       	rjmp	.+0      	; 0xd28 <__stack+0x4c9>
     d28:	00 00       	nop
     d2a:	91 ce       	rjmp	.-734    	; 0xa4e <__stack+0x1ef>
						}
						
				break;
				
				case DIMMER_MENU:
					UART_enuSendString("\r\nEnter The Percentage of Brightness: ");
     d2c:	81 eb       	ldi	r24, 0xB1	; 177
     d2e:	93 e0       	ldi	r25, 0x03	; 3
     d30:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
					UART_enuRecieveChar(&Dimmer_Percentage_Tens);
     d34:	ce 01       	movw	r24, r28
     d36:	8d 5b       	subi	r24, 0xBD	; 189
     d38:	9f 4f       	sbci	r25, 0xFF	; 255
     d3a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Tens);
     d3e:	24 96       	adiw	r28, 0x04	; 4
     d40:	8f ad       	ldd	r24, Y+63	; 0x3f
     d42:	24 97       	sbiw	r28, 0x04	; 4
     d44:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <UART_enuSendChar>
					Dimmer_Percentage_Tens = Dimmer_Percentage_Tens - '0';
     d48:	24 96       	adiw	r28, 0x04	; 4
     d4a:	8f ad       	ldd	r24, Y+63	; 0x3f
     d4c:	24 97       	sbiw	r28, 0x04	; 4
     d4e:	80 53       	subi	r24, 0x30	; 48
     d50:	24 96       	adiw	r28, 0x04	; 4
     d52:	8f af       	std	Y+63, r24	; 0x3f
     d54:	24 97       	sbiw	r28, 0x04	; 4
					
					UART_enuRecieveChar(&Dimmer_Percentage_Ones);
     d56:	ce 01       	movw	r24, r28
     d58:	8e 5b       	subi	r24, 0xBE	; 190
     d5a:	9f 4f       	sbci	r25, 0xFF	; 255
     d5c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <UART_enuRecieveChar>
					UART_enuSendChar(Dimmer_Percentage_Ones);
     d60:	23 96       	adiw	r28, 0x03	; 3
     d62:	8f ad       	ldd	r24, Y+63	; 0x3f
     d64:	23 97       	sbiw	r28, 0x03	; 3
     d66:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <UART_enuSendChar>
					Dimmer_Percentage_Ones = Dimmer_Percentage_Ones -'0';
     d6a:	23 96       	adiw	r28, 0x03	; 3
     d6c:	8f ad       	ldd	r24, Y+63	; 0x3f
     d6e:	23 97       	sbiw	r28, 0x03	; 3
     d70:	90 ed       	ldi	r25, 0xD0	; 208
     d72:	98 0f       	add	r25, r24
     d74:	23 96       	adiw	r28, 0x03	; 3
     d76:	9f af       	std	Y+63, r25	; 0x3f
     d78:	23 97       	sbiw	r28, 0x03	; 3
					
					Dimmer_Percentage =10*Dimmer_Percentage_Tens + Dimmer_Percentage_Ones;
     d7a:	24 96       	adiw	r28, 0x04	; 4
     d7c:	8f ad       	ldd	r24, Y+63	; 0x3f
     d7e:	24 97       	sbiw	r28, 0x04	; 4
     d80:	b9 2e       	mov	r11, r25
     d82:	2a e0       	ldi	r18, 0x0A	; 10
     d84:	82 9f       	mul	r24, r18
     d86:	b0 0c       	add	r11, r0
     d88:	11 24       	eor	r1, r1
					
					SPI_ui8TransmitRecive(Dimmer_Percentage);
     d8a:	8b 2d       	mov	r24, r11
     d8c:	35 c0       	rjmp	.+106    	; 0xdf8 <__stack+0x599>
					ShowToUser=LOG_OUT_CHOICE;
				break;
				
				case DOOR_MENU:
					UART_enuSendString("\r\nDoor Options \r\n 1-Open Door\r\n 2-Close Door\r\n 0-Return to main menu\r\n ");
     d8e:	88 ed       	ldi	r24, 0xD8	; 216
     d90:	93 e0       	ldi	r25, 0x03	; 3
     d92:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     d96:	ce 01       	movw	r24, r28
     d98:	8c 5b       	subi	r24, 0xBC	; 188
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     da0:	25 96       	adiw	r28, 0x05	; 5
     da2:	8f ad       	ldd	r24, Y+63	; 0x3f
     da4:	25 97       	sbiw	r28, 0x05	; 5
     da6:	81 33       	cpi	r24, 0x31	; 49
     da8:	61 f4       	brne	.+24     	; 0xdc2 <__stack+0x563>
					{
						SPI_ui8TransmitRecive(OPEN_DOOR_COMMAND);
     daa:	8d e0       	ldi	r24, 0x0D	; 13
     dac:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
						SetBit(&Current_State,6);	
     db0:	66 e0       	ldi	r22, 0x06	; 6
     db2:	ce 01       	movw	r24, r28
     db4:	8b 5b       	subi	r24, 0xBB	; 187
     db6:	9f 4f       	sbci	r25, 0xFF	; 255
     db8:	0e 94 16 02 	call	0x42c	; 0x42c <SetBit>
						ShowToUser = LOG_OUT_CHOICE;
     dbc:	80 92 5b 05 	sts	0x055B, r8	; 0x80055b <ShowToUser>
     dc0:	46 ce       	rjmp	.-884    	; 0xa4e <__stack+0x1ef>
					}
					else if(UART_CHOICE == '2')
     dc2:	82 33       	cpi	r24, 0x32	; 50
     dc4:	11 f4       	brne	.+4      	; 0xdca <__stack+0x56b>
					{
						SPI_ui8TransmitRecive(CLOSE_DOOR_COMMAND);
     dc6:	8e e0       	ldi	r24, 0x0E	; 14
     dc8:	17 c0       	rjmp	.+46     	; 0xdf8 <__stack+0x599>
						ShowToUser = LOG_OUT_CHOICE;
					}
					else if (UART_CHOICE == '0') 
     dca:	80 33       	cpi	r24, 0x30	; 48
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <__stack+0x571>
     dce:	42 c0       	rjmp	.+132    	; 0xe54 <__stack+0x5f5>
     dd0:	3e c0       	rjmp	.+124    	; 0xe4e <__stack+0x5ef>
						{ShowToUser = MAIN_MENU;} 
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = DOOR_MENU;}
				break;
				case AIR_COND_MENU:
					UART_enuSendString("\r\n1-Open\r\n2-Close\r\n");
     dd2:	84 e3       	ldi	r24, 0x34	; 52
     dd4:	94 e0       	ldi	r25, 0x04	; 4
     dd6:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     dda:	ce 01       	movw	r24, r28
     ddc:	8c 5b       	subi	r24, 0xBC	; 188
     dde:	9f 4f       	sbci	r25, 0xFF	; 255
     de0:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <UART_enuRecieveChar>
					if(UART_CHOICE == '1')
     de4:	25 96       	adiw	r28, 0x05	; 5
     de6:	8f ad       	ldd	r24, Y+63	; 0x3f
     de8:	25 97       	sbiw	r28, 0x05	; 5
     dea:	81 33       	cpi	r24, 0x31	; 49
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__stack+0x593>
					{
						SPI_ui8TransmitRecive(OPEN_AirCond_COMMAND);
     dee:	80 e1       	ldi	r24, 0x10	; 16
     df0:	03 c0       	rjmp	.+6      	; 0xdf8 <__stack+0x599>
					}	
					else if(UART_CHOICE == '2')
     df2:	82 33       	cpi	r24, 0x32	; 50
     df4:	19 f7       	brne	.-58     	; 0xdbc <__stack+0x55d>
					{
						SPI_ui8TransmitRecive(CLOSE_AirCond_COMMAND);
     df6:	81 e1       	ldi	r24, 0x11	; 17
     df8:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
     dfc:	df cf       	rjmp	.-66     	; 0xdbc <__stack+0x55d>
					}
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case LOG_OUT_CHOICE:
					UART_enuSendString("\r\n1-Log Out\r\n2-Return to main menu\r\n");
     dfe:	88 e4       	ldi	r24, 0x48	; 72
     e00:	94 e0       	ldi	r25, 0x04	; 4
     e02:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     e06:	ce 01       	movw	r24, r28
     e08:	8c 5b       	subi	r24, 0xBC	; 188
     e0a:	9f 4f       	sbci	r25, 0xFF	; 255
     e0c:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <UART_enuRecieveChar>
					if (UART_CHOICE == '1')
     e10:	25 96       	adiw	r28, 0x05	; 5
     e12:	8f ad       	ldd	r24, Y+63	; 0x3f
     e14:	25 97       	sbiw	r28, 0x05	; 5
     e16:	81 33       	cpi	r24, 0x31	; 49
     e18:	c1 f4       	brne	.+48     	; 0xe4a <__stack+0x5eb>
						{
							Program_Status_Flag = IDLE_STATUS;	
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <Program_Status_Flag>
							ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu 
     e20:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <ShowToUser>
							UART_enuSendString("\r\nLogged Out\r\n");
     e24:	8d e6       	ldi	r24, 0x6D	; 109
     e26:	94 e0       	ldi	r25, 0x04	; 4
     e28:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
							if (LoginSystem_u8AdminOnlineFlag == TRUE)	//If an Admin was online and wants to log out
     e2c:	80 91 5d 05 	lds	r24, 0x055D	; 0x80055d <LoginSystem_u8AdminOnlineFlag>
     e30:	81 30       	cpi	r24, 0x01	; 1
     e32:	19 f4       	brne	.+6      	; 0xe3a <__stack+0x5db>
								LoginSystem_u8AdminOnlineFlag = FALSE;	
     e34:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <LoginSystem_u8AdminOnlineFlag>
     e38:	0a ce       	rjmp	.-1004   	; 0xa4e <__stack+0x1ef>
							else if (LoginSystem_u8PromotedUserOnlineFlag == TRUE)	//If a promoted user was online and wants to log out
     e3a:	80 91 5c 05 	lds	r24, 0x055C	; 0x80055c <LoginSystem_u8PromotedUserOnlineFlag>
     e3e:	81 30       	cpi	r24, 0x01	; 1
     e40:	09 f0       	breq	.+2      	; 0xe44 <__stack+0x5e5>
     e42:	05 ce       	rjmp	.-1014   	; 0xa4e <__stack+0x1ef>
								LoginSystem_u8PromotedUserOnlineFlag = FALSE;
     e44:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <LoginSystem_u8PromotedUserOnlineFlag>
     e48:	02 ce       	rjmp	.-1020   	; 0xa4e <__stack+0x1ef>
						}
				
					else if(UART_CHOICE == '2')
     e4a:	82 33       	cpi	r24, 0x32	; 50
     e4c:	19 f4       	brne	.+6      	; 0xe54 <__stack+0x5f5>
						{ShowToUser = MAIN_MENU;}
     e4e:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <ShowToUser>
     e52:	fd cd       	rjmp	.-1030   	; 0xa4e <__stack+0x1ef>
					else{UART_enuSendString("\r\nInvalid Choice\r\n ");		ShowToUser = LOG_OUT_CHOICE;}
     e54:	80 e2       	ldi	r24, 0x20	; 32
     e56:	94 e0       	ldi	r25, 0x04	; 4
     e58:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <UART_enuSendString>
     e5c:	10 93 5b 05 	sts	0x055B, r17	; 0x80055b <ShowToUser>
     e60:	f6 cd       	rjmp	.-1044   	; 0xa4e <__stack+0x1ef>
				u8 LoginSystem_u8TrueFlag;
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     e62:	4b e0       	ldi	r20, 0x0B	; 11
     e64:	e4 2e       	mov	r14, r20
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
					_delay_ms(700);
					if (LoginSystem_u8TrialsLeft == 0)
					{
						Program_Status_Flag = BLOCKING_STATUS;
     e66:	56 e0       	ldi	r21, 0x06	; 6
     e68:	85 2e       	mov	r8, r21
							LCD_enuDisplayString("Successfully");
							_delay_ms(700);
							LCD_enuClearDisplay();
							LCD_enuDisplayString("Welcome User");
							_delay_ms(700);
							Program_Status_Flag = USER_MENU_STATUS;
     e6a:	65 e0       	ldi	r22, 0x05	; 5
     e6c:	66 2e       	mov	r6, r22
				
			}
		}
		
		//if (Program_Status_Flag == USER_LOGIN_PAGE_STATUS);
		while (Program_Status_Flag == USER_LOGIN_PAGE_STATUS)///off line user should have interrupt
     e6e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <Program_Status_Flag>
     e72:	83 30       	cpi	r24, 0x03	; 3
     e74:	09 f0       	breq	.+2      	; 0xe78 <__stack+0x619>
     e76:	c4 c0       	rjmp	.+392    	; 0x1000 <__stack+0x7a1>
		{	
				LCD_enuClearDisplay();
     e78:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
				LCD_enuDisplayString("User Login");
     e7c:	8c e7       	ldi	r24, 0x7C	; 124
     e7e:	94 e0       	ldi	r25, 0x04	; 4
     e80:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Attempt Detected");
     e8c:	87 e8       	ldi	r24, 0x87	; 135
     e8e:	94 e0       	ldi	r25, 0x04	; 4
     e90:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
     e94:	3f ef       	ldi	r19, 0xFF	; 255
     e96:	8d e2       	ldi	r24, 0x2D	; 45
     e98:	92 e2       	ldi	r25, 0x22	; 34
     e9a:	31 50       	subi	r19, 0x01	; 1
     e9c:	80 40       	sbci	r24, 0x00	; 0
     e9e:	90 40       	sbci	r25, 0x00	; 0
     ea0:	e1 f7       	brne	.-8      	; 0xe9a <__stack+0x63b>
     ea2:	00 c0       	rjmp	.+0      	; 0xea4 <__stack+0x645>
     ea4:	00 00       	nop
				_delay_ms(700);
				u8 LoginSystem_u8TrueFlag;
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
     ea6:	be 01       	movw	r22, r28
     ea8:	68 5c       	subi	r22, 0xC8	; 200
     eaa:	7f 4f       	sbci	r23, 0xFF	; 255
     eac:	ce 01       	movw	r24, r28
     eae:	cd 96       	adiw	r24, 0x3d	; 61
     eb0:	0e 94 cc 00 	call	0x198	; 0x198 <LoginSystem_enuGetDataFromUserByKeypad>
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     eb4:	f1 2c       	mov	r15, r1
     eb6:	28 96       	adiw	r28, 0x08	; 8
     eb8:	8f ad       	ldd	r24, Y+63	; 0x3f
     eba:	28 97       	sbiw	r28, 0x08	; 8
     ebc:	f8 16       	cp	r15, r24
     ebe:	08 f0       	brcs	.+2      	; 0xec2 <__stack+0x663>
     ec0:	9a c0       	rjmp	.+308    	; 0xff6 <__stack+0x797>
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     ec2:	0f 2d       	mov	r16, r15
     ec4:	10 e0       	ldi	r17, 0x00	; 0
     ec6:	e0 9e       	mul	r14, r16
     ec8:	60 01       	movw	r12, r0
     eca:	e1 9e       	mul	r14, r17
     ecc:	d0 0c       	add	r13, r0
     ece:	11 24       	eor	r1, r1
     ed0:	be 01       	movw	r22, r28
     ed2:	63 5c       	subi	r22, 0xC3	; 195
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	8c 0f       	add	r24, r28
     edc:	9d 1f       	adc	r25, r29
     ede:	8c 0d       	add	r24, r12
     ee0:	9d 1d       	adc	r25, r13
     ee2:	0e 94 43 01 	call	0x286	; 0x286 <LoginSystem_u8Strcmp>
     ee6:	88 23       	and	r24, r24
     ee8:	99 f0       	breq	.+38     	; 0xf10 <__stack+0x6b1>
     eea:	c6 01       	movw	r24, r12
     eec:	05 96       	adiw	r24, 0x05	; 5
     eee:	be 01       	movw	r22, r28
     ef0:	68 5c       	subi	r22, 0xC8	; 200
     ef2:	7f 4f       	sbci	r23, 0xFF	; 255
     ef4:	e1 e0       	ldi	r30, 0x01	; 1
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	ec 0f       	add	r30, r28
     efa:	fd 1f       	adc	r31, r29
     efc:	8e 0f       	add	r24, r30
     efe:	9f 1f       	adc	r25, r31
     f00:	0e 94 43 01 	call	0x286	; 0x286 <LoginSystem_u8Strcmp>
     f04:	91 e0       	ldi	r25, 0x01	; 1
     f06:	81 11       	cpse	r24, r1
     f08:	01 c0       	rjmp	.+2      	; 0xf0c <__stack+0x6ad>
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	79 2e       	mov	r7, r25
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <__stack+0x6b3>
     f10:	71 2c       	mov	r7, r1
					if ( LoginSystem_u8TrueFlag == TRUE  )
     f12:	f1 e0       	ldi	r31, 0x01	; 1
     f14:	7f 12       	cpse	r7, r31
     f16:	6d c0       	rjmp	.+218    	; 0xff2 <__stack+0x793>
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
     f18:	e0 9e       	mul	r14, r16
     f1a:	f0 01       	movw	r30, r0
     f1c:	e1 9e       	mul	r14, r17
     f1e:	f0 0d       	add	r31, r0
     f20:	11 24       	eor	r1, r1
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	2c 0f       	add	r18, r28
     f28:	3d 1f       	adc	r19, r29
     f2a:	e2 0f       	add	r30, r18
     f2c:	f3 1f       	adc	r31, r19
     f2e:	82 85       	ldd	r24, Z+10	; 0x0a
     f30:	88 23       	and	r24, r24
     f32:	a1 f1       	breq	.+104    	; 0xf9c <__stack+0x73d>
					}
					
				}
				if (LoginSystem_u8TrueFlag == FALSE)
				{
					LoginSystem_u8TrialsLeft--;
     f34:	9a 94       	dec	r9
					LCD_enuClearDisplay();
     f36:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
					LCD_enuDisplayString("Wrong Username");
     f3a:	88 e9       	ldi	r24, 0x98	; 152
     f3c:	94 e0       	ldi	r25, 0x04	; 4
     f3e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("or Password");
     f4a:	84 ef       	ldi	r24, 0xF4	; 244
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	8d e2       	ldi	r24, 0x2D	; 45
     f56:	92 e2       	ldi	r25, 0x22	; 34
     f58:	31 50       	subi	r19, 0x01	; 1
     f5a:	80 40       	sbci	r24, 0x00	; 0
     f5c:	90 40       	sbci	r25, 0x00	; 0
     f5e:	e1 f7       	brne	.-8      	; 0xf58 <__stack+0x6f9>
     f60:	00 c0       	rjmp	.+0      	; 0xf62 <__stack+0x703>
     f62:	00 00       	nop
					_delay_ms(700);
					LCD_enuClearDisplay();
     f64:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
					LCD_enuDisplayString("Remaining Trials: ");
     f68:	82 e0       	ldi	r24, 0x02	; 2
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     f70:	60 e0       	ldi	r22, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
     f78:	89 2d       	mov	r24, r9
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	0e 94 ae 0b 	call	0x175c	; 0x175c <LCD_enuDisplayUnsignedInteger>
     f80:	ef ef       	ldi	r30, 0xFF	; 255
     f82:	fd e2       	ldi	r31, 0x2D	; 45
     f84:	22 e2       	ldi	r18, 0x22	; 34
     f86:	e1 50       	subi	r30, 0x01	; 1
     f88:	f0 40       	sbci	r31, 0x00	; 0
     f8a:	20 40       	sbci	r18, 0x00	; 0
     f8c:	e1 f7       	brne	.-8      	; 0xf86 <__stack+0x727>
     f8e:	00 c0       	rjmp	.+0      	; 0xf90 <__stack+0x731>
     f90:	00 00       	nop
					_delay_ms(700);
					if (LoginSystem_u8TrialsLeft == 0)
     f92:	91 10       	cpse	r9, r1
     f94:	33 c0       	rjmp	.+102    	; 0xffc <__stack+0x79d>
					{
						Program_Status_Flag = BLOCKING_STATUS;
     f96:	80 92 5a 05 	sts	0x055A, r8	; 0x80055a <Program_Status_Flag>
     f9a:	30 c0       	rjmp	.+96     	; 0xffc <__stack+0x79d>
					if ( LoginSystem_u8TrueFlag == TRUE  )
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
						{
							LoginSystem_u8TrialsLeft =3;
							LCD_enuClearDisplay();
     f9c:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
							LCD_enuDisplayString("Logged in");
     fa0:	87 ea       	ldi	r24, 0xA7	; 167
     fa2:	94 e0       	ldi	r25, 0x04	; 4
     fa4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
							LCD_enuDisplayString("Successfully");
     fb0:	89 ea       	ldi	r24, 0xA9	; 169
     fb2:	91 e0       	ldi	r25, 0x01	; 1
     fb4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
     fb8:	3f ef       	ldi	r19, 0xFF	; 255
     fba:	8d e2       	ldi	r24, 0x2D	; 45
     fbc:	92 e2       	ldi	r25, 0x22	; 34
     fbe:	31 50       	subi	r19, 0x01	; 1
     fc0:	80 40       	sbci	r24, 0x00	; 0
     fc2:	90 40       	sbci	r25, 0x00	; 0
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <__stack+0x75f>
     fc6:	00 c0       	rjmp	.+0      	; 0xfc8 <__stack+0x769>
     fc8:	00 00       	nop
							_delay_ms(700);
							LCD_enuClearDisplay();
     fca:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
							LCD_enuDisplayString("Welcome User");
     fce:	81 eb       	ldi	r24, 0xB1	; 177
     fd0:	94 e0       	ldi	r25, 0x04	; 4
     fd2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
     fd6:	ef ef       	ldi	r30, 0xFF	; 255
     fd8:	fd e2       	ldi	r31, 0x2D	; 45
     fda:	22 e2       	ldi	r18, 0x22	; 34
     fdc:	e1 50       	subi	r30, 0x01	; 1
     fde:	f0 40       	sbci	r31, 0x00	; 0
     fe0:	20 40       	sbci	r18, 0x00	; 0
     fe2:	e1 f7       	brne	.-8      	; 0xfdc <__stack+0x77d>
     fe4:	00 c0       	rjmp	.+0      	; 0xfe6 <__stack+0x787>
     fe6:	00 00       	nop
							_delay_ms(700);
							Program_Status_Flag = USER_MENU_STATUS;
     fe8:	60 92 5a 05 	sts	0x055A, r6	; 0x80055a <Program_Status_Flag>
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
					if ( LoginSystem_u8TrueFlag == TRUE  )
					{	
						if ( (LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == LCD_KEYPAD_USER) )
						{
							LoginSystem_u8TrialsLeft =3;
     fec:	33 e0       	ldi	r19, 0x03	; 3
     fee:	93 2e       	mov	r9, r19
     ff0:	3e cf       	rjmp	.-388    	; 0xe6e <__stack+0x60f>
				LCD_enuDisplayString("Attempt Detected");
				_delay_ms(700);
				u8 LoginSystem_u8TrueFlag;
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     ff2:	f3 94       	inc	r15
     ff4:	60 cf       	rjmp	.-320    	; 0xeb6 <__stack+0x657>
							break;
						}
					}
					
				}
				if (LoginSystem_u8TrueFlag == FALSE)
     ff6:	71 10       	cpse	r7, r1
     ff8:	3a cf       	rjmp	.-396    	; 0xe6e <__stack+0x60f>
     ffa:	9c cf       	rjmp	.-200    	; 0xf34 <__stack+0x6d5>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
					_delay_ms(700);
					if (LoginSystem_u8TrialsLeft == 0)
					{
						Program_Status_Flag = BLOCKING_STATUS;
     ffc:	71 2c       	mov	r7, r1
     ffe:	37 cf       	rjmp	.-402    	; 0xe6e <__stack+0x60f>
				break;
				
				case '2':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
					ToggleBit(&Current_State,2);
					ShowToUser = LOG_OUT_CHOICE;
    1000:	8b e0       	ldi	r24, 0x0B	; 11
    1002:	f8 2e       	mov	r15, r24
					break;
					
					case '2':
					SPI_ui8TransmitRecive(DIMMER);
					
					ShowToUser = DIMMER_MENU;
    1004:	98 e0       	ldi	r25, 0x08	; 8
    1006:	e9 2e       	mov	r14, r25
				break;
				
				case '2':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
					ToggleBit(&Current_State,2);
					ShowToUser = LOG_OUT_CHOICE;
    1008:	1b e0       	ldi	r17, 0x0B	; 11
					ToggleBit(&Current_State,3);
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '4':
					ShowToUser = MORE_MENU;
    100a:	20 e1       	ldi	r18, 0x10	; 16
    100c:	d2 2e       	mov	r13, r18

		}
/************************************************************************************************************/
/************************************************************************************************************/

		while (Program_Status_Flag == USER_MENU_STATUS)//off line user menu
    100e:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <Program_Status_Flag>
    1012:	85 30       	cpi	r24, 0x05	; 5
    1014:	09 f0       	breq	.+2      	; 0x1018 <__stack+0x7b9>
    1016:	23 c1       	rjmp	.+582    	; 0x125e <__stack+0x9ff>
		{
			while(ShowToUser == MAIN_MENU)
    1018:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <ShowToUser>
    101c:	81 11       	cpse	r24, r1
    101e:	6b c0       	rjmp	.+214    	; 0x10f6 <__stack+0x897>
			{
				LCD_enuClearDisplay();			
    1020:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
				LCD_enuDisplayString("1:Room1 2:Room2");
    1024:	8e eb       	ldi	r24, 0xBE	; 190
    1026:	94 e0       	ldi	r25, 0x04	; 4
    1028:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("3:Room3 4:More");
    1034:	8e ec       	ldi	r24, 0xCE	; 206
    1036:	94 e0       	ldi	r25, 0x04	; 4
    1038:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
    103c:	ce 01       	movw	r24, r28
    103e:	8a 5b       	subi	r24, 0xBA	; 186
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	0e 94 ac 09 	call	0x1358	; 0x1358 <Keypad_enuGetPressedKey>
				switch (Keypad_Pressed_Key)
    1046:	27 96       	adiw	r28, 0x07	; 7
    1048:	8f ad       	ldd	r24, Y+63	; 0x3f
    104a:	27 97       	sbiw	r28, 0x07	; 7
    104c:	82 33       	cpi	r24, 0x32	; 50
    104e:	79 f0       	breq	.+30     	; 0x106e <__stack+0x80f>
    1050:	38 f4       	brcc	.+14     	; 0x1060 <__stack+0x801>
    1052:	81 33       	cpi	r24, 0x31	; 49
    1054:	e9 f4       	brne	.+58     	; 0x1090 <__stack+0x831>
				{
				case '1':
					SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,1);
    105c:	61 e0       	ldi	r22, 0x01	; 1
    105e:	10 c0       	rjmp	.+32     	; 0x1080 <__stack+0x821>
				LCD_enuClearDisplay();			
				LCD_enuDisplayString("1:Room1 2:Room2");
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
				LCD_enuDisplayString("3:Room3 4:More");
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
				switch (Keypad_Pressed_Key)
    1060:	83 33       	cpi	r24, 0x33	; 51
    1062:	51 f0       	breq	.+20     	; 0x1078 <__stack+0x819>
    1064:	84 33       	cpi	r24, 0x34	; 52
    1066:	a1 f4       	brne	.+40     	; 0x1090 <__stack+0x831>
					ToggleBit(&Current_State,3);
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '4':
					ShowToUser = MORE_MENU;
    1068:	d0 92 5b 05 	sts	0x055B, r13	; 0x80055b <ShowToUser>
				break;
    106c:	d5 cf       	rjmp	.-86     	; 0x1018 <__stack+0x7b9>
					ToggleBit(&Current_State,1);
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '2':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
    106e:	82 e0       	ldi	r24, 0x02	; 2
    1070:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,2);
    1074:	62 e0       	ldi	r22, 0x02	; 2
    1076:	04 c0       	rjmp	.+8      	; 0x1080 <__stack+0x821>
					ShowToUser = LOG_OUT_CHOICE;
				break;
				
				case '3':
					SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
    1078:	83 e0       	ldi	r24, 0x03	; 3
    107a:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,3);
    107e:	63 e0       	ldi	r22, 0x03	; 3
    1080:	ce 01       	movw	r24, r28
    1082:	8b 5b       	subi	r24, 0xBB	; 187
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	0e 94 21 02 	call	0x442	; 0x442 <ToggleBit>
					ShowToUser = LOG_OUT_CHOICE;
    108a:	10 93 5b 05 	sts	0x055B, r17	; 0x80055b <ShowToUser>
				break;
    108e:	c4 cf       	rjmp	.-120    	; 0x1018 <__stack+0x7b9>
				case '4':
					ShowToUser = MORE_MENU;
				break;
				
				default:
				LCD_enuClearDisplay();
    1090:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
				LCD_enuDisplayString("Invalid Choice");
    1094:	8d ed       	ldi	r24, 0xDD	; 221
    1096:	94 e0       	ldi	r25, 0x04	; 4
    1098:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
    109c:	3f ef       	ldi	r19, 0xFF	; 255
    109e:	8d e2       	ldi	r24, 0x2D	; 45
    10a0:	92 e2       	ldi	r25, 0x22	; 34
    10a2:	31 50       	subi	r19, 0x01	; 1
    10a4:	80 40       	sbci	r24, 0x00	; 0
    10a6:	90 40       	sbci	r25, 0x00	; 0
    10a8:	e1 f7       	brne	.-8      	; 0x10a2 <__stack+0x843>
    10aa:	00 c0       	rjmp	.+0      	; 0x10ac <__stack+0x84d>
    10ac:	00 00       	nop
    10ae:	b4 cf       	rjmp	.-152    	; 0x1018 <__stack+0x7b9>
				}
			}
			
			while (ShowToUser == MORE_MENU)
			{
				LCD_enuClearDisplay();
    10b0:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
				LCD_enuDisplayString("1:Room4 2:Dimmer");
    10b4:	8c ee       	ldi	r24, 0xEC	; 236
    10b6:	94 e0       	ldi	r25, 0x04	; 4
    10b8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("0:Return");
    10c4:	8d ef       	ldi	r24, 0xFD	; 253
    10c6:	94 e0       	ldi	r25, 0x04	; 4
    10c8:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
    10cc:	ce 01       	movw	r24, r28
    10ce:	8a 5b       	subi	r24, 0xBA	; 186
    10d0:	9f 4f       	sbci	r25, 0xFF	; 255
    10d2:	0e 94 ac 09 	call	0x1358	; 0x1358 <Keypad_enuGetPressedKey>
				switch (Keypad_Pressed_Key)
    10d6:	27 96       	adiw	r28, 0x07	; 7
    10d8:	8f ad       	ldd	r24, Y+63	; 0x3f
    10da:	27 97       	sbiw	r28, 0x07	; 7
    10dc:	81 33       	cpi	r24, 0x31	; 49
    10de:	81 f4       	brne	.+32     	; 0x1100 <__stack+0x8a1>
				{
					case '1':
					SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
    10e0:	84 e0       	ldi	r24, 0x04	; 4
    10e2:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
					ToggleBit(&Current_State,4);
    10e6:	64 e0       	ldi	r22, 0x04	; 4
    10e8:	ce 01       	movw	r24, r28
    10ea:	8b 5b       	subi	r24, 0xBB	; 187
    10ec:	9f 4f       	sbci	r25, 0xFF	; 255
    10ee:	0e 94 21 02 	call	0x442	; 0x442 <ToggleBit>
					ShowToUser = LOG_OUT_CHOICE;
    10f2:	10 93 5b 05 	sts	0x055B, r17	; 0x80055b <ShowToUser>
				_delay_ms(700);
				break;
				}
			}
			
			while (ShowToUser == MORE_MENU)
    10f6:	00 91 5b 05 	lds	r16, 0x055B	; 0x80055b <ShowToUser>
    10fa:	00 31       	cpi	r16, 0x10	; 16
    10fc:	c9 f2       	breq	.-78     	; 0x10b0 <__stack+0x851>
    10fe:	1d c0       	rjmp	.+58     	; 0x113a <__stack+0x8db>
				LCD_enuClearDisplay();
				LCD_enuDisplayString("1:Room4 2:Dimmer");
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
				LCD_enuDisplayString("0:Return");
				Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
				switch (Keypad_Pressed_Key)
    1100:	82 33       	cpi	r24, 0x32	; 50
    1102:	29 f0       	breq	.+10     	; 0x110e <__stack+0x8af>
    1104:	80 33       	cpi	r24, 0x30	; 48
    1106:	49 f4       	brne	.+18     	; 0x111a <__stack+0x8bb>
					
					ShowToUser = DIMMER_MENU;
					break;
					
					case '0':
					ShowToUser = MAIN_MENU;
    1108:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <ShowToUser>
					break;
    110c:	f4 cf       	rjmp	.-24     	; 0x10f6 <__stack+0x897>
					ToggleBit(&Current_State,4);
					ShowToUser = LOG_OUT_CHOICE;
					break;
					
					case '2':
					SPI_ui8TransmitRecive(DIMMER);
    110e:	8c e0       	ldi	r24, 0x0C	; 12
    1110:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
					
					ShowToUser = DIMMER_MENU;
    1114:	e0 92 5b 05 	sts	0x055B, r14	; 0x80055b <ShowToUser>
					break;
    1118:	ee cf       	rjmp	.-36     	; 0x10f6 <__stack+0x897>
					case '0':
					ShowToUser = MAIN_MENU;
					break;
					
					default:
					LCD_enuClearDisplay();
    111a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
					LCD_enuDisplayString("Invalid Choice");
    111e:	8d ed       	ldi	r24, 0xDD	; 221
    1120:	94 e0       	ldi	r25, 0x04	; 4
    1122:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
    1126:	ef ef       	ldi	r30, 0xFF	; 255
    1128:	fd e2       	ldi	r31, 0x2D	; 45
    112a:	22 e2       	ldi	r18, 0x22	; 34
    112c:	e1 50       	subi	r30, 0x01	; 1
    112e:	f0 40       	sbci	r31, 0x00	; 0
    1130:	20 40       	sbci	r18, 0x00	; 0
    1132:	e1 f7       	brne	.-8      	; 0x112c <__stack+0x8cd>
    1134:	00 c0       	rjmp	.+0      	; 0x1136 <__stack+0x8d7>
    1136:	00 00       	nop
    1138:	de cf       	rjmp	.-68     	; 0x10f6 <__stack+0x897>
					_delay_ms(700);
					break;
				}
			}
			switch(ShowToUser)
    113a:	08 30       	cpi	r16, 0x08	; 8
    113c:	21 f0       	breq	.+8      	; 0x1146 <__stack+0x8e7>
    113e:	0b 30       	cpi	r16, 0x0B	; 11
    1140:	09 f4       	brne	.+2      	; 0x1144 <__stack+0x8e5>
    1142:	4f c0       	rjmp	.+158    	; 0x11e2 <__stack+0x983>
    1144:	64 cf       	rjmp	.-312    	; 0x100e <__stack+0x7af>
			{
				case DIMMER_MENU:
					LCD_enuClearDisplay();
    1146:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
					LCD_enuDisplayString("Brightness");
    114a:	86 e0       	ldi	r24, 0x06	; 6
    114c:	95 e0       	ldi	r25, 0x05	; 5
    114e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Percentage:");
    115a:	81 e1       	ldi	r24, 0x11	; 17
    115c:	95 e0       	ldi	r25, 0x05	; 5
    115e:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
					Keypad_enuGetPressedKey(&Dimmer_Percentage_Tens);
    1162:	ce 01       	movw	r24, r28
    1164:	8d 5b       	subi	r24, 0xBD	; 189
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	0e 94 ac 09 	call	0x1358	; 0x1358 <Keypad_enuGetPressedKey>
					LCD_enuSendData(Dimmer_Percentage_Tens);
    116c:	24 96       	adiw	r28, 0x04	; 4
    116e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1170:	24 97       	sbiw	r28, 0x04	; 4
    1172:	0e 94 a1 0b 	call	0x1742	; 0x1742 <LCD_enuSendData>
					Dimmer_Percentage_Tens = Dimmer_Percentage_Tens - '0';
    1176:	24 96       	adiw	r28, 0x04	; 4
    1178:	8f ad       	ldd	r24, Y+63	; 0x3f
    117a:	24 97       	sbiw	r28, 0x04	; 4
    117c:	80 53       	subi	r24, 0x30	; 48
    117e:	24 96       	adiw	r28, 0x04	; 4
    1180:	8f af       	std	Y+63, r24	; 0x3f
    1182:	24 97       	sbiw	r28, 0x04	; 4
					Keypad_enuGetPressedKey(&Dimmer_Percentage_Ones);
    1184:	ce 01       	movw	r24, r28
    1186:	8e 5b       	subi	r24, 0xBE	; 190
    1188:	9f 4f       	sbci	r25, 0xFF	; 255
    118a:	0e 94 ac 09 	call	0x1358	; 0x1358 <Keypad_enuGetPressedKey>
					LCD_enuSendData(Dimmer_Percentage_Ones);
    118e:	23 96       	adiw	r28, 0x03	; 3
    1190:	8f ad       	ldd	r24, Y+63	; 0x3f
    1192:	23 97       	sbiw	r28, 0x03	; 3
    1194:	0e 94 a1 0b 	call	0x1742	; 0x1742 <LCD_enuSendData>
					Dimmer_Percentage_Ones = Dimmer_Percentage_Ones -'0';
    1198:	23 96       	adiw	r28, 0x03	; 3
    119a:	8f ad       	ldd	r24, Y+63	; 0x3f
    119c:	23 97       	sbiw	r28, 0x03	; 3
    119e:	90 ed       	ldi	r25, 0xD0	; 208
    11a0:	98 0f       	add	r25, r24
    11a2:	23 96       	adiw	r28, 0x03	; 3
    11a4:	9f af       	std	Y+63, r25	; 0x3f
    11a6:	23 97       	sbiw	r28, 0x03	; 3
					Dimmer_Percentage =10*Dimmer_Percentage_Tens + Dimmer_Percentage_Ones;
    11a8:	24 96       	adiw	r28, 0x04	; 4
    11aa:	8f ad       	ldd	r24, Y+63	; 0x3f
    11ac:	24 97       	sbiw	r28, 0x04	; 4
    11ae:	b9 2e       	mov	r11, r25
    11b0:	3a e0       	ldi	r19, 0x0A	; 10
    11b2:	83 9f       	mul	r24, r19
    11b4:	b0 0c       	add	r11, r0
    11b6:	11 24       	eor	r1, r1
					SPI_ui8TransmitRecive(Dimmer_Percentage);
    11b8:	8b 2d       	mov	r24, r11
    11ba:	0e 94 be 0d 	call	0x1b7c	; 0x1b7c <SPI_ui8TransmitRecive>
    11be:	8f ef       	ldi	r24, 0xFF	; 255
    11c0:	9d e2       	ldi	r25, 0x2D	; 45
    11c2:	e2 e2       	ldi	r30, 0x22	; 34
    11c4:	81 50       	subi	r24, 0x01	; 1
    11c6:	90 40       	sbci	r25, 0x00	; 0
    11c8:	e0 40       	sbci	r30, 0x00	; 0
    11ca:	e1 f7       	brne	.-8      	; 0x11c4 <__stack+0x965>
    11cc:	00 c0       	rjmp	.+0      	; 0x11ce <__stack+0x96f>
    11ce:	00 00       	nop
					_delay_ms(700);
					SetBit(&Current_State,5);
    11d0:	65 e0       	ldi	r22, 0x05	; 5
    11d2:	ce 01       	movw	r24, r28
    11d4:	8b 5b       	subi	r24, 0xBB	; 187
    11d6:	9f 4f       	sbci	r25, 0xFF	; 255
    11d8:	0e 94 16 02 	call	0x42c	; 0x42c <SetBit>
					ShowToUser=LOG_OUT_CHOICE;
    11dc:	f0 92 5b 05 	sts	0x055B, r15	; 0x80055b <ShowToUser>
				break;
    11e0:	16 cf       	rjmp	.-468    	; 0x100e <__stack+0x7af>
				
				case LOG_OUT_CHOICE:
					LCD_enuClearDisplay();
    11e2:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
					LCD_enuDisplayString("1:Log Out 2:Ret");
    11e6:	8d e1       	ldi	r24, 0x1D	; 29
    11e8:	95 e0       	ldi	r25, 0x05	; 5
    11ea:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
					Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
    11ee:	ce 01       	movw	r24, r28
    11f0:	8a 5b       	subi	r24, 0xBA	; 186
    11f2:	9f 4f       	sbci	r25, 0xFF	; 255
    11f4:	0e 94 ac 09 	call	0x1358	; 0x1358 <Keypad_enuGetPressedKey>
					if (Keypad_Pressed_Key == '1')
    11f8:	27 96       	adiw	r28, 0x07	; 7
    11fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    11fc:	27 97       	sbiw	r28, 0x07	; 7
    11fe:	81 33       	cpi	r24, 0x31	; 49
    1200:	b9 f4       	brne	.+46     	; 0x1230 <__stack+0x9d1>
					{
						Program_Status_Flag = IDLE_STATUS;
    1202:	87 e0       	ldi	r24, 0x07	; 7
    1204:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <Program_Status_Flag>
						ShowToUser = MAIN_MENU;			//That's For the next time The Program Enters the ADMIN Menu State to Start From the MAIN Menu
    1208:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <ShowToUser>
						LCD_KEYPAD_USER_FLAG = 0;
    120c:	10 92 58 05 	sts	0x0558, r1	; 0x800558 <__data_end>
						LCD_enuClearDisplay();
    1210:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
						LCD_enuDisplayString("Logged Out");
    1214:	8d e2       	ldi	r24, 0x2D	; 45
    1216:	95 e0       	ldi	r25, 0x05	; 5
    1218:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
    121c:	ff ef       	ldi	r31, 0xFF	; 255
    121e:	2d e2       	ldi	r18, 0x2D	; 45
    1220:	32 e2       	ldi	r19, 0x22	; 34
    1222:	f1 50       	subi	r31, 0x01	; 1
    1224:	20 40       	sbci	r18, 0x00	; 0
    1226:	30 40       	sbci	r19, 0x00	; 0
    1228:	e1 f7       	brne	.-8      	; 0x1222 <__stack+0x9c3>
    122a:	00 c0       	rjmp	.+0      	; 0x122c <__stack+0x9cd>
    122c:	00 00       	nop
    122e:	ef ce       	rjmp	.-546    	; 0x100e <__stack+0x7af>
						
						_delay_ms(700);
					}
					else if(Keypad_Pressed_Key == '2')
    1230:	82 33       	cpi	r24, 0x32	; 50
    1232:	19 f4       	brne	.+6      	; 0x123a <__stack+0x9db>
						{ShowToUser = MAIN_MENU;}
    1234:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <ShowToUser>
    1238:	ea ce       	rjmp	.-556    	; 0x100e <__stack+0x7af>
					else{LCD_enuClearDisplay();		LCD_enuDisplayString("Invalid Choice");	 _delay_ms(700);	ShowToUser = LOG_OUT_CHOICE;}
    123a:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
    123e:	8d ed       	ldi	r24, 0xDD	; 221
    1240:	94 e0       	ldi	r25, 0x04	; 4
    1242:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
    1246:	8f ef       	ldi	r24, 0xFF	; 255
    1248:	9d e2       	ldi	r25, 0x2D	; 45
    124a:	e2 e2       	ldi	r30, 0x22	; 34
    124c:	81 50       	subi	r24, 0x01	; 1
    124e:	90 40       	sbci	r25, 0x00	; 0
    1250:	e0 40       	sbci	r30, 0x00	; 0
    1252:	e1 f7       	brne	.-8      	; 0x124c <__stack+0x9ed>
    1254:	00 c0       	rjmp	.+0      	; 0x1256 <__stack+0x9f7>
    1256:	00 00       	nop
    1258:	00 93 5b 05 	sts	0x055B, r16	; 0x80055b <ShowToUser>
    125c:	d8 ce       	rjmp	.-592    	; 0x100e <__stack+0x7af>
			}
		}//end of the LCD_KEYPAD_MENU_STATUS

	/************************************************************************************************************/
	/************************************************************************************************************/
		if(Program_Status_Flag == BLOCKING_STATUS)
    125e:	86 30       	cpi	r24, 0x06	; 6
    1260:	09 f0       	breq	.+2      	; 0x1264 <__stack+0xa05>
    1262:	8e ca       	rjmp	.-2788   	; 0x780 <main+0x304>
		{
			EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,BLOCKING_STATUS);
    1264:	66 e0       	ldi	r22, 0x06	; 6
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	0e 94 54 0d 	call	0x1aa8	; 0x1aa8 <EEPROM_vWriteByteToAddress>
			Blocking_Flag=TRUE;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <Blocking_Flag>
			LCD_enuClearDisplay();
    1274:	0e 94 56 0c 	call	0x18ac	; 0x18ac <LCD_enuClearDisplay>
			LCD_enuDisplayString("You are Blocked");
    1278:	88 e3       	ldi	r24, 0x38	; 56
    127a:	95 e0       	ldi	r25, 0x05	; 5
    127c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	0e 94 38 0c 	call	0x1870	; 0x1870 <LCD_enuSetCursorPosition>
			LCD_enuDisplayString("From The System");
    1288:	88 e4       	ldi	r24, 0x48	; 72
    128a:	95 e0       	ldi	r25, 0x05	; 5
    128c:	0e 94 1b 0c 	call	0x1836	; 0x1836 <LCD_enuDisplayString>
			DIO_enuSetPinValue(DIO_u8GROUP_C,DIO_u8PIN0,DIO_u8HIGH);
    1290:	41 e0       	ldi	r20, 0x01	; 1
    1292:	60 e0       	ldi	r22, 0x00	; 0
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
			while (Program_Status_Flag == BLOCKING_STATUS);
    129a:	80 91 5a 05 	lds	r24, 0x055A	; 0x80055a <Program_Status_Flag>
    129e:	86 30       	cpi	r24, 0x06	; 6
    12a0:	09 f0       	breq	.+2      	; 0x12a4 <__stack+0xa45>
    12a2:	6e ca       	rjmp	.-2852   	; 0x780 <main+0x304>
    12a4:	ff cf       	rjmp	.-2      	; 0x12a4 <__stack+0xa45>
			else
			{
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
				{
								
					LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
    12a6:	13 e0       	ldi	r17, 0x03	; 3
    12a8:	79 cb       	rjmp	.-2318   	; 0x99c <__stack+0x13d>
					
						
				}
			}
			
			if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
    12aa:	aa 20       	and	r10, r10
    12ac:	09 f4       	brne	.+2      	; 0x12b0 <__stack+0xa51>
    12ae:	59 cb       	rjmp	.-2382   	; 0x962 <__stack+0x103>
    12b0:	19 2d       	mov	r17, r9
    12b2:	74 cb       	rjmp	.-2328   	; 0x99c <__stack+0x13d>

000012b4 <Keypad_enuInit>:
    12b4:	41 e0       	ldi	r20, 0x01	; 1
    12b6:	63 e0       	ldi	r22, 0x03	; 3
    12b8:	83 e0       	ldi	r24, 0x03	; 3
    12ba:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    12be:	41 e0       	ldi	r20, 0x01	; 1
    12c0:	64 e0       	ldi	r22, 0x04	; 4
    12c2:	83 e0       	ldi	r24, 0x03	; 3
    12c4:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    12c8:	41 e0       	ldi	r20, 0x01	; 1
    12ca:	65 e0       	ldi	r22, 0x05	; 5
    12cc:	83 e0       	ldi	r24, 0x03	; 3
    12ce:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    12d2:	41 e0       	ldi	r20, 0x01	; 1
    12d4:	66 e0       	ldi	r22, 0x06	; 6
    12d6:	83 e0       	ldi	r24, 0x03	; 3
    12d8:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	62 e0       	ldi	r22, 0x02	; 2
    12e0:	82 e0       	ldi	r24, 0x02	; 2
    12e2:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	63 e0       	ldi	r22, 0x03	; 3
    12ea:	82 e0       	ldi	r24, 0x02	; 2
    12ec:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    12f0:	40 e0       	ldi	r20, 0x00	; 0
    12f2:	64 e0       	ldi	r22, 0x04	; 4
    12f4:	82 e0       	ldi	r24, 0x02	; 2
    12f6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	65 e0       	ldi	r22, 0x05	; 5
    12fe:	82 e0       	ldi	r24, 0x02	; 2
    1300:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	63 e0       	ldi	r22, 0x03	; 3
    1308:	83 e0       	ldi	r24, 0x03	; 3
    130a:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    130e:	41 e0       	ldi	r20, 0x01	; 1
    1310:	64 e0       	ldi	r22, 0x04	; 4
    1312:	83 e0       	ldi	r24, 0x03	; 3
    1314:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1318:	41 e0       	ldi	r20, 0x01	; 1
    131a:	65 e0       	ldi	r22, 0x05	; 5
    131c:	83 e0       	ldi	r24, 0x03	; 3
    131e:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1322:	41 e0       	ldi	r20, 0x01	; 1
    1324:	66 e0       	ldi	r22, 0x06	; 6
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    132c:	41 e0       	ldi	r20, 0x01	; 1
    132e:	62 e0       	ldi	r22, 0x02	; 2
    1330:	82 e0       	ldi	r24, 0x02	; 2
    1332:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1336:	41 e0       	ldi	r20, 0x01	; 1
    1338:	63 e0       	ldi	r22, 0x03	; 3
    133a:	82 e0       	ldi	r24, 0x02	; 2
    133c:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1340:	41 e0       	ldi	r20, 0x01	; 1
    1342:	64 e0       	ldi	r22, 0x04	; 4
    1344:	82 e0       	ldi	r24, 0x02	; 2
    1346:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    134a:	41 e0       	ldi	r20, 0x01	; 1
    134c:	65 e0       	ldi	r22, 0x05	; 5
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1354:	80 e0       	ldi	r24, 0x00	; 0
    1356:	08 95       	ret

00001358 <Keypad_enuGetPressedKey>:
    1358:	2f 92       	push	r2
    135a:	3f 92       	push	r3
    135c:	4f 92       	push	r4
    135e:	5f 92       	push	r5
    1360:	6f 92       	push	r6
    1362:	7f 92       	push	r7
    1364:	8f 92       	push	r8
    1366:	9f 92       	push	r9
    1368:	af 92       	push	r10
    136a:	bf 92       	push	r11
    136c:	cf 92       	push	r12
    136e:	df 92       	push	r13
    1370:	ef 92       	push	r14
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	df 93       	push	r29
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	a3 97       	sbiw	r28, 0x23	; 35
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	6c 01       	movw	r12, r24
    138e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    1392:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
    1396:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
    139a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
    139e:	8d 8f       	std	Y+29, r24	; 0x1d
    13a0:	9e 8f       	std	Y+30, r25	; 0x1e
    13a2:	af 8f       	std	Y+31, r26	; 0x1f
    13a4:	b8 a3       	std	Y+32, r27	; 0x20
    13a6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
    13aa:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
    13ae:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
    13b2:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
    13b6:	89 8f       	std	Y+25, r24	; 0x19
    13b8:	9a 8f       	std	Y+26, r25	; 0x1a
    13ba:	ab 8f       	std	Y+27, r26	; 0x1b
    13bc:	bc 8f       	std	Y+28, r27	; 0x1c
    13be:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
    13c2:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__DATA_REGION_ORIGIN__+0x9>
    13c6:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <__DATA_REGION_ORIGIN__+0xa>
    13ca:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
    13ce:	8d 8b       	std	Y+21, r24	; 0x15
    13d0:	9e 8b       	std	Y+22, r25	; 0x16
    13d2:	af 8b       	std	Y+23, r26	; 0x17
    13d4:	b8 8f       	std	Y+24, r27	; 0x18
    13d6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
    13da:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
    13de:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
    13e2:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <__DATA_REGION_ORIGIN__+0xf>
    13e6:	89 8b       	std	Y+17, r24	; 0x11
    13e8:	9a 8b       	std	Y+18, r25	; 0x12
    13ea:	ab 8b       	std	Y+19, r26	; 0x13
    13ec:	bc 8b       	std	Y+20, r27	; 0x14
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	f6 01       	movw	r30, r12
    13f2:	80 83       	st	Z, r24
    13f4:	f6 01       	movw	r30, r12
    13f6:	80 81       	ld	r24, Z
    13f8:	8f 3f       	cpi	r24, 0xFF	; 255
    13fa:	09 f0       	breq	.+2      	; 0x13fe <Keypad_enuGetPressedKey+0xa6>
    13fc:	7b c0       	rjmp	.+246    	; 0x14f4 <Keypad_enuGetPressedKey+0x19c>
    13fe:	3e 01       	movw	r6, r28
    1400:	f9 e1       	ldi	r31, 0x19	; 25
    1402:	6f 0e       	add	r6, r31
    1404:	71 1c       	adc	r7, r1
    1406:	ce 01       	movw	r24, r28
    1408:	4d 96       	adiw	r24, 0x1d	; 29
    140a:	9b a3       	std	Y+35, r25	; 0x23
    140c:	8a a3       	std	Y+34, r24	; 0x22
    140e:	e1 2c       	mov	r14, r1
    1410:	f1 2c       	mov	r15, r1
    1412:	f3 01       	movw	r30, r6
    1414:	21 90       	ld	r2, Z+
    1416:	3f 01       	movw	r6, r30
    1418:	ea a1       	ldd	r30, Y+34	; 0x22
    141a:	fb a1       	ldd	r31, Y+35	; 0x23
    141c:	31 90       	ld	r3, Z+
    141e:	fb a3       	std	Y+35, r31	; 0x23
    1420:	ea a3       	std	Y+34, r30	; 0x22
    1422:	40 e0       	ldi	r20, 0x00	; 0
    1424:	62 2d       	mov	r22, r2
    1426:	83 2d       	mov	r24, r3
    1428:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    142c:	4e 01       	movw	r8, r28
    142e:	f1 e1       	ldi	r31, 0x11	; 17
    1430:	8f 0e       	add	r8, r31
    1432:	91 1c       	adc	r9, r1
    1434:	5e 01       	movw	r10, r28
    1436:	85 e1       	ldi	r24, 0x15	; 21
    1438:	a8 0e       	add	r10, r24
    143a:	b1 1c       	adc	r11, r1
    143c:	00 e0       	ldi	r16, 0x00	; 0
    143e:	10 e0       	ldi	r17, 0x00	; 0
    1440:	f4 01       	movw	r30, r8
    1442:	51 90       	ld	r5, Z+
    1444:	4f 01       	movw	r8, r30
    1446:	f5 01       	movw	r30, r10
    1448:	41 90       	ld	r4, Z+
    144a:	5f 01       	movw	r10, r30
    144c:	ae 01       	movw	r20, r28
    144e:	4f 5d       	subi	r20, 0xDF	; 223
    1450:	5f 4f       	sbci	r21, 0xFF	; 255
    1452:	65 2d       	mov	r22, r5
    1454:	84 2d       	mov	r24, r4
    1456:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <DIO_enuGetPinValue>
    145a:	89 a1       	ldd	r24, Y+33	; 0x21
    145c:	81 11       	cpse	r24, r1
    145e:	36 c0       	rjmp	.+108    	; 0x14cc <Keypad_enuGetPressedKey+0x174>
    1460:	83 ec       	ldi	r24, 0xC3	; 195
    1462:	99 e0       	ldi	r25, 0x09	; 9
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	f1 f7       	brne	.-4      	; 0x1464 <Keypad_enuGetPressedKey+0x10c>
    1468:	00 c0       	rjmp	.+0      	; 0x146a <Keypad_enuGetPressedKey+0x112>
    146a:	00 00       	nop
    146c:	ae 01       	movw	r20, r28
    146e:	4f 5d       	subi	r20, 0xDF	; 223
    1470:	5f 4f       	sbci	r21, 0xFF	; 255
    1472:	65 2d       	mov	r22, r5
    1474:	84 2d       	mov	r24, r4
    1476:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <DIO_enuGetPinValue>
    147a:	89 a1       	ldd	r24, Y+33	; 0x21
    147c:	81 11       	cpse	r24, r1
    147e:	26 c0       	rjmp	.+76     	; 0x14cc <Keypad_enuGetPressedKey+0x174>
    1480:	89 a1       	ldd	r24, Y+33	; 0x21
    1482:	81 11       	cpse	r24, r1
    1484:	08 c0       	rjmp	.+16     	; 0x1496 <Keypad_enuGetPressedKey+0x13e>
    1486:	ae 01       	movw	r20, r28
    1488:	4f 5d       	subi	r20, 0xDF	; 223
    148a:	5f 4f       	sbci	r21, 0xFF	; 255
    148c:	65 2d       	mov	r22, r5
    148e:	84 2d       	mov	r24, r4
    1490:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <DIO_enuGetPinValue>
    1494:	f5 cf       	rjmp	.-22     	; 0x1480 <Keypad_enuGetPressedKey+0x128>
    1496:	80 e1       	ldi	r24, 0x10	; 16
    1498:	e0 e7       	ldi	r30, 0x70	; 112
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	de 01       	movw	r26, r28
    149e:	11 96       	adiw	r26, 0x01	; 1
    14a0:	01 90       	ld	r0, Z+
    14a2:	0d 92       	st	X+, r0
    14a4:	8a 95       	dec	r24
    14a6:	e1 f7       	brne	.-8      	; 0x14a0 <Keypad_enuGetPressedKey+0x148>
    14a8:	00 0f       	add	r16, r16
    14aa:	11 1f       	adc	r17, r17
    14ac:	00 0f       	add	r16, r16
    14ae:	11 1f       	adc	r17, r17
    14b0:	e1 e0       	ldi	r30, 0x01	; 1
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	ec 0f       	add	r30, r28
    14b6:	fd 1f       	adc	r31, r29
    14b8:	0e 0f       	add	r16, r30
    14ba:	1f 1f       	adc	r17, r31
    14bc:	f8 01       	movw	r30, r16
    14be:	ee 0d       	add	r30, r14
    14c0:	ff 1d       	adc	r31, r15
    14c2:	80 81       	ld	r24, Z
    14c4:	f6 01       	movw	r30, r12
    14c6:	80 83       	st	Z, r24
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	15 c0       	rjmp	.+42     	; 0x14f6 <Keypad_enuGetPressedKey+0x19e>
    14cc:	0f 5f       	subi	r16, 0xFF	; 255
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	04 30       	cpi	r16, 0x04	; 4
    14d2:	11 05       	cpc	r17, r1
    14d4:	09 f0       	breq	.+2      	; 0x14d8 <Keypad_enuGetPressedKey+0x180>
    14d6:	b4 cf       	rjmp	.-152    	; 0x1440 <Keypad_enuGetPressedKey+0xe8>
    14d8:	41 e0       	ldi	r20, 0x01	; 1
    14da:	62 2d       	mov	r22, r2
    14dc:	83 2d       	mov	r24, r3
    14de:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    14e2:	ff ef       	ldi	r31, 0xFF	; 255
    14e4:	ef 1a       	sub	r14, r31
    14e6:	ff 0a       	sbc	r15, r31
    14e8:	84 e0       	ldi	r24, 0x04	; 4
    14ea:	e8 16       	cp	r14, r24
    14ec:	f1 04       	cpc	r15, r1
    14ee:	09 f0       	breq	.+2      	; 0x14f2 <Keypad_enuGetPressedKey+0x19a>
    14f0:	90 cf       	rjmp	.-224    	; 0x1412 <Keypad_enuGetPressedKey+0xba>
    14f2:	80 cf       	rjmp	.-256    	; 0x13f4 <Keypad_enuGetPressedKey+0x9c>
    14f4:	80 e0       	ldi	r24, 0x00	; 0
    14f6:	a3 96       	adiw	r28, 0x23	; 35
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	f8 94       	cli
    14fc:	de bf       	out	0x3e, r29	; 62
    14fe:	0f be       	out	0x3f, r0	; 63
    1500:	cd bf       	out	0x3d, r28	; 61
    1502:	df 91       	pop	r29
    1504:	cf 91       	pop	r28
    1506:	1f 91       	pop	r17
    1508:	0f 91       	pop	r16
    150a:	ff 90       	pop	r15
    150c:	ef 90       	pop	r14
    150e:	df 90       	pop	r13
    1510:	cf 90       	pop	r12
    1512:	bf 90       	pop	r11
    1514:	af 90       	pop	r10
    1516:	9f 90       	pop	r9
    1518:	8f 90       	pop	r8
    151a:	7f 90       	pop	r7
    151c:	6f 90       	pop	r6
    151e:	5f 90       	pop	r5
    1520:	4f 90       	pop	r4
    1522:	3f 90       	pop	r3
    1524:	2f 90       	pop	r2
    1526:	08 95       	ret

00001528 <LCD_enuWriteNLatch>:
    1528:	1f 93       	push	r17
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	1f 92       	push	r1
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	18 2f       	mov	r17, r24
    1536:	40 e0       	ldi	r20, 0x00	; 0
    1538:	63 e0       	ldi	r22, 0x03	; 3
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	62 e0       	ldi	r22, 0x02	; 2
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    154a:	18 32       	cpi	r17, 0x28	; 40
    154c:	99 f5       	brne	.+102    	; 0x15b4 <LCD_enuWriteNLatch+0x8c>
    154e:	ae 01       	movw	r20, r28
    1550:	4f 5f       	subi	r20, 0xFF	; 255
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <DIO_enuGetPinValue>
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	81 11       	cpse	r24, r1
    1560:	29 c0       	rjmp	.+82     	; 0x15b4 <LCD_enuWriteNLatch+0x8c>
    1562:	40 e0       	ldi	r20, 0x00	; 0
    1564:	67 e0       	ldi	r22, 0x07	; 7
    1566:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	66 e0       	ldi	r22, 0x06	; 6
    156e:	80 e0       	ldi	r24, 0x00	; 0
    1570:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1574:	41 e0       	ldi	r20, 0x01	; 1
    1576:	65 e0       	ldi	r22, 0x05	; 5
    1578:	80 e0       	ldi	r24, 0x00	; 0
    157a:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    157e:	40 e0       	ldi	r20, 0x00	; 0
    1580:	64 e0       	ldi	r22, 0x04	; 4
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1588:	41 e0       	ldi	r20, 0x01	; 1
    158a:	63 e0       	ldi	r22, 0x03	; 3
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1592:	81 ee       	ldi	r24, 0xE1	; 225
    1594:	94 e0       	ldi	r25, 0x04	; 4
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <LCD_enuWriteNLatch+0x6e>
    159a:	00 c0       	rjmp	.+0      	; 0x159c <LCD_enuWriteNLatch+0x74>
    159c:	00 00       	nop
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	63 e0       	ldi	r22, 0x03	; 3
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    15a8:	83 ed       	ldi	r24, 0xD3	; 211
    15aa:	90 e3       	ldi	r25, 0x30	; 48
    15ac:	01 97       	sbiw	r24, 0x01	; 1
    15ae:	f1 f7       	brne	.-4      	; 0x15ac <LCD_enuWriteNLatch+0x84>
    15b0:	00 c0       	rjmp	.+0      	; 0x15b2 <LCD_enuWriteNLatch+0x8a>
    15b2:	00 00       	nop
    15b4:	41 2f       	mov	r20, r17
    15b6:	44 1f       	adc	r20, r20
    15b8:	44 27       	eor	r20, r20
    15ba:	44 1f       	adc	r20, r20
    15bc:	67 e0       	ldi	r22, 0x07	; 7
    15be:	80 e0       	ldi	r24, 0x00	; 0
    15c0:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    15c4:	16 fb       	bst	r17, 6
    15c6:	44 27       	eor	r20, r20
    15c8:	40 f9       	bld	r20, 0
    15ca:	66 e0       	ldi	r22, 0x06	; 6
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    15d2:	15 fb       	bst	r17, 5
    15d4:	44 27       	eor	r20, r20
    15d6:	40 f9       	bld	r20, 0
    15d8:	65 e0       	ldi	r22, 0x05	; 5
    15da:	80 e0       	ldi	r24, 0x00	; 0
    15dc:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    15e0:	14 fb       	bst	r17, 4
    15e2:	44 27       	eor	r20, r20
    15e4:	40 f9       	bld	r20, 0
    15e6:	64 e0       	ldi	r22, 0x04	; 4
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    15ee:	41 e0       	ldi	r20, 0x01	; 1
    15f0:	63 e0       	ldi	r22, 0x03	; 3
    15f2:	81 e0       	ldi	r24, 0x01	; 1
    15f4:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    15f8:	81 ee       	ldi	r24, 0xE1	; 225
    15fa:	94 e0       	ldi	r25, 0x04	; 4
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <LCD_enuWriteNLatch+0xd4>
    1600:	00 c0       	rjmp	.+0      	; 0x1602 <LCD_enuWriteNLatch+0xda>
    1602:	00 00       	nop
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	63 e0       	ldi	r22, 0x03	; 3
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    160e:	83 ed       	ldi	r24, 0xD3	; 211
    1610:	90 e3       	ldi	r25, 0x30	; 48
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <LCD_enuWriteNLatch+0xea>
    1616:	00 c0       	rjmp	.+0      	; 0x1618 <LCD_enuWriteNLatch+0xf0>
    1618:	00 00       	nop
    161a:	13 fb       	bst	r17, 3
    161c:	44 27       	eor	r20, r20
    161e:	40 f9       	bld	r20, 0
    1620:	67 e0       	ldi	r22, 0x07	; 7
    1622:	80 e0       	ldi	r24, 0x00	; 0
    1624:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1628:	12 fb       	bst	r17, 2
    162a:	44 27       	eor	r20, r20
    162c:	40 f9       	bld	r20, 0
    162e:	66 e0       	ldi	r22, 0x06	; 6
    1630:	80 e0       	ldi	r24, 0x00	; 0
    1632:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1636:	11 fb       	bst	r17, 1
    1638:	44 27       	eor	r20, r20
    163a:	40 f9       	bld	r20, 0
    163c:	65 e0       	ldi	r22, 0x05	; 5
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1644:	41 2f       	mov	r20, r17
    1646:	41 70       	andi	r20, 0x01	; 1
    1648:	64 e0       	ldi	r22, 0x04	; 4
    164a:	80 e0       	ldi	r24, 0x00	; 0
    164c:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1650:	41 e0       	ldi	r20, 0x01	; 1
    1652:	63 e0       	ldi	r22, 0x03	; 3
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    165a:	81 ee       	ldi	r24, 0xE1	; 225
    165c:	94 e0       	ldi	r25, 0x04	; 4
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <LCD_enuWriteNLatch+0x136>
    1662:	00 c0       	rjmp	.+0      	; 0x1664 <LCD_enuWriteNLatch+0x13c>
    1664:	00 00       	nop
    1666:	40 e0       	ldi	r20, 0x00	; 0
    1668:	63 e0       	ldi	r22, 0x03	; 3
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1670:	83 ed       	ldi	r24, 0xD3	; 211
    1672:	90 e3       	ldi	r25, 0x30	; 48
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	f1 f7       	brne	.-4      	; 0x1674 <LCD_enuWriteNLatch+0x14c>
    1678:	00 c0       	rjmp	.+0      	; 0x167a <LCD_enuWriteNLatch+0x152>
    167a:	00 00       	nop
    167c:	80 e0       	ldi	r24, 0x00	; 0
    167e:	0f 90       	pop	r0
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	1f 91       	pop	r17
    1686:	08 95       	ret

00001688 <LCD_enuInit>:
    1688:	41 e0       	ldi	r20, 0x01	; 1
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	62 e0       	ldi	r22, 0x02	; 2
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	63 e0       	ldi	r22, 0x03	; 3
    16a0:	81 e0       	ldi	r24, 0x01	; 1
    16a2:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	67 e0       	ldi	r22, 0x07	; 7
    16aa:	80 e0       	ldi	r24, 0x00	; 0
    16ac:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    16b0:	41 e0       	ldi	r20, 0x01	; 1
    16b2:	66 e0       	ldi	r22, 0x06	; 6
    16b4:	80 e0       	ldi	r24, 0x00	; 0
    16b6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    16ba:	41 e0       	ldi	r20, 0x01	; 1
    16bc:	65 e0       	ldi	r22, 0x05	; 5
    16be:	80 e0       	ldi	r24, 0x00	; 0
    16c0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    16c4:	41 e0       	ldi	r20, 0x01	; 1
    16c6:	64 e0       	ldi	r22, 0x04	; 4
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_enuSetPinDirection>
    16ce:	8d e2       	ldi	r24, 0x2D	; 45
    16d0:	92 e2       	ldi	r25, 0x22	; 34
    16d2:	01 97       	sbiw	r24, 0x01	; 1
    16d4:	f1 f7       	brne	.-4      	; 0x16d2 <LCD_enuInit+0x4a>
    16d6:	00 c0       	rjmp	.+0      	; 0x16d8 <LCD_enuInit+0x50>
    16d8:	00 00       	nop
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    16e4:	88 e2       	ldi	r24, 0x28	; 40
    16e6:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_enuWriteNLatch>
    16ea:	89 ef       	ldi	r24, 0xF9	; 249
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <LCD_enuInit+0x66>
    16f2:	00 c0       	rjmp	.+0      	; 0x16f4 <LCD_enuInit+0x6c>
    16f4:	00 00       	nop
    16f6:	40 e0       	ldi	r20, 0x00	; 0
    16f8:	61 e0       	ldi	r22, 0x01	; 1
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1700:	8f e0       	ldi	r24, 0x0F	; 15
    1702:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_enuWriteNLatch>
    1706:	89 ef       	ldi	r24, 0xF9	; 249
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	01 97       	sbiw	r24, 0x01	; 1
    170c:	f1 f7       	brne	.-4      	; 0x170a <LCD_enuInit+0x82>
    170e:	00 c0       	rjmp	.+0      	; 0x1710 <LCD_enuInit+0x88>
    1710:	00 00       	nop
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_enuWriteNLatch>
    1722:	83 ef       	ldi	r24, 0xF3	; 243
    1724:	91 e0       	ldi	r25, 0x01	; 1
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	f1 f7       	brne	.-4      	; 0x1726 <LCD_enuInit+0x9e>
    172a:	00 c0       	rjmp	.+0      	; 0x172c <LCD_enuInit+0xa4>
    172c:	00 00       	nop
    172e:	40 e0       	ldi	r20, 0x00	; 0
    1730:	61 e0       	ldi	r22, 0x01	; 1
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1738:	86 e0       	ldi	r24, 0x06	; 6
    173a:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_enuWriteNLatch>
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	08 95       	ret

00001742 <LCD_enuSendData>:
    1742:	cf 93       	push	r28
    1744:	c8 2f       	mov	r28, r24
    1746:	41 e0       	ldi	r20, 0x01	; 1
    1748:	61 e0       	ldi	r22, 0x01	; 1
    174a:	81 e0       	ldi	r24, 0x01	; 1
    174c:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1750:	8c 2f       	mov	r24, r28
    1752:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_enuWriteNLatch>
    1756:	80 e0       	ldi	r24, 0x00	; 0
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <LCD_enuDisplayUnsignedInteger>:
    175c:	6f 92       	push	r6
    175e:	7f 92       	push	r7
    1760:	8f 92       	push	r8
    1762:	9f 92       	push	r9
    1764:	af 92       	push	r10
    1766:	bf 92       	push	r11
    1768:	cf 92       	push	r12
    176a:	df 92       	push	r13
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	fc 01       	movw	r30, r24
    177a:	89 2b       	or	r24, r25
    177c:	51 f4       	brne	.+20     	; 0x1792 <LCD_enuDisplayUnsignedInteger+0x36>
    177e:	41 e0       	ldi	r20, 0x01	; 1
    1780:	61 e0       	ldi	r22, 0x01	; 1
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1788:	80 e3       	ldi	r24, 0x30	; 48
    178a:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_enuWriteNLatch>
    178e:	d0 e0       	ldi	r29, 0x00	; 0
    1790:	42 c0       	rjmp	.+132    	; 0x1816 <LCD_enuDisplayUnsignedInteger+0xba>
    1792:	c0 e0       	ldi	r28, 0x00	; 0
    1794:	c1 2c       	mov	r12, r1
    1796:	d1 2c       	mov	r13, r1
    1798:	76 01       	movw	r14, r12
    179a:	0a e0       	ldi	r16, 0x0A	; 10
    179c:	10 e0       	ldi	r17, 0x00	; 0
    179e:	aa e0       	ldi	r26, 0x0A	; 10
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	a7 01       	movw	r20, r14
    17a4:	96 01       	movw	r18, r12
    17a6:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <__muluhisi3>
    17aa:	6b 01       	movw	r12, r22
    17ac:	7c 01       	movw	r14, r24
    17ae:	cf 01       	movw	r24, r30
    17b0:	b8 01       	movw	r22, r16
    17b2:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <__udivmodhi4>
    17b6:	c8 0e       	add	r12, r24
    17b8:	d9 1e       	adc	r13, r25
    17ba:	e1 1c       	adc	r14, r1
    17bc:	f1 1c       	adc	r15, r1
    17be:	cf 5f       	subi	r28, 0xFF	; 255
    17c0:	fb 01       	movw	r30, r22
    17c2:	30 97       	sbiw	r30, 0x00	; 0
    17c4:	61 f7       	brne	.-40     	; 0x179e <LCD_enuDisplayUnsignedInteger+0x42>
    17c6:	d0 e0       	ldi	r29, 0x00	; 0
    17c8:	8a e0       	ldi	r24, 0x0A	; 10
    17ca:	88 2e       	mov	r8, r24
    17cc:	91 2c       	mov	r9, r1
    17ce:	a1 2c       	mov	r10, r1
    17d0:	b1 2c       	mov	r11, r1
    17d2:	c1 14       	cp	r12, r1
    17d4:	d1 04       	cpc	r13, r1
    17d6:	e1 04       	cpc	r14, r1
    17d8:	f1 04       	cpc	r15, r1
    17da:	b1 f0       	breq	.+44     	; 0x1808 <LCD_enuDisplayUnsignedInteger+0xac>
    17dc:	41 e0       	ldi	r20, 0x01	; 1
    17de:	61 e0       	ldi	r22, 0x01	; 1
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    17e6:	c7 01       	movw	r24, r14
    17e8:	b6 01       	movw	r22, r12
    17ea:	a5 01       	movw	r20, r10
    17ec:	94 01       	movw	r18, r8
    17ee:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <__udivmodsi4>
    17f2:	39 01       	movw	r6, r18
    17f4:	8a 01       	movw	r16, r20
    17f6:	80 e3       	ldi	r24, 0x30	; 48
    17f8:	86 0f       	add	r24, r22
    17fa:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_enuWriteNLatch>
    17fe:	d8 2f       	mov	r29, r24
    1800:	63 01       	movw	r12, r6
    1802:	78 01       	movw	r14, r16
    1804:	c1 50       	subi	r28, 0x01	; 1
    1806:	e5 cf       	rjmp	.-54     	; 0x17d2 <LCD_enuDisplayUnsignedInteger+0x76>
    1808:	cc 23       	and	r28, r28
    180a:	29 f0       	breq	.+10     	; 0x1816 <LCD_enuDisplayUnsignedInteger+0xba>
    180c:	80 e3       	ldi	r24, 0x30	; 48
    180e:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_enuWriteNLatch>
    1812:	c1 50       	subi	r28, 0x01	; 1
    1814:	f9 cf       	rjmp	.-14     	; 0x1808 <LCD_enuDisplayUnsignedInteger+0xac>
    1816:	8d 2f       	mov	r24, r29
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	df 90       	pop	r13
    1826:	cf 90       	pop	r12
    1828:	bf 90       	pop	r11
    182a:	af 90       	pop	r10
    182c:	9f 90       	pop	r9
    182e:	8f 90       	pop	r8
    1830:	7f 90       	pop	r7
    1832:	6f 90       	pop	r6
    1834:	08 95       	ret

00001836 <LCD_enuDisplayString>:
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	cf 93       	push	r28
    183c:	df 93       	push	r29
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	89 f0       	breq	.+34     	; 0x1864 <LCD_enuDisplayString+0x2e>
    1842:	ec 01       	movw	r28, r24
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	8e 01       	movw	r16, r28
    1848:	98 81       	ld	r25, Y
    184a:	99 23       	and	r25, r25
    184c:	61 f0       	breq	.+24     	; 0x1866 <LCD_enuDisplayString+0x30>
    184e:	41 e0       	ldi	r20, 0x01	; 1
    1850:	61 e0       	ldi	r22, 0x01	; 1
    1852:	81 e0       	ldi	r24, 0x01	; 1
    1854:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    1858:	21 96       	adiw	r28, 0x01	; 1
    185a:	f8 01       	movw	r30, r16
    185c:	80 81       	ld	r24, Z
    185e:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_enuWriteNLatch>
    1862:	f1 cf       	rjmp	.-30     	; 0x1846 <LCD_enuDisplayString+0x10>
    1864:	82 e0       	ldi	r24, 0x02	; 2
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	08 95       	ret

00001870 <LCD_enuSetCursorPosition>:
    1870:	1f 93       	push	r17
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	82 30       	cpi	r24, 0x02	; 2
    1878:	98 f4       	brcc	.+38     	; 0x18a0 <LCD_enuSetCursorPosition+0x30>
    187a:	60 31       	cpi	r22, 0x10	; 16
    187c:	88 f4       	brcc	.+34     	; 0x18a0 <LCD_enuSetCursorPosition+0x30>
    187e:	c6 2f       	mov	r28, r22
    1880:	d8 2f       	mov	r29, r24
    1882:	40 e0       	ldi	r20, 0x00	; 0
    1884:	61 e0       	ldi	r22, 0x01	; 1
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    188c:	18 2f       	mov	r17, r24
    188e:	8c 2f       	mov	r24, r28
    1890:	90 e4       	ldi	r25, 0x40	; 64
    1892:	d9 9f       	mul	r29, r25
    1894:	80 0d       	add	r24, r0
    1896:	11 24       	eor	r1, r1
    1898:	80 58       	subi	r24, 0x80	; 128
    189a:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_enuWriteNLatch>
    189e:	01 c0       	rjmp	.+2      	; 0x18a2 <LCD_enuSetCursorPosition+0x32>
    18a0:	10 e0       	ldi	r17, 0x00	; 0
    18a2:	81 2f       	mov	r24, r17
    18a4:	df 91       	pop	r29
    18a6:	cf 91       	pop	r28
    18a8:	1f 91       	pop	r17
    18aa:	08 95       	ret

000018ac <LCD_enuClearDisplay>:
    18ac:	cf 93       	push	r28
    18ae:	40 e0       	ldi	r20, 0x00	; 0
    18b0:	61 e0       	ldi	r22, 0x01	; 1
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	0e 94 bf 0c 	call	0x197e	; 0x197e <DIO_enuSetPinValue>
    18b8:	c8 2f       	mov	r28, r24
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	0e 94 94 0a 	call	0x1528	; 0x1528 <LCD_enuWriteNLatch>
    18c0:	8c 2f       	mov	r24, r28
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <DIO_enuInit>:
    18c6:	81 eb       	ldi	r24, 0xB1	; 177
    18c8:	8a bb       	out	0x1a, r24	; 26
    18ca:	86 e1       	ldi	r24, 0x16	; 22
    18cc:	8b bb       	out	0x1b, r24	; 27
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	08 95       	ret

000018d2 <DIO_enuSetPinDirection>:
    18d2:	84 30       	cpi	r24, 0x04	; 4
    18d4:	08 f0       	brcs	.+2      	; 0x18d8 <DIO_enuSetPinDirection+0x6>
    18d6:	51 c0       	rjmp	.+162    	; 0x197a <DIO_enuSetPinDirection+0xa8>
    18d8:	68 30       	cpi	r22, 0x08	; 8
    18da:	08 f0       	brcs	.+2      	; 0x18de <DIO_enuSetPinDirection+0xc>
    18dc:	4e c0       	rjmp	.+156    	; 0x197a <DIO_enuSetPinDirection+0xa8>
    18de:	42 30       	cpi	r20, 0x02	; 2
    18e0:	08 f0       	brcs	.+2      	; 0x18e4 <DIO_enuSetPinDirection+0x12>
    18e2:	4b c0       	rjmp	.+150    	; 0x197a <DIO_enuSetPinDirection+0xa8>
    18e4:	82 30       	cpi	r24, 0x02	; 2
    18e6:	39 f1       	breq	.+78     	; 0x1936 <DIO_enuSetPinDirection+0x64>
    18e8:	83 30       	cpi	r24, 0x03	; 3
    18ea:	b1 f1       	breq	.+108    	; 0x1958 <DIO_enuSetPinDirection+0x86>
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	89 f0       	breq	.+34     	; 0x1912 <DIO_enuSetPinDirection+0x40>
    18f0:	81 e0       	ldi	r24, 0x01	; 1
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	06 2e       	mov	r0, r22
    18f6:	01 c0       	rjmp	.+2      	; 0x18fa <DIO_enuSetPinDirection+0x28>
    18f8:	88 0f       	add	r24, r24
    18fa:	0a 94       	dec	r0
    18fc:	ea f7       	brpl	.-6      	; 0x18f8 <DIO_enuSetPinDirection+0x26>
    18fe:	80 95       	com	r24
    1900:	9a b3       	in	r25, 0x1a	; 26
    1902:	89 23       	and	r24, r25
    1904:	01 c0       	rjmp	.+2      	; 0x1908 <DIO_enuSetPinDirection+0x36>
    1906:	44 0f       	add	r20, r20
    1908:	6a 95       	dec	r22
    190a:	ea f7       	brpl	.-6      	; 0x1906 <DIO_enuSetPinDirection+0x34>
    190c:	48 2b       	or	r20, r24
    190e:	4a bb       	out	0x1a, r20	; 26
    1910:	10 c0       	rjmp	.+32     	; 0x1932 <DIO_enuSetPinDirection+0x60>
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	06 2e       	mov	r0, r22
    1918:	01 c0       	rjmp	.+2      	; 0x191c <DIO_enuSetPinDirection+0x4a>
    191a:	88 0f       	add	r24, r24
    191c:	0a 94       	dec	r0
    191e:	ea f7       	brpl	.-6      	; 0x191a <DIO_enuSetPinDirection+0x48>
    1920:	80 95       	com	r24
    1922:	97 b3       	in	r25, 0x17	; 23
    1924:	89 23       	and	r24, r25
    1926:	01 c0       	rjmp	.+2      	; 0x192a <DIO_enuSetPinDirection+0x58>
    1928:	44 0f       	add	r20, r20
    192a:	6a 95       	dec	r22
    192c:	ea f7       	brpl	.-6      	; 0x1928 <DIO_enuSetPinDirection+0x56>
    192e:	48 2b       	or	r20, r24
    1930:	47 bb       	out	0x17, r20	; 23
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	08 95       	ret
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	06 2e       	mov	r0, r22
    193c:	01 c0       	rjmp	.+2      	; 0x1940 <DIO_enuSetPinDirection+0x6e>
    193e:	88 0f       	add	r24, r24
    1940:	0a 94       	dec	r0
    1942:	ea f7       	brpl	.-6      	; 0x193e <DIO_enuSetPinDirection+0x6c>
    1944:	80 95       	com	r24
    1946:	94 b3       	in	r25, 0x14	; 20
    1948:	89 23       	and	r24, r25
    194a:	01 c0       	rjmp	.+2      	; 0x194e <DIO_enuSetPinDirection+0x7c>
    194c:	44 0f       	add	r20, r20
    194e:	6a 95       	dec	r22
    1950:	ea f7       	brpl	.-6      	; 0x194c <DIO_enuSetPinDirection+0x7a>
    1952:	48 2b       	or	r20, r24
    1954:	44 bb       	out	0x14, r20	; 20
    1956:	ed cf       	rjmp	.-38     	; 0x1932 <DIO_enuSetPinDirection+0x60>
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	06 2e       	mov	r0, r22
    195e:	01 c0       	rjmp	.+2      	; 0x1962 <DIO_enuSetPinDirection+0x90>
    1960:	88 0f       	add	r24, r24
    1962:	0a 94       	dec	r0
    1964:	ea f7       	brpl	.-6      	; 0x1960 <DIO_enuSetPinDirection+0x8e>
    1966:	80 95       	com	r24
    1968:	91 b3       	in	r25, 0x11	; 17
    196a:	89 23       	and	r24, r25
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <DIO_enuSetPinDirection+0x9e>
    196e:	44 0f       	add	r20, r20
    1970:	6a 95       	dec	r22
    1972:	ea f7       	brpl	.-6      	; 0x196e <DIO_enuSetPinDirection+0x9c>
    1974:	48 2b       	or	r20, r24
    1976:	41 bb       	out	0x11, r20	; 17
    1978:	dc cf       	rjmp	.-72     	; 0x1932 <DIO_enuSetPinDirection+0x60>
    197a:	83 e0       	ldi	r24, 0x03	; 3
    197c:	08 95       	ret

0000197e <DIO_enuSetPinValue>:
    197e:	84 30       	cpi	r24, 0x04	; 4
    1980:	08 f0       	brcs	.+2      	; 0x1984 <DIO_enuSetPinValue+0x6>
    1982:	51 c0       	rjmp	.+162    	; 0x1a26 <DIO_enuSetPinValue+0xa8>
    1984:	68 30       	cpi	r22, 0x08	; 8
    1986:	08 f0       	brcs	.+2      	; 0x198a <DIO_enuSetPinValue+0xc>
    1988:	4e c0       	rjmp	.+156    	; 0x1a26 <DIO_enuSetPinValue+0xa8>
    198a:	42 30       	cpi	r20, 0x02	; 2
    198c:	08 f0       	brcs	.+2      	; 0x1990 <DIO_enuSetPinValue+0x12>
    198e:	4b c0       	rjmp	.+150    	; 0x1a26 <DIO_enuSetPinValue+0xa8>
    1990:	82 30       	cpi	r24, 0x02	; 2
    1992:	39 f1       	breq	.+78     	; 0x19e2 <DIO_enuSetPinValue+0x64>
    1994:	83 30       	cpi	r24, 0x03	; 3
    1996:	b1 f1       	breq	.+108    	; 0x1a04 <DIO_enuSetPinValue+0x86>
    1998:	81 30       	cpi	r24, 0x01	; 1
    199a:	89 f0       	breq	.+34     	; 0x19be <DIO_enuSetPinValue+0x40>
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	06 2e       	mov	r0, r22
    19a2:	01 c0       	rjmp	.+2      	; 0x19a6 <DIO_enuSetPinValue+0x28>
    19a4:	88 0f       	add	r24, r24
    19a6:	0a 94       	dec	r0
    19a8:	ea f7       	brpl	.-6      	; 0x19a4 <DIO_enuSetPinValue+0x26>
    19aa:	80 95       	com	r24
    19ac:	9b b3       	in	r25, 0x1b	; 27
    19ae:	89 23       	and	r24, r25
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <DIO_enuSetPinValue+0x36>
    19b2:	44 0f       	add	r20, r20
    19b4:	6a 95       	dec	r22
    19b6:	ea f7       	brpl	.-6      	; 0x19b2 <DIO_enuSetPinValue+0x34>
    19b8:	48 2b       	or	r20, r24
    19ba:	4b bb       	out	0x1b, r20	; 27
    19bc:	10 c0       	rjmp	.+32     	; 0x19de <DIO_enuSetPinValue+0x60>
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	06 2e       	mov	r0, r22
    19c4:	01 c0       	rjmp	.+2      	; 0x19c8 <DIO_enuSetPinValue+0x4a>
    19c6:	88 0f       	add	r24, r24
    19c8:	0a 94       	dec	r0
    19ca:	ea f7       	brpl	.-6      	; 0x19c6 <DIO_enuSetPinValue+0x48>
    19cc:	80 95       	com	r24
    19ce:	98 b3       	in	r25, 0x18	; 24
    19d0:	89 23       	and	r24, r25
    19d2:	01 c0       	rjmp	.+2      	; 0x19d6 <DIO_enuSetPinValue+0x58>
    19d4:	44 0f       	add	r20, r20
    19d6:	6a 95       	dec	r22
    19d8:	ea f7       	brpl	.-6      	; 0x19d4 <DIO_enuSetPinValue+0x56>
    19da:	48 2b       	or	r20, r24
    19dc:	48 bb       	out	0x18, r20	; 24
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	08 95       	ret
    19e2:	81 e0       	ldi	r24, 0x01	; 1
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	06 2e       	mov	r0, r22
    19e8:	01 c0       	rjmp	.+2      	; 0x19ec <DIO_enuSetPinValue+0x6e>
    19ea:	88 0f       	add	r24, r24
    19ec:	0a 94       	dec	r0
    19ee:	ea f7       	brpl	.-6      	; 0x19ea <DIO_enuSetPinValue+0x6c>
    19f0:	80 95       	com	r24
    19f2:	95 b3       	in	r25, 0x15	; 21
    19f4:	89 23       	and	r24, r25
    19f6:	01 c0       	rjmp	.+2      	; 0x19fa <DIO_enuSetPinValue+0x7c>
    19f8:	44 0f       	add	r20, r20
    19fa:	6a 95       	dec	r22
    19fc:	ea f7       	brpl	.-6      	; 0x19f8 <DIO_enuSetPinValue+0x7a>
    19fe:	48 2b       	or	r20, r24
    1a00:	45 bb       	out	0x15, r20	; 21
    1a02:	ed cf       	rjmp	.-38     	; 0x19de <DIO_enuSetPinValue+0x60>
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	06 2e       	mov	r0, r22
    1a0a:	01 c0       	rjmp	.+2      	; 0x1a0e <DIO_enuSetPinValue+0x90>
    1a0c:	88 0f       	add	r24, r24
    1a0e:	0a 94       	dec	r0
    1a10:	ea f7       	brpl	.-6      	; 0x1a0c <DIO_enuSetPinValue+0x8e>
    1a12:	80 95       	com	r24
    1a14:	92 b3       	in	r25, 0x12	; 18
    1a16:	89 23       	and	r24, r25
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <DIO_enuSetPinValue+0x9e>
    1a1a:	44 0f       	add	r20, r20
    1a1c:	6a 95       	dec	r22
    1a1e:	ea f7       	brpl	.-6      	; 0x1a1a <DIO_enuSetPinValue+0x9c>
    1a20:	48 2b       	or	r20, r24
    1a22:	42 bb       	out	0x12, r20	; 18
    1a24:	dc cf       	rjmp	.-72     	; 0x19de <DIO_enuSetPinValue+0x60>
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	08 95       	ret

00001a2a <DIO_enuGetPinValue>:
    1a2a:	fa 01       	movw	r30, r20
    1a2c:	30 97       	sbiw	r30, 0x00	; 0
    1a2e:	d9 f0       	breq	.+54     	; 0x1a66 <DIO_enuGetPinValue+0x3c>
    1a30:	84 30       	cpi	r24, 0x04	; 4
    1a32:	d8 f4       	brcc	.+54     	; 0x1a6a <DIO_enuGetPinValue+0x40>
    1a34:	68 30       	cpi	r22, 0x08	; 8
    1a36:	c8 f4       	brcc	.+50     	; 0x1a6a <DIO_enuGetPinValue+0x40>
    1a38:	82 30       	cpi	r24, 0x02	; 2
    1a3a:	41 f0       	breq	.+16     	; 0x1a4c <DIO_enuGetPinValue+0x22>
    1a3c:	83 30       	cpi	r24, 0x03	; 3
    1a3e:	89 f0       	breq	.+34     	; 0x1a62 <DIO_enuGetPinValue+0x38>
    1a40:	81 30       	cpi	r24, 0x01	; 1
    1a42:	11 f0       	breq	.+4      	; 0x1a48 <DIO_enuGetPinValue+0x1e>
    1a44:	89 b3       	in	r24, 0x19	; 25
    1a46:	03 c0       	rjmp	.+6      	; 0x1a4e <DIO_enuGetPinValue+0x24>
    1a48:	86 b3       	in	r24, 0x16	; 22
    1a4a:	01 c0       	rjmp	.+2      	; 0x1a4e <DIO_enuGetPinValue+0x24>
    1a4c:	83 b3       	in	r24, 0x13	; 19
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <DIO_enuGetPinValue+0x2c>
    1a52:	95 95       	asr	r25
    1a54:	87 95       	ror	r24
    1a56:	6a 95       	dec	r22
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <DIO_enuGetPinValue+0x28>
    1a5a:	81 70       	andi	r24, 0x01	; 1
    1a5c:	80 83       	st	Z, r24
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	08 95       	ret
    1a62:	80 b3       	in	r24, 0x10	; 16
    1a64:	f4 cf       	rjmp	.-24     	; 0x1a4e <DIO_enuGetPinValue+0x24>
    1a66:	82 e0       	ldi	r24, 0x02	; 2
    1a68:	08 95       	ret
    1a6a:	83 e0       	ldi	r24, 0x03	; 3
    1a6c:	08 95       	ret

00001a6e <EEPROM_ui8ReadByteFromAddress>:


void EEPROM_ui8ReadByteFromAddress( const u16 u16Address ,  u8 * data)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1);
    1a6e:	e1 99       	sbic	0x1c, 1	; 28
    1a70:	fe cf       	rjmp	.-4      	; 0x1a6e <EEPROM_ui8ReadByteFromAddress>
	/* Set up address register */
	EEAR = u16Address;
    1a72:	9f bb       	out	0x1f, r25	; 31
    1a74:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
    1a76:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	(*data) = EEDR;
    1a78:	8d b3       	in	r24, 0x1d	; 29
    1a7a:	fb 01       	movw	r30, r22
    1a7c:	80 83       	st	Z, r24
    1a7e:	08 95       	ret

00001a80 <EEPROM_vReadBlockFromAddress>:
}

void EEPROM_vReadBlockFromAddress(const u16 uAddress, u8* dist,const u16 size)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
    1a80:	e1 99       	sbic	0x1c, 1	; 28
    1a82:	fe cf       	rjmp	.-4      	; 0x1a80 <EEPROM_vReadBlockFromAddress>
    1a84:	46 0f       	add	r20, r22
    1a86:	57 1f       	adc	r21, r23
    1a88:	fb 01       	movw	r30, r22
    1a8a:	86 1b       	sub	r24, r22
    1a8c:	97 0b       	sbc	r25, r23
	;

	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
    1a8e:	e4 17       	cp	r30, r20
    1a90:	f5 07       	cpc	r31, r21
    1a92:	49 f0       	breq	.+18     	; 0x1aa6 <EEPROM_vReadBlockFromAddress+0x26>
    1a94:	9c 01       	movw	r18, r24
    1a96:	2e 0f       	add	r18, r30
    1a98:	3f 1f       	adc	r19, r31
	{
		/* Set up address register */
		EEAR = uAddress + counter;
    1a9a:	3f bb       	out	0x1f, r19	; 31
    1a9c:	2e bb       	out	0x1e, r18	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
    1a9e:	e0 9a       	sbi	0x1c, 0	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
    1aa0:	2d b3       	in	r18, 0x1d	; 29
    1aa2:	21 93       	st	Z+, r18
    1aa4:	f4 cf       	rjmp	.-24     	; 0x1a8e <EEPROM_vReadBlockFromAddress+0xe>

		counter++;//increase the bytes counter
	}
}
    1aa6:	08 95       	ret

00001aa8 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16 uiAddress, const u8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    1aa8:	e1 99       	sbic	0x1c, 1	; 28
    1aaa:	fe cf       	rjmp	.-4      	; 0x1aa8 <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
    1aac:	9f bb       	out	0x1f, r25	; 31
    1aae:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
    1ab0:	e0 9a       	sbi	0x1c, 0	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
    1ab2:	8d b3       	in	r24, 0x1d	; 29
    1ab4:	86 17       	cp	r24, r22
    1ab6:	19 f0       	breq	.+6      	; 0x1abe <EEPROM_vWriteByteToAddress+0x16>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
    1ab8:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
    1aba:	e2 9a       	sbi	0x1c, 2	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
    1abc:	e1 9a       	sbi	0x1c, 1	; 28
    1abe:	08 95       	ret

00001ac0 <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
    1ac0:	46 0f       	add	r20, r22
    1ac2:	57 1f       	adc	r21, r23
	u16 counter = 0;//Bytes write counter
	while (counter < size)
    1ac4:	fb 01       	movw	r30, r22
    1ac6:	9c 01       	movw	r18, r24
    1ac8:	26 1b       	sub	r18, r22
    1aca:	37 0b       	sbc	r19, r23
    1acc:	e4 17       	cp	r30, r20
    1ace:	f5 07       	cpc	r31, r21
    1ad0:	81 f0       	breq	.+32     	; 0x1af2 <EEPROM_vWriteBlockToAddress+0x32>
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
    1ad2:	e1 99       	sbic	0x1c, 1	; 28
    1ad4:	fe cf       	rjmp	.-4      	; 0x1ad2 <EEPROM_vWriteBlockToAddress+0x12>
    1ad6:	c9 01       	movw	r24, r18
    1ad8:	8e 0f       	add	r24, r30
    1ada:	9f 1f       	adc	r25, r31
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
    1adc:	9f bb       	out	0x1f, r25	; 31
    1ade:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
    1ae0:	e0 9a       	sbi	0x1c, 0	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
    1ae2:	8d b3       	in	r24, 0x1d	; 29
    1ae4:	91 91       	ld	r25, Z+
    1ae6:	89 17       	cp	r24, r25
    1ae8:	89 f3       	breq	.-30     	; 0x1acc <EEPROM_vWriteBlockToAddress+0xc>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
    1aea:	9d bb       	out	0x1d, r25	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
    1aec:	e2 9a       	sbi	0x1c, 2	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
    1aee:	e1 9a       	sbi	0x1c, 1	; 28
    1af0:	ed cf       	rjmp	.-38     	; 0x1acc <EEPROM_vWriteBlockToAddress+0xc>
		{

		}
		counter++;//increase bytes counter
	}
}
    1af2:	08 95       	ret

00001af4 <EXTI_enuInit>:
    1af4:	8b b7       	in	r24, 0x3b	; 59
    1af6:	80 64       	ori	r24, 0x40	; 64
    1af8:	8b bf       	out	0x3b, r24	; 59
    1afa:	85 b7       	in	r24, 0x35	; 53
    1afc:	83 60       	ori	r24, 0x03	; 3
    1afe:	85 bf       	out	0x35, r24	; 53
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	08 95       	ret

00001b04 <EXTI_enuCallBack>:
    1b04:	00 97       	sbiw	r24, 0x00	; 0
    1b06:	31 f0       	breq	.+12     	; 0x1b14 <EXTI_enuCallBack+0x10>
    1b08:	90 93 5f 05 	sts	0x055F, r25	; 0x80055f <EXTI_pfunISR_fun+0x1>
    1b0c:	80 93 5e 05 	sts	0x055E, r24	; 0x80055e <EXTI_pfunISR_fun>
    1b10:	81 e0       	ldi	r24, 0x01	; 1
    1b12:	08 95       	ret
    1b14:	82 e0       	ldi	r24, 0x02	; 2
    1b16:	08 95       	ret

00001b18 <__vector_1>:
    1b18:	1f 92       	push	r1
    1b1a:	0f 92       	push	r0
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	0f 92       	push	r0
    1b20:	11 24       	eor	r1, r1
    1b22:	2f 93       	push	r18
    1b24:	3f 93       	push	r19
    1b26:	4f 93       	push	r20
    1b28:	5f 93       	push	r21
    1b2a:	6f 93       	push	r22
    1b2c:	7f 93       	push	r23
    1b2e:	8f 93       	push	r24
    1b30:	9f 93       	push	r25
    1b32:	af 93       	push	r26
    1b34:	bf 93       	push	r27
    1b36:	ef 93       	push	r30
    1b38:	ff 93       	push	r31
    1b3a:	e0 91 5e 05 	lds	r30, 0x055E	; 0x80055e <EXTI_pfunISR_fun>
    1b3e:	f0 91 5f 05 	lds	r31, 0x055F	; 0x80055f <EXTI_pfunISR_fun+0x1>
    1b42:	30 97       	sbiw	r30, 0x00	; 0
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <__vector_1+0x30>
    1b46:	09 95       	icall
    1b48:	ff 91       	pop	r31
    1b4a:	ef 91       	pop	r30
    1b4c:	bf 91       	pop	r27
    1b4e:	af 91       	pop	r26
    1b50:	9f 91       	pop	r25
    1b52:	8f 91       	pop	r24
    1b54:	7f 91       	pop	r23
    1b56:	6f 91       	pop	r22
    1b58:	5f 91       	pop	r21
    1b5a:	4f 91       	pop	r20
    1b5c:	3f 91       	pop	r19
    1b5e:	2f 91       	pop	r18
    1b60:	0f 90       	pop	r0
    1b62:	0f be       	out	0x3f, r0	; 63
    1b64:	0f 90       	pop	r0
    1b66:	1f 90       	pop	r1
    1b68:	18 95       	reti

00001b6a <SPI_vidInit>:
#include "SPI_priv.h"

void SPI_vidInit(void)
{
#if SPI_MODE == MASTER
	SPCR |=(1<<4);
    1b6a:	6c 9a       	sbi	0x0d, 4	; 13
DDRB |=(1<<4);
    1b6c:	bc 9a       	sbi	0x17, 4	; 23
DDRB |=(1<<5);
    1b6e:	bd 9a       	sbi	0x17, 5	; 23
DDRB &=~(1<<6);
    1b70:	be 98       	cbi	0x17, 6	; 23
DDRB |=(1<<7);
    1b72:	bf 9a       	sbi	0x17, 7	; 23
#elif SPI_MODE == SLAVE
	SPCR &=~(1<<4);
#endif

#if SPI_PRES == PRES_64
	SPCR |=(1<<1);
    1b74:	69 9a       	sbi	0x0d, 1	; 13
	SPCR &=~(1<<0);
    1b76:	68 98       	cbi	0x0d, 0	; 13
#endif

	SPCR |=(1<<6);
    1b78:	6e 9a       	sbi	0x0d, 6	; 13
    1b7a:	08 95       	ret

00001b7c <SPI_ui8TransmitRecive>:
}

u8 SPI_ui8TransmitRecive(u8 Copy_u8Data)
{
	PORTB &=~(1<<4);
    1b7c:	c4 98       	cbi	0x18, 4	; 24
	SPDR = Copy_u8Data;
    1b7e:	8f b9       	out	0x0f, r24	; 15
	while(! ((SPSR>>7)&1));
    1b80:	77 9b       	sbis	0x0e, 7	; 14
    1b82:	fe cf       	rjmp	.-4      	; 0x1b80 <SPI_ui8TransmitRecive+0x4>
	PORTB |=(1<<4);
    1b84:	c4 9a       	sbi	0x18, 4	; 24
	return SPDR;
    1b86:	8f b1       	in	r24, 0x0f	; 15
}
    1b88:	08 95       	ret

00001b8a <UART_enuUART_Init>:
    1b8a:	1b b8       	out	0x0b, r1	; 11
    1b8c:	88 e1       	ldi	r24, 0x18	; 24
    1b8e:	8a b9       	out	0x0a, r24	; 10
    1b90:	86 e8       	ldi	r24, 0x86	; 134
    1b92:	80 bd       	out	0x20, r24	; 32
    1b94:	87 e6       	ldi	r24, 0x67	; 103
    1b96:	89 b9       	out	0x09, r24	; 9
    1b98:	10 bc       	out	0x20, r1	; 32
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	08 95       	ret

00001b9e <UART_enuSendChar>:
    1b9e:	5d 9b       	sbis	0x0b, 5	; 11
    1ba0:	fe cf       	rjmp	.-4      	; 0x1b9e <UART_enuSendChar>
    1ba2:	8c b9       	out	0x0c, r24	; 12
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	08 95       	ret

00001ba8 <UART_enuRecieveChar>:
    1ba8:	5f 9b       	sbis	0x0b, 7	; 11
    1baa:	fe cf       	rjmp	.-4      	; 0x1ba8 <UART_enuRecieveChar>
    1bac:	2c b1       	in	r18, 0x0c	; 12
    1bae:	fc 01       	movw	r30, r24
    1bb0:	20 83       	st	Z, r18
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	08 95       	ret

00001bb6 <UART_enuSendString>:
    1bb6:	ac 01       	movw	r20, r24
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	fa 01       	movw	r30, r20
    1bbc:	e9 0f       	add	r30, r25
    1bbe:	f1 1d       	adc	r31, r1
    1bc0:	20 81       	ld	r18, Z
    1bc2:	22 23       	and	r18, r18
    1bc4:	29 f0       	breq	.+10     	; 0x1bd0 <UART_enuSendString+0x1a>
    1bc6:	5d 9b       	sbis	0x0b, 5	; 11
    1bc8:	fe cf       	rjmp	.-4      	; 0x1bc6 <UART_enuSendString+0x10>
    1bca:	2c b9       	out	0x0c, r18	; 12
    1bcc:	9f 5f       	subi	r25, 0xFF	; 255
    1bce:	f5 cf       	rjmp	.-22     	; 0x1bba <UART_enuSendString+0x4>
    1bd0:	80 e0       	ldi	r24, 0x00	; 0
    1bd2:	08 95       	ret

00001bd4 <UART_enuRecieveString>:
    1bd4:	ac 01       	movw	r20, r24
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	5f 9b       	sbis	0x0b, 7	; 11
    1bda:	fe cf       	rjmp	.-4      	; 0x1bd8 <UART_enuRecieveString+0x4>
    1bdc:	fa 01       	movw	r30, r20
    1bde:	e9 0f       	add	r30, r25
    1be0:	f1 1d       	adc	r31, r1
    1be2:	2c b1       	in	r18, 0x0c	; 12
    1be4:	20 83       	st	Z, r18
    1be6:	5d 9b       	sbis	0x0b, 5	; 11
    1be8:	fe cf       	rjmp	.-4      	; 0x1be6 <UART_enuRecieveString+0x12>
    1bea:	2c b9       	out	0x0c, r18	; 12
    1bec:	20 81       	ld	r18, Z
    1bee:	2d 30       	cpi	r18, 0x0D	; 13
    1bf0:	21 f0       	breq	.+8      	; 0x1bfa <UART_enuRecieveString+0x26>
    1bf2:	2a 30       	cpi	r18, 0x0A	; 10
    1bf4:	11 f0       	breq	.+4      	; 0x1bfa <UART_enuRecieveString+0x26>
    1bf6:	9f 5f       	subi	r25, 0xFF	; 255
    1bf8:	ef cf       	rjmp	.-34     	; 0x1bd8 <UART_enuRecieveString+0x4>
    1bfa:	10 82       	st	Z, r1
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	08 95       	ret

00001c00 <UART_enuCheck_Connection>:
    1c00:	8b b1       	in	r24, 0x0b	; 11
    1c02:	88 1f       	adc	r24, r24
    1c04:	88 27       	eor	r24, r24
    1c06:	88 1f       	adc	r24, r24
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <UART_enuCheck_Connection+0xe>
    1c0a:	8c b1       	in	r24, 0x0c	; 12
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	08 95       	ret

00001c10 <__udivmodhi4>:
    1c10:	aa 1b       	sub	r26, r26
    1c12:	bb 1b       	sub	r27, r27
    1c14:	51 e1       	ldi	r21, 0x11	; 17
    1c16:	07 c0       	rjmp	.+14     	; 0x1c26 <__udivmodhi4_ep>

00001c18 <__udivmodhi4_loop>:
    1c18:	aa 1f       	adc	r26, r26
    1c1a:	bb 1f       	adc	r27, r27
    1c1c:	a6 17       	cp	r26, r22
    1c1e:	b7 07       	cpc	r27, r23
    1c20:	10 f0       	brcs	.+4      	; 0x1c26 <__udivmodhi4_ep>
    1c22:	a6 1b       	sub	r26, r22
    1c24:	b7 0b       	sbc	r27, r23

00001c26 <__udivmodhi4_ep>:
    1c26:	88 1f       	adc	r24, r24
    1c28:	99 1f       	adc	r25, r25
    1c2a:	5a 95       	dec	r21
    1c2c:	a9 f7       	brne	.-22     	; 0x1c18 <__udivmodhi4_loop>
    1c2e:	80 95       	com	r24
    1c30:	90 95       	com	r25
    1c32:	bc 01       	movw	r22, r24
    1c34:	cd 01       	movw	r24, r26
    1c36:	08 95       	ret

00001c38 <__udivmodsi4>:
    1c38:	a1 e2       	ldi	r26, 0x21	; 33
    1c3a:	1a 2e       	mov	r1, r26
    1c3c:	aa 1b       	sub	r26, r26
    1c3e:	bb 1b       	sub	r27, r27
    1c40:	fd 01       	movw	r30, r26
    1c42:	0d c0       	rjmp	.+26     	; 0x1c5e <__udivmodsi4_ep>

00001c44 <__udivmodsi4_loop>:
    1c44:	aa 1f       	adc	r26, r26
    1c46:	bb 1f       	adc	r27, r27
    1c48:	ee 1f       	adc	r30, r30
    1c4a:	ff 1f       	adc	r31, r31
    1c4c:	a2 17       	cp	r26, r18
    1c4e:	b3 07       	cpc	r27, r19
    1c50:	e4 07       	cpc	r30, r20
    1c52:	f5 07       	cpc	r31, r21
    1c54:	20 f0       	brcs	.+8      	; 0x1c5e <__udivmodsi4_ep>
    1c56:	a2 1b       	sub	r26, r18
    1c58:	b3 0b       	sbc	r27, r19
    1c5a:	e4 0b       	sbc	r30, r20
    1c5c:	f5 0b       	sbc	r31, r21

00001c5e <__udivmodsi4_ep>:
    1c5e:	66 1f       	adc	r22, r22
    1c60:	77 1f       	adc	r23, r23
    1c62:	88 1f       	adc	r24, r24
    1c64:	99 1f       	adc	r25, r25
    1c66:	1a 94       	dec	r1
    1c68:	69 f7       	brne	.-38     	; 0x1c44 <__udivmodsi4_loop>
    1c6a:	60 95       	com	r22
    1c6c:	70 95       	com	r23
    1c6e:	80 95       	com	r24
    1c70:	90 95       	com	r25
    1c72:	9b 01       	movw	r18, r22
    1c74:	ac 01       	movw	r20, r24
    1c76:	bd 01       	movw	r22, r26
    1c78:	cf 01       	movw	r24, r30
    1c7a:	08 95       	ret

00001c7c <__tablejump2__>:
    1c7c:	ee 0f       	add	r30, r30
    1c7e:	ff 1f       	adc	r31, r31
    1c80:	05 90       	lpm	r0, Z+
    1c82:	f4 91       	lpm	r31, Z
    1c84:	e0 2d       	mov	r30, r0
    1c86:	09 94       	ijmp

00001c88 <__muluhisi3>:
    1c88:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__umulhisi3>
    1c8c:	a5 9f       	mul	r26, r21
    1c8e:	90 0d       	add	r25, r0
    1c90:	b4 9f       	mul	r27, r20
    1c92:	90 0d       	add	r25, r0
    1c94:	a4 9f       	mul	r26, r20
    1c96:	80 0d       	add	r24, r0
    1c98:	91 1d       	adc	r25, r1
    1c9a:	11 24       	eor	r1, r1
    1c9c:	08 95       	ret

00001c9e <__umulhisi3>:
    1c9e:	a2 9f       	mul	r26, r18
    1ca0:	b0 01       	movw	r22, r0
    1ca2:	b3 9f       	mul	r27, r19
    1ca4:	c0 01       	movw	r24, r0
    1ca6:	a3 9f       	mul	r26, r19
    1ca8:	70 0d       	add	r23, r0
    1caa:	81 1d       	adc	r24, r1
    1cac:	11 24       	eor	r1, r1
    1cae:	91 1d       	adc	r25, r1
    1cb0:	b2 9f       	mul	r27, r18
    1cb2:	70 0d       	add	r23, r0
    1cb4:	81 1d       	adc	r24, r1
    1cb6:	11 24       	eor	r1, r1
    1cb8:	91 1d       	adc	r25, r1
    1cba:	08 95       	ret

00001cbc <_exit>:
    1cbc:	f8 94       	cli

00001cbe <__stop_program>:
    1cbe:	ff cf       	rjmp	.-2      	; 0x1cbe <__stop_program>
