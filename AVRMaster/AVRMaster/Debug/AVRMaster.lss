
AVRMaster.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001728  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000033a  00800060  00001728  000017bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080039a  0080039a  00001af6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001af6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00001b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003eb1  00000000  00000000  00001d44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ec4  00000000  00000000  00005bf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001cce  00000000  00000000  00006ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004fc  00000000  00000000  00008788  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000df1  00000000  00000000  00008c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002548  00000000  00000000  00009a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  0000bfbd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
       4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
       c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
      54:	c4 04       	cpc	r12, r4
      56:	f1 04       	cpc	r15, r1
      58:	c6 04       	cpc	r12, r6
      5a:	cb 04       	cpc	r12, r11
      5c:	d0 04       	cpc	r13, r0
      5e:	d5 04       	cpc	r13, r5
      60:	da 04       	cpc	r13, r10
      62:	df 04       	cpc	r13, r15
      64:	e1 04       	cpc	r14, r1

00000066 <__ctors_end>:
      66:	11 24       	eor	r1, r1
      68:	1f be       	out	0x3f, r1	; 63
      6a:	cf e5       	ldi	r28, 0x5F	; 95
      6c:	d8 e0       	ldi	r29, 0x08	; 8
      6e:	de bf       	out	0x3e, r29	; 62
      70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
      72:	13 e0       	ldi	r17, 0x03	; 3
      74:	a0 e6       	ldi	r26, 0x60	; 96
      76:	b0 e0       	ldi	r27, 0x00	; 0
      78:	e8 e2       	ldi	r30, 0x28	; 40
      7a:	f7 e1       	ldi	r31, 0x17	; 23
      7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
      7e:	05 90       	lpm	r0, Z+
      80:	0d 92       	st	X+, r0
      82:	aa 39       	cpi	r26, 0x9A	; 154
      84:	b1 07       	cpc	r27, r17
      86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
      88:	23 e0       	ldi	r18, 0x03	; 3
      8a:	aa e9       	ldi	r26, 0x9A	; 154
      8c:	b3 e0       	ldi	r27, 0x03	; 3
      8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
      90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
      92:	ab 39       	cpi	r26, 0x9B	; 155
      94:	b2 07       	cpc	r27, r18
      96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
      98:	0e 94 1b 02 	call	0x436	; 0x436 <main>
      9c:	0c 94 92 0b 	jmp	0x1724	; 0x1724 <_exit>

000000a0 <__bad_interrupt>:
      a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <LoginSystem_SaveNewUser>:

#include <util/delay.h>


	ES_t LoginSystem_SaveNewUser(User_t Copy_strNewUser,u8 *Copy_u8NumofRegisteredUsers)
	{
      a4:	cf 92       	push	r12
      a6:	df 92       	push	r13
      a8:	ef 92       	push	r14
      aa:	ff 92       	push	r15
      ac:	0f 93       	push	r16
      ae:	1f 93       	push	r17
      b0:	cf 93       	push	r28
      b2:	df 93       	push	r29
      b4:	cd b7       	in	r28, 0x3d	; 61
      b6:	de b7       	in	r29, 0x3e	; 62
      b8:	2b 97       	sbiw	r28, 0x0b	; 11
      ba:	0f b6       	in	r0, 0x3f	; 63
      bc:	f8 94       	cli
      be:	de bf       	out	0x3e, r29	; 62
      c0:	0f be       	out	0x3f, r0	; 63
      c2:	cd bf       	out	0x3d, r28	; 61
      c4:	e9 82       	std	Y+1, r14	; 0x01
      c6:	fa 82       	std	Y+2, r15	; 0x02
      c8:	0b 83       	std	Y+3, r16	; 0x03
      ca:	1c 83       	std	Y+4, r17	; 0x04
      cc:	2d 83       	std	Y+5, r18	; 0x05
      ce:	3e 83       	std	Y+6, r19	; 0x06
      d0:	4f 83       	std	Y+7, r20	; 0x07
      d2:	58 87       	std	Y+8, r21	; 0x08
      d4:	69 87       	std	Y+9, r22	; 0x09
      d6:	7a 87       	std	Y+10, r23	; 0x0a
      d8:	8b 87       	std	Y+11, r24	; 0x0b
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1), Copy_strNewUser.UserName,MAX_NO_OF_LETTERS);
      da:	f6 01       	movw	r30, r12
      dc:	80 81       	ld	r24, Z
      de:	90 e0       	ldi	r25, 0x00	; 0
      e0:	9c 01       	movw	r18, r24
      e2:	22 0f       	add	r18, r18
      e4:	33 1f       	adc	r19, r19
      e6:	22 0f       	add	r18, r18
      e8:	33 1f       	adc	r19, r19
      ea:	22 0f       	add	r18, r18
      ec:	33 1f       	adc	r19, r19
      ee:	82 0f       	add	r24, r18
      f0:	93 1f       	adc	r25, r19
      f2:	44 e0       	ldi	r20, 0x04	; 4
      f4:	50 e0       	ldi	r21, 0x00	; 0
      f6:	be 01       	movw	r22, r28
      f8:	6f 5f       	subi	r22, 0xFF	; 255
      fa:	7f 4f       	sbci	r23, 0xFF	; 255
      fc:	42 96       	adiw	r24, 0x12	; 18
      fe:	0e 94 c4 06 	call	0xd88	; 0xd88 <EEPROM_vWriteBlockToAddress>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     102:	83 ed       	ldi	r24, 0xD3	; 211
     104:	90 e3       	ldi	r25, 0x30	; 48
     106:	01 97       	sbiw	r24, 0x01	; 1
     108:	f1 f7       	brne	.-4      	; 0x106 <LoginSystem_SaveNewUser+0x62>
     10a:	00 c0       	rjmp	.+0      	; 0x10c <LoginSystem_SaveNewUser+0x68>
     10c:	00 00       	nop
		_delay_ms(50);
		EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_strNewUser.Password,MAX_NO_OF_LETTERS);
     10e:	f6 01       	movw	r30, r12
     110:	80 81       	ld	r24, Z
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	9c 01       	movw	r18, r24
     116:	22 0f       	add	r18, r18
     118:	33 1f       	adc	r19, r19
     11a:	22 0f       	add	r18, r18
     11c:	33 1f       	adc	r19, r19
     11e:	22 0f       	add	r18, r18
     120:	33 1f       	adc	r19, r19
     122:	82 0f       	add	r24, r18
     124:	93 1f       	adc	r25, r19
     126:	44 e0       	ldi	r20, 0x04	; 4
     128:	50 e0       	ldi	r21, 0x00	; 0
     12a:	be 01       	movw	r22, r28
     12c:	6a 5f       	subi	r22, 0xFA	; 250
     12e:	7f 4f       	sbci	r23, 0xFF	; 255
     130:	46 96       	adiw	r24, 0x16	; 22
     132:	0e 94 c4 06 	call	0xd88	; 0xd88 <EEPROM_vWriteBlockToAddress>
     136:	83 ed       	ldi	r24, 0xD3	; 211
     138:	90 e3       	ldi	r25, 0x30	; 48
     13a:	01 97       	sbiw	r24, 0x01	; 1
     13c:	f1 f7       	brne	.-4      	; 0x13a <LoginSystem_SaveNewUser+0x96>
     13e:	00 c0       	rjmp	.+0      	; 0x140 <LoginSystem_SaveNewUser+0x9c>
     140:	00 00       	nop
		_delay_ms(50);
		

		EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (*Copy_u8NumofRegisteredUsers)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_strNewUser.User_Priority);
     142:	6b 85       	ldd	r22, Y+11	; 0x0b
     144:	f6 01       	movw	r30, r12
     146:	80 81       	ld	r24, Z
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	9c 01       	movw	r18, r24
     14c:	22 0f       	add	r18, r18
     14e:	33 1f       	adc	r19, r19
     150:	22 0f       	add	r18, r18
     152:	33 1f       	adc	r19, r19
     154:	22 0f       	add	r18, r18
     156:	33 1f       	adc	r19, r19
     158:	82 0f       	add	r24, r18
     15a:	93 1f       	adc	r25, r19
     15c:	70 e0       	ldi	r23, 0x00	; 0
     15e:	4a 96       	adiw	r24, 0x1a	; 26
     160:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROM_vWriteByteToAddress>
     164:	83 ed       	ldi	r24, 0xD3	; 211
     166:	90 e3       	ldi	r25, 0x30	; 48
     168:	01 97       	sbiw	r24, 0x01	; 1
     16a:	f1 f7       	brne	.-4      	; 0x168 <LoginSystem_SaveNewUser+0xc4>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <LoginSystem_SaveNewUser+0xca>
     16e:	00 00       	nop
		_delay_ms(50);
		(*Copy_u8NumofRegisteredUsers)++;
     170:	f6 01       	movw	r30, r12
     172:	60 81       	ld	r22, Z
     174:	6f 5f       	subi	r22, 0xFF	; 255
     176:	60 83       	st	Z, r22

		EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     178:	70 e0       	ldi	r23, 0x00	; 0
     17a:	81 e1       	ldi	r24, 0x11	; 17
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROM_vWriteByteToAddress>
	}
     182:	2b 96       	adiw	r28, 0x0b	; 11
     184:	0f b6       	in	r0, 0x3f	; 63
     186:	f8 94       	cli
     188:	de bf       	out	0x3e, r29	; 62
     18a:	0f be       	out	0x3f, r0	; 63
     18c:	cd bf       	out	0x3d, r28	; 61
     18e:	df 91       	pop	r29
     190:	cf 91       	pop	r28
     192:	1f 91       	pop	r17
     194:	0f 91       	pop	r16
     196:	ff 90       	pop	r15
     198:	ef 90       	pop	r14
     19a:	df 90       	pop	r13
     19c:	cf 90       	pop	r12
     19e:	08 95       	ret

000001a0 <LoginSystem_enuGetDataFromUserByKeypad>:
	ES_t LoginSystem_enuGetDataFromUserByKeypad(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
	{
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	1f 92       	push	r1
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	6c 01       	movw	r12, r24
     1b6:	7b 01       	movw	r14, r22
		ES_t Local_enuErrorState = ES_NOK;
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
     1b8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Username:");
     1bc:	80 e7       	ldi	r24, 0x70	; 112
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1c4:	60 e0       	ldi	r22, 0x00	; 0
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1cc:	10 e0       	ldi	r17, 0x00	; 0
     1ce:	0d c0       	rjmp	.+26     	; 0x1ea <LoginSystem_enuGetDataFromUserByKeypad+0x4a>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     1d0:	ce 01       	movw	r24, r28
     1d2:	01 96       	adiw	r24, 0x01	; 1
     1d4:	0e 94 3d 07 	call	0xe7a	; 0xe7a <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_enuSendData>
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
     1de:	f6 01       	movw	r30, r12
     1e0:	e1 0f       	add	r30, r17
     1e2:	f1 1d       	adc	r31, r1
     1e4:	89 81       	ldd	r24, Y+1	; 0x01
     1e6:	80 83       	st	Z, r24
		u8 Local_u8PressedKey;
		u8 Local_u8Iterator;
		LCD_enuClearDisplay();
		LCD_enuDisplayString("Username:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     1e8:	1f 5f       	subi	r17, 0xFF	; 255
     1ea:	14 30       	cpi	r17, 0x04	; 4
     1ec:	88 f3       	brcs	.-30     	; 0x1d0 <LoginSystem_enuGetDataFromUserByKeypad+0x30>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
			LCD_enuSendData(Local_u8PressedKey);
			Copy_Au8Username[Local_u8Iterator] = Local_u8PressedKey;
		}
		Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     1ee:	f6 01       	movw	r30, r12
     1f0:	14 82       	std	Z+4, r1	; 0x04

		LCD_enuClearDisplay();
     1f2:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Password:");
     1f6:	8a e7       	ldi	r24, 0x7A	; 122
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     1fe:	60 e0       	ldi	r22, 0x00	; 0
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     206:	10 e0       	ldi	r17, 0x00	; 0
     208:	1a c0       	rjmp	.+52     	; 0x23e <LoginSystem_enuGetDataFromUserByKeypad+0x9e>
		{
			Keypad_enuGetPressedKey(&Local_u8PressedKey);
     20a:	ce 01       	movw	r24, r28
     20c:	01 96       	adiw	r24, 0x01	; 1
     20e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <Keypad_enuGetPressedKey>
			LCD_enuSendData(Local_u8PressedKey);
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_enuSendData>
     218:	87 ea       	ldi	r24, 0xA7	; 167
     21a:	91 e6       	ldi	r25, 0x61	; 97
     21c:	01 97       	sbiw	r24, 0x01	; 1
     21e:	f1 f7       	brne	.-4      	; 0x21c <LoginSystem_enuGetDataFromUserByKeypad+0x7c>
     220:	00 c0       	rjmp	.+0      	; 0x222 <LoginSystem_enuGetDataFromUserByKeypad+0x82>
     222:	00 00       	nop
			_delay_ms(100);
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
     224:	61 2f       	mov	r22, r17
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
			LCD_enuSendData('*');
     22c:	8a e2       	ldi	r24, 0x2A	; 42
     22e:	0e 94 14 09 	call	0x1228	; 0x1228 <LCD_enuSendData>
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;
     232:	f7 01       	movw	r30, r14
     234:	e1 0f       	add	r30, r17
     236:	f1 1d       	adc	r31, r1
     238:	89 81       	ldd	r24, Y+1	; 0x01
     23a:	80 83       	st	Z, r24

		LCD_enuClearDisplay();
		LCD_enuDisplayString("Password:");
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);

		for (Local_u8Iterator=0; Local_u8Iterator < MAX_NO_OF_LETTERS; Local_u8Iterator++)
     23c:	1f 5f       	subi	r17, 0xFF	; 255
     23e:	14 30       	cpi	r17, 0x04	; 4
     240:	20 f3       	brcs	.-56     	; 0x20a <LoginSystem_enuGetDataFromUserByKeypad+0x6a>
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0+Local_u8Iterator);
			LCD_enuSendData('*');
			Copy_Au8Password[Local_u8Iterator] = Local_u8PressedKey;

		}
		Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     242:	f7 01       	movw	r30, r14
     244:	14 82       	std	Z+4, r1	; 0x04
		Local_enuErrorState = ES_OK;
		return Local_enuErrorState;
	}
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0f 90       	pop	r0
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	1f 91       	pop	r17
     250:	ff 90       	pop	r15
     252:	ef 90       	pop	r14
     254:	df 90       	pop	r13
     256:	cf 90       	pop	r12
     258:	08 95       	ret

0000025a <LoginSystem_enuGetDataFromUserBY_UART>:
	
		ES_t LoginSystem_enuGetDataFromUserBY_UART(u8 *Copy_Au8Username, u8 *Copy_Au8Password)
		{
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	cf 93       	push	r28
     260:	df 93       	push	r29
     262:	8c 01       	movw	r16, r24
     264:	eb 01       	movw	r28, r22
			ES_t Local_enuErrorState = ES_NOK;
			UART_enuSendString("\r\n\r\nUsername: ");
     266:	84 e8       	ldi	r24, 0x84	; 132
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Username);
     26e:	c8 01       	movw	r24, r16
     270:	0e 94 4f 0b 	call	0x169e	; 0x169e <UART_enuRecieveString>
			Copy_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     274:	f8 01       	movw	r30, r16
     276:	14 82       	std	Z+4, r1	; 0x04
			UART_enuSendString("Password: ");
     278:	83 e9       	ldi	r24, 0x93	; 147
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
			UART_enuRecieveString(Copy_Au8Password);
     280:	ce 01       	movw	r24, r28
     282:	0e 94 4f 0b 	call	0x169e	; 0x169e <UART_enuRecieveString>
			Copy_Au8Password[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     286:	1c 82       	std	Y+4, r1	; 0x04

			Local_enuErrorState = ES_OK;
			return Local_enuErrorState;
		}
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	08 95       	ret

00000294 <LoginSystem_u8Strcmp>:



	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
     294:	dc 01       	movw	r26, r24
		u8 Local_u8Iterator=0;
     296:	40 e0       	ldi	r20, 0x00	; 0
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     298:	05 c0       	rjmp	.+10     	; 0x2a4 <LoginSystem_u8Strcmp+0x10>
		{
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     29a:	99 23       	and	r25, r25
     29c:	79 f0       	breq	.+30     	; 0x2bc <LoginSystem_u8Strcmp+0x28>
     29e:	22 23       	and	r18, r18
     2a0:	69 f0       	breq	.+26     	; 0x2bc <LoginSystem_u8Strcmp+0x28>
				break;
			Local_u8Iterator++;
     2a2:	4f 5f       	subi	r20, 0xFF	; 255


	u8 LoginSystem_u8Strcmp (char *Copy_Au8Sring1, char *Copy_Au8Sring2)
	{
		u8 Local_u8Iterator=0;
		while(Copy_Au8Sring1[Local_u8Iterator]==Copy_Au8Sring2[Local_u8Iterator])
     2a4:	24 2f       	mov	r18, r20
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	fd 01       	movw	r30, r26
     2aa:	e2 0f       	add	r30, r18
     2ac:	f3 1f       	adc	r31, r19
     2ae:	90 81       	ld	r25, Z
     2b0:	fb 01       	movw	r30, r22
     2b2:	e2 0f       	add	r30, r18
     2b4:	f3 1f       	adc	r31, r19
     2b6:	20 81       	ld	r18, Z
     2b8:	92 17       	cp	r25, r18
     2ba:	79 f3       	breq	.-34     	; 0x29a <LoginSystem_u8Strcmp+0x6>
			if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER || Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
				break;
			Local_u8Iterator++;
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
     2bc:	91 11       	cpse	r25, r1
     2be:	04 c0       	rjmp	.+8      	; 0x2c8 <LoginSystem_u8Strcmp+0x34>
     2c0:	22 23       	and	r18, r18
     2c2:	21 f0       	breq	.+8      	; 0x2cc <LoginSystem_u8Strcmp+0x38>
			return TRUE;
		else
			return FALSE;
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	08 95       	ret
     2c8:	80 e0       	ldi	r24, 0x00	; 0
     2ca:	08 95       	ret
				break;
			Local_u8Iterator++;
		}

		if (Copy_Au8Sring1[Local_u8Iterator]==NULL_CHARACTER && Copy_Au8Sring2[Local_u8Iterator]==NULL_CHARACTER)
			return TRUE;
     2cc:	81 e0       	ldi	r24, 0x01	; 1
		else
			return FALSE;
	}
     2ce:	08 95       	ret

000002d0 <LoginSystem_RemoveUser>:
	
	u8 LoginSystem_RemoveUser(User_t *Copy_AstrUsers,u8 *Copy_u8NumofRegisteredUsers)
		{
     2d0:	8f 92       	push	r8
     2d2:	9f 92       	push	r9
     2d4:	af 92       	push	r10
     2d6:	bf 92       	push	r11
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
     2e8:	00 d0       	rcall	.+0      	; 0x2ea <LoginSystem_RemoveUser+0x1a>
     2ea:	00 d0       	rcall	.+0      	; 0x2ec <LoginSystem_RemoveUser+0x1c>
     2ec:	1f 92       	push	r1
     2ee:	cd b7       	in	r28, 0x3d	; 61
     2f0:	de b7       	in	r29, 0x3e	; 62
     2f2:	6c 01       	movw	r12, r24
     2f4:	7b 01       	movw	r14, r22
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
     2f6:	8e e9       	ldi	r24, 0x9E	; 158
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
			UART_enuRecieveString(Local_Au8Username);
     2fe:	ce 01       	movw	r24, r28
     300:	01 96       	adiw	r24, 0x01	; 1
     302:	0e 94 4f 0b 	call	0x169e	; 0x169e <UART_enuRecieveString>
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
     306:	1d 82       	std	Y+5, r1	; 0x05
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     308:	00 e0       	ldi	r16, 0x00	; 0
     30a:	7d c0       	rjmp	.+250    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
			{
				Copy_u8Flag = LoginSystem_u8Strcmp (Copy_AstrUsers[Local_u8Iterator].UserName,Local_Au8Username);
     30c:	46 01       	movw	r8, r12
     30e:	8b e0       	ldi	r24, 0x0B	; 11
     310:	08 9f       	mul	r16, r24
     312:	80 0c       	add	r8, r0
     314:	91 1c       	adc	r9, r1
     316:	11 24       	eor	r1, r1
     318:	be 01       	movw	r22, r28
     31a:	6f 5f       	subi	r22, 0xFF	; 255
     31c:	7f 4f       	sbci	r23, 0xFF	; 255
     31e:	c4 01       	movw	r24, r8
     320:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     324:	b8 2e       	mov	r11, r24
				if (Copy_u8Flag )
     326:	88 23       	and	r24, r24
     328:	09 f4       	brne	.+2      	; 0x32c <LoginSystem_RemoveUser+0x5c>
     32a:	6c c0       	rjmp	.+216    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
				{
					Copy_AstrUsers[Local_u8Iterator]=Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1];
     32c:	0f 2e       	mov	r0, r31
     32e:	fb e0       	ldi	r31, 0x0B	; 11
     330:	af 2e       	mov	r10, r31
     332:	f0 2d       	mov	r31, r0
     334:	a1 9e       	mul	r10, r17
     336:	f0 01       	movw	r30, r0
     338:	11 24       	eor	r1, r1
     33a:	3b 97       	sbiw	r30, 0x0b	; 11
     33c:	ec 0d       	add	r30, r12
     33e:	fd 1d       	adc	r31, r13
     340:	8b e0       	ldi	r24, 0x0B	; 11
     342:	d4 01       	movw	r26, r8
     344:	01 90       	ld	r0, Z+
     346:	0d 92       	st	X+, r0
     348:	8a 95       	dec	r24
     34a:	e1 f7       	brne	.-8      	; 0x344 <LoginSystem_RemoveUser+0x74>
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1), Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].UserName,MAX_NO_OF_LETTERS);
     34c:	f7 01       	movw	r30, r14
     34e:	60 81       	ld	r22, Z
     350:	a6 9e       	mul	r10, r22
     352:	b0 01       	movw	r22, r0
     354:	11 24       	eor	r1, r1
     356:	6b 50       	subi	r22, 0x0B	; 11
     358:	71 09       	sbc	r23, r1
     35a:	6c 0d       	add	r22, r12
     35c:	7d 1d       	adc	r23, r13
     35e:	80 2f       	mov	r24, r16
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	8c 01       	movw	r16, r24
     364:	00 0f       	add	r16, r16
     366:	11 1f       	adc	r17, r17
     368:	00 0f       	add	r16, r16
     36a:	11 1f       	adc	r17, r17
     36c:	00 0f       	add	r16, r16
     36e:	11 1f       	adc	r17, r17
     370:	08 0f       	add	r16, r24
     372:	19 1f       	adc	r17, r25
     374:	44 e0       	ldi	r20, 0x04	; 4
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	c8 01       	movw	r24, r16
     37a:	42 96       	adiw	r24, 0x12	; 18
     37c:	0e 94 c4 06 	call	0xd88	; 0xd88 <EEPROM_vWriteBlockToAddress>
     380:	83 ed       	ldi	r24, 0xD3	; 211
     382:	90 e3       	ldi	r25, 0x30	; 48
     384:	01 97       	sbiw	r24, 0x01	; 1
     386:	f1 f7       	brne	.-4      	; 0x384 <LoginSystem_RemoveUser+0xb4>
     388:	00 c0       	rjmp	.+0      	; 0x38a <LoginSystem_RemoveUser+0xba>
     38a:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteBlockToAddress(SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + MAX_NO_OF_LETTERS, Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].Password,MAX_NO_OF_LETTERS);
     38c:	f7 01       	movw	r30, r14
     38e:	60 81       	ld	r22, Z
     390:	a6 9e       	mul	r10, r22
     392:	b0 01       	movw	r22, r0
     394:	11 24       	eor	r1, r1
     396:	6b 50       	subi	r22, 0x0B	; 11
     398:	71 09       	sbc	r23, r1
     39a:	6c 0d       	add	r22, r12
     39c:	7d 1d       	adc	r23, r13
     39e:	6b 5f       	subi	r22, 0xFB	; 251
     3a0:	7f 4f       	sbci	r23, 0xFF	; 255
     3a2:	44 e0       	ldi	r20, 0x04	; 4
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	c8 01       	movw	r24, r16
     3a8:	46 96       	adiw	r24, 0x16	; 22
     3aa:	0e 94 c4 06 	call	0xd88	; 0xd88 <EEPROM_vWriteBlockToAddress>
     3ae:	83 ed       	ldi	r24, 0xD3	; 211
     3b0:	90 e3       	ldi	r25, 0x30	; 48
     3b2:	01 97       	sbiw	r24, 0x01	; 1
     3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LoginSystem_RemoveUser+0xe2>
     3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LoginSystem_RemoveUser+0xe8>
     3b8:	00 00       	nop
					_delay_ms(50);
					EEPROM_vWriteByteToAddress((SAVED_USERS_INFO_ADDRESS + (Local_u8Iterator)*(2*MAX_NO_OF_LETTERS+1) + 2*MAX_NO_OF_LETTERS),Copy_AstrUsers[(*Copy_u8NumofRegisteredUsers)-1].User_Priority);
     3ba:	f7 01       	movw	r30, r14
     3bc:	80 81       	ld	r24, Z
     3be:	a8 9e       	mul	r10, r24
     3c0:	c0 01       	movw	r24, r0
     3c2:	11 24       	eor	r1, r1
     3c4:	0b 97       	sbiw	r24, 0x0b	; 11
     3c6:	f6 01       	movw	r30, r12
     3c8:	e8 0f       	add	r30, r24
     3ca:	f9 1f       	adc	r31, r25
     3cc:	62 85       	ldd	r22, Z+10	; 0x0a
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	c8 01       	movw	r24, r16
     3d2:	4a 96       	adiw	r24, 0x1a	; 26
     3d4:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROM_vWriteByteToAddress>
     3d8:	83 ed       	ldi	r24, 0xD3	; 211
     3da:	90 e3       	ldi	r25, 0x30	; 48
     3dc:	01 97       	sbiw	r24, 0x01	; 1
     3de:	f1 f7       	brne	.-4      	; 0x3dc <LoginSystem_RemoveUser+0x10c>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <LoginSystem_RemoveUser+0x112>
     3e2:	00 00       	nop
					_delay_ms(50);
					(*Copy_u8NumofRegisteredUsers)--;
     3e4:	f7 01       	movw	r30, r14
     3e6:	60 81       	ld	r22, Z
     3e8:	61 50       	subi	r22, 0x01	; 1
     3ea:	60 83       	st	Z, r22
					EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,(*Copy_u8NumofRegisteredUsers));
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	81 e1       	ldi	r24, 0x11	; 17
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROM_vWriteByteToAddress>
     3f6:	83 ed       	ldi	r24, 0xD3	; 211
     3f8:	90 e3       	ldi	r25, 0x30	; 48
     3fa:	01 97       	sbiw	r24, 0x01	; 1
     3fc:	f1 f7       	brne	.-4      	; 0x3fa <LoginSystem_RemoveUser+0x12a>
     3fe:	00 c0       	rjmp	.+0      	; 0x400 <__EEPROM_REGION_LENGTH__>
     400:	00 00       	nop
     402:	06 c0       	rjmp	.+12     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
			u8 Local_Au8Username[MAX_NO_OF_LETTERS+NULL_CHARACTER_COUNT];
			u8 Copy_u8Flag;
			UART_enuSendString("\r\nEnter Username Required to be Removed: ");
			UART_enuRecieveString(Local_Au8Username);
			Local_Au8Username[MAX_NO_OF_LETTERS] =NULL_CHARACTER;
			for (u8 Local_u8Iterator=0; Local_u8Iterator < (*Copy_u8NumofRegisteredUsers); Local_u8Iterator++)
     404:	0f 5f       	subi	r16, 0xFF	; 255
     406:	f7 01       	movw	r30, r14
     408:	10 81       	ld	r17, Z
     40a:	01 17       	cp	r16, r17
     40c:	08 f4       	brcc	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
     40e:	7e cf       	rjmp	.-260    	; 0x30c <LoginSystem_RemoveUser+0x3c>
					_delay_ms(50);
					break;
				}
			}
			return Copy_u8Flag;
		}
     410:	8b 2d       	mov	r24, r11
     412:	0f 90       	pop	r0
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	0f 91       	pop	r16
     424:	ff 90       	pop	r15
     426:	ef 90       	pop	r14
     428:	df 90       	pop	r13
     42a:	cf 90       	pop	r12
     42c:	bf 90       	pop	r11
     42e:	af 90       	pop	r10
     430:	9f 90       	pop	r9
     432:	8f 90       	pop	r8
     434:	08 95       	ret

00000436 <main>:
#include "LoginSystem.h"

#include <util/delay.h>

int main (void)
{
     436:	cf 93       	push	r28
     438:	df 93       	push	r29
     43a:	cd b7       	in	r28, 0x3d	; 61
     43c:	de b7       	in	r29, 0x3e	; 62
     43e:	c5 54       	subi	r28, 0x45	; 69
     440:	d1 09       	sbc	r29, r1
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
/************************************************************************************************************/
/*******************************************INITIALIZATION***************************************************/
	//TWI_Init();
	//EEPROM_enuInit();
	DIO_enuInit();
     44c:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <DIO_enuInit>
//	Timer1_enuInit();
	SPI_vInitMaster();
     450:	0e 94 19 0b 	call	0x1632	; 0x1632 <SPI_vInitMaster>
	UART_enuUART_Init();
     454:	0e 94 25 0b 	call	0x164a	; 0x164a <UART_enuUART_Init>
	
	
	LCD_enuInit();
     458:	0e 94 b7 08 	call	0x116e	; 0x116e <LCD_enuInit>
	Keypad_enuInit();
     45c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <Keypad_enuInit>
	DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN1,DIO_u8OUTPUT);
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	61 e0       	ldi	r22, 0x01	; 1
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
	
/***************************************************************************************************/
/* ***********************************************************************************************************/
/************************************************************************************************************/

	__asm("sei");// GIE
     46a:	78 94       	sei

	u8 Program_Status_Flag;
	User_t LoginSystem_strAdmin;
	User_t LoginSystem_AstrUsers[MAX_NO_OF_USERS];
	u8 LoginSystem_NumOfRegisteredUsers=0;
     46c:	19 ae       	std	Y+57, r1	; 0x39

	u8 Keypad_Pressed_Key;
	u8 Current_State=0;
	u8 UART_CHOICE;
	u8 LoginSystem_u8TrialsLeft =3;
	EEPROM_ui8ReadByteFromAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,&Program_Status_Flag);
     46e:	be 01       	movw	r22, r28
     470:	6f 5f       	subi	r22, 0xFF	; 255
     472:	7f 4f       	sbci	r23, 0xFF	; 255
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	0e 94 8e 06 	call	0xd1c	; 0xd1c <EEPROM_ui8ReadByteFromAddress>
     47a:	2f ef       	ldi	r18, 0xFF	; 255
     47c:	32 e5       	ldi	r19, 0x52	; 82
     47e:	87 e0       	ldi	r24, 0x07	; 7
     480:	21 50       	subi	r18, 0x01	; 1
     482:	30 40       	sbci	r19, 0x00	; 0
     484:	80 40       	sbci	r24, 0x00	; 0
     486:	e1 f7       	brne	.-8      	; 0x480 <main+0x4a>
     488:	00 c0       	rjmp	.+0      	; 0x48a <main+0x54>
     48a:	00 00       	nop
	_delay_ms(150);

	LCD_enuDisplayString("Welcome To Smart");
     48c:	88 ec       	ldi	r24, 0xC8	; 200
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
	LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     494:	60 e0       	ldi	r22, 0x00	; 0
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
	LCD_enuDisplayString("Home !");
     49c:	89 ed       	ldi	r24, 0xD9	; 217
     49e:	90 e0       	ldi	r25, 0x00	; 0
     4a0:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
     4a4:	9f ef       	ldi	r25, 0xFF	; 255
     4a6:	27 ea       	ldi	r18, 0xA7	; 167
     4a8:	31 e6       	ldi	r19, 0x61	; 97
     4aa:	91 50       	subi	r25, 0x01	; 1
     4ac:	20 40       	sbci	r18, 0x00	; 0
     4ae:	30 40       	sbci	r19, 0x00	; 0
     4b0:	e1 f7       	brne	.-8      	; 0x4aa <main+0x74>
     4b2:	00 c0       	rjmp	.+0      	; 0x4b4 <main+0x7e>
     4b4:	00 00       	nop
	_delay_ms (2000);
	LCD_enuClearDisplay();
     4b6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>

	
	
			if (Program_Status_Flag == FIRST_TIME_USE_STATUS)
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	8f 3f       	cpi	r24, 0xFF	; 255
     4be:	09 f0       	breq	.+2      	; 0x4c2 <main+0x8c>
     4c0:	91 c0       	rjmp	.+290    	; 0x5e4 <main+0x1ae>
			{

				EEPROM_vWriteByteToAddress(NO_OF_REGISTERED_USERS_ADDRESS,LoginSystem_NumOfRegisteredUsers);
     4c2:	69 ad       	ldd	r22, Y+57	; 0x39
     4c4:	81 e1       	ldi	r24, 0x11	; 17
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROM_vWriteByteToAddress>
     4cc:	8f ef       	ldi	r24, 0xFF	; 255
     4ce:	92 e5       	ldi	r25, 0x52	; 82
     4d0:	27 e0       	ldi	r18, 0x07	; 7
     4d2:	81 50       	subi	r24, 0x01	; 1
     4d4:	90 40       	sbci	r25, 0x00	; 0
     4d6:	20 40       	sbci	r18, 0x00	; 0
     4d8:	e1 f7       	brne	.-8      	; 0x4d2 <main+0x9c>
     4da:	00 c0       	rjmp	.+0      	; 0x4dc <main+0xa6>
     4dc:	00 00       	nop
				_delay_ms(150);
				LCD_enuDisplayString("For First Time");
     4de:	80 ee       	ldi	r24, 0xE0	; 224
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Use");
     4ee:	8f ee       	ldi	r24, 0xEF	; 239
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
     4f6:	3f ef       	ldi	r19, 0xFF	; 255
     4f8:	87 ea       	ldi	r24, 0xA7	; 167
     4fa:	91 e6       	ldi	r25, 0x61	; 97
     4fc:	31 50       	subi	r19, 0x01	; 1
     4fe:	80 40       	sbci	r24, 0x00	; 0
     500:	90 40       	sbci	r25, 0x00	; 0
     502:	e1 f7       	brne	.-8      	; 0x4fc <main+0xc6>
     504:	00 c0       	rjmp	.+0      	; 0x506 <main+0xd0>
     506:	00 00       	nop
				_delay_ms(2000);
				LCD_enuClearDisplay();
     508:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Register Admin");
     50c:	83 ef       	ldi	r24, 0xF3	; 243
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     514:	60 e0       	ldi	r22, 0x00	; 0
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("on Keypad");
     51c:	82 e0       	ldi	r24, 0x02	; 2
     51e:	91 e0       	ldi	r25, 0x01	; 1
     520:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
     524:	2f ef       	ldi	r18, 0xFF	; 255
     526:	37 ea       	ldi	r19, 0xA7	; 167
     528:	81 e6       	ldi	r24, 0x61	; 97
     52a:	21 50       	subi	r18, 0x01	; 1
     52c:	30 40       	sbci	r19, 0x00	; 0
     52e:	80 40       	sbci	r24, 0x00	; 0
     530:	e1 f7       	brne	.-8      	; 0x52a <main+0xf4>
     532:	00 c0       	rjmp	.+0      	; 0x534 <main+0xfe>
     534:	00 00       	nop
				_delay_ms(2000);
				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_strAdmin.UserName, LoginSystem_strAdmin.Password);
     536:	be 01       	movw	r22, r28
     538:	69 5f       	subi	r22, 0xF9	; 249
     53a:	7f 4f       	sbci	r23, 0xFF	; 255
     53c:	ce 01       	movw	r24, r28
     53e:	02 96       	adiw	r24, 0x02	; 2
     540:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LoginSystem_enuGetDataFromUserByKeypad>
				LoginSystem_strAdmin.User_Priority = ADMIN_PRIORITY;
     544:	81 e0       	ldi	r24, 0x01	; 1
     546:	8c 87       	std	Y+12, r24	; 0x0c
				
				
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS ,LoginSystem_strAdmin.UserName , MAX_NO_OF_LETTERS);
     548:	44 e0       	ldi	r20, 0x04	; 4
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	be 01       	movw	r22, r28
     54e:	6e 5f       	subi	r22, 0xFE	; 254
     550:	7f 4f       	sbci	r23, 0xFF	; 255
     552:	81 e0       	ldi	r24, 0x01	; 1
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 c4 06 	call	0xd88	; 0xd88 <EEPROM_vWriteBlockToAddress>
     55a:	9f ef       	ldi	r25, 0xFF	; 255
     55c:	23 ec       	ldi	r18, 0xC3	; 195
     55e:	39 e0       	ldi	r19, 0x09	; 9
     560:	91 50       	subi	r25, 0x01	; 1
     562:	20 40       	sbci	r18, 0x00	; 0
     564:	30 40       	sbci	r19, 0x00	; 0
     566:	e1 f7       	brne	.-8      	; 0x560 <main+0x12a>
     568:	00 c0       	rjmp	.+0      	; 0x56a <main+0x134>
     56a:	00 00       	nop
				_delay_ms(200);
				EEPROM_vWriteBlockToAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS ,LoginSystem_strAdmin.Password , MAX_NO_OF_LETTERS);
     56c:	44 e0       	ldi	r20, 0x04	; 4
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	be 01       	movw	r22, r28
     572:	69 5f       	subi	r22, 0xF9	; 249
     574:	7f 4f       	sbci	r23, 0xFF	; 255
     576:	85 e0       	ldi	r24, 0x05	; 5
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 c4 06 	call	0xd88	; 0xd88 <EEPROM_vWriteBlockToAddress>
     57e:	8f ef       	ldi	r24, 0xFF	; 255
     580:	93 ec       	ldi	r25, 0xC3	; 195
     582:	29 e0       	ldi	r18, 0x09	; 9
     584:	81 50       	subi	r24, 0x01	; 1
     586:	90 40       	sbci	r25, 0x00	; 0
     588:	20 40       	sbci	r18, 0x00	; 0
     58a:	e1 f7       	brne	.-8      	; 0x584 <main+0x14e>
     58c:	00 c0       	rjmp	.+0      	; 0x58e <main+0x158>
     58e:	00 00       	nop
				_delay_ms(200);

				EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,LOAD_LOGIN_SYSTEM_DATABASE);
     590:	60 e0       	ldi	r22, 0x00	; 0
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	0e 94 b2 06 	call	0xd64	; 0xd64 <EEPROM_vWriteByteToAddress>
     59a:	3f ef       	ldi	r19, 0xFF	; 255
     59c:	82 e5       	ldi	r24, 0x52	; 82
     59e:	97 e0       	ldi	r25, 0x07	; 7
     5a0:	31 50       	subi	r19, 0x01	; 1
     5a2:	80 40       	sbci	r24, 0x00	; 0
     5a4:	90 40       	sbci	r25, 0x00	; 0
     5a6:	e1 f7       	brne	.-8      	; 0x5a0 <main+0x16a>
     5a8:	00 c0       	rjmp	.+0      	; 0x5aa <main+0x174>
     5aa:	00 00       	nop
				_delay_ms(150);

				LCD_enuClearDisplay();
     5ac:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>
				LCD_enuDisplayString("Saved");
     5b0:	8c e0       	ldi	r24, 0x0C	; 12
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     5b8:	60 e0       	ldi	r22, 0x00	; 0
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Successfully");
     5c0:	89 e4       	ldi	r24, 0x49	; 73
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
     5c8:	2f ef       	ldi	r18, 0xFF	; 255
     5ca:	33 ed       	ldi	r19, 0xD3	; 211
     5cc:	80 e3       	ldi	r24, 0x30	; 48
     5ce:	21 50       	subi	r18, 0x01	; 1
     5d0:	30 40       	sbci	r19, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <main+0x198>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <main+0x1a2>
     5d8:	00 00       	nop
				_delay_ms(1000);
				LCD_enuClearDisplay();
     5da:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>
				
				Program_Status_Flag = IDLE_STATUS;
     5de:	87 e0       	ldi	r24, 0x07	; 7
     5e0:	89 83       	std	Y+1, r24	; 0x01
     5e2:	aa c0       	rjmp	.+340    	; 0x738 <main+0x302>
			}

			/************************************************************************************************************/
			/************************************************************************************************************/

			else if (Program_Status_Flag == LOAD_LOGIN_SYSTEM_DATABASE)
     5e4:	81 11       	cpse	r24, r1
     5e6:	a8 c0       	rjmp	.+336    	; 0x738 <main+0x302>
			{
				/****************************************Load the Login System database from the EEPROM***************************************/
				EEPROM_ui8ReadByteFromAddress(NO_OF_REGISTERED_USERS_ADDRESS,&LoginSystem_NumOfRegisteredUsers);
     5e8:	be 01       	movw	r22, r28
     5ea:	67 5c       	subi	r22, 0xC7	; 199
     5ec:	7f 4f       	sbci	r23, 0xFF	; 255
     5ee:	81 e1       	ldi	r24, 0x11	; 17
     5f0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <EEPROM_ui8ReadByteFromAddress>
     5f4:	9f ef       	ldi	r25, 0xFF	; 255
     5f6:	23 ec       	ldi	r18, 0xC3	; 195
     5f8:	39 e0       	ldi	r19, 0x09	; 9
     5fa:	91 50       	subi	r25, 0x01	; 1
     5fc:	20 40       	sbci	r18, 0x00	; 0
     5fe:	30 40       	sbci	r19, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <main+0x1c4>
     602:	00 c0       	rjmp	.+0      	; 0x604 <main+0x1ce>
     604:	00 00       	nop
				_delay_ms(200);
				

				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS,LoginSystem_strAdmin.UserName,MAX_NO_OF_LETTERS);
     606:	44 e0       	ldi	r20, 0x04	; 4
     608:	50 e0       	ldi	r21, 0x00	; 0
     60a:	be 01       	movw	r22, r28
     60c:	6e 5f       	subi	r22, 0xFE	; 254
     60e:	7f 4f       	sbci	r23, 0xFF	; 255
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     618:	1e 82       	std	Y+6, r1	; 0x06
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	92 e5       	ldi	r25, 0x52	; 82
     61e:	27 e0       	ldi	r18, 0x07	; 7
     620:	81 50       	subi	r24, 0x01	; 1
     622:	90 40       	sbci	r25, 0x00	; 0
     624:	20 40       	sbci	r18, 0x00	; 0
     626:	e1 f7       	brne	.-8      	; 0x620 <main+0x1ea>
     628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x1f4>
     62a:	00 00       	nop
				_delay_ms(150);
				EEPROM_vReadBlockFromAddress(SAVED_ADMIN_INFO_ADDRESS + MAX_NO_OF_LETTERS,LoginSystem_strAdmin.Password,MAX_NO_OF_LETTERS);
     62c:	44 e0       	ldi	r20, 0x04	; 4
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	be 01       	movw	r22, r28
     632:	69 5f       	subi	r22, 0xF9	; 249
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	85 e0       	ldi	r24, 0x05	; 5
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROM_vReadBlockFromAddress>
				LoginSystem_strAdmin.Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     63e:	1b 86       	std	Y+11, r1	; 0x0b
     640:	3f ef       	ldi	r19, 0xFF	; 255
     642:	82 e5       	ldi	r24, 0x52	; 82
     644:	97 e0       	ldi	r25, 0x07	; 7
     646:	31 50       	subi	r19, 0x01	; 1
     648:	80 40       	sbci	r24, 0x00	; 0
     64a:	90 40       	sbci	r25, 0x00	; 0
     64c:	e1 f7       	brne	.-8      	; 0x646 <main+0x210>
     64e:	00 c0       	rjmp	.+0      	; 0x650 <main+0x21a>
     650:	00 00       	nop
				_delay_ms(150);
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	8c 87       	std	Y+12, r24	; 0x0c
     656:	2f ef       	ldi	r18, 0xFF	; 255
     658:	32 e5       	ldi	r19, 0x52	; 82
     65a:	87 e0       	ldi	r24, 0x07	; 7
     65c:	21 50       	subi	r18, 0x01	; 1
     65e:	30 40       	sbci	r19, 0x00	; 0
     660:	80 40       	sbci	r24, 0x00	; 0
     662:	e1 f7       	brne	.-8      	; 0x65c <main+0x226>
     664:	00 c0       	rjmp	.+0      	; 0x666 <main+0x230>
     666:	00 00       	nop
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     668:	f1 2c       	mov	r15, r1
     66a:	60 c0       	rjmp	.+192    	; 0x72c <main+0x2f6>
				{
					Local_u16UserAddress = SAVED_USERS_INFO_ADDRESS +Local_u8Iterator*(2* MAX_NO_OF_LETTERS+1);
     66c:	8f 2d       	mov	r24, r15
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	6c 01       	movw	r12, r24
     672:	cc 0c       	add	r12, r12
     674:	dd 1c       	adc	r13, r13
     676:	cc 0c       	add	r12, r12
     678:	dd 1c       	adc	r13, r13
     67a:	cc 0c       	add	r12, r12
     67c:	dd 1c       	adc	r13, r13
     67e:	c8 0e       	add	r12, r24
     680:	d9 1e       	adc	r13, r25
     682:	36 01       	movw	r6, r12
     684:	22 e1       	ldi	r18, 0x12	; 18
     686:	62 0e       	add	r6, r18
     688:	71 1c       	adc	r7, r1
					EEPROM_vReadBlockFromAddress(Local_u16UserAddress,&LoginSystem_AstrUsers[Local_u8Iterator].UserName,MAX_NO_OF_LETTERS);
     68a:	2b e0       	ldi	r18, 0x0B	; 11
     68c:	28 9f       	mul	r18, r24
     68e:	80 01       	movw	r16, r0
     690:	29 9f       	mul	r18, r25
     692:	10 0d       	add	r17, r0
     694:	11 24       	eor	r1, r1
     696:	6d e0       	ldi	r22, 0x0D	; 13
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	6c 0f       	add	r22, r28
     69c:	7d 1f       	adc	r23, r29
     69e:	60 0f       	add	r22, r16
     6a0:	71 1f       	adc	r23, r17
     6a2:	44 e0       	ldi	r20, 0x04	; 4
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	c3 01       	movw	r24, r6
     6a8:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROM_vReadBlockFromAddress>
     6ac:	3f ef       	ldi	r19, 0xFF	; 255
     6ae:	82 e5       	ldi	r24, 0x52	; 82
     6b0:	97 e0       	ldi	r25, 0x07	; 7
     6b2:	31 50       	subi	r19, 0x01	; 1
     6b4:	80 40       	sbci	r24, 0x00	; 0
     6b6:	90 40       	sbci	r25, 0x00	; 0
     6b8:	e1 f7       	brne	.-8      	; 0x6b2 <main+0x27c>
     6ba:	00 c0       	rjmp	.+0      	; 0x6bc <main+0x286>
     6bc:	00 00       	nop
					_delay_ms(150);

					EEPROM_vReadBlockFromAddress(Local_u16UserAddress + MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].Password,MAX_NO_OF_LETTERS);
     6be:	b8 01       	movw	r22, r16
     6c0:	6b 5f       	subi	r22, 0xFB	; 251
     6c2:	7f 4f       	sbci	r23, 0xFF	; 255
     6c4:	2d e0       	ldi	r18, 0x0D	; 13
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	2c 0f       	add	r18, r28
     6ca:	3d 1f       	adc	r19, r29
     6cc:	62 0f       	add	r22, r18
     6ce:	73 1f       	adc	r23, r19
     6d0:	44 e0       	ldi	r20, 0x04	; 4
     6d2:	50 e0       	ldi	r21, 0x00	; 0
     6d4:	c6 01       	movw	r24, r12
     6d6:	46 96       	adiw	r24, 0x16	; 22
     6d8:	0e 94 99 06 	call	0xd32	; 0xd32 <EEPROM_vReadBlockFromAddress>
     6dc:	3f ef       	ldi	r19, 0xFF	; 255
     6de:	82 e5       	ldi	r24, 0x52	; 82
     6e0:	97 e0       	ldi	r25, 0x07	; 7
     6e2:	31 50       	subi	r19, 0x01	; 1
     6e4:	80 40       	sbci	r24, 0x00	; 0
     6e6:	90 40       	sbci	r25, 0x00	; 0
     6e8:	e1 f7       	brne	.-8      	; 0x6e2 <main+0x2ac>
     6ea:	00 c0       	rjmp	.+0      	; 0x6ec <main+0x2b6>
     6ec:	00 00       	nop
					_delay_ms(150);
					EEPROM_ui8ReadByteFromAddress(Local_u16UserAddress + 2*MAX_NO_OF_LETTERS,&LoginSystem_AstrUsers[Local_u8Iterator].User_Priority);
     6ee:	b8 01       	movw	r22, r16
     6f0:	66 5f       	subi	r22, 0xF6	; 246
     6f2:	7f 4f       	sbci	r23, 0xFF	; 255
     6f4:	2d e0       	ldi	r18, 0x0D	; 13
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	2c 0f       	add	r18, r28
     6fa:	3d 1f       	adc	r19, r29
     6fc:	62 0f       	add	r22, r18
     6fe:	73 1f       	adc	r23, r19
     700:	88 e0       	ldi	r24, 0x08	; 8
     702:	86 0d       	add	r24, r6
     704:	0e 94 8e 06 	call	0xd1c	; 0xd1c <EEPROM_ui8ReadByteFromAddress>
     708:	3f ef       	ldi	r19, 0xFF	; 255
     70a:	82 e5       	ldi	r24, 0x52	; 82
     70c:	97 e0       	ldi	r25, 0x07	; 7
     70e:	31 50       	subi	r19, 0x01	; 1
     710:	80 40       	sbci	r24, 0x00	; 0
     712:	90 40       	sbci	r25, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <main+0x2d8>
     716:	00 c0       	rjmp	.+0      	; 0x718 <main+0x2e2>
     718:	00 00       	nop
					_delay_ms(150);
					LoginSystem_AstrUsers[Local_u8Iterator].UserName[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     71a:	e1 e0       	ldi	r30, 0x01	; 1
     71c:	f0 e0       	ldi	r31, 0x00	; 0
     71e:	ec 0f       	add	r30, r28
     720:	fd 1f       	adc	r31, r29
     722:	e0 0f       	add	r30, r16
     724:	f1 1f       	adc	r31, r17
     726:	10 8a       	std	Z+16, r1	; 0x10
					LoginSystem_AstrUsers[Local_u8Iterator].Password[MAX_NO_OF_LETTERS] = NULL_CHARACTER;
     728:	15 8a       	std	Z+21, r1	; 0x15
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     72a:	f3 94       	inc	r15
     72c:	89 ad       	ldd	r24, Y+57	; 0x39
     72e:	f8 16       	cp	r15, r24
     730:	08 f4       	brcc	.+2      	; 0x734 <main+0x2fe>
     732:	9c cf       	rjmp	.-200    	; 0x66c <main+0x236>
				}
				
				


				Program_Status_Flag = IDLE_STATUS;
     734:	87 e0       	ldi	r24, 0x07	; 7
     736:	89 83       	std	Y+1, r24	; 0x01
				
				LoginSystem_strAdmin.User_Priority=ADMIN_PRIORITY;
				_delay_ms(150);

				u16 Local_u16UserAddress;
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     738:	0f 2e       	mov	r0, r31
     73a:	f3 e0       	ldi	r31, 0x03	; 3
     73c:	af 2e       	mov	r10, r31
     73e:	f0 2d       	mov	r31, r0
				Program_Status_Flag = IDLE_STATUS;
			}
		
	while (1)
	{
		UART_enuSendString("PRESS ENTER TO START\r\n");	
     740:	82 e1       	ldi	r24, 0x12	; 18
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>

/************************************************************************************************************/
/************************************************************************************************************/


		while (Program_Status_Flag == IDLE_STATUS)
     748:	16 c0       	rjmp	.+44     	; 0x776 <main+0x340>
				break;
				case State_Dimmer:
				LCD_enuDisplayString("Dimmer controlled");
				break;
				default:
				LCD_enuDisplayString("All Devices");
     74a:	89 e2       	ldi	r24, 0x29	; 41
     74c:	91 e0       	ldi	r25, 0x01	; 1
     74e:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	81 e0       	ldi	r24, 0x01	; 1
     756:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Are Off");
     75a:	85 e3       	ldi	r24, 0x35	; 53
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
				
			}
			

			u8 Local_u8Data;
			UART_enuRecieveChar(Local_u8Data);
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 34 0b 	call	0x1668	; 0x1668 <UART_enuRecieveChar>
			if(UART_enuCheck_Connection())
     76a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <UART_enuCheck_Connection>
     76e:	88 23       	and	r24, r24
     770:	11 f0       	breq	.+4      	; 0x776 <main+0x340>
				{
					Program_Status_Flag = ADMIN_LOGIN_PAGE_STATUS;
     772:	82 e0       	ldi	r24, 0x02	; 2
     774:	89 83       	std	Y+1, r24	; 0x01

/************************************************************************************************************/
/************************************************************************************************************/


		while (Program_Status_Flag == IDLE_STATUS)
     776:	89 81       	ldd	r24, Y+1	; 0x01
     778:	87 30       	cpi	r24, 0x07	; 7
     77a:	39 f3       	breq	.-50     	; 0x74a <main+0x314>
     77c:	c9 c0       	rjmp	.+402    	; 0x910 <__stack+0xb1>

		while (Program_Status_Flag == ADMIN_LOGIN_PAGE_STATUS)
		{
						u8 LoginSystem_u8_AdminTrueFlag;
						u8 LoginSystem_u8_Remoted_USERTrueFlag;
						LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_Au8Username, LoginSystem_Au8Password);
     77e:	be 01       	movw	r22, r28
     780:	61 5c       	subi	r22, 0xC1	; 193
     782:	7f 4f       	sbci	r23, 0xFF	; 255
     784:	ce 01       	movw	r24, r28
     786:	ca 96       	adiw	r24, 0x3a	; 58
     788:	0e 94 2d 01 	call	0x25a	; 0x25a <LoginSystem_enuGetDataFromUserBY_UART>


						LoginSystem_u8_AdminTrueFlag = (LoginSystem_u8Strcmp(LoginSystem_Au8Username,LoginSystem_strAdmin.UserName)) && ( LoginSystem_u8Strcmp(LoginSystem_Au8Password,LoginSystem_strAdmin.Password) ) ;
     78c:	be 01       	movw	r22, r28
     78e:	6e 5f       	subi	r22, 0xFE	; 254
     790:	7f 4f       	sbci	r23, 0xFF	; 255
     792:	ce 01       	movw	r24, r28
     794:	ca 96       	adiw	r24, 0x3a	; 58
     796:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     79a:	88 23       	and	r24, r24
     79c:	59 f0       	breq	.+22     	; 0x7b4 <main+0x37e>
     79e:	be 01       	movw	r22, r28
     7a0:	69 5f       	subi	r22, 0xF9	; 249
     7a2:	7f 4f       	sbci	r23, 0xFF	; 255
     7a4:	ce 01       	movw	r24, r28
     7a6:	cf 96       	adiw	r24, 0x3f	; 63
     7a8:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     7ac:	88 23       	and	r24, r24
     7ae:	21 f0       	breq	.+8      	; 0x7b8 <main+0x382>
     7b0:	01 e0       	ldi	r16, 0x01	; 1
     7b2:	03 c0       	rjmp	.+6      	; 0x7ba <main+0x384>
     7b4:	00 e0       	ldi	r16, 0x00	; 0
     7b6:	01 c0       	rjmp	.+2      	; 0x7ba <main+0x384>
     7b8:	00 e0       	ldi	r16, 0x00	; 0

						if(LoginSystem_u8_AdminTrueFlag == TRUE)
     7ba:	01 30       	cpi	r16, 0x01	; 1
     7bc:	09 f0       	breq	.+2      	; 0x7c0 <main+0x38a>
     7be:	78 c0       	rjmp	.+240    	; 0x8b0 <__stack+0x51>
						{
							UART_enuSendString("\r\nLogged in Successfully");
     7c0:	8d e3       	ldi	r24, 0x3D	; 61
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
     7c8:	2f ef       	ldi	r18, 0xFF	; 255
     7ca:	39 e6       	ldi	r19, 0x69	; 105
     7cc:	88 e1       	ldi	r24, 0x18	; 24
     7ce:	21 50       	subi	r18, 0x01	; 1
     7d0:	30 40       	sbci	r19, 0x00	; 0
     7d2:	80 40       	sbci	r24, 0x00	; 0
     7d4:	e1 f7       	brne	.-8      	; 0x7ce <main+0x398>
     7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <main+0x3a2>
     7d8:	00 00       	nop
							_delay_ms(500);
							UART_enuSendString("\r\nWelcome Admin\r\n");
     7da:	86 e5       	ldi	r24, 0x56	; 86
     7dc:	91 e0       	ldi	r25, 0x01	; 1
     7de:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
     7e2:	9f ef       	ldi	r25, 0xFF	; 255
     7e4:	29 e6       	ldi	r18, 0x69	; 105
     7e6:	38 e1       	ldi	r19, 0x18	; 24
     7e8:	91 50       	subi	r25, 0x01	; 1
     7ea:	20 40       	sbci	r18, 0x00	; 0
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	e1 f7       	brne	.-8      	; 0x7e8 <main+0x3b2>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <main+0x3bc>
     7f2:	00 00       	nop
							_delay_ms(500);
							LoginSystem_u8TrialsLeft =3;
							Program_Status_Flag = ADMIN_MENU_STATUS;
     7f4:	84 e0       	ldi	r24, 0x04	; 4
     7f6:	89 83       	std	Y+1, r24	; 0x01
						{
							UART_enuSendString("\r\nLogged in Successfully");
							_delay_ms(500);
							UART_enuSendString("\r\nWelcome Admin\r\n");
							_delay_ms(500);
							LoginSystem_u8TrialsLeft =3;
     7f8:	0f 2e       	mov	r0, r31
     7fa:	f3 e0       	ldi	r31, 0x03	; 3
     7fc:	af 2e       	mov	r10, r31
     7fe:	f0 2d       	mov	r31, r0
     800:	5c c0       	rjmp	.+184    	; 0x8ba <__stack+0x5b>
						}
						else
						{
							for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
							{
								LoginSystem_u8_Remoted_USERTrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     802:	e1 2e       	mov	r14, r17
     804:	f1 2c       	mov	r15, r1
     806:	2b e0       	ldi	r18, 0x0B	; 11
     808:	2e 9d       	mul	r18, r14
     80a:	c0 01       	movw	r24, r0
     80c:	2f 9d       	mul	r18, r15
     80e:	90 0d       	add	r25, r0
     810:	11 24       	eor	r1, r1
     812:	be 01       	movw	r22, r28
     814:	66 5c       	subi	r22, 0xC6	; 198
     816:	7f 4f       	sbci	r23, 0xFF	; 255
     818:	2d e0       	ldi	r18, 0x0D	; 13
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	2c 0f       	add	r18, r28
     81e:	3d 1f       	adc	r19, r29
     820:	82 0f       	add	r24, r18
     822:	93 1f       	adc	r25, r19
     824:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     828:	88 23       	and	r24, r24
     82a:	b1 f0       	breq	.+44     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     82c:	2b e0       	ldi	r18, 0x0B	; 11
     82e:	2e 9d       	mul	r18, r14
     830:	c0 01       	movw	r24, r0
     832:	2f 9d       	mul	r18, r15
     834:	90 0d       	add	r25, r0
     836:	11 24       	eor	r1, r1
     838:	05 96       	adiw	r24, 0x05	; 5
     83a:	be 01       	movw	r22, r28
     83c:	61 5c       	subi	r22, 0xC1	; 193
     83e:	7f 4f       	sbci	r23, 0xFF	; 255
     840:	2d e0       	ldi	r18, 0x0D	; 13
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	2c 0f       	add	r18, r28
     846:	3d 1f       	adc	r19, r29
     848:	82 0f       	add	r24, r18
     84a:	93 1f       	adc	r25, r19
     84c:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     850:	88 23       	and	r24, r24
     852:	21 f0       	breq	.+8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	03 c0       	rjmp	.+6      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     858:	80 e0       	ldi	r24, 0x00	; 0
     85a:	01 c0       	rjmp	.+2      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     85c:	80 e0       	ldi	r24, 0x00	; 0
     85e:	b8 2e       	mov	r11, r24
								if (LoginSystem_u8_Remoted_USERTrueFlag == TRUE)
     860:	31 e0       	ldi	r19, 0x01	; 1
     862:	83 13       	cpse	r24, r19
     864:	23 c0       	rjmp	.+70     	; 0x8ac <__stack+0x4d>
								{
									if(LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER )// pro>>>>   // rem: key or not
     866:	8b e0       	ldi	r24, 0x0B	; 11
     868:	8e 9d       	mul	r24, r14
     86a:	f0 01       	movw	r30, r0
     86c:	8f 9d       	mul	r24, r15
     86e:	f0 0d       	add	r31, r0
     870:	11 24       	eor	r1, r1
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	8c 0f       	add	r24, r28
     878:	9d 1f       	adc	r25, r29
     87a:	e8 0f       	add	r30, r24
     87c:	f9 1f       	adc	r31, r25
     87e:	86 89       	ldd	r24, Z+22	; 0x16
     880:	82 30       	cpi	r24, 0x02	; 2
     882:	a1 f4       	brne	.+40     	; 0x8ac <__stack+0x4d>
									{
									UART_enuSendString("\r\nLogged in Successfully\r\n");
     884:	88 e6       	ldi	r24, 0x68	; 104
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
     88c:	9f ef       	ldi	r25, 0xFF	; 255
     88e:	29 e6       	ldi	r18, 0x69	; 105
     890:	38 e1       	ldi	r19, 0x18	; 24
     892:	91 50       	subi	r25, 0x01	; 1
     894:	20 40       	sbci	r18, 0x00	; 0
     896:	30 40       	sbci	r19, 0x00	; 0
     898:	e1 f7       	brne	.-8      	; 0x892 <__stack+0x33>
     89a:	00 c0       	rjmp	.+0      	; 0x89c <__stack+0x3d>
     89c:	00 00       	nop
									_delay_ms(500);
									LoginSystem_u8TrialsLeft =3;
									Program_Status_Flag = REMOTED_USER_MENU_STATUS;
     89e:	88 e0       	ldi	r24, 0x08	; 8
     8a0:	89 83       	std	Y+1, r24	; 0x01
								{
									if(LoginSystem_AstrUsers[Local_u8Iterator].User_Priority == REMOTED_USER )// pro>>>>   // rem: key or not
									{
									UART_enuSendString("\r\nLogged in Successfully\r\n");
									_delay_ms(500);
									LoginSystem_u8TrialsLeft =3;
     8a2:	0f 2e       	mov	r0, r31
     8a4:	f3 e0       	ldi	r31, 0x03	; 3
     8a6:	af 2e       	mov	r10, r31
     8a8:	f0 2d       	mov	r31, r0
									Program_Status_Flag = REMOTED_USER_MENU_STATUS;
									break;
     8aa:	07 c0       	rjmp	.+14     	; 0x8ba <__stack+0x5b>
							Program_Status_Flag = ADMIN_MENU_STATUS;
							
						}
						else
						{
							for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     8ac:	1f 5f       	subi	r17, 0xFF	; 255
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <__stack+0x53>
     8b0:	10 e0       	ldi	r17, 0x00	; 0
     8b2:	89 ad       	ldd	r24, Y+57	; 0x39
     8b4:	18 17       	cp	r17, r24
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <__stack+0x5b>
     8b8:	a4 cf       	rjmp	.-184    	; 0x802 <__DATA_REGION_LENGTH__+0x2>
									}
								}
							}

						}
						if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
     8ba:	01 11       	cpse	r16, r1
     8bc:	29 c0       	rjmp	.+82     	; 0x910 <__stack+0xb1>
     8be:	b1 10       	cpse	r11, r1
     8c0:	27 c0       	rjmp	.+78     	; 0x910 <__stack+0xb1>
						{
							LoginSystem_u8TrialsLeft--;
     8c2:	1f ef       	ldi	r17, 0xFF	; 255
     8c4:	1a 0d       	add	r17, r10
							UART_enuSendString("\r\nWrong Username or Password");
     8c6:	83 e8       	ldi	r24, 0x83	; 131
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
     8ce:	8f ef       	ldi	r24, 0xFF	; 255
     8d0:	95 ea       	ldi	r25, 0xA5	; 165
     8d2:	2e e0       	ldi	r18, 0x0E	; 14
     8d4:	81 50       	subi	r24, 0x01	; 1
     8d6:	90 40       	sbci	r25, 0x00	; 0
     8d8:	20 40       	sbci	r18, 0x00	; 0
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <__stack+0x75>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <__stack+0x7f>
     8de:	00 00       	nop
							_delay_ms(300);
							UART_enuSendString("\r\nRemaining Trials: ");
     8e0:	80 ea       	ldi	r24, 0xA0	; 160
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
							UART_enuSendChar('0'+LoginSystem_u8TrialsLeft);
     8e8:	8f e2       	ldi	r24, 0x2F	; 47
     8ea:	8a 0d       	add	r24, r10
     8ec:	0e 94 2f 0b 	call	0x165e	; 0x165e <UART_enuSendChar>
     8f0:	3f ef       	ldi	r19, 0xFF	; 255
     8f2:	83 ed       	ldi	r24, 0xD3	; 211
     8f4:	90 e3       	ldi	r25, 0x30	; 48
     8f6:	31 50       	subi	r19, 0x01	; 1
     8f8:	80 40       	sbci	r24, 0x00	; 0
     8fa:	90 40       	sbci	r25, 0x00	; 0
     8fc:	e1 f7       	brne	.-8      	; 0x8f6 <__stack+0x97>
     8fe:	00 c0       	rjmp	.+0      	; 0x900 <__stack+0xa1>
     900:	00 00       	nop
							_delay_ms(1000);
							if (LoginSystem_u8TrialsLeft == 0)
     902:	11 11       	cpse	r17, r1
     904:	04 c0       	rjmp	.+8      	; 0x90e <__stack+0xaf>
							{
								Program_Status_Flag = BLOCKING_STATUS;
     906:	86 e0       	ldi	r24, 0x06	; 6
     908:	89 83       	std	Y+1, r24	; 0x01
							}

						}
						if ( (LoginSystem_u8_AdminTrueFlag == FALSE)&& (LoginSystem_u8_Remoted_USERTrueFlag ==FALSE) )
						{
							LoginSystem_u8TrialsLeft--;
     90a:	a1 2e       	mov	r10, r17
     90c:	01 c0       	rjmp	.+2      	; 0x910 <__stack+0xb1>
     90e:	a1 2e       	mov	r10, r17
					Program_Status_Flag = ADMIN_LOGIN_PAGE_STATUS;
				}

		}

		while (Program_Status_Flag == ADMIN_LOGIN_PAGE_STATUS)
     910:	89 81       	ldd	r24, Y+1	; 0x01
     912:	82 30       	cpi	r24, 0x02	; 2
     914:	09 f4       	brne	.+2      	; 0x918 <__stack+0xb9>
     916:	33 cf       	rjmp	.-410    	; 0x77e <main+0x348>
     918:	29 c1       	rjmp	.+594    	; 0xb6c <__stack+0x30d>
			
	

			while(ShowToUser == MAIN_MENU)
			{
				UART_enuSendString("\r\n1-Add User");
     91a:	85 eb       	ldi	r24, 0xB5	; 181
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
				UART_enuSendString("\r\n2-Remove User");
     922:	82 ec       	ldi	r24, 0xC2	; 194
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
				UART_enuSendString("\r\n3-Room1");
     92a:	82 ed       	ldi	r24, 0xD2	; 210
     92c:	91 e0       	ldi	r25, 0x01	; 1
     92e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
				UART_enuSendString("\r\n4-Room2");
     932:	8c ed       	ldi	r24, 0xDC	; 220
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
				UART_enuSendString("\r\n5-Room3");
     93a:	86 ee       	ldi	r24, 0xE6	; 230
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
				UART_enuSendString("\r\n6-Room4");
     942:	80 ef       	ldi	r24, 0xF0	; 240
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
				UART_enuSendString("\r\n7-Room5");
     94a:	8a ef       	ldi	r24, 0xFA	; 250
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
				UART_enuSendString("\r\n8-Dimmer");
     952:	84 e0       	ldi	r24, 0x04	; 4
     954:	92 e0       	ldi	r25, 0x02	; 2
     956:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
				UART_enuSendString("\r\n9-Door\r\n");
     95a:	8f e0       	ldi	r24, 0x0F	; 15
     95c:	92 e0       	ldi	r25, 0x02	; 2
     95e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
			//	UART_enuSendString("\r\n10-Air Conditioner\r\n");
				
				UART_enuRecieveChar(&UART_CHOICE);
     962:	ce 01       	movw	r24, r28
     964:	8b 5b       	subi	r24, 0xBB	; 187
     966:	9f 4f       	sbci	r25, 0xFF	; 255
     968:	0e 94 34 0b 	call	0x1668	; 0x1668 <UART_enuRecieveChar>
				switch(UART_CHOICE)
     96c:	26 96       	adiw	r28, 0x06	; 6
     96e:	ef ad       	ldd	r30, Y+63	; 0x3f
     970:	26 97       	sbiw	r28, 0x06	; 6
     972:	8e 2f       	mov	r24, r30
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	fc 01       	movw	r30, r24
     978:	f1 97       	sbiw	r30, 0x31	; 49
     97a:	e9 30       	cpi	r30, 0x09	; 9
     97c:	f1 05       	cpc	r31, r1
     97e:	18 f5       	brcc	.+70     	; 0x9c6 <__stack+0x167>
     980:	e6 5d       	subi	r30, 0xD6	; 214
     982:	ff 4f       	sbci	r31, 0xFF	; 255
     984:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <__tablejump2__>
				{
					case '1':
					ShowToUser = ADD_USER_COMMAND;
     988:	16 e0       	ldi	r17, 0x06	; 6
     98a:	2e c0       	rjmp	.+92     	; 0x9e8 <__stack+0x189>
					break;
					case '2':
					ShowToUser = REMOVE_USER_COMMAND;
					break;
					case '3':
					SPI_ui8TransmitRecive(ROOM1_LED_TOGGLE);
     98c:	81 e0       	ldi	r24, 0x01	; 1
     98e:	0e 94 20 0b 	call	0x1640	; 0x1640 <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
     992:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     994:	29 c0       	rjmp	.+82     	; 0x9e8 <__stack+0x189>
					case '4':
					SPI_ui8TransmitRecive(ROOM2_LED_TOGGLE);
     996:	82 e0       	ldi	r24, 0x02	; 2
     998:	0e 94 20 0b 	call	0x1640	; 0x1640 <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;//Set the next menu to be shown to room1 menu
     99c:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     99e:	24 c0       	rjmp	.+72     	; 0x9e8 <__stack+0x189>
					case '5':
					SPI_ui8TransmitRecive(ROOM3_LED_TOGGLE);
     9a0:	83 e0       	ldi	r24, 0x03	; 3
     9a2:	0e 94 20 0b 	call	0x1640	; 0x1640 <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     9a6:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     9a8:	1f c0       	rjmp	.+62     	; 0x9e8 <__stack+0x189>
					case '6':
					SPI_ui8TransmitRecive(ROOM4_LED_TOGGLE);
     9aa:	84 e0       	ldi	r24, 0x04	; 4
     9ac:	0e 94 20 0b 	call	0x1640	; 0x1640 <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     9b0:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     9b2:	1a c0       	rjmp	.+52     	; 0x9e8 <__stack+0x189>
					case '7':
					SPI_ui8TransmitRecive(ROOM5_LED_TOGGLE);
     9b4:	85 e0       	ldi	r24, 0x05	; 5
     9b6:	0e 94 20 0b 	call	0x1640	; 0x1640 <SPI_ui8TransmitRecive>
					ShowToUser = LOG_OUT_CHOICE;
     9ba:	1b e0       	ldi	r17, 0x0B	; 11
					break;
     9bc:	15 c0       	rjmp	.+42     	; 0x9e8 <__stack+0x189>
					case '8':
					ShowToUser = DIMMER_MENU;
     9be:	18 e0       	ldi	r17, 0x08	; 8
					break;
     9c0:	13 c0       	rjmp	.+38     	; 0x9e8 <__stack+0x189>
					case '9':
					ShowToUser = DOOR_MENU;
     9c2:	1a e0       	ldi	r17, 0x0A	; 10
					break;
     9c4:	11 c0       	rjmp	.+34     	; 0x9e8 <__stack+0x189>
					/*case '10':
					ShowToUser = AIR_COND_MENU;
					break;
					*/
					default:
					UART_enuSendString("\r\nInvalid Choice\r\n");
     9c6:	8a e1       	ldi	r24, 0x1A	; 26
     9c8:	92 e0       	ldi	r25, 0x02	; 2
     9ca:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
     9ce:	2f ef       	ldi	r18, 0xFF	; 255
     9d0:	33 ed       	ldi	r19, 0xD3	; 211
     9d2:	80 e3       	ldi	r24, 0x30	; 48
     9d4:	21 50       	subi	r18, 0x01	; 1
     9d6:	30 40       	sbci	r19, 0x00	; 0
     9d8:	80 40       	sbci	r24, 0x00	; 0
     9da:	e1 f7       	brne	.-8      	; 0x9d4 <__stack+0x175>
     9dc:	00 c0       	rjmp	.+0      	; 0x9de <__stack+0x17f>
     9de:	00 00       	nop
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
					break;
     9e0:	03 c0       	rjmp	.+6      	; 0x9e8 <__stack+0x189>
				{
					case '1':
					ShowToUser = ADD_USER_COMMAND;
					break;
					case '2':
					ShowToUser = REMOVE_USER_COMMAND;
     9e2:	17 e0       	ldi	r17, 0x07	; 7
     9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <__stack+0x189>
     9e6:	10 e0       	ldi	r17, 0x00	; 0
		{
			u8 ShowToUser = MAIN_MENU;
			
	

			while(ShowToUser == MAIN_MENU)
     9e8:	11 23       	and	r17, r17
     9ea:	09 f4       	brne	.+2      	; 0x9ee <__stack+0x18f>
     9ec:	96 cf       	rjmp	.-212    	; 0x91a <__stack+0xbb>
					_delay_ms(1000);
					ShowToUser = MAIN_MENU;
					break;
				}
			}
			switch (ShowToUser)
     9ee:	16 30       	cpi	r17, 0x06	; 6
     9f0:	21 f0       	breq	.+8      	; 0x9fa <__stack+0x19b>
     9f2:	17 30       	cpi	r17, 0x07	; 7
     9f4:	09 f4       	brne	.+2      	; 0x9f8 <__stack+0x199>
     9f6:	9f c0       	rjmp	.+318    	; 0xb36 <__stack+0x2d7>
     9f8:	b9 c0       	rjmp	.+370    	; 0xb6c <__stack+0x30d>
			{
				case ADD_USER_COMMAND:
				if (LoginSystem_NumOfRegisteredUsers <MAX_NO_OF_USERS)
     9fa:	89 ad       	ldd	r24, Y+57	; 0x39
     9fc:	84 30       	cpi	r24, 0x04	; 4
     9fe:	08 f0       	brcs	.+2      	; 0xa02 <__stack+0x1a3>
     a00:	84 c0       	rjmp	.+264    	; 0xb0a <__stack+0x2ab>
				{
					LoginSystem_enuGetDataFromUserBY_UART(LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].UserName, LoginSystem_AstrUsers[LoginSystem_NumOfRegisteredUsers].Password);
     a02:	2b e0       	ldi	r18, 0x0B	; 11
     a04:	82 9f       	mul	r24, r18
     a06:	c0 01       	movw	r24, r0
     a08:	11 24       	eor	r1, r1
     a0a:	bc 01       	movw	r22, r24
     a0c:	6b 5f       	subi	r22, 0xFB	; 251
     a0e:	7f 4f       	sbci	r23, 0xFF	; 255
     a10:	2d e0       	ldi	r18, 0x0D	; 13
     a12:	30 e0       	ldi	r19, 0x00	; 0
     a14:	2c 0f       	add	r18, r28
     a16:	3d 1f       	adc	r19, r29
     a18:	62 0f       	add	r22, r18
     a1a:	73 1f       	adc	r23, r19
     a1c:	82 0f       	add	r24, r18
     a1e:	93 1f       	adc	r25, r19
     a20:	0e 94 2d 01 	call	0x25a	; 0x25a <LoginSystem_enuGetDataFromUserBY_UART>
					UART_enuSendString("\r\n1-Remoted");
     a24:	8d e2       	ldi	r24, 0x2D	; 45
     a26:	92 e0       	ldi	r25, 0x02	; 2
     a28:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
					UART_enuSendString("\r\n2-Promoted");
     a2c:	89 e3       	ldi	r24, 0x39	; 57
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
					UART_enuSendString("\r\n3-Nonremoted");
     a34:	86 e4       	ldi	r24, 0x46	; 70
     a36:	92 e0       	ldi	r25, 0x02	; 2
     a38:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
					UART_enuSendString("\r\n\r\nPriority Arrangment: Promoted > Nonremoted (LCD+Keypad) > Remoted\r\n");
     a3c:	85 e5       	ldi	r24, 0x55	; 85
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
					UART_enuRecieveChar(&UART_CHOICE);
     a44:	ce 01       	movw	r24, r28
     a46:	8b 5b       	subi	r24, 0xBB	; 187
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	0e 94 34 0b 	call	0x1668	; 0x1668 <UART_enuRecieveChar>
					/////////////////////////////////////////////////////////////fel a5er
					if (UART_CHOICE == '1')
     a4e:	26 96       	adiw	r28, 0x06	; 6
     a50:	8f ad       	ldd	r24, Y+63	; 0x3f
     a52:	26 97       	sbiw	r28, 0x06	; 6
     a54:	81 33       	cpi	r24, 0x31	; 49
     a56:	69 f4       	brne	.+26     	; 0xa72 <__stack+0x213>
					LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = REMOTED_USER;
     a58:	89 ad       	ldd	r24, Y+57	; 0x39
     a5a:	e1 e0       	ldi	r30, 0x01	; 1
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	ec 0f       	add	r30, r28
     a60:	fd 1f       	adc	r31, r29
     a62:	3b e0       	ldi	r19, 0x0B	; 11
     a64:	83 9f       	mul	r24, r19
     a66:	e0 0d       	add	r30, r0
     a68:	f1 1d       	adc	r31, r1
     a6a:	11 24       	eor	r1, r1
     a6c:	82 e0       	ldi	r24, 0x02	; 2
     a6e:	86 8b       	std	Z+22, r24	; 0x16
     a70:	2a c0       	rjmp	.+84     	; 0xac6 <__stack+0x267>
					else if (UART_CHOICE == '2')
     a72:	82 33       	cpi	r24, 0x32	; 50
     a74:	69 f4       	brne	.+26     	; 0xa90 <__stack+0x231>
					LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = PROMOTED_USER;
     a76:	89 ad       	ldd	r24, Y+57	; 0x39
     a78:	e1 e0       	ldi	r30, 0x01	; 1
     a7a:	f0 e0       	ldi	r31, 0x00	; 0
     a7c:	ec 0f       	add	r30, r28
     a7e:	fd 1f       	adc	r31, r29
     a80:	9b e0       	ldi	r25, 0x0B	; 11
     a82:	89 9f       	mul	r24, r25
     a84:	e0 0d       	add	r30, r0
     a86:	f1 1d       	adc	r31, r1
     a88:	11 24       	eor	r1, r1
     a8a:	83 e0       	ldi	r24, 0x03	; 3
     a8c:	86 8b       	std	Z+22, r24	; 0x16
     a8e:	1b c0       	rjmp	.+54     	; 0xac6 <__stack+0x267>
					else if (UART_CHOICE == '3')
     a90:	83 33       	cpi	r24, 0x33	; 51
     a92:	61 f4       	brne	.+24     	; 0xaac <__stack+0x24d>
					LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers].User_Priority = NORMAL_USER;
     a94:	89 ad       	ldd	r24, Y+57	; 0x39
     a96:	e1 e0       	ldi	r30, 0x01	; 1
     a98:	f0 e0       	ldi	r31, 0x00	; 0
     a9a:	ec 0f       	add	r30, r28
     a9c:	fd 1f       	adc	r31, r29
     a9e:	2b e0       	ldi	r18, 0x0B	; 11
     aa0:	82 9f       	mul	r24, r18
     aa2:	e0 0d       	add	r30, r0
     aa4:	f1 1d       	adc	r31, r1
     aa6:	11 24       	eor	r1, r1
     aa8:	16 8a       	std	Z+22, r1	; 0x16
     aaa:	0d c0       	rjmp	.+26     	; 0xac6 <__stack+0x267>
					else{
						UART_enuSendString("\r\nInvalid Choice\r\n");/////////////////////////////////////////////////////////////fel a5er
     aac:	8a e1       	ldi	r24, 0x1A	; 26
     aae:	92 e0       	ldi	r25, 0x02	; 2
     ab0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
     ab4:	3f ef       	ldi	r19, 0xFF	; 255
     ab6:	83 ed       	ldi	r24, 0xD3	; 211
     ab8:	90 e3       	ldi	r25, 0x30	; 48
     aba:	31 50       	subi	r19, 0x01	; 1
     abc:	80 40       	sbci	r24, 0x00	; 0
     abe:	90 40       	sbci	r25, 0x00	; 0
     ac0:	e1 f7       	brne	.-8      	; 0xaba <__stack+0x25b>
     ac2:	00 c0       	rjmp	.+0      	; 0xac4 <__stack+0x265>
     ac4:	00 00       	nop
					_delay_ms(1000);}
					LoginSystem_SaveNewUser(LoginSystem_AstrUsers [LoginSystem_NumOfRegisteredUsers],&LoginSystem_NumOfRegisteredUsers);
     ac6:	89 ad       	ldd	r24, Y+57	; 0x39
     ac8:	a1 e0       	ldi	r26, 0x01	; 1
     aca:	b0 e0       	ldi	r27, 0x00	; 0
     acc:	ac 0f       	add	r26, r28
     ace:	bd 1f       	adc	r27, r29
     ad0:	2b e0       	ldi	r18, 0x0B	; 11
     ad2:	82 9f       	mul	r24, r18
     ad4:	a0 0d       	add	r26, r0
     ad6:	b1 1d       	adc	r27, r1
     ad8:	11 24       	eor	r1, r1
     ada:	fd 01       	movw	r30, r26
     adc:	3c 96       	adiw	r30, 0x0c	; 12
     ade:	ce 01       	movw	r24, r28
     ae0:	c9 96       	adiw	r24, 0x39	; 57
     ae2:	6c 01       	movw	r12, r24
     ae4:	1c 96       	adiw	r26, 0x0c	; 12
     ae6:	ec 90       	ld	r14, X
     ae8:	f1 80       	ldd	r15, Z+1	; 0x01
     aea:	02 81       	ldd	r16, Z+2	; 0x02
     aec:	13 81       	ldd	r17, Z+3	; 0x03
     aee:	24 81       	ldd	r18, Z+4	; 0x04
     af0:	35 81       	ldd	r19, Z+5	; 0x05
     af2:	46 81       	ldd	r20, Z+6	; 0x06
     af4:	57 81       	ldd	r21, Z+7	; 0x07
     af6:	60 85       	ldd	r22, Z+8	; 0x08
     af8:	71 85       	ldd	r23, Z+9	; 0x09
     afa:	82 85       	ldd	r24, Z+10	; 0x0a
     afc:	0e 94 52 00 	call	0xa4	; 0xa4 <LoginSystem_SaveNewUser>
					UART_enuSendString("\r\nRegistered Successfully\r\n");
     b00:	8d e9       	ldi	r24, 0x9D	; 157
     b02:	92 e0       	ldi	r25, 0x02	; 2
     b04:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
     b08:	31 c0       	rjmp	.+98     	; 0xb6c <__stack+0x30d>
				}
				else
				{
					UART_enuSendString("\r\nReached The Max Number of Stored Users");
     b0a:	89 eb       	ldi	r24, 0xB9	; 185
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
					UART_enuSendString("\r\nCouldn't Store A New User");
     b12:	82 ee       	ldi	r24, 0xE2	; 226
     b14:	92 e0       	ldi	r25, 0x02	; 2
     b16:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
					UART_enuSendString("\r\nReturning to Main Menu\r\n");
     b1a:	8c e2       	ldi	r24, 0x2C	; 44
     b1c:	93 e0       	ldi	r25, 0x03	; 3
     b1e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
     b22:	9f ef       	ldi	r25, 0xFF	; 255
     b24:	2d e2       	ldi	r18, 0x2D	; 45
     b26:	32 e2       	ldi	r19, 0x22	; 34
     b28:	91 50       	subi	r25, 0x01	; 1
     b2a:	20 40       	sbci	r18, 0x00	; 0
     b2c:	30 40       	sbci	r19, 0x00	; 0
     b2e:	e1 f7       	brne	.-8      	; 0xb28 <__stack+0x2c9>
     b30:	00 c0       	rjmp	.+0      	; 0xb32 <__stack+0x2d3>
     b32:	00 00       	nop
     b34:	1b c0       	rjmp	.+54     	; 0xb6c <__stack+0x30d>
					_delay_ms(700);
				}
				ShowToUser=MAIN_MENU;
				break;
				case REMOVE_USER_COMMAND:
				if (LoginSystem_RemoveUser(LoginSystem_AstrUsers,&LoginSystem_NumOfRegisteredUsers) == TRUE)
     b36:	be 01       	movw	r22, r28
     b38:	67 5c       	subi	r22, 0xC7	; 199
     b3a:	7f 4f       	sbci	r23, 0xFF	; 255
     b3c:	ce 01       	movw	r24, r28
     b3e:	0d 96       	adiw	r24, 0x0d	; 13
     b40:	0e 94 68 01 	call	0x2d0	; 0x2d0 <LoginSystem_RemoveUser>
     b44:	81 30       	cpi	r24, 0x01	; 1
     b46:	29 f4       	brne	.+10     	; 0xb52 <__stack+0x2f3>
				UART_enuSendString("\r\nRemoved Successfully\r\n");
     b48:	8e ef       	ldi	r24, 0xFE	; 254
     b4a:	92 e0       	ldi	r25, 0x02	; 2
     b4c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
     b50:	04 c0       	rjmp	.+8      	; 0xb5a <__stack+0x2fb>
				else	{UART_enuSendString("\r\nUsername not Found \r\nReturning to Main Menu\r\n");}
     b52:	87 e1       	ldi	r24, 0x17	; 23
     b54:	93 e0       	ldi	r25, 0x03	; 3
     b56:	0e 94 3b 0b 	call	0x1676	; 0x1676 <UART_enuSendString>
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	9d e2       	ldi	r25, 0x2D	; 45
     b5e:	22 e2       	ldi	r18, 0x22	; 34
     b60:	81 50       	subi	r24, 0x01	; 1
     b62:	90 40       	sbci	r25, 0x00	; 0
     b64:	20 40       	sbci	r18, 0x00	; 0
     b66:	e1 f7       	brne	.-8      	; 0xb60 <__stack+0x301>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <__stack+0x30b>
     b6a:	00 00       	nop
				_delay_ms(200);
			}

		}
		*/
		while (Program_Status_Flag == ADMIN_MENU_STATUS)
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	84 30       	cpi	r24, 0x04	; 4
     b70:	09 f4       	brne	.+2      	; 0xb74 <__stack+0x315>
     b72:	39 cf       	rjmp	.-398    	; 0x9e6 <__stack+0x187>
				
			
		}
		
					
		if (Program_Status_Flag == USER_LOGIN_PAGE_STATUS)///offline user should have interrupt
     b74:	83 30       	cpi	r24, 0x03	; 3
     b76:	09 f0       	breq	.+2      	; 0xb7a <__stack+0x31b>
     b78:	8b c0       	rjmp	.+278    	; 0xc90 <__stack+0x431>
			{

				u8 LoginSystem_u8TrueFlag;
				u8 LoginSystem_u8TrialsLeft =3;

				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
     b7a:	be 01       	movw	r22, r28
     b7c:	61 5c       	subi	r22, 0xC1	; 193
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	ce 01       	movw	r24, r28
     b82:	ca 96       	adiw	r24, 0x3a	; 58
     b84:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <LoginSystem_enuGetDataFromUserByKeypad>
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     b88:	10 e0       	ldi	r17, 0x00	; 0
     b8a:	33 c0       	rjmp	.+102    	; 0xbf2 <__stack+0x393>
				{
					LoginSystem_u8TrueFlag = LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].UserName,LoginSystem_Au8Username) && LoginSystem_u8Strcmp (LoginSystem_AstrUsers[Local_u8Iterator].Password,LoginSystem_Au8Password);
     b8c:	e1 2e       	mov	r14, r17
     b8e:	f1 2c       	mov	r15, r1
     b90:	2b e0       	ldi	r18, 0x0B	; 11
     b92:	2e 9d       	mul	r18, r14
     b94:	c0 01       	movw	r24, r0
     b96:	2f 9d       	mul	r18, r15
     b98:	90 0d       	add	r25, r0
     b9a:	11 24       	eor	r1, r1
     b9c:	be 01       	movw	r22, r28
     b9e:	66 5c       	subi	r22, 0xC6	; 198
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	2d e0       	ldi	r18, 0x0D	; 13
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	2c 0f       	add	r18, r28
     ba8:	3d 1f       	adc	r19, r29
     baa:	82 0f       	add	r24, r18
     bac:	93 1f       	adc	r25, r19
     bae:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     bb2:	88 23       	and	r24, r24
     bb4:	b1 f0       	breq	.+44     	; 0xbe2 <__stack+0x383>
     bb6:	2b e0       	ldi	r18, 0x0B	; 11
     bb8:	2e 9d       	mul	r18, r14
     bba:	c0 01       	movw	r24, r0
     bbc:	2f 9d       	mul	r18, r15
     bbe:	90 0d       	add	r25, r0
     bc0:	11 24       	eor	r1, r1
     bc2:	05 96       	adiw	r24, 0x05	; 5
     bc4:	be 01       	movw	r22, r28
     bc6:	61 5c       	subi	r22, 0xC1	; 193
     bc8:	7f 4f       	sbci	r23, 0xFF	; 255
     bca:	2d e0       	ldi	r18, 0x0D	; 13
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	2c 0f       	add	r18, r28
     bd0:	3d 1f       	adc	r19, r29
     bd2:	82 0f       	add	r24, r18
     bd4:	93 1f       	adc	r25, r19
     bd6:	0e 94 4a 01 	call	0x294	; 0x294 <LoginSystem_u8Strcmp>
     bda:	88 23       	and	r24, r24
     bdc:	21 f0       	breq	.+8      	; 0xbe6 <__stack+0x387>
     bde:	81 e0       	ldi	r24, 0x01	; 1
     be0:	03 c0       	rjmp	.+6      	; 0xbe8 <__stack+0x389>
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <__stack+0x389>
     be6:	80 e0       	ldi	r24, 0x00	; 0
     be8:	98 2e       	mov	r9, r24
					if (LoginSystem_u8TrueFlag == TRUE)
     bea:	31 e0       	ldi	r19, 0x01	; 1
     bec:	83 17       	cp	r24, r19
     bee:	21 f0       	breq	.+8      	; 0xbf8 <__stack+0x399>
				u8 LoginSystem_u8TrueFlag;
				u8 LoginSystem_u8TrialsLeft =3;

				LoginSystem_enuGetDataFromUserByKeypad(LoginSystem_Au8Username, LoginSystem_Au8Password);
				/*********************Search The Users Array***********************/
				for (u8 Local_u8Iterator=0; Local_u8Iterator < LoginSystem_NumOfRegisteredUsers; Local_u8Iterator++)
     bf0:	1f 5f       	subi	r17, 0xFF	; 255
     bf2:	89 ad       	ldd	r24, Y+57	; 0x39
     bf4:	18 17       	cp	r17, r24
     bf6:	50 f2       	brcs	.-108    	; 0xb8c <__stack+0x32d>
					{
						break;
					}
				}

				if (LoginSystem_u8TrueFlag == FALSE)
     bf8:	91 10       	cpse	r9, r1
     bfa:	31 c0       	rjmp	.+98     	; 0xc5e <__stack+0x3ff>
				{
					LoginSystem_u8TrialsLeft--;
					LCD_enuClearDisplay();
     bfc:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Wrong Username");
     c00:	87 e4       	ldi	r24, 0x47	; 71
     c02:	93 e0       	ldi	r25, 0x03	; 3
     c04:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     c08:	60 e0       	ldi	r22, 0x00	; 0
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("or Password");
     c10:	84 e9       	ldi	r24, 0x94	; 148
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	92 e5       	ldi	r25, 0x52	; 82
     c1c:	27 e0       	ldi	r18, 0x07	; 7
     c1e:	81 50       	subi	r24, 0x01	; 1
     c20:	90 40       	sbci	r25, 0x00	; 0
     c22:	20 40       	sbci	r18, 0x00	; 0
     c24:	e1 f7       	brne	.-8      	; 0xc1e <__stack+0x3bf>
     c26:	00 c0       	rjmp	.+0      	; 0xc28 <__stack+0x3c9>
     c28:	00 00       	nop
					_delay_ms(150);
					LCD_enuClearDisplay();
     c2a:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Remaining Trials: ");
     c2e:	82 ea       	ldi	r24, 0xA2	; 162
     c30:	91 e0       	ldi	r25, 0x01	; 1
     c32:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
					LCD_enuDisplayUnsignedInteger(LoginSystem_u8TrialsLeft);
     c3e:	62 e0       	ldi	r22, 0x02	; 2
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 21 09 	call	0x1242	; 0x1242 <LCD_enuDisplayUnsignedInteger>
     c4a:	3f ef       	ldi	r19, 0xFF	; 255
     c4c:	82 e5       	ldi	r24, 0x52	; 82
     c4e:	97 e0       	ldi	r25, 0x07	; 7
     c50:	31 50       	subi	r19, 0x01	; 1
     c52:	80 40       	sbci	r24, 0x00	; 0
     c54:	90 40       	sbci	r25, 0x00	; 0
     c56:	e1 f7       	brne	.-8      	; 0xc50 <__stack+0x3f1>
     c58:	00 c0       	rjmp	.+0      	; 0xc5a <__stack+0x3fb>
     c5a:	00 00       	nop
     c5c:	19 c0       	rjmp	.+50     	; 0xc90 <__stack+0x431>
						Program_Status_Flag = BLOCKING_STATUS;
					}
				}
				else
				{
					LCD_enuClearDisplay();
     c5e:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>
					LCD_enuDisplayString("Logged in");
     c62:	86 e5       	ldi	r24, 0x56	; 86
     c64:	93 e0       	ldi	r25, 0x03	; 3
     c66:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     c6a:	60 e0       	ldi	r22, 0x00	; 0
     c6c:	81 e0       	ldi	r24, 0x01	; 1
     c6e:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Successfully");
     c72:	89 e4       	ldi	r24, 0x49	; 73
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
     c7a:	2f ef       	ldi	r18, 0xFF	; 255
     c7c:	3d e2       	ldi	r19, 0x2D	; 45
     c7e:	82 e2       	ldi	r24, 0x22	; 34
     c80:	21 50       	subi	r18, 0x01	; 1
     c82:	30 40       	sbci	r19, 0x00	; 0
     c84:	80 40       	sbci	r24, 0x00	; 0
     c86:	e1 f7       	brne	.-8      	; 0xc80 <__stack+0x421>
     c88:	00 c0       	rjmp	.+0      	; 0xc8a <__stack+0x42b>
     c8a:	00 00       	nop
					_delay_ms(700);
					Program_Status_Flag = USER_MENU_STATUS;
     c8c:	85 e0       	ldi	r24, 0x05	; 5
     c8e:	89 83       	std	Y+1, r24	; 0x01


/************************************************************************************************************/
/************************************************************************************************************/

		if (Program_Status_Flag == USER_MENU_STATUS)//**offline user menu
     c90:	89 81       	ldd	r24, Y+1	; 0x01
     c92:	85 30       	cpi	r24, 0x05	; 5
     c94:	09 f0       	breq	.+2      	; 0xc98 <__stack+0x439>
     c96:	54 cd       	rjmp	.-1368   	; 0x740 <main+0x30a>
		{
							LCD_enuClearDisplay();
     c98:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>
							LCD_enuDisplayString("Welcome User");
     c9c:	80 e6       	ldi	r24, 0x60	; 96
     c9e:	93 e0       	ldi	r25, 0x03	; 3
     ca0:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     ca4:	60 e0       	ldi	r22, 0x00	; 0
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
							LCD_enuDisplayString(LoginSystem_strAdmin.UserName);
     cac:	ce 01       	movw	r24, r28
     cae:	02 96       	adiw	r24, 0x02	; 2
     cb0:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
     cb4:	9f ef       	ldi	r25, 0xFF	; 255
     cb6:	29 e6       	ldi	r18, 0x69	; 105
     cb8:	38 e1       	ldi	r19, 0x18	; 24
     cba:	91 50       	subi	r25, 0x01	; 1
     cbc:	20 40       	sbci	r18, 0x00	; 0
     cbe:	30 40       	sbci	r19, 0x00	; 0
     cc0:	e1 f7       	brne	.-8      	; 0xcba <__stack+0x45b>
     cc2:	00 c0       	rjmp	.+0      	; 0xcc4 <__stack+0x465>
     cc4:	00 00       	nop
							_delay_ms(500);
							LCD_enuClearDisplay();
     cc6:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>
							LCD_enuDisplayString("1-Lights 2-Dimmer");
     cca:	8d e6       	ldi	r24, 0x6D	; 109
     ccc:	93 e0       	ldi	r25, 0x03	; 3
     cce:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
							LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	0e 94 b9 09 	call	0x1372	; 0x1372 <LCD_enuSetCursorPosition>
							LCD_enuDisplayString("3-Air Cond");
     cda:	8f e7       	ldi	r24, 0x7F	; 127
     cdc:	93 e0       	ldi	r25, 0x03	; 3
     cde:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
							Keypad_enuGetPressedKey(&Keypad_Pressed_Key);
     ce2:	ce 01       	movw	r24, r28
     ce4:	8c 5b       	subi	r24, 0xBC	; 188
     ce6:	9f 4f       	sbci	r25, 0xFF	; 255
     ce8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <Keypad_enuGetPressedKey>
							switch (Keypad_Pressed_Key)
     cec:	25 96       	adiw	r28, 0x05	; 5
     cee:	8f ad       	ldd	r24, Y+63	; 0x3f
     cf0:	25 97       	sbiw	r28, 0x05	; 5
     cf2:	81 53       	subi	r24, 0x31	; 49
     cf4:	83 30       	cpi	r24, 0x03	; 3
     cf6:	78 f0       	brcs	.+30     	; 0xd16 <__stack+0x4b7>
								//////////////
								break;


								default:
								LCD_enuClearDisplay();
     cf8:	0e 94 db 09 	call	0x13b6	; 0x13b6 <LCD_enuClearDisplay>
								LCD_enuDisplayString("Invalid Choice");
     cfc:	8a e8       	ldi	r24, 0x8A	; 138
     cfe:	93 e0       	ldi	r25, 0x03	; 3
     d00:	0e 94 9a 09 	call	0x1334	; 0x1334 <LCD_enuDisplayString>
     d04:	8f ef       	ldi	r24, 0xFF	; 255
     d06:	93 ec       	ldi	r25, 0xC3	; 195
     d08:	29 e0       	ldi	r18, 0x09	; 9
     d0a:	81 50       	subi	r24, 0x01	; 1
     d0c:	90 40       	sbci	r25, 0x00	; 0
     d0e:	20 40       	sbci	r18, 0x00	; 0
     d10:	e1 f7       	brne	.-8      	; 0xd0a <__stack+0x4ab>
     d12:	00 c0       	rjmp	.+0      	; 0xd14 <__stack+0x4b5>
     d14:	00 00       	nop
								_delay_ms(200);
								break;
								}
							Program_Status_Flag = IDLE_STATUS;
     d16:	87 e0       	ldi	r24, 0x07	; 7
     d18:	89 83       	std	Y+1, r24	; 0x01
     d1a:	12 cd       	rjmp	.-1500   	; 0x740 <main+0x30a>

00000d1c <EEPROM_ui8ReadByteFromAddress>:


void EEPROM_ui8ReadByteFromAddress( const u16 u16Address ,  u8 * data)
{
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1);
     d1c:	e1 99       	sbic	0x1c, 1	; 28
     d1e:	fe cf       	rjmp	.-4      	; 0xd1c <EEPROM_ui8ReadByteFromAddress>
	/* Set up address register */
	EEAR = u16Address;
     d20:	9f bb       	out	0x1f, r25	; 31
     d22:	8e bb       	out	0x1e, r24	; 30
	/* Start EEPROM read by writing EERE */
	EECR |= (1 << EERE);
     d24:	8c b3       	in	r24, 0x1c	; 28
     d26:	81 60       	ori	r24, 0x01	; 1
     d28:	8c bb       	out	0x1c, r24	; 28
	/* Return data from data register */
	* data = EEDR;
     d2a:	8d b3       	in	r24, 0x1d	; 29
     d2c:	fb 01       	movw	r30, r22
     d2e:	80 83       	st	Z, r24
     d30:	08 95       	ret

00000d32 <EEPROM_vReadBlockFromAddress>:
	//return 1;
}

void EEPROM_vReadBlockFromAddress(const u16 uAddress, u8* dist,const u16 size)
{
     d32:	dc 01       	movw	r26, r24
	/* Wait for completion of previous write */
	while (((EECR & (1 << EEWE))>>EEWE)==1)
     d34:	e1 99       	sbic	0x1c, 1	; 28
     d36:	fe cf       	rjmp	.-4      	; 0xd34 <EEPROM_vReadBlockFromAddress+0x2>
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	0f c0       	rjmp	.+30     	; 0xd5c <EEPROM_vReadBlockFromAddress+0x2a>
	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
	{
		/* Set up address register */
		EEAR = uAddress + counter;
     d3e:	f9 01       	movw	r30, r18
     d40:	ea 0f       	add	r30, r26
     d42:	fb 1f       	adc	r31, r27
     d44:	ff bb       	out	0x1f, r31	; 31
     d46:	ee bb       	out	0x1e, r30	; 30
		/* Start EEPROM read by writing EERE */
		EECR |= (1 << EERE);
     d48:	9c b3       	in	r25, 0x1c	; 28
     d4a:	91 60       	ori	r25, 0x01	; 1
     d4c:	9c bb       	out	0x1c, r25	; 28
		/* move data from data register to the array */
		*(dist + counter) = EEDR;
     d4e:	fb 01       	movw	r30, r22
     d50:	e2 0f       	add	r30, r18
     d52:	f3 1f       	adc	r31, r19
     d54:	9d b3       	in	r25, 0x1d	; 29
     d56:	90 83       	st	Z, r25

		counter++;//increase the bytes counter
     d58:	2f 5f       	subi	r18, 0xFF	; 255
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
	while (((EECR & (1 << EEWE))>>EEWE)==1)
	;

	u16 counter = 0;//the counter of bytes that are read

	while (counter < size) //loop until move all bytes to the given array
     d5c:	24 17       	cp	r18, r20
     d5e:	35 07       	cpc	r19, r21
     d60:	70 f3       	brcs	.-36     	; 0xd3e <EEPROM_vReadBlockFromAddress+0xc>
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
     d62:	08 95       	ret

00000d64 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16 uiAddress, const u8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     d64:	e1 99       	sbic	0x1c, 1	; 28
     d66:	fe cf       	rjmp	.-4      	; 0xd64 <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
     d68:	9f bb       	out	0x1f, r25	; 31
     d6a:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
     d6c:	8c b3       	in	r24, 0x1c	; 28
     d6e:	81 60       	ori	r24, 0x01	; 1
     d70:	8c bb       	out	0x1c, r24	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
     d72:	8d b3       	in	r24, 0x1d	; 29
     d74:	86 17       	cp	r24, r22
     d76:	39 f0       	breq	.+14     	; 0xd86 <EEPROM_vWriteByteToAddress+0x22>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
     d78:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
     d7a:	8c b3       	in	r24, 0x1c	; 28
     d7c:	84 60       	ori	r24, 0x04	; 4
     d7e:	8c bb       	out	0x1c, r24	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
     d80:	8c b3       	in	r24, 0x1c	; 28
     d82:	82 60       	ori	r24, 0x02	; 2
     d84:	8c bb       	out	0x1c, r24	; 28
     d86:	08 95       	ret

00000d88 <EEPROM_vWriteBlockToAddress>:
	}

}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
     d88:	cf 93       	push	r28
     d8a:	df 93       	push	r29
     d8c:	dc 01       	movw	r26, r24
     d8e:	ea 01       	movw	r28, r20
	u16 counter = 0;//Bytes write counter
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
	while (counter < size)
     d94:	1a c0       	rjmp	.+52     	; 0xdca <EEPROM_vWriteBlockToAddress+0x42>
	{
		/* Wait for completion of previous write process*/
		while (( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
     d96:	e1 99       	sbic	0x1c, 1	; 28
     d98:	fe cf       	rjmp	.-4      	; 0xd96 <EEPROM_vWriteBlockToAddress+0xe>
		;
		/* Set up address register */
		EEAR = uiAddress + counter;
     d9a:	c9 01       	movw	r24, r18
     d9c:	8a 0f       	add	r24, r26
     d9e:	9b 1f       	adc	r25, r27
     da0:	9f bb       	out	0x1f, r25	; 31
     da2:	8e bb       	out	0x1e, r24	; 30

		/* Read the byte in the address of EEAR */
		EECR |= (1 << EERE);
     da4:	9c b3       	in	r25, 0x1c	; 28
     da6:	91 60       	ori	r25, 0x01	; 1
     da8:	9c bb       	out	0x1c, r25	; 28
		if (EEDR != (*(uiData + counter)))//compare the value read to the value to be written
     daa:	5d b3       	in	r21, 0x1d	; 29
     dac:	fb 01       	movw	r30, r22
     dae:	e2 0f       	add	r30, r18
     db0:	f3 1f       	adc	r31, r19
     db2:	90 81       	ld	r25, Z
     db4:	59 17       	cp	r21, r25
     db6:	39 f0       	breq	.+14     	; 0xdc6 <EEPROM_vWriteBlockToAddress+0x3e>
		{//if they are not equal then write the data 
			EEDR = *(uiData + counter);//move the data to EEDR
     db8:	9d bb       	out	0x1d, r25	; 29

			/* Write logical one to EEMWE */
			EECR |= (1 << EEMWE);
     dba:	9c b3       	in	r25, 0x1c	; 28
     dbc:	94 60       	ori	r25, 0x04	; 4
     dbe:	9c bb       	out	0x1c, r25	; 28
			/* Start EEPROM write by setting EEWE */
			EECR |= (1 << EEWE);
     dc0:	9c b3       	in	r25, 0x1c	; 28
     dc2:	92 60       	ori	r25, 0x02	; 2
     dc4:	9c bb       	out	0x1c, r25	; 28
		}
		else
		{

		}
		counter++;//increase bytes counter
     dc6:	2f 5f       	subi	r18, 0xFF	; 255
     dc8:	3f 4f       	sbci	r19, 0xFF	; 255
}

void EEPROM_vWriteBlockToAddress(const u16 uiAddress, const u8* uiData,const u16 size)
{
	u16 counter = 0;//Bytes write counter
	while (counter < size)
     dca:	2c 17       	cp	r18, r28
     dcc:	3d 07       	cpc	r19, r29
     dce:	18 f3       	brcs	.-58     	; 0xd96 <EEPROM_vWriteBlockToAddress+0xe>
		{

		}
		counter++;//increase bytes counter
	}
}
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	08 95       	ret

00000dd6 <Keypad_enuInit>:

ES_t Keypad_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	DIO_enuSetPinDirection(C1_PORT , C1_PIN , DIO_u8OUTPUT);
     dd6:	41 e0       	ldi	r20, 0x01	; 1
     dd8:	63 e0       	ldi	r22, 0x03	; 3
     dda:	83 e0       	ldi	r24, 0x03	; 3
     ddc:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C2_PORT , C2_PIN , DIO_u8OUTPUT);
     de0:	41 e0       	ldi	r20, 0x01	; 1
     de2:	64 e0       	ldi	r22, 0x04	; 4
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C3_PORT , C3_PIN , DIO_u8OUTPUT);
     dea:	41 e0       	ldi	r20, 0x01	; 1
     dec:	65 e0       	ldi	r22, 0x05	; 5
     dee:	83 e0       	ldi	r24, 0x03	; 3
     df0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(C4_PORT , C4_PIN , DIO_u8OUTPUT);
     df4:	41 e0       	ldi	r20, 0x01	; 1
     df6:	66 e0       	ldi	r22, 0x06	; 6
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>

	DIO_enuSetPinDirection(R1_PORT , R1_PIN , DIO_u8INPUT);
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	62 e0       	ldi	r22, 0x02	; 2
     e02:	82 e0       	ldi	r24, 0x02	; 2
     e04:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R2_PORT , R2_PIN , DIO_u8INPUT);
     e08:	40 e0       	ldi	r20, 0x00	; 0
     e0a:	63 e0       	ldi	r22, 0x03	; 3
     e0c:	82 e0       	ldi	r24, 0x02	; 2
     e0e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R3_PORT , R3_PIN , DIO_u8INPUT);
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	64 e0       	ldi	r22, 0x04	; 4
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
	DIO_enuSetPinDirection(R4_PORT , R4_PIN , DIO_u8INPUT);
     e1c:	40 e0       	ldi	r20, 0x00	; 0
     e1e:	65 e0       	ldi	r22, 0x05	; 5
     e20:	82 e0       	ldi	r24, 0x02	; 2
     e22:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>

	DIO_enuSetPinValue(C1_PORT , C1_PIN , DIO_u8HIGH);
     e26:	41 e0       	ldi	r20, 0x01	; 1
     e28:	63 e0       	ldi	r22, 0x03	; 3
     e2a:	83 e0       	ldi	r24, 0x03	; 3
     e2c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C2_PORT , C2_PIN , DIO_u8HIGH);
     e30:	41 e0       	ldi	r20, 0x01	; 1
     e32:	64 e0       	ldi	r22, 0x04	; 4
     e34:	83 e0       	ldi	r24, 0x03	; 3
     e36:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C3_PORT , C3_PIN , DIO_u8HIGH);
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	65 e0       	ldi	r22, 0x05	; 5
     e3e:	83 e0       	ldi	r24, 0x03	; 3
     e40:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(C4_PORT , C4_PIN , DIO_u8HIGH);
     e44:	41 e0       	ldi	r20, 0x01	; 1
     e46:	66 e0       	ldi	r22, 0x06	; 6
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>

	DIO_enuSetPinValue(R1_PORT , R1_PIN , DIO_u8PULL_UP);
     e4e:	41 e0       	ldi	r20, 0x01	; 1
     e50:	62 e0       	ldi	r22, 0x02	; 2
     e52:	82 e0       	ldi	r24, 0x02	; 2
     e54:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R2_PORT , R2_PIN , DIO_u8PULL_UP);
     e58:	41 e0       	ldi	r20, 0x01	; 1
     e5a:	63 e0       	ldi	r22, 0x03	; 3
     e5c:	82 e0       	ldi	r24, 0x02	; 2
     e5e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R3_PORT , R3_PIN , DIO_u8PULL_UP);
     e62:	41 e0       	ldi	r20, 0x01	; 1
     e64:	64 e0       	ldi	r22, 0x04	; 4
     e66:	82 e0       	ldi	r24, 0x02	; 2
     e68:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
	DIO_enuSetPinValue(R4_PORT , R4_PIN , DIO_u8PULL_UP);
     e6c:	41 e0       	ldi	r20, 0x01	; 1
     e6e:	65 e0       	ldi	r22, 0x05	; 5
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>

	return Local_enuErrorState;
}
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	08 95       	ret

00000e7a <Keypad_enuGetPressedKey>:

ES_t Keypad_enuGetPressedKey(u8 * Copy_pu8KeyValue)
{
     e7a:	6f 92       	push	r6
     e7c:	7f 92       	push	r7
     e7e:	8f 92       	push	r8
     e80:	9f 92       	push	r9
     e82:	af 92       	push	r10
     e84:	bf 92       	push	r11
     e86:	cf 92       	push	r12
     e88:	df 92       	push	r13
     e8a:	ef 92       	push	r14
     e8c:	ff 92       	push	r15
     e8e:	0f 93       	push	r16
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	a1 97       	sbiw	r28, 0x21	; 33
     e9c:	0f b6       	in	r0, 0x3f	; 63
     e9e:	f8 94       	cli
     ea0:	de bf       	out	0x3e, r29	; 62
     ea2:	0f be       	out	0x3f, r0	; 63
     ea4:	cd bf       	out	0x3d, r28	; 61
     ea6:	5c 01       	movw	r10, r24
	ES_t Local_enuErrorState = ES_NOK;

	u8 Local_Au8ColPorts [COL_NUM] = {C1_PORT,C2_PORT,C3_PORT,C4_PORT};
     ea8:	83 e0       	ldi	r24, 0x03	; 3
     eaa:	89 83       	std	Y+1, r24	; 0x01
     eac:	8a 83       	std	Y+2, r24	; 0x02
     eae:	8b 83       	std	Y+3, r24	; 0x03
     eb0:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_Au8ColPins  [COL_NUM] = {C1_PIN, C2_PIN, C3_PIN, C4_PIN};
     eb2:	8d 83       	std	Y+5, r24	; 0x05
     eb4:	34 e0       	ldi	r19, 0x04	; 4
     eb6:	3e 83       	std	Y+6, r19	; 0x06
     eb8:	25 e0       	ldi	r18, 0x05	; 5
     eba:	2f 83       	std	Y+7, r18	; 0x07
     ebc:	96 e0       	ldi	r25, 0x06	; 6
     ebe:	98 87       	std	Y+8, r25	; 0x08

	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
     ec0:	92 e0       	ldi	r25, 0x02	; 2
     ec2:	99 87       	std	Y+9, r25	; 0x09
     ec4:	9a 87       	std	Y+10, r25	; 0x0a
     ec6:	9b 87       	std	Y+11, r25	; 0x0b
     ec8:	9c 87       	std	Y+12, r25	; 0x0c
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};
     eca:	9d 87       	std	Y+13, r25	; 0x0d
     ecc:	8e 87       	std	Y+14, r24	; 0x0e
     ece:	3f 87       	std	Y+15, r19	; 0x0f
     ed0:	28 8b       	std	Y+16, r18	; 0x10

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
     ed2:	8f ef       	ldi	r24, 0xFF	; 255
     ed4:	f5 01       	movw	r30, r10
     ed6:	80 83       	st	Z, r24
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
     ed8:	77 c0       	rjmp	.+238    	; 0xfc8 <Keypad_enuGetPressedKey+0x14e>
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
     eda:	c8 2c       	mov	r12, r8
     edc:	d1 2c       	mov	r13, r1
     ede:	e5 e0       	ldi	r30, 0x05	; 5
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	ec 0f       	add	r30, r28
     ee4:	fd 1f       	adc	r31, r29
     ee6:	ec 0d       	add	r30, r12
     ee8:	fd 1d       	adc	r31, r13
     eea:	60 80       	ld	r6, Z
     eec:	e1 e0       	ldi	r30, 0x01	; 1
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	ec 0f       	add	r30, r28
     ef2:	fd 1f       	adc	r31, r29
     ef4:	ec 0d       	add	r30, r12
     ef6:	fd 1d       	adc	r31, r13
     ef8:	70 80       	ld	r7, Z
     efa:	40 e0       	ldi	r20, 0x00	; 0
     efc:	66 2d       	mov	r22, r6
     efe:	87 2d       	mov	r24, r7
     f00:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
     f04:	10 e0       	ldi	r17, 0x00	; 0
     f06:	51 c0       	rjmp	.+162    	; 0xfaa <Keypad_enuGetPressedKey+0x130>
		{
			DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
     f08:	e1 2e       	mov	r14, r17
     f0a:	f1 2c       	mov	r15, r1
     f0c:	ed e0       	ldi	r30, 0x0D	; 13
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	ec 0f       	add	r30, r28
     f12:	fd 1f       	adc	r31, r29
     f14:	ee 0d       	add	r30, r14
     f16:	ff 1d       	adc	r31, r15
     f18:	00 81       	ld	r16, Z
     f1a:	e9 e0       	ldi	r30, 0x09	; 9
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	ec 0f       	add	r30, r28
     f20:	fd 1f       	adc	r31, r29
     f22:	ee 0d       	add	r30, r14
     f24:	ff 1d       	adc	r31, r15
     f26:	90 80       	ld	r9, Z
     f28:	ae 01       	movw	r20, r28
     f2a:	4f 5e       	subi	r20, 0xEF	; 239
     f2c:	5f 4f       	sbci	r21, 0xFF	; 255
     f2e:	60 2f       	mov	r22, r16
     f30:	89 2d       	mov	r24, r9
     f32:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <DIO_enuGetPinValue>
			if (! Local_u8PinValue)
     f36:	89 89       	ldd	r24, Y+17	; 0x11
     f38:	81 11       	cpse	r24, r1
     f3a:	36 c0       	rjmp	.+108    	; 0xfa8 <Keypad_enuGetPressedKey+0x12e>
     f3c:	83 ec       	ldi	r24, 0xC3	; 195
     f3e:	99 e0       	ldi	r25, 0x09	; 9
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	f1 f7       	brne	.-4      	; 0xf40 <Keypad_enuGetPressedKey+0xc6>
     f44:	00 c0       	rjmp	.+0      	; 0xf46 <Keypad_enuGetPressedKey+0xcc>
     f46:	00 00       	nop
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
     f48:	ae 01       	movw	r20, r28
     f4a:	4f 5e       	subi	r20, 0xEF	; 239
     f4c:	5f 4f       	sbci	r21, 0xFF	; 255
     f4e:	60 2f       	mov	r22, r16
     f50:	89 2d       	mov	r24, r9
     f52:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <DIO_enuGetPinValue>
				if (! Local_u8PinValue)
     f56:	89 89       	ldd	r24, Y+17	; 0x11
     f58:	81 11       	cpse	r24, r1
     f5a:	26 c0       	rjmp	.+76     	; 0xfa8 <Keypad_enuGetPressedKey+0x12e>
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <Keypad_enuGetPressedKey+0xf2>
				{
					while (! Local_u8PinValue)
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
     f5e:	ae 01       	movw	r20, r28
     f60:	4f 5e       	subi	r20, 0xEF	; 239
     f62:	5f 4f       	sbci	r21, 0xFF	; 255
     f64:	60 2f       	mov	r22, r16
     f66:	89 2d       	mov	r24, r9
     f68:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <DIO_enuGetPinValue>
			{
				_delay_ms(10);
				DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);
				if (! Local_u8PinValue)
				{
					while (! Local_u8PinValue)
     f6c:	89 89       	ldd	r24, Y+17	; 0x11
     f6e:	88 23       	and	r24, r24
     f70:	b1 f3       	breq	.-20     	; 0xf5e <Keypad_enuGetPressedKey+0xe4>
						DIO_enuGetPinValue(Local_Au8RowPorts[Local_u8RowIter], Local_Au8RowPins[Local_u8RowIter], &Local_u8PinValue);

					u8 Local_Au8Values[ROW_NUM][COL_NUM] = KEYPAD_VALUES;
     f72:	80 e1       	ldi	r24, 0x10	; 16
     f74:	e0 e6       	ldi	r30, 0x60	; 96
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	de 01       	movw	r26, r28
     f7a:	52 96       	adiw	r26, 0x12	; 18
     f7c:	01 90       	ld	r0, Z+
     f7e:	0d 92       	st	X+, r0
     f80:	8a 95       	dec	r24
     f82:	e1 f7       	brne	.-8      	; 0xf7c <Keypad_enuGetPressedKey+0x102>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
     f84:	ee 0c       	add	r14, r14
     f86:	ff 1c       	adc	r15, r15
     f88:	ee 0c       	add	r14, r14
     f8a:	ff 1c       	adc	r15, r15
     f8c:	e1 e0       	ldi	r30, 0x01	; 1
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	ec 0f       	add	r30, r28
     f92:	fd 1f       	adc	r31, r29
     f94:	ee 0e       	add	r14, r30
     f96:	ff 1e       	adc	r15, r31
     f98:	f7 01       	movw	r30, r14
     f9a:	ec 0d       	add	r30, r12
     f9c:	fd 1d       	adc	r31, r13
     f9e:	81 89       	ldd	r24, Z+17	; 0x11
     fa0:	f5 01       	movw	r30, r10
     fa2:	80 83       	st	Z, r24
					return ES_OK;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	15 c0       	rjmp	.+42     	; 0xfd2 <Keypad_enuGetPressedKey+0x158>
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
	{
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8LOW);
		for (Local_u8RowIter=0; Local_u8RowIter < ROW_NUM ; Local_u8RowIter++)
     fa8:	1f 5f       	subi	r17, 0xFF	; 255
     faa:	14 30       	cpi	r17, 0x04	; 4
     fac:	08 f4       	brcc	.+2      	; 0xfb0 <Keypad_enuGetPressedKey+0x136>
     fae:	ac cf       	rjmp	.-168    	; 0xf08 <Keypad_enuGetPressedKey+0x8e>
					*Copy_pu8KeyValue = Local_Au8Values[Local_u8RowIter][Local_u8ColIter];
					return ES_OK;
				}
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
     fb0:	41 e0       	ldi	r20, 0x01	; 1
     fb2:	66 2d       	mov	r22, r6
     fb4:	87 2d       	mov	r24, r7
     fb6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
	{
	for (Local_u8ColIter=0; Local_u8ColIter < COL_NUM ; Local_u8ColIter++ )
     fba:	83 94       	inc	r8
     fbc:	01 c0       	rjmp	.+2      	; 0xfc0 <Keypad_enuGetPressedKey+0x146>
     fbe:	81 2c       	mov	r8, r1
     fc0:	f3 e0       	ldi	r31, 0x03	; 3
     fc2:	f8 15       	cp	r31, r8
     fc4:	08 f0       	brcs	.+2      	; 0xfc8 <Keypad_enuGetPressedKey+0x14e>
     fc6:	89 cf       	rjmp	.-238    	; 0xeda <Keypad_enuGetPressedKey+0x60>
	u8 Local_Au8RowPorts [ROW_NUM] = {R1_PORT,R2_PORT,R3_PORT,R4_PORT};
	u8 Local_Au8RowPins  [ROW_NUM] = {R1_PIN, R2_PIN, R3_PIN, R4_PIN};

	u8 Local_u8ColIter , Local_u8RowIter , Local_u8PinValue;
	*Copy_pu8KeyValue = KEYPAD_NOT_PRESSED;
	while (*Copy_pu8KeyValue == KEYPAD_NOT_PRESSED)
     fc8:	f5 01       	movw	r30, r10
     fca:	80 81       	ld	r24, Z
     fcc:	8f 3f       	cpi	r24, 0xFF	; 255
     fce:	b9 f3       	breq	.-18     	; 0xfbe <Keypad_enuGetPressedKey+0x144>
			}
		}
		DIO_enuSetPinValue(Local_Au8ColPorts[Local_u8ColIter], Local_Au8ColPins[Local_u8ColIter], DIO_u8HIGH);
	}
	}
	return Local_enuErrorState;
     fd0:	80 e0       	ldi	r24, 0x00	; 0
}
     fd2:	a1 96       	adiw	r28, 0x21	; 33
     fd4:	0f b6       	in	r0, 0x3f	; 63
     fd6:	f8 94       	cli
     fd8:	de bf       	out	0x3e, r29	; 62
     fda:	0f be       	out	0x3f, r0	; 63
     fdc:	cd bf       	out	0x3d, r28	; 61
     fde:	df 91       	pop	r29
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	df 90       	pop	r13
     fec:	cf 90       	pop	r12
     fee:	bf 90       	pop	r11
     ff0:	af 90       	pop	r10
     ff2:	9f 90       	pop	r9
     ff4:	8f 90       	pop	r8
     ff6:	7f 90       	pop	r7
     ff8:	6f 90       	pop	r6
     ffa:	08 95       	ret

00000ffc <LCD_enuWriteNLatch>:
				/*********el mafrood a3mel error status check hna bs 3ashan write and latch me7taga te3mel return ES_OK fa me7taga ta3deel**********/
			}
	}

	return Local_enuErrorState;
}
     ffc:	1f 93       	push	r17
     ffe:	cf 93       	push	r28
    1000:	df 93       	push	r29
    1002:	1f 92       	push	r1
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
    1008:	18 2f       	mov	r17, r24
    100a:	40 e0       	ldi	r20, 0x00	; 0
    100c:	63 e0       	ldi	r22, 0x03	; 3
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	62 e0       	ldi	r22, 0x02	; 2
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    101e:	18 32       	cpi	r17, 0x28	; 40
    1020:	e1 f5       	brne	.+120    	; 0x109a <LCD_enuWriteNLatch+0x9e>
    1022:	ae 01       	movw	r20, r28
    1024:	4f 5f       	subi	r20, 0xFF	; 255
    1026:	5f 4f       	sbci	r21, 0xFF	; 255
    1028:	61 e0       	ldi	r22, 0x01	; 1
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <DIO_enuGetPinValue>
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	81 11       	cpse	r24, r1
    1034:	32 c0       	rjmp	.+100    	; 0x109a <LCD_enuWriteNLatch+0x9e>
    1036:	41 2f       	mov	r20, r17
    1038:	44 1f       	adc	r20, r20
    103a:	44 27       	eor	r20, r20
    103c:	44 1f       	adc	r20, r20
    103e:	67 e0       	ldi	r22, 0x07	; 7
    1040:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    1044:	16 fb       	bst	r17, 6
    1046:	44 27       	eor	r20, r20
    1048:	40 f9       	bld	r20, 0
    104a:	66 e0       	ldi	r22, 0x06	; 6
    104c:	80 e0       	ldi	r24, 0x00	; 0
    104e:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    1052:	15 fb       	bst	r17, 5
    1054:	44 27       	eor	r20, r20
    1056:	40 f9       	bld	r20, 0
    1058:	65 e0       	ldi	r22, 0x05	; 5
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    1060:	14 fb       	bst	r17, 4
    1062:	44 27       	eor	r20, r20
    1064:	40 f9       	bld	r20, 0
    1066:	64 e0       	ldi	r22, 0x04	; 4
    1068:	80 e0       	ldi	r24, 0x00	; 0
    106a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    106e:	41 e0       	ldi	r20, 0x01	; 1
    1070:	63 e0       	ldi	r22, 0x03	; 3
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    1078:	81 ee       	ldi	r24, 0xE1	; 225
    107a:	94 e0       	ldi	r25, 0x04	; 4
    107c:	01 97       	sbiw	r24, 0x01	; 1
    107e:	f1 f7       	brne	.-4      	; 0x107c <LCD_enuWriteNLatch+0x80>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <LCD_enuWriteNLatch+0x86>
    1082:	00 00       	nop
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	63 e0       	ldi	r22, 0x03	; 3
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    108e:	83 ed       	ldi	r24, 0xD3	; 211
    1090:	90 e3       	ldi	r25, 0x30	; 48
    1092:	01 97       	sbiw	r24, 0x01	; 1
    1094:	f1 f7       	brne	.-4      	; 0x1092 <LCD_enuWriteNLatch+0x96>
    1096:	00 c0       	rjmp	.+0      	; 0x1098 <LCD_enuWriteNLatch+0x9c>
    1098:	00 00       	nop
    109a:	41 2f       	mov	r20, r17
    109c:	44 1f       	adc	r20, r20
    109e:	44 27       	eor	r20, r20
    10a0:	44 1f       	adc	r20, r20
    10a2:	67 e0       	ldi	r22, 0x07	; 7
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    10aa:	16 fb       	bst	r17, 6
    10ac:	44 27       	eor	r20, r20
    10ae:	40 f9       	bld	r20, 0
    10b0:	66 e0       	ldi	r22, 0x06	; 6
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    10b8:	15 fb       	bst	r17, 5
    10ba:	44 27       	eor	r20, r20
    10bc:	40 f9       	bld	r20, 0
    10be:	65 e0       	ldi	r22, 0x05	; 5
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    10c6:	14 fb       	bst	r17, 4
    10c8:	44 27       	eor	r20, r20
    10ca:	40 f9       	bld	r20, 0
    10cc:	64 e0       	ldi	r22, 0x04	; 4
    10ce:	80 e0       	ldi	r24, 0x00	; 0
    10d0:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    10d4:	41 e0       	ldi	r20, 0x01	; 1
    10d6:	63 e0       	ldi	r22, 0x03	; 3
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    10de:	81 ee       	ldi	r24, 0xE1	; 225
    10e0:	94 e0       	ldi	r25, 0x04	; 4
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	f1 f7       	brne	.-4      	; 0x10e2 <LCD_enuWriteNLatch+0xe6>
    10e6:	00 c0       	rjmp	.+0      	; 0x10e8 <LCD_enuWriteNLatch+0xec>
    10e8:	00 00       	nop
    10ea:	40 e0       	ldi	r20, 0x00	; 0
    10ec:	63 e0       	ldi	r22, 0x03	; 3
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    10f4:	83 ed       	ldi	r24, 0xD3	; 211
    10f6:	90 e3       	ldi	r25, 0x30	; 48
    10f8:	01 97       	sbiw	r24, 0x01	; 1
    10fa:	f1 f7       	brne	.-4      	; 0x10f8 <LCD_enuWriteNLatch+0xfc>
    10fc:	00 c0       	rjmp	.+0      	; 0x10fe <LCD_enuWriteNLatch+0x102>
    10fe:	00 00       	nop
    1100:	13 fb       	bst	r17, 3
    1102:	44 27       	eor	r20, r20
    1104:	40 f9       	bld	r20, 0
    1106:	67 e0       	ldi	r22, 0x07	; 7
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    110e:	12 fb       	bst	r17, 2
    1110:	44 27       	eor	r20, r20
    1112:	40 f9       	bld	r20, 0
    1114:	66 e0       	ldi	r22, 0x06	; 6
    1116:	80 e0       	ldi	r24, 0x00	; 0
    1118:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    111c:	11 fb       	bst	r17, 1
    111e:	44 27       	eor	r20, r20
    1120:	40 f9       	bld	r20, 0
    1122:	65 e0       	ldi	r22, 0x05	; 5
    1124:	80 e0       	ldi	r24, 0x00	; 0
    1126:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    112a:	41 2f       	mov	r20, r17
    112c:	41 70       	andi	r20, 0x01	; 1
    112e:	64 e0       	ldi	r22, 0x04	; 4
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	63 e0       	ldi	r22, 0x03	; 3
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    1140:	81 ee       	ldi	r24, 0xE1	; 225
    1142:	94 e0       	ldi	r25, 0x04	; 4
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	f1 f7       	brne	.-4      	; 0x1144 <LCD_enuWriteNLatch+0x148>
    1148:	00 c0       	rjmp	.+0      	; 0x114a <LCD_enuWriteNLatch+0x14e>
    114a:	00 00       	nop
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	63 e0       	ldi	r22, 0x03	; 3
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    1156:	83 ed       	ldi	r24, 0xD3	; 211
    1158:	90 e3       	ldi	r25, 0x30	; 48
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	f1 f7       	brne	.-4      	; 0x115a <LCD_enuWriteNLatch+0x15e>
    115e:	00 c0       	rjmp	.+0      	; 0x1160 <LCD_enuWriteNLatch+0x164>
    1160:	00 00       	nop
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	0f 90       	pop	r0
    1166:	df 91       	pop	r29
    1168:	cf 91       	pop	r28
    116a:	1f 91       	pop	r17
    116c:	08 95       	ret

0000116e <LCD_enuInit>:
    116e:	41 e0       	ldi	r20, 0x01	; 1
    1170:	61 e0       	ldi	r22, 0x01	; 1
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
    1178:	41 e0       	ldi	r20, 0x01	; 1
    117a:	62 e0       	ldi	r22, 0x02	; 2
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
    1182:	41 e0       	ldi	r20, 0x01	; 1
    1184:	63 e0       	ldi	r22, 0x03	; 3
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	67 e0       	ldi	r22, 0x07	; 7
    1190:	80 e0       	ldi	r24, 0x00	; 0
    1192:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
    1196:	41 e0       	ldi	r20, 0x01	; 1
    1198:	66 e0       	ldi	r22, 0x06	; 6
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
    11a0:	41 e0       	ldi	r20, 0x01	; 1
    11a2:	65 e0       	ldi	r22, 0x05	; 5
    11a4:	80 e0       	ldi	r24, 0x00	; 0
    11a6:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
    11aa:	41 e0       	ldi	r20, 0x01	; 1
    11ac:	64 e0       	ldi	r22, 0x04	; 4
    11ae:	80 e0       	ldi	r24, 0x00	; 0
    11b0:	0e 94 ee 09 	call	0x13dc	; 0x13dc <DIO_enuSetPinDirection>
    11b4:	8d e2       	ldi	r24, 0x2D	; 45
    11b6:	92 e2       	ldi	r25, 0x22	; 34
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	f1 f7       	brne	.-4      	; 0x11b8 <LCD_enuInit+0x4a>
    11bc:	00 c0       	rjmp	.+0      	; 0x11be <LCD_enuInit+0x50>
    11be:	00 00       	nop
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	61 e0       	ldi	r22, 0x01	; 1
    11c4:	81 e0       	ldi	r24, 0x01	; 1
    11c6:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    11ca:	88 e2       	ldi	r24, 0x28	; 40
    11cc:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_enuWriteNLatch>
    11d0:	89 ef       	ldi	r24, 0xF9	; 249
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	01 97       	sbiw	r24, 0x01	; 1
    11d6:	f1 f7       	brne	.-4      	; 0x11d4 <LCD_enuInit+0x66>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <LCD_enuInit+0x6c>
    11da:	00 00       	nop
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	61 e0       	ldi	r22, 0x01	; 1
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    11e6:	8f e0       	ldi	r24, 0x0F	; 15
    11e8:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_enuWriteNLatch>
    11ec:	89 ef       	ldi	r24, 0xF9	; 249
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <LCD_enuInit+0x82>
    11f4:	00 c0       	rjmp	.+0      	; 0x11f6 <LCD_enuInit+0x88>
    11f6:	00 00       	nop
    11f8:	40 e0       	ldi	r20, 0x00	; 0
    11fa:	61 e0       	ldi	r22, 0x01	; 1
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_enuWriteNLatch>
    1208:	83 ef       	ldi	r24, 0xF3	; 243
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <LCD_enuInit+0x9e>
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <LCD_enuInit+0xa4>
    1212:	00 00       	nop
    1214:	40 e0       	ldi	r20, 0x00	; 0
    1216:	61 e0       	ldi	r22, 0x01	; 1
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    121e:	86 e0       	ldi	r24, 0x06	; 6
    1220:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_enuWriteNLatch>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	08 95       	ret

00001228 <LCD_enuSendData>:
    1228:	cf 93       	push	r28
    122a:	c8 2f       	mov	r28, r24
    122c:	41 e0       	ldi	r20, 0x01	; 1
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    1236:	8c 2f       	mov	r24, r28
    1238:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_enuWriteNLatch>
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	cf 91       	pop	r28
    1240:	08 95       	ret

00001242 <LCD_enuDisplayUnsignedInteger>:
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
    1256:	61 15       	cp	r22, r1
    1258:	71 05       	cpc	r23, r1
    125a:	81 05       	cpc	r24, r1
    125c:	91 05       	cpc	r25, r1
    125e:	61 f5       	brne	.+88     	; 0x12b8 <LCD_enuDisplayUnsignedInteger+0x76>
    1260:	41 e0       	ldi	r20, 0x01	; 1
    1262:	61 e0       	ldi	r22, 0x01	; 1
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    126a:	80 e3       	ldi	r24, 0x30	; 48
    126c:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_enuWriteNLatch>
    1270:	a1 2c       	mov	r10, r1
    1272:	54 c0       	rjmp	.+168    	; 0x131c <LCD_enuDisplayUnsignedInteger+0xda>
    1274:	2a e0       	ldi	r18, 0x0A	; 10
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__udivmodsi4>
    1280:	cc 0c       	add	r12, r12
    1282:	dd 1c       	adc	r13, r13
    1284:	ee 1c       	adc	r14, r14
    1286:	ff 1c       	adc	r15, r15
    1288:	d7 01       	movw	r26, r14
    128a:	c6 01       	movw	r24, r12
    128c:	88 0f       	add	r24, r24
    128e:	99 1f       	adc	r25, r25
    1290:	aa 1f       	adc	r26, r26
    1292:	bb 1f       	adc	r27, r27
    1294:	88 0f       	add	r24, r24
    1296:	99 1f       	adc	r25, r25
    1298:	aa 1f       	adc	r26, r26
    129a:	bb 1f       	adc	r27, r27
    129c:	c8 0e       	add	r12, r24
    129e:	d9 1e       	adc	r13, r25
    12a0:	ea 1e       	adc	r14, r26
    12a2:	fb 1e       	adc	r15, r27
    12a4:	c6 0e       	add	r12, r22
    12a6:	d1 1c       	adc	r13, r1
    12a8:	e1 1c       	adc	r14, r1
    12aa:	f1 1c       	adc	r15, r1
    12ac:	cf 5f       	subi	r28, 0xFF	; 255
    12ae:	62 2f       	mov	r22, r18
    12b0:	73 2f       	mov	r23, r19
    12b2:	84 2f       	mov	r24, r20
    12b4:	95 2f       	mov	r25, r21
    12b6:	04 c0       	rjmp	.+8      	; 0x12c0 <LCD_enuDisplayUnsignedInteger+0x7e>
    12b8:	c0 e0       	ldi	r28, 0x00	; 0
    12ba:	c1 2c       	mov	r12, r1
    12bc:	d1 2c       	mov	r13, r1
    12be:	76 01       	movw	r14, r12
    12c0:	61 15       	cp	r22, r1
    12c2:	71 05       	cpc	r23, r1
    12c4:	81 05       	cpc	r24, r1
    12c6:	91 05       	cpc	r25, r1
    12c8:	a9 f6       	brne	.-86     	; 0x1274 <LCD_enuDisplayUnsignedInteger+0x32>
    12ca:	a1 2c       	mov	r10, r1
    12cc:	1b c0       	rjmp	.+54     	; 0x1304 <LCD_enuDisplayUnsignedInteger+0xc2>
    12ce:	41 e0       	ldi	r20, 0x01	; 1
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	81 e0       	ldi	r24, 0x01	; 1
    12d4:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    12d8:	c7 01       	movw	r24, r14
    12da:	b6 01       	movw	r22, r12
    12dc:	2a e0       	ldi	r18, 0x0A	; 10
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <__udivmodsi4>
    12e8:	b2 2e       	mov	r11, r18
    12ea:	03 2f       	mov	r16, r19
    12ec:	14 2f       	mov	r17, r20
    12ee:	d5 2f       	mov	r29, r21
    12f0:	80 e3       	ldi	r24, 0x30	; 48
    12f2:	86 0f       	add	r24, r22
    12f4:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_enuWriteNLatch>
    12f8:	a8 2e       	mov	r10, r24
    12fa:	cb 2c       	mov	r12, r11
    12fc:	d0 2e       	mov	r13, r16
    12fe:	e1 2e       	mov	r14, r17
    1300:	fd 2e       	mov	r15, r29
    1302:	c1 50       	subi	r28, 0x01	; 1
    1304:	c1 14       	cp	r12, r1
    1306:	d1 04       	cpc	r13, r1
    1308:	e1 04       	cpc	r14, r1
    130a:	f1 04       	cpc	r15, r1
    130c:	01 f7       	brne	.-64     	; 0x12ce <LCD_enuDisplayUnsignedInteger+0x8c>
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <LCD_enuDisplayUnsignedInteger+0xd6>
    1310:	80 e3       	ldi	r24, 0x30	; 48
    1312:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_enuWriteNLatch>
    1316:	c1 50       	subi	r28, 0x01	; 1
    1318:	c1 11       	cpse	r28, r1
    131a:	fa cf       	rjmp	.-12     	; 0x1310 <LCD_enuDisplayUnsignedInteger+0xce>
    131c:	8a 2d       	mov	r24, r10
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	bf 90       	pop	r11
    1330:	af 90       	pop	r10
    1332:	08 95       	ret

00001334 <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	ec 01       	movw	r28, r24
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pcString != NULL)
    133e:	89 2b       	or	r24, r25
    1340:	79 f4       	brne	.+30     	; 0x1360 <LCD_enuDisplayString+0x2c>
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
			Local_enuErrorState = LCD_enuWriteNLatch(*Copy_pcString++);
		}

	}
	else Local_enuErrorState = ES_NULL_POINTER;
    1342:	82 e0       	ldi	r24, 0x02	; 2
    1344:	11 c0       	rjmp	.+34     	; 0x1368 <LCD_enuDisplayString+0x34>
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
    1346:	41 e0       	ldi	r20, 0x01	; 1
    1348:	61 e0       	ldi	r22, 0x01	; 1
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
			Local_enuErrorState = LCD_enuWriteNLatch(*Copy_pcString++);
    1350:	8e 01       	movw	r16, r28
    1352:	0f 5f       	subi	r16, 0xFF	; 255
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	88 81       	ld	r24, Y
    1358:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_enuWriteNLatch>
    135c:	e8 01       	movw	r28, r16
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <LCD_enuDisplayString+0x2e>
    1360:	80 e0       	ldi	r24, 0x00	; 0
ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
	ES_t Local_enuErrorState = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
    1362:	98 81       	ld	r25, Y
    1364:	91 11       	cpse	r25, r1
    1366:	ef cf       	rjmp	.-34     	; 0x1346 <LCD_enuDisplayString+0x12>
		}

	}
	else Local_enuErrorState = ES_NULL_POINTER;
	return Local_enuErrorState;
}
    1368:	df 91       	pop	r29
    136a:	cf 91       	pop	r28
    136c:	1f 91       	pop	r17
    136e:	0f 91       	pop	r16
    1370:	08 95       	ret

00001372 <LCD_enuSetCursorPosition>:


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{
    1372:	1f 93       	push	r17
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29

	ES_t Local_enuErrorState = ES_NOK;
	if ((Copy_u8XDimension <= LCD_u8XDIM_1) && (Copy_u8YDimension <= LCD_u8YDIM_15))
    1378:	82 30       	cpi	r24, 0x02	; 2
    137a:	a8 f4       	brcc	.+42     	; 0x13a6 <LCD_enuSetCursorPosition+0x34>
    137c:	60 31       	cpi	r22, 0x10	; 16
    137e:	a8 f4       	brcc	.+42     	; 0x13aa <LCD_enuSetCursorPosition+0x38>
    1380:	16 2f       	mov	r17, r22
    1382:	c8 2f       	mov	r28, r24
		{
		Local_enuErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    1384:	40 e0       	ldi	r20, 0x00	; 0
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    138e:	d8 2f       	mov	r29, r24
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
    1390:	8c 2f       	mov	r24, r28
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	02 96       	adiw	r24, 0x02	; 2
    1396:	20 e4       	ldi	r18, 0x40	; 64
    1398:	82 9f       	mul	r24, r18
    139a:	10 0d       	add	r17, r0
    139c:	11 24       	eor	r1, r1
    139e:	81 2f       	mov	r24, r17
    13a0:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_enuWriteNLatch>
    13a4:	03 c0       	rjmp	.+6      	; 0x13ac <LCD_enuSetCursorPosition+0x3a>


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{

	ES_t Local_enuErrorState = ES_NOK;
    13a6:	d0 e0       	ldi	r29, 0x00	; 0
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <LCD_enuSetCursorPosition+0x3a>
    13aa:	d0 e0       	ldi	r29, 0x00	; 0
		Local_enuErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
		}
	return Local_enuErrorState;

}
    13ac:	8d 2f       	mov	r24, r29
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	08 95       	ret

000013b6 <LCD_enuClearDisplay>:

ES_t LCD_enuClearDisplay( void )
{
    13b6:	cf 93       	push	r28

	ES_t Local_enuErrorState = ES_NOK;

		Local_enuErrorState = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	61 e0       	ldi	r22, 0x01	; 1
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	0e 94 60 0a 	call	0x14c0	; 0x14c0 <DIO_enuSetPinValue>
    13c2:	c8 2f       	mov	r28, r24
		LCD_enuWriteNLatch(0x01);
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	0e 94 fe 07 	call	0xffc	; 0xffc <LCD_enuWriteNLatch>

	return Local_enuErrorState;

}
    13ca:	8c 2f       	mov	r24, r28
    13cc:	cf 91       	pop	r28
    13ce:	08 95       	ret

000013d0 <DIO_enuInit>:
	{
		Local_enuErrorState = ES_OUT_OF_RANGE;
	}

	return Local_enuErrorState;
}
    13d0:	81 eb       	ldi	r24, 0xB1	; 177
    13d2:	8a bb       	out	0x1a, r24	; 26
    13d4:	86 e1       	ldi	r24, 0x16	; 22
    13d6:	8b bb       	out	0x1b, r24	; 27
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	08 95       	ret

000013dc <DIO_enuSetPinDirection>:
    13dc:	84 30       	cpi	r24, 0x04	; 4
    13de:	08 f0       	brcs	.+2      	; 0x13e2 <DIO_enuSetPinDirection+0x6>
    13e0:	67 c0       	rjmp	.+206    	; 0x14b0 <DIO_enuSetPinDirection+0xd4>
    13e2:	68 30       	cpi	r22, 0x08	; 8
    13e4:	08 f0       	brcs	.+2      	; 0x13e8 <DIO_enuSetPinDirection+0xc>
    13e6:	66 c0       	rjmp	.+204    	; 0x14b4 <DIO_enuSetPinDirection+0xd8>
    13e8:	42 30       	cpi	r20, 0x02	; 2
    13ea:	08 f0       	brcs	.+2      	; 0x13ee <DIO_enuSetPinDirection+0x12>
    13ec:	65 c0       	rjmp	.+202    	; 0x14b8 <DIO_enuSetPinDirection+0xdc>
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	e9 f0       	breq	.+58     	; 0x142c <DIO_enuSetPinDirection+0x50>
    13f2:	30 f0       	brcs	.+12     	; 0x1400 <DIO_enuSetPinDirection+0x24>
    13f4:	82 30       	cpi	r24, 0x02	; 2
    13f6:	81 f1       	breq	.+96     	; 0x1458 <DIO_enuSetPinDirection+0x7c>
    13f8:	83 30       	cpi	r24, 0x03	; 3
    13fa:	09 f4       	brne	.+2      	; 0x13fe <DIO_enuSetPinDirection+0x22>
    13fc:	43 c0       	rjmp	.+134    	; 0x1484 <DIO_enuSetPinDirection+0xa8>
    13fe:	5e c0       	rjmp	.+188    	; 0x14bc <DIO_enuSetPinDirection+0xe0>
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	06 2e       	mov	r0, r22
    1406:	02 c0       	rjmp	.+4      	; 0x140c <DIO_enuSetPinDirection+0x30>
    1408:	88 0f       	add	r24, r24
    140a:	99 1f       	adc	r25, r25
    140c:	0a 94       	dec	r0
    140e:	e2 f7       	brpl	.-8      	; 0x1408 <DIO_enuSetPinDirection+0x2c>
    1410:	80 95       	com	r24
    1412:	2a b3       	in	r18, 0x1a	; 26
    1414:	28 23       	and	r18, r24
    1416:	84 2f       	mov	r24, r20
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <DIO_enuSetPinDirection+0x44>
    141c:	88 0f       	add	r24, r24
    141e:	99 1f       	adc	r25, r25
    1420:	6a 95       	dec	r22
    1422:	e2 f7       	brpl	.-8      	; 0x141c <DIO_enuSetPinDirection+0x40>
    1424:	82 2b       	or	r24, r18
    1426:	8a bb       	out	0x1a, r24	; 26
    1428:	81 e0       	ldi	r24, 0x01	; 1
    142a:	08 95       	ret
    142c:	21 e0       	ldi	r18, 0x01	; 1
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	06 2e       	mov	r0, r22
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <DIO_enuSetPinDirection+0x5c>
    1434:	22 0f       	add	r18, r18
    1436:	33 1f       	adc	r19, r19
    1438:	0a 94       	dec	r0
    143a:	e2 f7       	brpl	.-8      	; 0x1434 <DIO_enuSetPinDirection+0x58>
    143c:	20 95       	com	r18
    143e:	87 b3       	in	r24, 0x17	; 23
    1440:	28 23       	and	r18, r24
    1442:	84 2f       	mov	r24, r20
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	02 c0       	rjmp	.+4      	; 0x144c <DIO_enuSetPinDirection+0x70>
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	6a 95       	dec	r22
    144e:	e2 f7       	brpl	.-8      	; 0x1448 <DIO_enuSetPinDirection+0x6c>
    1450:	82 2b       	or	r24, r18
    1452:	87 bb       	out	0x17, r24	; 23
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	08 95       	ret
    1458:	21 e0       	ldi	r18, 0x01	; 1
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	06 2e       	mov	r0, r22
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <DIO_enuSetPinDirection+0x88>
    1460:	22 0f       	add	r18, r18
    1462:	33 1f       	adc	r19, r19
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <DIO_enuSetPinDirection+0x84>
    1468:	20 95       	com	r18
    146a:	84 b3       	in	r24, 0x14	; 20
    146c:	28 23       	and	r18, r24
    146e:	84 2f       	mov	r24, r20
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <DIO_enuSetPinDirection+0x9c>
    1474:	88 0f       	add	r24, r24
    1476:	99 1f       	adc	r25, r25
    1478:	6a 95       	dec	r22
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <DIO_enuSetPinDirection+0x98>
    147c:	82 2b       	or	r24, r18
    147e:	84 bb       	out	0x14, r24	; 20
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	08 95       	ret
    1484:	21 e0       	ldi	r18, 0x01	; 1
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	06 2e       	mov	r0, r22
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <DIO_enuSetPinDirection+0xb4>
    148c:	22 0f       	add	r18, r18
    148e:	33 1f       	adc	r19, r19
    1490:	0a 94       	dec	r0
    1492:	e2 f7       	brpl	.-8      	; 0x148c <DIO_enuSetPinDirection+0xb0>
    1494:	20 95       	com	r18
    1496:	81 b3       	in	r24, 0x11	; 17
    1498:	28 23       	and	r18, r24
    149a:	84 2f       	mov	r24, r20
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	02 c0       	rjmp	.+4      	; 0x14a4 <DIO_enuSetPinDirection+0xc8>
    14a0:	88 0f       	add	r24, r24
    14a2:	99 1f       	adc	r25, r25
    14a4:	6a 95       	dec	r22
    14a6:	e2 f7       	brpl	.-8      	; 0x14a0 <DIO_enuSetPinDirection+0xc4>
    14a8:	82 2b       	or	r24, r18
    14aa:	81 bb       	out	0x11, r24	; 17
    14ac:	81 e0       	ldi	r24, 0x01	; 1
    14ae:	08 95       	ret
    14b0:	83 e0       	ldi	r24, 0x03	; 3
    14b2:	08 95       	ret
    14b4:	83 e0       	ldi	r24, 0x03	; 3
    14b6:	08 95       	ret
    14b8:	83 e0       	ldi	r24, 0x03	; 3
    14ba:	08 95       	ret
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	08 95       	ret

000014c0 <DIO_enuSetPinValue>:
    14c0:	84 30       	cpi	r24, 0x04	; 4
    14c2:	08 f0       	brcs	.+2      	; 0x14c6 <DIO_enuSetPinValue+0x6>
    14c4:	67 c0       	rjmp	.+206    	; 0x1594 <DIO_enuSetPinValue+0xd4>
    14c6:	68 30       	cpi	r22, 0x08	; 8
    14c8:	08 f0       	brcs	.+2      	; 0x14cc <DIO_enuSetPinValue+0xc>
    14ca:	66 c0       	rjmp	.+204    	; 0x1598 <DIO_enuSetPinValue+0xd8>
    14cc:	42 30       	cpi	r20, 0x02	; 2
    14ce:	08 f0       	brcs	.+2      	; 0x14d2 <DIO_enuSetPinValue+0x12>
    14d0:	65 c0       	rjmp	.+202    	; 0x159c <DIO_enuSetPinValue+0xdc>
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	e9 f0       	breq	.+58     	; 0x1510 <DIO_enuSetPinValue+0x50>
    14d6:	30 f0       	brcs	.+12     	; 0x14e4 <DIO_enuSetPinValue+0x24>
    14d8:	82 30       	cpi	r24, 0x02	; 2
    14da:	81 f1       	breq	.+96     	; 0x153c <DIO_enuSetPinValue+0x7c>
    14dc:	83 30       	cpi	r24, 0x03	; 3
    14de:	09 f4       	brne	.+2      	; 0x14e2 <DIO_enuSetPinValue+0x22>
    14e0:	43 c0       	rjmp	.+134    	; 0x1568 <DIO_enuSetPinValue+0xa8>
    14e2:	5e c0       	rjmp	.+188    	; 0x15a0 <DIO_enuSetPinValue+0xe0>
    14e4:	81 e0       	ldi	r24, 0x01	; 1
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	06 2e       	mov	r0, r22
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <DIO_enuSetPinValue+0x30>
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	0a 94       	dec	r0
    14f2:	e2 f7       	brpl	.-8      	; 0x14ec <DIO_enuSetPinValue+0x2c>
    14f4:	80 95       	com	r24
    14f6:	2b b3       	in	r18, 0x1b	; 27
    14f8:	28 23       	and	r18, r24
    14fa:	84 2f       	mov	r24, r20
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <DIO_enuSetPinValue+0x44>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	6a 95       	dec	r22
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <DIO_enuSetPinValue+0x40>
    1508:	82 2b       	or	r24, r18
    150a:	8b bb       	out	0x1b, r24	; 27
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	08 95       	ret
    1510:	21 e0       	ldi	r18, 0x01	; 1
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	06 2e       	mov	r0, r22
    1516:	02 c0       	rjmp	.+4      	; 0x151c <DIO_enuSetPinValue+0x5c>
    1518:	22 0f       	add	r18, r18
    151a:	33 1f       	adc	r19, r19
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <DIO_enuSetPinValue+0x58>
    1520:	20 95       	com	r18
    1522:	88 b3       	in	r24, 0x18	; 24
    1524:	28 23       	and	r18, r24
    1526:	84 2f       	mov	r24, r20
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_enuSetPinValue+0x70>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	6a 95       	dec	r22
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_enuSetPinValue+0x6c>
    1534:	82 2b       	or	r24, r18
    1536:	88 bb       	out	0x18, r24	; 24
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	08 95       	ret
    153c:	21 e0       	ldi	r18, 0x01	; 1
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	06 2e       	mov	r0, r22
    1542:	02 c0       	rjmp	.+4      	; 0x1548 <DIO_enuSetPinValue+0x88>
    1544:	22 0f       	add	r18, r18
    1546:	33 1f       	adc	r19, r19
    1548:	0a 94       	dec	r0
    154a:	e2 f7       	brpl	.-8      	; 0x1544 <DIO_enuSetPinValue+0x84>
    154c:	20 95       	com	r18
    154e:	85 b3       	in	r24, 0x15	; 21
    1550:	28 23       	and	r18, r24
    1552:	84 2f       	mov	r24, r20
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 c0       	rjmp	.+4      	; 0x155c <DIO_enuSetPinValue+0x9c>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	6a 95       	dec	r22
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <DIO_enuSetPinValue+0x98>
    1560:	82 2b       	or	r24, r18
    1562:	85 bb       	out	0x15, r24	; 21
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	08 95       	ret
    1568:	21 e0       	ldi	r18, 0x01	; 1
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	06 2e       	mov	r0, r22
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <DIO_enuSetPinValue+0xb4>
    1570:	22 0f       	add	r18, r18
    1572:	33 1f       	adc	r19, r19
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <DIO_enuSetPinValue+0xb0>
    1578:	20 95       	com	r18
    157a:	82 b3       	in	r24, 0x12	; 18
    157c:	28 23       	and	r18, r24
    157e:	84 2f       	mov	r24, r20
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <DIO_enuSetPinValue+0xc8>
    1584:	88 0f       	add	r24, r24
    1586:	99 1f       	adc	r25, r25
    1588:	6a 95       	dec	r22
    158a:	e2 f7       	brpl	.-8      	; 0x1584 <DIO_enuSetPinValue+0xc4>
    158c:	82 2b       	or	r24, r18
    158e:	82 bb       	out	0x12, r24	; 18
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	08 95       	ret
    1594:	83 e0       	ldi	r24, 0x03	; 3
    1596:	08 95       	ret
    1598:	83 e0       	ldi	r24, 0x03	; 3
    159a:	08 95       	ret
    159c:	83 e0       	ldi	r24, 0x03	; 3
    159e:	08 95       	ret
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	08 95       	ret

000015a4 <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
	ES_t Local_enuErrorState = ES_NOK;

	if (Copy_pu8Value != NULL)
    15a4:	41 15       	cp	r20, r1
    15a6:	51 05       	cpc	r21, r1
    15a8:	e1 f1       	breq	.+120    	; 0x1622 <DIO_enuGetPinValue+0x7e>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
    15aa:	84 30       	cpi	r24, 0x04	; 4
    15ac:	e0 f5       	brcc	.+120    	; 0x1626 <DIO_enuGetPinValue+0x82>
				&& Copy_u8PinID <= DIO_u8PIN7)
    15ae:	68 30       	cpi	r22, 0x08	; 8
    15b0:	e0 f5       	brcc	.+120    	; 0x162a <DIO_enuGetPinValue+0x86>
		{
			switch (Copy_u8PortID)
    15b2:	81 30       	cpi	r24, 0x01	; 1
    15b4:	91 f0       	breq	.+36     	; 0x15da <DIO_enuGetPinValue+0x36>
    15b6:	28 f0       	brcs	.+10     	; 0x15c2 <DIO_enuGetPinValue+0x1e>
    15b8:	82 30       	cpi	r24, 0x02	; 2
    15ba:	d9 f0       	breq	.+54     	; 0x15f2 <DIO_enuGetPinValue+0x4e>
    15bc:	83 30       	cpi	r24, 0x03	; 3
    15be:	29 f1       	breq	.+74     	; 0x160a <DIO_enuGetPinValue+0x66>
    15c0:	36 c0       	rjmp	.+108    	; 0x162e <DIO_enuGetPinValue+0x8a>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
    15c2:	89 b3       	in	r24, 0x19	; 25
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <DIO_enuGetPinValue+0x28>
    15c8:	95 95       	asr	r25
    15ca:	87 95       	ror	r24
    15cc:	6a 95       	dec	r22
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <DIO_enuGetPinValue+0x24>
    15d0:	81 70       	andi	r24, 0x01	; 1
    15d2:	fa 01       	movw	r30, r20
    15d4:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    15d6:	81 e0       	ldi	r24, 0x01	; 1
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    15d8:	08 95       	ret
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
    15da:	86 b3       	in	r24, 0x16	; 22
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <DIO_enuGetPinValue+0x40>
    15e0:	95 95       	asr	r25
    15e2:	87 95       	ror	r24
    15e4:	6a 95       	dec	r22
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <DIO_enuGetPinValue+0x3c>
    15e8:	81 70       	andi	r24, 0x01	; 1
    15ea:	fa 01       	movw	r30, r20
    15ec:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    15ee:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    15f0:	08 95       	ret
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
    15f2:	83 b3       	in	r24, 0x13	; 19
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <DIO_enuGetPinValue+0x58>
    15f8:	95 95       	asr	r25
    15fa:	87 95       	ror	r24
    15fc:	6a 95       	dec	r22
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <DIO_enuGetPinValue+0x54>
    1600:	81 70       	andi	r24, 0x01	; 1
    1602:	fa 01       	movw	r30, r20
    1604:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    1606:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    1608:	08 95       	ret
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
    160a:	80 b3       	in	r24, 0x10	; 16
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <DIO_enuGetPinValue+0x70>
    1610:	95 95       	asr	r25
    1612:	87 95       	ror	r24
    1614:	6a 95       	dec	r22
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <DIO_enuGetPinValue+0x6c>
    1618:	81 70       	andi	r24, 0x01	; 1
    161a:	fa 01       	movw	r30, r20
    161c:	80 83       	st	Z, r24

				break;
			}
			Local_enuErrorState = ES_OK;
    161e:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
    1620:	08 95       	ret
			Local_enuErrorState = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	08 95       	ret
			}
			Local_enuErrorState = ES_OK;
		}
		else
		{
			Local_enuErrorState = ES_OUT_OF_RANGE;
    1626:	83 e0       	ldi	r24, 0x03	; 3
    1628:	08 95       	ret
    162a:	83 e0       	ldi	r24, 0x03	; 3
    162c:	08 95       	ret

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuErrorState = ES_OK;
    162e:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuErrorState = ES_NULL_POINTER;
	}

	return Local_enuErrorState;
}
    1630:	08 95       	ret

00001632 <SPI_vInitMaster>:
}

void SPI_vInitSlave (void)
{
	DDRB |= (1<<SPI_MISO) ;//Set the port B miso(master in slave out ) pin as output
	SPCR |= (1<<SPE);//Enable the SPI
    1632:	87 b3       	in	r24, 0x17	; 23
    1634:	80 6b       	ori	r24, 0xB0	; 176
    1636:	87 bb       	out	0x17, r24	; 23
    1638:	8d b1       	in	r24, 0x0d	; 13
    163a:	81 65       	ori	r24, 0x51	; 81
    163c:	8d b9       	out	0x0d, r24	; 13
    163e:	08 95       	ret

00001640 <SPI_ui8TransmitRecive>:
}

u8 SPI_ui8TransmitRecive (u8 data)
{
	SPDR = data;//move the given data to SPI Data register
    1640:	8f b9       	out	0x0f, r24	; 15
	
	//in case of master send data and wait till the data are fully transmitted
	//in case of slave wait the data to be transmitted by the master
	while (((SPSR&(1<<SPIF))>>SPIF)==0)	//wait till the transmitting is done
    1642:	77 9b       	sbis	0x0e, 7	; 14
    1644:	fe cf       	rjmp	.-4      	; 0x1642 <SPI_ui8TransmitRecive+0x2>
	;									//SPI flag is set to one if the transmission is done
	
	return SPDR;//return the value of SPI Data register after the transmission or receiving is done
    1646:	8f b1       	in	r24, 0x0f	; 15
}
    1648:	08 95       	ret

0000164a <UART_enuUART_Init>:

ES_t UART_enuUART_Init(void)
{
	ES_t Local_ErorrState = ES_NOK;

	UCSRA = 0x00; // flags RXC,TXC,UDRE -> 0,, U2X -> 0(Synchronous)
    164a:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x18; // set to be a reciever and a transmiter
    164c:	88 e1       	ldi	r24, 0x18	; 24
    164e:	8a b9       	out	0x0a, r24	; 10
	UCSRC = 0x86; // set frame format
    1650:	86 e8       	ldi	r24, 0x86	; 134
    1652:	80 bd       	out	0x20, r24	; 32

	UBRRL = 103; // 0110 0111 (BAUD)
    1654:	87 e6       	ldi	r24, 0x67	; 103
    1656:	89 b9       	out	0x09, r24	; 9
	UBRRH = 0;   // BAUD>>8  -> 0
    1658:	10 bc       	out	0x20, r1	; 32

	return Local_ErorrState;
}
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	08 95       	ret

0000165e <UART_enuSendChar>:
ES_t UART_enuSendChar( u8 Copy_u8CharData)
{
	ES_t Local_ErorrState = ES_NOK;
	// check if UDR ready(empty)for write or not using UDRE bit--> if ready..go else wait.

	while(! ((UCSRA >> 5) & 1)); // (UCSRA >> 5) -> UDRE
    165e:	5d 9b       	sbis	0x0b, 5	; 11
    1660:	fe cf       	rjmp	.-4      	; 0x165e <UART_enuSendChar>
	UDR = Copy_u8CharData;
    1662:	8c b9       	out	0x0c, r24	; 12
	  while(!((UCSRA >> 6) & 1));
	  UCSRA |= (1>>6);

*/
	return Local_ErorrState;
}
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	08 95       	ret

00001668 <UART_enuRecieveChar>:
{
	ES_t Local_ErorrState = ES_NOK;

// As long the RXc is 0 so there is no recieved data at that moment --> recieve the new data

	while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7) -> RXc
    1668:	5f 9b       	sbis	0x0b, 7	; 11
    166a:	fe cf       	rjmp	.-4      	; 0x1668 <UART_enuRecieveChar>
	*Copy_u8RxChar = UDR;
    166c:	2c b1       	in	r18, 0x0c	; 12
    166e:	fc 01       	movw	r30, r24
    1670:	20 83       	st	Z, r18

	return Local_ErorrState;
}
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	08 95       	ret

00001676 <UART_enuSendString>:

ES_t UART_enuSendString(u8 * Copy_Au8StringData)
{
    1676:	ac 01       	movw	r20, r24
	ES_t Local_ErorrState = ES_NOK;

	u8 Local_u8Iter = 0;
    1678:	20 e0       	ldi	r18, 0x00	; 0

	while(Copy_Au8StringData[Local_u8Iter] != 0) // check if data not equal  NULL
    167a:	09 c0       	rjmp	.+18     	; 0x168e <UART_enuSendString+0x18>
	{
		while(! ((UCSRA>>5) & 1 )); // wait until the UDR is empty using (UCSRA>>5) -> UDRE
    167c:	5d 9b       	sbis	0x0b, 5	; 11
    167e:	fe cf       	rjmp	.-4      	; 0x167c <UART_enuSendString+0x6>
		UDR = (Copy_Au8StringData[Local_u8Iter]);
    1680:	9c b9       	out	0x0c, r25	; 12
		UART_First_ConnectionFlag++;
    1682:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <__data_end>
    1686:	9f 5f       	subi	r25, 0xFF	; 255
    1688:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <__data_end>
		Local_u8Iter++;
    168c:	2f 5f       	subi	r18, 0xFF	; 255
{
	ES_t Local_ErorrState = ES_NOK;

	u8 Local_u8Iter = 0;

	while(Copy_Au8StringData[Local_u8Iter] != 0) // check if data not equal  NULL
    168e:	fa 01       	movw	r30, r20
    1690:	e2 0f       	add	r30, r18
    1692:	f1 1d       	adc	r31, r1
    1694:	90 81       	ld	r25, Z
    1696:	91 11       	cpse	r25, r1
    1698:	f1 cf       	rjmp	.-30     	; 0x167c <UART_enuSendString+0x6>
		UART_First_ConnectionFlag++;
		Local_u8Iter++;
	}

	return Local_ErorrState;
}
    169a:	80 e0       	ldi	r24, 0x00	; 0
    169c:	08 95       	ret

0000169e <UART_enuRecieveString>:

ES_t UART_enuRecieveString(u8 * Copy_Au8RxString)
{
    169e:	ac 01       	movw	r20, r24

	(Copy_Au8RxString[Local_u8Iter++]) = Local_u8TempChar;

	}
#elif NEW_LINE == YES
	u8 Local_u8Iter = 0;
    16a0:	20 e0       	ldi	r18, 0x00	; 0

	while(1)
	{

		while(((UCSRA >> 7) & 1) == 0); // (UCSRA >> 7)-> RXc
    16a2:	5f 9b       	sbis	0x0b, 7	; 11
    16a4:	fe cf       	rjmp	.-4      	; 0x16a2 <UART_enuRecieveString+0x4>
		(Copy_Au8RxString[Local_u8Iter]) = UDR ;
    16a6:	fa 01       	movw	r30, r20
    16a8:	e2 0f       	add	r30, r18
    16aa:	f1 1d       	adc	r31, r1
    16ac:	9c b1       	in	r25, 0x0c	; 12
    16ae:	90 83       	st	Z, r25

//to display what is typed

		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
    16b0:	5d 9b       	sbis	0x0b, 5	; 11
    16b2:	fe cf       	rjmp	.-4      	; 0x16b0 <UART_enuRecieveString+0x12>
		UDR = (Copy_Au8RxString[Local_u8Iter]);
    16b4:	9c b9       	out	0x0c, r25	; 12

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
    16b6:	90 81       	ld	r25, Z
    16b8:	9d 30       	cpi	r25, 0x0D	; 13
    16ba:	21 f0       	breq	.+8      	; 0x16c4 <UART_enuRecieveString+0x26>
    16bc:	9a 30       	cpi	r25, 0x0A	; 10
    16be:	11 f0       	breq	.+4      	; 0x16c4 <UART_enuRecieveString+0x26>
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
			break;
		}

		Local_u8Iter++;
    16c0:	2f 5f       	subi	r18, 0xFF	; 255
	}
    16c2:	ef cf       	rjmp	.-34     	; 0x16a2 <UART_enuRecieveString+0x4>
		while(! ((UCSRA>>5) & 1 )); // (UCSRA>>5)-> UDRE
		UDR = (Copy_Au8RxString[Local_u8Iter]);

		if( (Copy_Au8RxString[Local_u8Iter])=='\r' || (Copy_Au8RxString[Local_u8Iter])=='\n')
		{
			(Copy_Au8RxString[Local_u8Iter++]) = 0;
    16c4:	10 82       	st	Z, r1
		Local_u8Iter++;
	}

#endif
	return Local_ErorrState;
}
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	08 95       	ret

000016ca <UART_enuCheck_Connection>:


u8 UART_enuCheck_Connection()
{
	if(UART_First_ConnectionFlag!=0)
    16ca:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <__data_end>
    16ce:	81 11       	cpse	r24, r1
	{
		return 1;
    16d0:	81 e0       	ldi	r24, 0x01	; 1
	}

	return 0;
}
    16d2:	08 95       	ret

000016d4 <__udivmodsi4>:
    16d4:	a1 e2       	ldi	r26, 0x21	; 33
    16d6:	1a 2e       	mov	r1, r26
    16d8:	aa 1b       	sub	r26, r26
    16da:	bb 1b       	sub	r27, r27
    16dc:	fd 01       	movw	r30, r26
    16de:	0d c0       	rjmp	.+26     	; 0x16fa <__udivmodsi4_ep>

000016e0 <__udivmodsi4_loop>:
    16e0:	aa 1f       	adc	r26, r26
    16e2:	bb 1f       	adc	r27, r27
    16e4:	ee 1f       	adc	r30, r30
    16e6:	ff 1f       	adc	r31, r31
    16e8:	a2 17       	cp	r26, r18
    16ea:	b3 07       	cpc	r27, r19
    16ec:	e4 07       	cpc	r30, r20
    16ee:	f5 07       	cpc	r31, r21
    16f0:	20 f0       	brcs	.+8      	; 0x16fa <__udivmodsi4_ep>
    16f2:	a2 1b       	sub	r26, r18
    16f4:	b3 0b       	sbc	r27, r19
    16f6:	e4 0b       	sbc	r30, r20
    16f8:	f5 0b       	sbc	r31, r21

000016fa <__udivmodsi4_ep>:
    16fa:	66 1f       	adc	r22, r22
    16fc:	77 1f       	adc	r23, r23
    16fe:	88 1f       	adc	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	1a 94       	dec	r1
    1704:	69 f7       	brne	.-38     	; 0x16e0 <__udivmodsi4_loop>
    1706:	60 95       	com	r22
    1708:	70 95       	com	r23
    170a:	80 95       	com	r24
    170c:	90 95       	com	r25
    170e:	9b 01       	movw	r18, r22
    1710:	ac 01       	movw	r20, r24
    1712:	bd 01       	movw	r22, r26
    1714:	cf 01       	movw	r24, r30
    1716:	08 95       	ret

00001718 <__tablejump2__>:
    1718:	ee 0f       	add	r30, r30
    171a:	ff 1f       	adc	r31, r31
    171c:	05 90       	lpm	r0, Z+
    171e:	f4 91       	lpm	r31, Z
    1720:	e0 2d       	mov	r30, r0
    1722:	09 94       	ijmp

00001724 <_exit>:
    1724:	f8 94       	cli

00001726 <__stop_program>:
    1726:	ff cf       	rjmp	.-2      	; 0x1726 <__stop_program>
