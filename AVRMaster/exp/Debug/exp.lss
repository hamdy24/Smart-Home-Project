
exp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000858  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000114  00800060  00000858  000008ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800174  00800174  00000a00  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a00  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a30  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000205d  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a80  00000000  00000000  00002c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f72  00000000  00000000  00003691  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00004604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a5c  00000000  00000000  0000495c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014b2  00000000  00000000  000053b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000686a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 01 04 	jmp	0x802	; 0x802 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 37       	cpi	r26, 0x74	; 116
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a4 e7       	ldi	r26, 0x74	; 116
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 57 00 	call	0xae	; 0xae <main>
  8a:	0c 94 2a 04 	jmp	0x854	; 0x854 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Button_Pressed_Interrupt>:
u8 LoginSystem_u8PromotedUserOnlineFlag = 0;
u8 ShowToUser = 0;
u8 Program_Status_Flag = 0;
volatile void Button_Pressed_Interrupt()
{
	if (LoginSystem_u8AdminOnlineFlag)	//5od karar hna
  92:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <LoginSystem_u8AdminOnlineFlag>
  96:	81 11       	cpse	r24, r1
  98:	09 c0       	rjmp	.+18     	; 0xac <Button_Pressed_Interrupt+0x1a>
	{
		
	}
	else if	(LoginSystem_u8PromotedUserOnlineFlag)
  9a:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <LoginSystem_u8PromotedUserOnlineFlag>
  9e:	81 11       	cpse	r24, r1
  a0:	05 c0       	rjmp	.+10     	; 0xac <Button_Pressed_Interrupt+0x1a>
	{
		
	}
	else
	{
		Program_Status_Flag = USER_LOGIN_PAGE_STATUS;
  a2:	83 e0       	ldi	r24, 0x03	; 3
  a4:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
		ShowToUser = MAIN_MENU;
  a8:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <ShowToUser>
  ac:	08 95       	ret

000000ae <main>:

int main(void)
{
	u8 Current_State,LoginSystem_u8TrialsLeft =3;
    //DIO_enuSetPinDirection(DIO_u8GROUP_C , DIO_u8PIN6 , DIO_u8OUTPUT);
	DIO_enuInit();
  ae:	0e 94 be 02 	call	0x57c	; 0x57c <DIO_enuInit>



LCD_enuInit();
  b2:	0e 94 13 02 	call	0x426	; 0x426 <LCD_enuInit>

DIO_enuSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN1,DIO_u8OUTPUT);
  b6:	41 e0       	ldi	r20, 0x01	; 1
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_enuSetPinDirection>
   // EXTI_enuInit(EXTI_enuAstrEXTI_CONFIG);
	EXTI_enuInit();
  c0:	0e 94 ef 03 	call	0x7de	; 0x7de <EXTI_enuInit>
	__asm("sei");// GIE
  c4:	78 94       	sei
	EXTI_enuCallBack((volatile void (*) (void))Button_Pressed_Interrupt);// , 0);
  c6:	89 e4       	ldi	r24, 0x49	; 73
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	0e 94 f7 03 	call	0x7ee	; 0x7ee <EXTI_enuCallBack>
	EEPROM_ui8ReadByteFromAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,&Program_Status_Flag);
  ce:	64 e7       	ldi	r22, 0x74	; 116
  d0:	71 e0       	ldi	r23, 0x01	; 1
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	0e 94 3d 01 	call	0x27a	; 0x27a <EEPROM_ui8ReadByteFromAddress>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	82 e5       	ldi	r24, 0x52	; 82
  dc:	97 e0       	ldi	r25, 0x07	; 7
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x30>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x3a>
  e8:	00 00       	nop
	_delay_ms(150);

	LCD_enuDisplayString("Welcome To Smart");
  ea:	80 e6       	ldi	r24, 0x60	; 96
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
	LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_enuSetCursorPosition>
	LCD_enuDisplayString("Home !");
  fa:	81 e7       	ldi	r24, 0x71	; 113
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	87 ea       	ldi	r24, 0xA7	; 167
 106:	91 e6       	ldi	r25, 0x61	; 97
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	80 40       	sbci	r24, 0x00	; 0
 10c:	90 40       	sbci	r25, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x5a>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x64>
 112:	00 00       	nop
	_delay_ms (2000);
	LCD_enuClearDisplay();
 114:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_enuClearDisplay>
	if (Program_Status_Flag == FIRST_TIME_USE_STATUS)
 118:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <__data_end>
 11c:	8f 3f       	cpi	r24, 0xFF	; 255
 11e:	09 f0       	breq	.+2      	; 0x122 <main+0x74>
 120:	60 c0       	rjmp	.+192    	; 0x1e2 <main+0x134>
 122:	2f ef       	ldi	r18, 0xFF	; 255
 124:	82 e5       	ldi	r24, 0x52	; 82
 126:	97 e0       	ldi	r25, 0x07	; 7
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	80 40       	sbci	r24, 0x00	; 0
 12c:	90 40       	sbci	r25, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x7a>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x84>
 132:	00 00       	nop
	{
		_delay_ms(150);
		LCD_enuDisplayString("For First Time");
 134:	88 e7       	ldi	r24, 0x78	; 120
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
 13c:	60 e0       	ldi	r22, 0x00	; 0
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_enuSetCursorPosition>
		LCD_enuDisplayString("Use");
 144:	87 e8       	ldi	r24, 0x87	; 135
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	87 ea       	ldi	r24, 0xA7	; 167
 150:	91 e6       	ldi	r25, 0x61	; 97
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0xa4>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0xae>
 15c:	00 00       	nop
		_delay_ms(2000);
		LCD_enuClearDisplay();
 15e:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Register Admin");
 162:	8b e8       	ldi	r24, 0x8B	; 139
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
 16a:	60 e0       	ldi	r22, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_enuSetCursorPosition>
		LCD_enuDisplayString("on Keypad");
 172:	8a e9       	ldi	r24, 0x9A	; 154
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	87 ea       	ldi	r24, 0xA7	; 167
 17e:	91 e6       	ldi	r25, 0x61	; 97
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0xd2>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0xdc>
 18a:	00 00       	nop
		_delay_ms(2000);
		EEPROM_vWriteByteToAddress(SAVED_INITIAL_PROGRAM_STATUS_ADDRESS,LOAD_LOGIN_SYSTEM_DATABASE);
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 48 01 	call	0x290	; 0x290 <EEPROM_vWriteByteToAddress>
 196:	2f ef       	ldi	r18, 0xFF	; 255
 198:	82 e5       	ldi	r24, 0x52	; 82
 19a:	97 e0       	ldi	r25, 0x07	; 7
 19c:	21 50       	subi	r18, 0x01	; 1
 19e:	80 40       	sbci	r24, 0x00	; 0
 1a0:	90 40       	sbci	r25, 0x00	; 0
 1a2:	e1 f7       	brne	.-8      	; 0x19c <main+0xee>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <main+0xf8>
 1a6:	00 00       	nop
		_delay_ms(150);

		LCD_enuClearDisplay();
 1a8:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_enuClearDisplay>
		LCD_enuDisplayString("Saved");
 1ac:	84 ea       	ldi	r24, 0xA4	; 164
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
		LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
 1b4:	60 e0       	ldi	r22, 0x00	; 0
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_enuSetCursorPosition>
		LCD_enuDisplayString("Successfully");
 1bc:	8a ea       	ldi	r24, 0xAA	; 170
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	83 ed       	ldi	r24, 0xD3	; 211
 1c8:	90 e3       	ldi	r25, 0x30	; 48
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x11c>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x126>
 1d4:	00 00       	nop
		_delay_ms(1000);
		LCD_enuClearDisplay();
 1d6:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_enuClearDisplay>
		Program_Status_Flag = IDLE_STATUS;
 1da:	87 e0       	ldi	r24, 0x07	; 7
 1dc:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
 1e0:	2b c0       	rjmp	.+86     	; 0x238 <main+0x18a>
		}
		else if (Program_Status_Flag == LOAD_LOGIN_SYSTEM_DATABASE)
 1e2:	81 11       	cpse	r24, r1
 1e4:	29 c0       	rjmp	.+82     	; 0x238 <main+0x18a>
		{
			LCD_enuClearDisplay();
 1e6:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_enuClearDisplay>
			LCD_enuDisplayString("LOADING");
 1ea:	87 eb       	ldi	r24, 0xB7	; 183
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
			LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_enuSetCursorPosition>
			LCD_enuDisplayString("Successfully");
 1fa:	8a ea       	ldi	r24, 0xAA	; 170
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
 202:	2f ef       	ldi	r18, 0xFF	; 255
 204:	83 ed       	ldi	r24, 0xD3	; 211
 206:	90 e3       	ldi	r25, 0x30	; 48
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	80 40       	sbci	r24, 0x00	; 0
 20c:	90 40       	sbci	r25, 0x00	; 0
 20e:	e1 f7       	brne	.-8      	; 0x208 <main+0x15a>
 210:	00 c0       	rjmp	.+0      	; 0x212 <main+0x164>
 212:	00 00       	nop
			_delay_ms(1000);
			Program_Status_Flag = IDLE_STATUS;
 214:	87 e0       	ldi	r24, 0x07	; 7
 216:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <__data_end>
 21a:	0e c0       	rjmp	.+28     	; 0x238 <main+0x18a>
				break;
				case State_Dimmer:
				LCD_enuDisplayString("Dimmer controlled");
				break;
				default:
				LCD_enuClearDisplay();
 21c:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_enuClearDisplay>
				LCD_enuDisplayString("All Devices");
 220:	8f e4       	ldi	r24, 0x4F	; 79
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
				LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_enuSetCursorPosition>
				LCD_enuDisplayString("Are Off");
 230:	8b e5       	ldi	r24, 0x5B	; 91
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
			Program_Status_Flag = IDLE_STATUS;
		}
		
    while (1) 
    {
		while (Program_Status_Flag == IDLE_STATUS)
 238:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <__data_end>
 23c:	87 30       	cpi	r24, 0x07	; 7
 23e:	c1 f4       	brne	.+48     	; 0x270 <main+0x1c2>
 240:	ed cf       	rjmp	.-38     	; 0x21c <main+0x16e>
				/*********************Search The Users Array***********************/
			

				
					
					LCD_enuClearDisplay();
 242:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_enuClearDisplay>
					LCD_enuDisplayString("User Login");
 246:	83 e6       	ldi	r24, 0x63	; 99
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
					LCD_enuSetCursorPosition(LCD_u8YDIM_1,LCD_u8XDIM_0);
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_enuSetCursorPosition>
					LCD_enuDisplayString("Page");
 256:	8e e6       	ldi	r24, 0x6E	; 110
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_enuDisplayString>
 25e:	2f ef       	ldi	r18, 0xFF	; 255
 260:	8d e3       	ldi	r24, 0x3D	; 61
 262:	99 e4       	ldi	r25, 0x49	; 73
 264:	21 50       	subi	r18, 0x01	; 1
 266:	80 40       	sbci	r24, 0x00	; 0
 268:	90 40       	sbci	r25, 0x00	; 0
 26a:	e1 f7       	brne	.-8      	; 0x264 <main+0x1b6>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x1c0>
 26e:	00 00       	nop
				LCD_enuDisplayString("Are Off");
				break;
				
			}
    }
			while (Program_Status_Flag == USER_LOGIN_PAGE_STATUS)///off line user should have interrupt
 270:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <__data_end>
 274:	83 30       	cpi	r24, 0x03	; 3
 276:	29 f3       	breq	.-54     	; 0x242 <main+0x194>
 278:	df cf       	rjmp	.-66     	; 0x238 <main+0x18a>

0000027a <EEPROM_ui8ReadByteFromAddress>:
		/* move data from data register to the array */
		*(dist + counter) = EEDR;

		counter++;//increase the bytes counter
	}
}
 27a:	e1 99       	sbic	0x1c, 1	; 28
 27c:	fe cf       	rjmp	.-4      	; 0x27a <EEPROM_ui8ReadByteFromAddress>
 27e:	9f bb       	out	0x1f, r25	; 31
 280:	8e bb       	out	0x1e, r24	; 30
 282:	8c b3       	in	r24, 0x1c	; 28
 284:	81 60       	ori	r24, 0x01	; 1
 286:	8c bb       	out	0x1c, r24	; 28
 288:	8d b3       	in	r24, 0x1d	; 29
 28a:	fb 01       	movw	r30, r22
 28c:	80 83       	st	Z, r24
 28e:	08 95       	ret

00000290 <EEPROM_vWriteByteToAddress>:

void EEPROM_vWriteByteToAddress(const u16 uiAddress, const u8 uiData)
{

	/* Wait for completion of previous write process*/
	while ( ( (EECR & (1 << EEWE) ) >>EEWE ) == 1)
 290:	e1 99       	sbic	0x1c, 1	; 28
 292:	fe cf       	rjmp	.-4      	; 0x290 <EEPROM_vWriteByteToAddress>
	;
	/* Set up address register */
	EEAR = uiAddress;
 294:	9f bb       	out	0x1f, r25	; 31
 296:	8e bb       	out	0x1e, r24	; 30

	/* Read the byte in the address of EEAR */
	EECR |= (1 << EERE);
 298:	8c b3       	in	r24, 0x1c	; 28
 29a:	81 60       	ori	r24, 0x01	; 1
 29c:	8c bb       	out	0x1c, r24	; 28
	if (EEDR != uiData)//compare the value read to the value to be written
 29e:	8d b3       	in	r24, 0x1d	; 29
 2a0:	86 17       	cp	r24, r22
 2a2:	39 f0       	breq	.+14     	; 0x2b2 <EEPROM_vWriteByteToAddress+0x22>
	{//if they are not equal then write the data 
		EEDR = uiData;//move the data to EEDR
 2a4:	6d bb       	out	0x1d, r22	; 29

		/* Write logical one to EEMWE */
		EECR |= (1 << EEMWE);
 2a6:	8c b3       	in	r24, 0x1c	; 28
 2a8:	84 60       	ori	r24, 0x04	; 4
 2aa:	8c bb       	out	0x1c, r24	; 28
		/* Start EEPROM write by setting EEWE */
		EECR |= (1 << EEWE);
 2ac:	8c b3       	in	r24, 0x1c	; 28
 2ae:	82 60       	ori	r24, 0x02	; 2
 2b0:	8c bb       	out	0x1c, r24	; 28
 2b2:	08 95       	ret

000002b4 <LCD_enuWriteNLatch>:
				/*********el mafrood a3mel error status check hna bs 3ashan write and latch me7taga te3mel return ES_OK fa me7taga ta3deel**********/
			}
	}

	return Local_enuerrorStates;
}
 2b4:	1f 93       	push	r17
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	1f 92       	push	r1
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	18 2f       	mov	r17, r24
 2c2:	40 e0       	ldi	r20, 0x00	; 0
 2c4:	63 e0       	ldi	r22, 0x03	; 3
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 2d6:	18 32       	cpi	r17, 0x28	; 40
 2d8:	e1 f5       	brne	.+120    	; 0x352 <LCD_enuWriteNLatch+0x9e>
 2da:	ae 01       	movw	r20, r28
 2dc:	4f 5f       	subi	r20, 0xFF	; 255
 2de:	5f 4f       	sbci	r21, 0xFF	; 255
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 a8 03 	call	0x750	; 0x750 <DIO_enuGetPinValue>
 2e8:	89 81       	ldd	r24, Y+1	; 0x01
 2ea:	81 11       	cpse	r24, r1
 2ec:	32 c0       	rjmp	.+100    	; 0x352 <LCD_enuWriteNLatch+0x9e>
 2ee:	41 2f       	mov	r20, r17
 2f0:	44 1f       	adc	r20, r20
 2f2:	44 27       	eor	r20, r20
 2f4:	44 1f       	adc	r20, r20
 2f6:	67 e0       	ldi	r22, 0x07	; 7
 2f8:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 2fc:	16 fb       	bst	r17, 6
 2fe:	44 27       	eor	r20, r20
 300:	40 f9       	bld	r20, 0
 302:	66 e0       	ldi	r22, 0x06	; 6
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 30a:	15 fb       	bst	r17, 5
 30c:	44 27       	eor	r20, r20
 30e:	40 f9       	bld	r20, 0
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 318:	14 fb       	bst	r17, 4
 31a:	44 27       	eor	r20, r20
 31c:	40 f9       	bld	r20, 0
 31e:	64 e0       	ldi	r22, 0x04	; 4
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	63 e0       	ldi	r22, 0x03	; 3
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 330:	81 ee       	ldi	r24, 0xE1	; 225
 332:	94 e0       	ldi	r25, 0x04	; 4
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <LCD_enuWriteNLatch+0x80>
 338:	00 c0       	rjmp	.+0      	; 0x33a <LCD_enuWriteNLatch+0x86>
 33a:	00 00       	nop
 33c:	40 e0       	ldi	r20, 0x00	; 0
 33e:	63 e0       	ldi	r22, 0x03	; 3
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 346:	83 ed       	ldi	r24, 0xD3	; 211
 348:	90 e3       	ldi	r25, 0x30	; 48
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <LCD_enuWriteNLatch+0x96>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <LCD_enuWriteNLatch+0x9c>
 350:	00 00       	nop
 352:	41 2f       	mov	r20, r17
 354:	44 1f       	adc	r20, r20
 356:	44 27       	eor	r20, r20
 358:	44 1f       	adc	r20, r20
 35a:	67 e0       	ldi	r22, 0x07	; 7
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 362:	16 fb       	bst	r17, 6
 364:	44 27       	eor	r20, r20
 366:	40 f9       	bld	r20, 0
 368:	66 e0       	ldi	r22, 0x06	; 6
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 370:	15 fb       	bst	r17, 5
 372:	44 27       	eor	r20, r20
 374:	40 f9       	bld	r20, 0
 376:	65 e0       	ldi	r22, 0x05	; 5
 378:	80 e0       	ldi	r24, 0x00	; 0
 37a:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 37e:	14 fb       	bst	r17, 4
 380:	44 27       	eor	r20, r20
 382:	40 f9       	bld	r20, 0
 384:	64 e0       	ldi	r22, 0x04	; 4
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	63 e0       	ldi	r22, 0x03	; 3
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 396:	81 ee       	ldi	r24, 0xE1	; 225
 398:	94 e0       	ldi	r25, 0x04	; 4
 39a:	01 97       	sbiw	r24, 0x01	; 1
 39c:	f1 f7       	brne	.-4      	; 0x39a <LCD_enuWriteNLatch+0xe6>
 39e:	00 c0       	rjmp	.+0      	; 0x3a0 <LCD_enuWriteNLatch+0xec>
 3a0:	00 00       	nop
 3a2:	40 e0       	ldi	r20, 0x00	; 0
 3a4:	63 e0       	ldi	r22, 0x03	; 3
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 3ac:	83 ed       	ldi	r24, 0xD3	; 211
 3ae:	90 e3       	ldi	r25, 0x30	; 48
 3b0:	01 97       	sbiw	r24, 0x01	; 1
 3b2:	f1 f7       	brne	.-4      	; 0x3b0 <LCD_enuWriteNLatch+0xfc>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <LCD_enuWriteNLatch+0x102>
 3b6:	00 00       	nop
 3b8:	13 fb       	bst	r17, 3
 3ba:	44 27       	eor	r20, r20
 3bc:	40 f9       	bld	r20, 0
 3be:	67 e0       	ldi	r22, 0x07	; 7
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 3c6:	12 fb       	bst	r17, 2
 3c8:	44 27       	eor	r20, r20
 3ca:	40 f9       	bld	r20, 0
 3cc:	66 e0       	ldi	r22, 0x06	; 6
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 3d4:	11 fb       	bst	r17, 1
 3d6:	44 27       	eor	r20, r20
 3d8:	40 f9       	bld	r20, 0
 3da:	65 e0       	ldi	r22, 0x05	; 5
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 3e2:	41 2f       	mov	r20, r17
 3e4:	41 70       	andi	r20, 0x01	; 1
 3e6:	64 e0       	ldi	r22, 0x04	; 4
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	63 e0       	ldi	r22, 0x03	; 3
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 3f8:	81 ee       	ldi	r24, 0xE1	; 225
 3fa:	94 e0       	ldi	r25, 0x04	; 4
 3fc:	01 97       	sbiw	r24, 0x01	; 1
 3fe:	f1 f7       	brne	.-4      	; 0x3fc <LCD_enuWriteNLatch+0x148>
 400:	00 c0       	rjmp	.+0      	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 402:	00 00       	nop
 404:	40 e0       	ldi	r20, 0x00	; 0
 406:	63 e0       	ldi	r22, 0x03	; 3
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 40e:	83 ed       	ldi	r24, 0xD3	; 211
 410:	90 e3       	ldi	r25, 0x30	; 48
 412:	01 97       	sbiw	r24, 0x01	; 1
 414:	f1 f7       	brne	.-4      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 416:	00 c0       	rjmp	.+0      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 418:	00 00       	nop
 41a:	80 e0       	ldi	r24, 0x00	; 0
 41c:	0f 90       	pop	r0
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	1f 91       	pop	r17
 424:	08 95       	ret

00000426 <LCD_enuInit>:
 426:	41 e0       	ldi	r20, 0x01	; 1
 428:	61 e0       	ldi	r22, 0x01	; 1
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_enuSetPinDirection>
 430:	41 e0       	ldi	r20, 0x01	; 1
 432:	62 e0       	ldi	r22, 0x02	; 2
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_enuSetPinDirection>
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	63 e0       	ldi	r22, 0x03	; 3
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_enuSetPinDirection>
 444:	41 e0       	ldi	r20, 0x01	; 1
 446:	67 e0       	ldi	r22, 0x07	; 7
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_enuSetPinDirection>
 44e:	41 e0       	ldi	r20, 0x01	; 1
 450:	66 e0       	ldi	r22, 0x06	; 6
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_enuSetPinDirection>
 458:	41 e0       	ldi	r20, 0x01	; 1
 45a:	65 e0       	ldi	r22, 0x05	; 5
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_enuSetPinDirection>
 462:	41 e0       	ldi	r20, 0x01	; 1
 464:	64 e0       	ldi	r22, 0x04	; 4
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 c4 02 	call	0x588	; 0x588 <DIO_enuSetPinDirection>
 46c:	8d e2       	ldi	r24, 0x2D	; 45
 46e:	92 e2       	ldi	r25, 0x22	; 34
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <LCD_enuInit+0x4a>
 474:	00 c0       	rjmp	.+0      	; 0x476 <LCD_enuInit+0x50>
 476:	00 00       	nop
 478:	40 e0       	ldi	r20, 0x00	; 0
 47a:	61 e0       	ldi	r22, 0x01	; 1
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 482:	88 e2       	ldi	r24, 0x28	; 40
 484:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_enuWriteNLatch>
 488:	89 ef       	ldi	r24, 0xF9	; 249
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <LCD_enuInit+0x66>
 490:	00 c0       	rjmp	.+0      	; 0x492 <LCD_enuInit+0x6c>
 492:	00 00       	nop
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	61 e0       	ldi	r22, 0x01	; 1
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 49e:	8f e0       	ldi	r24, 0x0F	; 15
 4a0:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_enuWriteNLatch>
 4a4:	89 ef       	ldi	r24, 0xF9	; 249
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <LCD_enuInit+0x82>
 4ac:	00 c0       	rjmp	.+0      	; 0x4ae <LCD_enuInit+0x88>
 4ae:	00 00       	nop
 4b0:	40 e0       	ldi	r20, 0x00	; 0
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 4ba:	81 e0       	ldi	r24, 0x01	; 1
 4bc:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_enuWriteNLatch>
 4c0:	83 ef       	ldi	r24, 0xF3	; 243
 4c2:	91 e0       	ldi	r25, 0x01	; 1
 4c4:	01 97       	sbiw	r24, 0x01	; 1
 4c6:	f1 f7       	brne	.-4      	; 0x4c4 <LCD_enuInit+0x9e>
 4c8:	00 c0       	rjmp	.+0      	; 0x4ca <LCD_enuInit+0xa4>
 4ca:	00 00       	nop
 4cc:	40 e0       	ldi	r20, 0x00	; 0
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 4d6:	86 e0       	ldi	r24, 0x06	; 6
 4d8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_enuWriteNLatch>
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	08 95       	ret

000004e0 <LCD_enuDisplayString>:

ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	cf 93       	push	r28
 4e6:	df 93       	push	r29
 4e8:	ec 01       	movw	r28, r24
	ES_t Local_enuerrorStates = ES_NOK;
	if (Copy_pcString != NULL)
 4ea:	89 2b       	or	r24, r25
 4ec:	79 f4       	brne	.+30     	; 0x50c <LCD_enuDisplayString+0x2c>
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
			Local_enuerrorStates = LCD_enuWriteNLatch(*Copy_pcString++);
		}

	}
	else Local_enuerrorStates = ES_NULL_POINTER;
 4ee:	82 e0       	ldi	r24, 0x02	; 2
 4f0:	11 c0       	rjmp	.+34     	; 0x514 <LCD_enuDisplayString+0x34>
	ES_t Local_enuerrorStates = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
		{
			DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8HIGH);
 4f2:	41 e0       	ldi	r20, 0x01	; 1
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
			Local_enuerrorStates = LCD_enuWriteNLatch(*Copy_pcString++);
 4fc:	8e 01       	movw	r16, r28
 4fe:	0f 5f       	subi	r16, 0xFF	; 255
 500:	1f 4f       	sbci	r17, 0xFF	; 255
 502:	88 81       	ld	r24, Y
 504:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_enuWriteNLatch>
 508:	e8 01       	movw	r28, r16
 50a:	01 c0       	rjmp	.+2      	; 0x50e <LCD_enuDisplayString+0x2e>
 50c:	80 e0       	ldi	r24, 0x00	; 0
ES_t LCD_enuDisplayString(const char * Copy_pcString)
{
	ES_t Local_enuerrorStates = ES_NOK;
	if (Copy_pcString != NULL)
	{
		while (*Copy_pcString)
 50e:	98 81       	ld	r25, Y
 510:	91 11       	cpse	r25, r1
 512:	ef cf       	rjmp	.-34     	; 0x4f2 <LCD_enuDisplayString+0x12>
		}

	}
	else Local_enuerrorStates = ES_NULL_POINTER;
	return Local_enuerrorStates;
}
 514:	df 91       	pop	r29
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	08 95       	ret

0000051e <LCD_enuSetCursorPosition>:


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{
 51e:	1f 93       	push	r17
 520:	cf 93       	push	r28
 522:	df 93       	push	r29

	ES_t Local_enuerrorStates = ES_NOK;
	if ((Copy_u8XDimension <= LCD_u8XDIM_1) && (Copy_u8YDimension <= LCD_u8YDIM_15))
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	a8 f4       	brcc	.+42     	; 0x552 <LCD_enuSetCursorPosition+0x34>
 528:	60 31       	cpi	r22, 0x10	; 16
 52a:	a8 f4       	brcc	.+42     	; 0x556 <LCD_enuSetCursorPosition+0x38>
 52c:	16 2f       	mov	r17, r22
 52e:	c8 2f       	mov	r28, r24
		{
		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
 530:	40 e0       	ldi	r20, 0x00	; 0
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	81 e0       	ldi	r24, 0x01	; 1
 536:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 53a:	d8 2f       	mov	r29, r24
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
 53c:	8c 2f       	mov	r24, r28
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 96       	adiw	r24, 0x02	; 2
 542:	20 e4       	ldi	r18, 0x40	; 64
 544:	82 9f       	mul	r24, r18
 546:	10 0d       	add	r17, r0
 548:	11 24       	eor	r1, r1
 54a:	81 2f       	mov	r24, r17
 54c:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_enuWriteNLatch>
 550:	03 c0       	rjmp	.+6      	; 0x558 <LCD_enuSetCursorPosition+0x3a>


ES_t LCD_enuSetCursorPosition(u8 Copy_u8XDimension, u8 Copy_u8YDimension)
{

	ES_t Local_enuerrorStates = ES_NOK;
 552:	d0 e0       	ldi	r29, 0x00	; 0
 554:	01 c0       	rjmp	.+2      	; 0x558 <LCD_enuSetCursorPosition+0x3a>
 556:	d0 e0       	ldi	r29, 0x00	; 0
		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
		LCD_enuWriteNLatch(0x80 + (Copy_u8XDimension*64) + Copy_u8YDimension);
		}
	return Local_enuerrorStates;

}
 558:	8d 2f       	mov	r24, r29
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	08 95       	ret

00000562 <LCD_enuClearDisplay>:

ES_t LCD_enuClearDisplay( void )
{
 562:	cf 93       	push	r28

	ES_t Local_enuerrorStates = ES_NOK;

		Local_enuerrorStates = DIO_enuSetPinValue(RS_PORT, RS_PIN , DIO_u8LOW);
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	61 e0       	ldi	r22, 0x01	; 1
 568:	81 e0       	ldi	r24, 0x01	; 1
 56a:	0e 94 36 03 	call	0x66c	; 0x66c <DIO_enuSetPinValue>
 56e:	c8 2f       	mov	r28, r24
		LCD_enuWriteNLatch(0x01);
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <LCD_enuWriteNLatch>

	return Local_enuerrorStates;

}
 576:	8c 2f       	mov	r24, r28
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

0000057c <DIO_enuInit>:
	{
		Local_enuerrorStates = ES_OUT_OF_RANGE;
	}

	return Local_enuerrorStates;
}
 57c:	81 eb       	ldi	r24, 0xB1	; 177
 57e:	8a bb       	out	0x1a, r24	; 26
 580:	86 e1       	ldi	r24, 0x16	; 22
 582:	8b bb       	out	0x1b, r24	; 27
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	08 95       	ret

00000588 <DIO_enuSetPinDirection>:
 588:	84 30       	cpi	r24, 0x04	; 4
 58a:	08 f0       	brcs	.+2      	; 0x58e <DIO_enuSetPinDirection+0x6>
 58c:	67 c0       	rjmp	.+206    	; 0x65c <DIO_enuSetPinDirection+0xd4>
 58e:	68 30       	cpi	r22, 0x08	; 8
 590:	08 f0       	brcs	.+2      	; 0x594 <DIO_enuSetPinDirection+0xc>
 592:	66 c0       	rjmp	.+204    	; 0x660 <DIO_enuSetPinDirection+0xd8>
 594:	42 30       	cpi	r20, 0x02	; 2
 596:	08 f0       	brcs	.+2      	; 0x59a <DIO_enuSetPinDirection+0x12>
 598:	65 c0       	rjmp	.+202    	; 0x664 <DIO_enuSetPinDirection+0xdc>
 59a:	81 30       	cpi	r24, 0x01	; 1
 59c:	e9 f0       	breq	.+58     	; 0x5d8 <DIO_enuSetPinDirection+0x50>
 59e:	30 f0       	brcs	.+12     	; 0x5ac <DIO_enuSetPinDirection+0x24>
 5a0:	82 30       	cpi	r24, 0x02	; 2
 5a2:	81 f1       	breq	.+96     	; 0x604 <DIO_enuSetPinDirection+0x7c>
 5a4:	83 30       	cpi	r24, 0x03	; 3
 5a6:	09 f4       	brne	.+2      	; 0x5aa <DIO_enuSetPinDirection+0x22>
 5a8:	43 c0       	rjmp	.+134    	; 0x630 <DIO_enuSetPinDirection+0xa8>
 5aa:	5e c0       	rjmp	.+188    	; 0x668 <DIO_enuSetPinDirection+0xe0>
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	06 2e       	mov	r0, r22
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_enuSetPinDirection+0x30>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	0a 94       	dec	r0
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_enuSetPinDirection+0x2c>
 5bc:	80 95       	com	r24
 5be:	2a b3       	in	r18, 0x1a	; 26
 5c0:	28 23       	and	r18, r24
 5c2:	84 2f       	mov	r24, r20
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_enuSetPinDirection+0x44>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_enuSetPinDirection+0x40>
 5d0:	82 2b       	or	r24, r18
 5d2:	8a bb       	out	0x1a, r24	; 26
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	08 95       	ret
 5d8:	21 e0       	ldi	r18, 0x01	; 1
 5da:	30 e0       	ldi	r19, 0x00	; 0
 5dc:	06 2e       	mov	r0, r22
 5de:	02 c0       	rjmp	.+4      	; 0x5e4 <DIO_enuSetPinDirection+0x5c>
 5e0:	22 0f       	add	r18, r18
 5e2:	33 1f       	adc	r19, r19
 5e4:	0a 94       	dec	r0
 5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <DIO_enuSetPinDirection+0x58>
 5e8:	20 95       	com	r18
 5ea:	87 b3       	in	r24, 0x17	; 23
 5ec:	28 23       	and	r18, r24
 5ee:	84 2f       	mov	r24, r20
 5f0:	90 e0       	ldi	r25, 0x00	; 0
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_enuSetPinDirection+0x70>
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	6a 95       	dec	r22
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_enuSetPinDirection+0x6c>
 5fc:	82 2b       	or	r24, r18
 5fe:	87 bb       	out	0x17, r24	; 23
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	08 95       	ret
 604:	21 e0       	ldi	r18, 0x01	; 1
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	06 2e       	mov	r0, r22
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_enuSetPinDirection+0x88>
 60c:	22 0f       	add	r18, r18
 60e:	33 1f       	adc	r19, r19
 610:	0a 94       	dec	r0
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_enuSetPinDirection+0x84>
 614:	20 95       	com	r18
 616:	84 b3       	in	r24, 0x14	; 20
 618:	28 23       	and	r18, r24
 61a:	84 2f       	mov	r24, r20
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_enuSetPinDirection+0x9c>
 620:	88 0f       	add	r24, r24
 622:	99 1f       	adc	r25, r25
 624:	6a 95       	dec	r22
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_enuSetPinDirection+0x98>
 628:	82 2b       	or	r24, r18
 62a:	84 bb       	out	0x14, r24	; 20
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	08 95       	ret
 630:	21 e0       	ldi	r18, 0x01	; 1
 632:	30 e0       	ldi	r19, 0x00	; 0
 634:	06 2e       	mov	r0, r22
 636:	02 c0       	rjmp	.+4      	; 0x63c <DIO_enuSetPinDirection+0xb4>
 638:	22 0f       	add	r18, r18
 63a:	33 1f       	adc	r19, r19
 63c:	0a 94       	dec	r0
 63e:	e2 f7       	brpl	.-8      	; 0x638 <DIO_enuSetPinDirection+0xb0>
 640:	20 95       	com	r18
 642:	81 b3       	in	r24, 0x11	; 17
 644:	28 23       	and	r18, r24
 646:	84 2f       	mov	r24, r20
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 c0       	rjmp	.+4      	; 0x650 <DIO_enuSetPinDirection+0xc8>
 64c:	88 0f       	add	r24, r24
 64e:	99 1f       	adc	r25, r25
 650:	6a 95       	dec	r22
 652:	e2 f7       	brpl	.-8      	; 0x64c <DIO_enuSetPinDirection+0xc4>
 654:	82 2b       	or	r24, r18
 656:	81 bb       	out	0x11, r24	; 17
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	08 95       	ret
 65c:	83 e0       	ldi	r24, 0x03	; 3
 65e:	08 95       	ret
 660:	83 e0       	ldi	r24, 0x03	; 3
 662:	08 95       	ret
 664:	83 e0       	ldi	r24, 0x03	; 3
 666:	08 95       	ret
 668:	81 e0       	ldi	r24, 0x01	; 1
 66a:	08 95       	ret

0000066c <DIO_enuSetPinValue>:
 66c:	84 30       	cpi	r24, 0x04	; 4
 66e:	08 f0       	brcs	.+2      	; 0x672 <DIO_enuSetPinValue+0x6>
 670:	67 c0       	rjmp	.+206    	; 0x740 <DIO_enuSetPinValue+0xd4>
 672:	68 30       	cpi	r22, 0x08	; 8
 674:	08 f0       	brcs	.+2      	; 0x678 <DIO_enuSetPinValue+0xc>
 676:	66 c0       	rjmp	.+204    	; 0x744 <DIO_enuSetPinValue+0xd8>
 678:	42 30       	cpi	r20, 0x02	; 2
 67a:	08 f0       	brcs	.+2      	; 0x67e <DIO_enuSetPinValue+0x12>
 67c:	65 c0       	rjmp	.+202    	; 0x748 <DIO_enuSetPinValue+0xdc>
 67e:	81 30       	cpi	r24, 0x01	; 1
 680:	e9 f0       	breq	.+58     	; 0x6bc <DIO_enuSetPinValue+0x50>
 682:	30 f0       	brcs	.+12     	; 0x690 <DIO_enuSetPinValue+0x24>
 684:	82 30       	cpi	r24, 0x02	; 2
 686:	81 f1       	breq	.+96     	; 0x6e8 <DIO_enuSetPinValue+0x7c>
 688:	83 30       	cpi	r24, 0x03	; 3
 68a:	09 f4       	brne	.+2      	; 0x68e <DIO_enuSetPinValue+0x22>
 68c:	43 c0       	rjmp	.+134    	; 0x714 <DIO_enuSetPinValue+0xa8>
 68e:	5e c0       	rjmp	.+188    	; 0x74c <DIO_enuSetPinValue+0xe0>
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	06 2e       	mov	r0, r22
 696:	02 c0       	rjmp	.+4      	; 0x69c <DIO_enuSetPinValue+0x30>
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	0a 94       	dec	r0
 69e:	e2 f7       	brpl	.-8      	; 0x698 <DIO_enuSetPinValue+0x2c>
 6a0:	80 95       	com	r24
 6a2:	2b b3       	in	r18, 0x1b	; 27
 6a4:	28 23       	and	r18, r24
 6a6:	84 2f       	mov	r24, r20
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	02 c0       	rjmp	.+4      	; 0x6b0 <DIO_enuSetPinValue+0x44>
 6ac:	88 0f       	add	r24, r24
 6ae:	99 1f       	adc	r25, r25
 6b0:	6a 95       	dec	r22
 6b2:	e2 f7       	brpl	.-8      	; 0x6ac <DIO_enuSetPinValue+0x40>
 6b4:	82 2b       	or	r24, r18
 6b6:	8b bb       	out	0x1b, r24	; 27
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	08 95       	ret
 6bc:	21 e0       	ldi	r18, 0x01	; 1
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	06 2e       	mov	r0, r22
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <DIO_enuSetPinValue+0x5c>
 6c4:	22 0f       	add	r18, r18
 6c6:	33 1f       	adc	r19, r19
 6c8:	0a 94       	dec	r0
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <DIO_enuSetPinValue+0x58>
 6cc:	20 95       	com	r18
 6ce:	88 b3       	in	r24, 0x18	; 24
 6d0:	28 23       	and	r18, r24
 6d2:	84 2f       	mov	r24, r20
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_enuSetPinValue+0x70>
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	6a 95       	dec	r22
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_enuSetPinValue+0x6c>
 6e0:	82 2b       	or	r24, r18
 6e2:	88 bb       	out	0x18, r24	; 24
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	08 95       	ret
 6e8:	21 e0       	ldi	r18, 0x01	; 1
 6ea:	30 e0       	ldi	r19, 0x00	; 0
 6ec:	06 2e       	mov	r0, r22
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <DIO_enuSetPinValue+0x88>
 6f0:	22 0f       	add	r18, r18
 6f2:	33 1f       	adc	r19, r19
 6f4:	0a 94       	dec	r0
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <DIO_enuSetPinValue+0x84>
 6f8:	20 95       	com	r18
 6fa:	85 b3       	in	r24, 0x15	; 21
 6fc:	28 23       	and	r18, r24
 6fe:	84 2f       	mov	r24, r20
 700:	90 e0       	ldi	r25, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <DIO_enuSetPinValue+0x9c>
 704:	88 0f       	add	r24, r24
 706:	99 1f       	adc	r25, r25
 708:	6a 95       	dec	r22
 70a:	e2 f7       	brpl	.-8      	; 0x704 <DIO_enuSetPinValue+0x98>
 70c:	82 2b       	or	r24, r18
 70e:	85 bb       	out	0x15, r24	; 21
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	08 95       	ret
 714:	21 e0       	ldi	r18, 0x01	; 1
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	06 2e       	mov	r0, r22
 71a:	02 c0       	rjmp	.+4      	; 0x720 <DIO_enuSetPinValue+0xb4>
 71c:	22 0f       	add	r18, r18
 71e:	33 1f       	adc	r19, r19
 720:	0a 94       	dec	r0
 722:	e2 f7       	brpl	.-8      	; 0x71c <DIO_enuSetPinValue+0xb0>
 724:	20 95       	com	r18
 726:	82 b3       	in	r24, 0x12	; 18
 728:	28 23       	and	r18, r24
 72a:	84 2f       	mov	r24, r20
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	02 c0       	rjmp	.+4      	; 0x734 <DIO_enuSetPinValue+0xc8>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	6a 95       	dec	r22
 736:	e2 f7       	brpl	.-8      	; 0x730 <DIO_enuSetPinValue+0xc4>
 738:	82 2b       	or	r24, r18
 73a:	82 bb       	out	0x12, r24	; 18
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	08 95       	ret
 740:	83 e0       	ldi	r24, 0x03	; 3
 742:	08 95       	ret
 744:	83 e0       	ldi	r24, 0x03	; 3
 746:	08 95       	ret
 748:	83 e0       	ldi	r24, 0x03	; 3
 74a:	08 95       	ret
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	08 95       	ret

00000750 <DIO_enuGetPinValue>:
ES_t DIO_enuGetPinValue(u8 Copy_u8PortID , u8 Copy_u8PinID , u8 * Copy_pu8Value)
{
	ES_t Local_enuerrorStates = ES_NOK;

	if (Copy_pu8Value != NULL)
 750:	41 15       	cp	r20, r1
 752:	51 05       	cpc	r21, r1
 754:	e1 f1       	breq	.+120    	; 0x7ce <DIO_enuGetPinValue+0x7e>
	{
		if(Copy_u8PortID <= DIO_u8GROUP_D
 756:	84 30       	cpi	r24, 0x04	; 4
 758:	e0 f5       	brcc	.+120    	; 0x7d2 <DIO_enuGetPinValue+0x82>
				&& Copy_u8PinID <= DIO_u8PIN7)
 75a:	68 30       	cpi	r22, 0x08	; 8
 75c:	e0 f5       	brcc	.+120    	; 0x7d6 <DIO_enuGetPinValue+0x86>
		{
			switch (Copy_u8PortID)
 75e:	81 30       	cpi	r24, 0x01	; 1
 760:	91 f0       	breq	.+36     	; 0x786 <DIO_enuGetPinValue+0x36>
 762:	28 f0       	brcs	.+10     	; 0x76e <DIO_enuGetPinValue+0x1e>
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	d9 f0       	breq	.+54     	; 0x79e <DIO_enuGetPinValue+0x4e>
 768:	83 30       	cpi	r24, 0x03	; 3
 76a:	29 f1       	breq	.+74     	; 0x7b6 <DIO_enuGetPinValue+0x66>
 76c:	36 c0       	rjmp	.+108    	; 0x7da <DIO_enuGetPinValue+0x8a>
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);
 76e:	89 b3       	in	r24, 0x19	; 25
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_enuGetPinValue+0x28>
 774:	95 95       	asr	r25
 776:	87 95       	ror	r24
 778:	6a 95       	dec	r22
 77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_enuGetPinValue+0x24>
 77c:	81 70       	andi	r24, 0x01	; 1
 77e:	fa 01       	movw	r30, r20
 780:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuerrorStates = ES_OK;
 782:	81 e0       	ldi	r24, 0x01	; 1
			{
			case DIO_u8GROUP_A:

				*Copy_pu8Value = ( (PINA >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
 784:	08 95       	ret
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);
 786:	86 b3       	in	r24, 0x16	; 22
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	02 c0       	rjmp	.+4      	; 0x790 <DIO_enuGetPinValue+0x40>
 78c:	95 95       	asr	r25
 78e:	87 95       	ror	r24
 790:	6a 95       	dec	r22
 792:	e2 f7       	brpl	.-8      	; 0x78c <DIO_enuGetPinValue+0x3c>
 794:	81 70       	andi	r24, 0x01	; 1
 796:	fa 01       	movw	r30, r20
 798:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuerrorStates = ES_OK;
 79a:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_B:

				*Copy_pu8Value = ( (PINB >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
 79c:	08 95       	ret
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);
 79e:	83 b3       	in	r24, 0x13	; 19
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	02 c0       	rjmp	.+4      	; 0x7a8 <DIO_enuGetPinValue+0x58>
 7a4:	95 95       	asr	r25
 7a6:	87 95       	ror	r24
 7a8:	6a 95       	dec	r22
 7aa:	e2 f7       	brpl	.-8      	; 0x7a4 <DIO_enuGetPinValue+0x54>
 7ac:	81 70       	andi	r24, 0x01	; 1
 7ae:	fa 01       	movw	r30, r20
 7b0:	80 83       	st	Z, r24

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuerrorStates = ES_OK;
 7b2:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_C:

				*Copy_pu8Value = ( (PINC >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
 7b4:	08 95       	ret
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);
 7b6:	80 b3       	in	r24, 0x10	; 16
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	02 c0       	rjmp	.+4      	; 0x7c0 <DIO_enuGetPinValue+0x70>
 7bc:	95 95       	asr	r25
 7be:	87 95       	ror	r24
 7c0:	6a 95       	dec	r22
 7c2:	e2 f7       	brpl	.-8      	; 0x7bc <DIO_enuGetPinValue+0x6c>
 7c4:	81 70       	andi	r24, 0x01	; 1
 7c6:	fa 01       	movw	r30, r20
 7c8:	80 83       	st	Z, r24

				break;
			}
			Local_enuerrorStates = ES_OK;
 7ca:	81 e0       	ldi	r24, 0x01	; 1
				break;
			case DIO_u8GROUP_D:

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
 7cc:	08 95       	ret
			Local_enuerrorStates = ES_OUT_OF_RANGE;
		}
	}
	else
	{
		Local_enuerrorStates = ES_NULL_POINTER;
 7ce:	82 e0       	ldi	r24, 0x02	; 2
 7d0:	08 95       	ret
			}
			Local_enuerrorStates = ES_OK;
		}
		else
		{
			Local_enuerrorStates = ES_OUT_OF_RANGE;
 7d2:	83 e0       	ldi	r24, 0x03	; 3
 7d4:	08 95       	ret
 7d6:	83 e0       	ldi	r24, 0x03	; 3
 7d8:	08 95       	ret

				*Copy_pu8Value = ( (PIND >> Copy_u8PinID ) & DIO_MASK_BIT);

				break;
			}
			Local_enuerrorStates = ES_OK;
 7da:	81 e0       	ldi	r24, 0x01	; 1
	{
		Local_enuerrorStates = ES_NULL_POINTER;
	}

	return Local_enuerrorStates;
}
 7dc:	08 95       	ret

000007de <EXTI_enuInit>:

		GICR &= ~(1<<6);
		Local_enuerrorStates = ES_OK;

return Local_enuerrorStates;
}
 7de:	8b b7       	in	r24, 0x3b	; 59
 7e0:	80 64       	ori	r24, 0x40	; 64
 7e2:	8b bf       	out	0x3b, r24	; 59
 7e4:	85 b7       	in	r24, 0x35	; 53
 7e6:	83 60       	ori	r24, 0x03	; 3
 7e8:	85 bf       	out	0x35, r24	; 53
 7ea:	80 e0       	ldi	r24, 0x00	; 0
 7ec:	08 95       	ret

000007ee <EXTI_enuCallBack>:

ES_t EXTI_enuCallBack(volatile void  (* pfunAppFunction)(void))//,u8 Copy_u8InterruptNum)
{
ES_t Local_enuerrorStates = ES_NOK ;

	if(pfunAppFunction != NULL)
 7ee:	00 97       	sbiw	r24, 0x00	; 0
 7f0:	31 f0       	breq	.+12     	; 0x7fe <EXTI_enuCallBack+0x10>
	{
		
		
			EXTI_pfunISR_fun = pfunAppFunction;
 7f2:	90 93 79 01 	sts	0x0179, r25	; 0x800179 <EXTI_pfunISR_fun+0x1>
 7f6:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <EXTI_pfunISR_fun>

			Local_enuerrorStates = ES_OK;
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	08 95       	ret
		
	}
	else
	{
		Local_enuerrorStates = ES_NULL_POINTER;
 7fe:	82 e0       	ldi	r24, 0x02	; 2
	}

	return Local_enuerrorStates;
}
 800:	08 95       	ret

00000802 <__vector_1>:

ISR(VECT_INT0)
{
 802:	1f 92       	push	r1
 804:	0f 92       	push	r0
 806:	0f b6       	in	r0, 0x3f	; 63
 808:	0f 92       	push	r0
 80a:	11 24       	eor	r1, r1
 80c:	2f 93       	push	r18
 80e:	3f 93       	push	r19
 810:	4f 93       	push	r20
 812:	5f 93       	push	r21
 814:	6f 93       	push	r22
 816:	7f 93       	push	r23
 818:	8f 93       	push	r24
 81a:	9f 93       	push	r25
 81c:	af 93       	push	r26
 81e:	bf 93       	push	r27
 820:	ef 93       	push	r30
 822:	ff 93       	push	r31
	if(EXTI_pfunISR_fun != NULL)
 824:	e0 91 78 01 	lds	r30, 0x0178	; 0x800178 <EXTI_pfunISR_fun>
 828:	f0 91 79 01 	lds	r31, 0x0179	; 0x800179 <EXTI_pfunISR_fun+0x1>
 82c:	30 97       	sbiw	r30, 0x00	; 0
 82e:	09 f0       	breq	.+2      	; 0x832 <__vector_1+0x30>
	{
		EXTI_pfunISR_fun ();
 830:	09 95       	icall
	}
}
 832:	ff 91       	pop	r31
 834:	ef 91       	pop	r30
 836:	bf 91       	pop	r27
 838:	af 91       	pop	r26
 83a:	9f 91       	pop	r25
 83c:	8f 91       	pop	r24
 83e:	7f 91       	pop	r23
 840:	6f 91       	pop	r22
 842:	5f 91       	pop	r21
 844:	4f 91       	pop	r20
 846:	3f 91       	pop	r19
 848:	2f 91       	pop	r18
 84a:	0f 90       	pop	r0
 84c:	0f be       	out	0x3f, r0	; 63
 84e:	0f 90       	pop	r0
 850:	1f 90       	pop	r1
 852:	18 95       	reti

00000854 <_exit>:
 854:	f8 94       	cli

00000856 <__stop_program>:
 856:	ff cf       	rjmp	.-2      	; 0x856 <__stop_program>
